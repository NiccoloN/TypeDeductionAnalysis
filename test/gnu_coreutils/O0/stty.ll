; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.termios = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
%struct.option = type { ptr, i32, ptr, i32 }
%struct.infomap = type { ptr, ptr }
%struct.mode_info = type { ptr, i32, i8, i64, i64 }
%struct.control_info = type { ptr, i8, i64 }
%struct.speed_map = type { ptr, i32, i64 }
%struct.quoting_options = type { i32, i32, [8 x i32], ptr, ptr }
%struct.slotvec = type { i64, ptr }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.winsize = type { i16, i16, i16, i16 }
%struct.__va_list_tag = type { i32, i32, ptr, ptr }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.arguments = type { i64, ptr, [7 x %struct.argument] }
%struct.argument = type { i32, %union.anon.2 }
%union.anon.2 = type { x86_fp80 }
%struct.char_directives = type { i64, ptr, i64, i64, [7 x %struct.char_directive] }
%struct.char_directive = type { ptr, ptr, i32, ptr, ptr, i64, ptr, ptr, i64, i8, i64 }
%struct.obstack = type { i64, ptr, ptr, ptr, ptr, %union.anon.18, i64, %union.anon.0, %union.anon.0, ptr, i8 }
%union.anon.18 = type { i64 }
%union.anon.0 = type { ptr }
%struct._obstack_chunk = type { ptr, ptr, [0 x i8] }

@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [151 x i8] c"Usage: %s [-F DEVICE | --file=DEVICE] [SETTING]...\0A  or:  %s [-F DEVICE | --file=DEVICE] [-a|--all]\0A  or:  %s [-F DEVICE | --file=DEVICE] [-g|--save]\0A\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c"Print or change terminal characteristics.\0A\00", align 1
@.str.3 = private unnamed_addr constant [216 x i8] c"  -a, --all          print all current settings in human-readable form\0A  -g, --save         print all current settings in a stty-readable form\0A  -F, --file=DEVICE  open and use the specified DEVICE instead of stdin\0A\00", align 1
@.str.4 = private unnamed_addr constant [48 x i8] c"      --help        display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [57 x i8] c"      --version     output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [141 x i8] c"\0AOptional - before SETTING indicates negation.  An * marks non-POSIX\0Asettings.  The underlying system defines which settings are available.\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"\0ASpecial characters:\0A\00", align 1
@.str.8 = private unnamed_addr constant [56 x i8] c" * discard CHAR  CHAR will toggle discarding of output\0A\00", align 1
@.str.9 = private unnamed_addr constant [110 x i8] c"   eof CHAR      CHAR will send an end of file (terminate the input)\0A   eol CHAR      CHAR will end the line\0A\00", align 1
@.str.10 = private unnamed_addr constant [53 x i8] c" * eol2 CHAR     alternate CHAR for ending the line\0A\00", align 1
@.str.11 = private unnamed_addr constant [161 x i8] c"   erase CHAR    CHAR will erase the last character typed\0A   intr CHAR     CHAR will send an interrupt signal\0A   kill CHAR     CHAR will erase the current line\0A\00", align 1
@.str.12 = private unnamed_addr constant [60 x i8] c" * lnext CHAR    CHAR will enter the next character quoted\0A\00", align 1
@.str.13 = private unnamed_addr constant [47 x i8] c"   quit CHAR     CHAR will send a quit signal\0A\00", align 1
@.str.14 = private unnamed_addr constant [52 x i8] c" * rprnt CHAR    CHAR will redraw the current line\0A\00", align 1
@.str.15 = private unnamed_addr constant [163 x i8] c"   start CHAR    CHAR will restart the output after stopping it\0A   stop CHAR     CHAR will stop the output\0A   susp CHAR     CHAR will send a terminal stop signal\0A\00", align 1
@.str.16 = private unnamed_addr constant [62 x i8] c" * swtch CHAR    CHAR will switch to a different shell layer\0A\00", align 1
@.str.17 = private unnamed_addr constant [54 x i8] c" * werase CHAR   CHAR will erase the last word typed\0A\00", align 1
@.str.18 = private unnamed_addr constant [80 x i8] c"\0ASpecial settings:\0A   N             set the input and output speeds to N bauds\0A\00", align 1
@.str.19 = private unnamed_addr constant [98 x i8] c"   cols N        tell the kernel that the terminal has N columns\0A * columns N     same as cols N\0A\00", align 1
@.str.20 = private unnamed_addr constant [81 x i8] c" * [-]drain      wait for transmission before applying settings (%s by default)\0A\00", align 1
@tcsetattr_options = internal global i32 1, align 4
@.str.21 = private unnamed_addr constant [3 x i8] c"on\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"off\00", align 1
@.str.23 = private unnamed_addr constant [43 x i8] c"   ispeed N      set the input speed to N\0A\00", align 1
@.str.24 = private unnamed_addr constant [40 x i8] c" * line N        use line discipline N\0A\00", align 1
@.str.25 = private unnamed_addr constant [121 x i8] c"   min N         with -icanon, set N characters minimum for a completed read\0A   ospeed N      set the output speed to N\0A\00", align 1
@.str.26 = private unnamed_addr constant [141 x i8] c"   rows N        tell the kernel that the terminal has N rows\0A   size          print the number of rows and columns according to the kernel\0A\00", align 1
@.str.27 = private unnamed_addr constant [115 x i8] c"   speed         print the terminal speed\0A   time N        with -icanon, set read timeout of N tenths of a second\0A\00", align 1
@.str.28 = private unnamed_addr constant [111 x i8] c"\0AControl settings:\0A   [-]clocal     disable modem control signals\0A   [-]cread      allow input to be received\0A\00", align 1
@.str.29 = private unnamed_addr constant [45 x i8] c" * [-]crtscts    enable RTS/CTS handshaking\0A\00", align 1
@.str.30 = private unnamed_addr constant [60 x i8] c"   csN           set character size to N bits, N in [5..8]\0A\00", align 1
@.str.31 = private unnamed_addr constant [308 x i8] c"   [-]cstopb     use two stop bits per character (one with '-')\0A   [-]hup        send a hangup signal when the last process closes the tty\0A   [-]hupcl      same as [-]hup\0A   [-]parenb     generate parity bit in output and expect parity bit in input\0A   [-]parodd     set odd parity (or even parity with '-')\0A\00", align 1
@.str.32 = private unnamed_addr constant [50 x i8] c" * [-]cmspar     use \22stick\22 (mark/space) parity\0A\00", align 1
@.str.33 = private unnamed_addr constant [257 x i8] c"\0AInput settings:\0A   [-]brkint     breaks cause an interrupt signal\0A   [-]icrnl      translate carriage return to newline\0A   [-]ignbrk     ignore break characters\0A   [-]igncr      ignore carriage return\0A   [-]ignpar     ignore characters with parity errors\0A\00", align 1
@.str.34 = private unnamed_addr constant [75 x i8] c" * [-]imaxbel    beep and do not flush a full input buffer on a character\0A\00", align 1
@.str.35 = private unnamed_addr constant [159 x i8] c"   [-]inlcr      translate newline to carriage return\0A   [-]inpck      enable input parity checking\0A   [-]istrip     clear high (8th) bit of input characters\0A\00", align 1
@.str.36 = private unnamed_addr constant [60 x i8] c" * [-]iutf8      assume input characters are UTF-8 encoded\0A\00", align 1
@.str.37 = private unnamed_addr constant [62 x i8] c" * [-]iuclc      translate uppercase characters to lowercase\0A\00", align 1
@.str.38 = private unnamed_addr constant [77 x i8] c" * [-]ixany      let any character restart output, not only start character\0A\00", align 1
@.str.39 = private unnamed_addr constant [208 x i8] c"   [-]ixoff      enable sending of start/stop characters\0A   [-]ixon       enable XON/XOFF flow control\0A   [-]parmrk     mark parity errors (with a 255-0-character sequence)\0A   [-]tandem     same as [-]ixoff\0A\00", align 1
@.str.40 = private unnamed_addr constant [19 x i8] c"\0AOutput settings:\0A\00", align 1
@.str.41 = private unnamed_addr constant [53 x i8] c" * bsN           backspace delay style, N in [0..1]\0A\00", align 1
@.str.42 = private unnamed_addr constant [59 x i8] c" * crN           carriage return delay style, N in [0..3]\0A\00", align 1
@.str.43 = private unnamed_addr constant [53 x i8] c" * ffN           form feed delay style, N in [0..1]\0A\00", align 1
@.str.44 = private unnamed_addr constant [51 x i8] c" * nlN           newline delay style, N in [0..1]\0A\00", align 1
@.str.45 = private unnamed_addr constant [55 x i8] c" * [-]ocrnl      translate carriage return to newline\0A\00", align 1
@.str.46 = private unnamed_addr constant [75 x i8] c" * [-]ofdel      use delete characters for fill instead of NUL characters\0A\00", align 1
@.str.47 = private unnamed_addr constant [77 x i8] c" * [-]ofill      use fill (padding) characters instead of timing for delays\0A\00", align 1
@.str.48 = private unnamed_addr constant [62 x i8] c" * [-]olcuc      translate lowercase characters to uppercase\0A\00", align 1
@.str.49 = private unnamed_addr constant [63 x i8] c" * [-]onlcr      translate newline to carriage return-newline\0A\00", align 1
@.str.50 = private unnamed_addr constant [53 x i8] c" * [-]onlret     newline performs a carriage return\0A\00", align 1
@.str.51 = private unnamed_addr constant [68 x i8] c" * [-]onocr      do not print carriage returns in the first column\0A\00", align 1
@.str.52 = private unnamed_addr constant [37 x i8] c"   [-]opost      postprocess output\0A\00", align 1
@.str.53 = private unnamed_addr constant [118 x i8] c" * tabN          horizontal tab delay style, N in [0..3]\0A * tabs          same as tab0\0A * -tabs         same as tab3\0A\00", align 1
@.str.54 = private unnamed_addr constant [56 x i8] c" * vtN           vertical tab delay style, N in [0..1]\0A\00", align 1
@.str.55 = private unnamed_addr constant [86 x i8] c"\0ALocal settings:\0A   [-]crterase   echo erase characters as backspace-space-backspace\0A\00", align 1
@.str.56 = private unnamed_addr constant [147 x i8] c" * crtkill       kill all line by obeying the echoprt and echoe settings\0A * -crtkill      kill all line by obeying the echoctl and echok settings\0A\00", align 1
@.str.57 = private unnamed_addr constant [65 x i8] c" * [-]ctlecho    echo control characters in hat notation ('^c')\0A\00", align 1
@.str.58 = private unnamed_addr constant [40 x i8] c"   [-]echo       echo input characters\0A\00", align 1
@.str.59 = private unnamed_addr constant [37 x i8] c" * [-]echoctl    same as [-]ctlecho\0A\00", align 1
@.str.60 = private unnamed_addr constant [93 x i8] c"   [-]echoe      same as [-]crterase\0A   [-]echok      echo a newline after a kill character\0A\00", align 1
@.str.61 = private unnamed_addr constant [37 x i8] c" * [-]echoke     same as [-]crtkill\0A\00", align 1
@.str.62 = private unnamed_addr constant [68 x i8] c"   [-]echonl     echo newline even if not echoing other characters\0A\00", align 1
@.str.63 = private unnamed_addr constant [71 x i8] c" * [-]echoprt    echo erased characters backward, between '\\' and '/'\0A\00", align 1
@.str.64 = private unnamed_addr constant [68 x i8] c" * [-]extproc    enable \22LINEMODE\22; useful with high latency links\0A\00", align 1
@.str.65 = private unnamed_addr constant [33 x i8] c" * [-]flusho     discard output\0A\00", align 1
@.str.66 = private unnamed_addr constant [101 x i8] c"   [-]icanon     enable special characters: %s\0A   [-]iexten     enable non-POSIX special characters\0A\00", align 1
@.str.67 = private unnamed_addr constant [27 x i8] c"erase, kill, werase, rprnt\00", align 1
@.str.68 = private unnamed_addr constant [151 x i8] c"   [-]isig       enable interrupt, quit, and suspend special characters\0A   [-]noflsh     disable flushing after interrupt and quit special characters\0A\00", align 1
@.str.69 = private unnamed_addr constant [37 x i8] c" * [-]prterase   same as [-]echoprt\0A\00", align 1
@.str.70 = private unnamed_addr constant [73 x i8] c" * [-]tostop     stop background jobs that try to write to the terminal\0A\00", align 1
@.str.71 = private unnamed_addr constant [72 x i8] c" * [-]xcase      with icanon, escape with '\\' for uppercase characters\0A\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"\0ACombination settings:\0A\00", align 1
@.str.73 = private unnamed_addr constant [35 x i8] c" * [-]LCASE      same as [-]lcase\0A\00", align 1
@.str.74 = private unnamed_addr constant [66 x i8] c"   cbreak        same as -icanon\0A   -cbreak       same as icanon\0A\00", align 1
@.str.75 = private unnamed_addr constant [170 x i8] c"   cooked        same as brkint ignpar istrip icrnl ixon opost isig\0A                 icanon, eof and eol characters to their default values\0A   -cooked       same as raw\0A\00", align 1
@.str.76 = private unnamed_addr constant [29 x i8] c"   crt           same as %s\0A\00", align 1
@.str.77 = private unnamed_addr constant [21 x i8] c"echoe echoctl echoke\00", align 1
@.str.78 = private unnamed_addr constant [73 x i8] c"   dec           same as %s intr ^c erase 0177\0A                 kill ^u\0A\00", align 1
@.str.79 = private unnamed_addr constant [28 x i8] c"echoe echoctl echoke -ixany\00", align 1
@.str.80 = private unnamed_addr constant [35 x i8] c" * [-]decctlq    same as [-]ixany\0A\00", align 1
@.str.81 = private unnamed_addr constant [149 x i8] c"   ek            erase and kill characters to their default values\0A   evenp         same as parenb -parodd cs7\0A   -evenp        same as -parenb cs8\0A\00", align 1
@.str.82 = private unnamed_addr constant [44 x i8] c" * [-]lcase      same as xcase iuclc olcuc\0A\00", align 1
@.str.83 = private unnamed_addr constant [102 x i8] c"   litout        same as -parenb -istrip -opost cs8\0A   -litout       same as parenb istrip opost cs7\0A\00", align 1
@.str.84 = private unnamed_addr constant [57 x i8] c"   nl            same as %s\0A   -nl           same as %s\0A\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"-icrnl -onlcr\00", align 1
@.str.86 = private unnamed_addr constant [41 x i8] c"icrnl -inlcr -igncr onlcr -ocrnl -onlret\00", align 1
@.str.87 = private unnamed_addr constant [203 x i8] c"   oddp          same as parenb parodd cs7\0A   -oddp         same as -parenb cs8\0A   [-]parity     same as [-]evenp\0A   pass8         same as -parenb -istrip cs8\0A   -pass8        same as parenb istrip cs7\0A\00", align 1
@.str.88 = private unnamed_addr constant [209 x i8] c"   raw           same as -ignbrk -brkint -ignpar -parmrk -inpck -istrip\0A                 -inlcr -igncr -icrnl -ixon -ixoff -icanon -opost\0A                 -isig%s min 1 time 0\0A   -raw          same as cooked\0A\00", align 1
@.str.89 = private unnamed_addr constant [31 x i8] c" -iuclc -ixany -imaxbel -xcase\00", align 1
@.str.90 = private unnamed_addr constant [256 x i8] c"   sane          same as cread -ignbrk brkint -inlcr -igncr icrnl\0A                 icanon iexten echo echoe echok -echonl -noflsh\0A                 %s\0A                 %s\0A                 %s,\0A                 all special characters to their default values\0A\00", align 1
@.str.91 = private unnamed_addr constant [57 x i8] c"-ixoff -iutf8 -iuclc -ixany imaxbel -xcase -olcuc -ocrnl\00", align 1
@.str.92 = private unnamed_addr constant [59 x i8] c"opost -ofill onlcr -onocr -onlret nl0 cr0 tab0 bs0 vt0 ff0\00", align 1
@.str.93 = private unnamed_addr constant [61 x i8] c"isig -tostop -ofdel -echoprt echoctl echoke -extproc -flusho\00", align 1
@.str.94 = private unnamed_addr constant [277 x i8] c"\0AHandle the tty line connected to standard input.  Without arguments,\0Aprints baud rate, line discipline, and deviations from stty sane.  In\0Asettings, CHAR is taken literally, or coded as in ^c, 0x37, 0177 or\0A127; special values ^- or undef used to disable special characters.\0A\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"stty\00", align 1
@main.mode = internal global %struct.termios zeroinitializer, align 4
@.str.96 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.97 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.98 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@opterr = external global i32, align 4
@.str.99 = private unnamed_addr constant [6 x i8] c"-agF:\00", align 1
@longopts = internal constant [7 x %struct.option] [%struct.option { ptr @.str.131, i32 0, ptr null, i32 97 }, %struct.option { ptr @.str.132, i32 0, ptr null, i32 103 }, %struct.option { ptr @.str.133, i32 1, ptr null, i32 70 }, %struct.option { ptr @.str.134, i32 0, ptr null, i32 128 }, %struct.option { ptr @.str.135, i32 0, ptr null, i32 -130 }, %struct.option { ptr @.str.136, i32 0, ptr null, i32 -131 }, %struct.option zeroinitializer], align 16
@.str.100 = private unnamed_addr constant [33 x i8] c"only one device may be specified\00", align 1
@optarg = external global ptr, align 8
@dev_debug = internal global i8 0, align 1
@.str.101 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@Version = external global ptr, align 8
@.str.102 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.103 = private unnamed_addr constant [7 x i8] c"-drain\00", align 1
@.str.104 = private unnamed_addr constant [6 x i8] c"drain\00", align 1
@optind = external global i32, align 4
@.str.105 = private unnamed_addr constant [79 x i8] c"the options for verbose and stty-readable output styles are\0Amutually exclusive\00", align 1
@.str.106 = private unnamed_addr constant [54 x i8] c"when specifying an output style, modes may not be set\00", align 1
@.str.107 = private unnamed_addr constant [15 x i8] c"standard input\00", align 1
@main.check_mode = internal global %struct.termios zeroinitializer, align 4
@.str.108 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.109 = private unnamed_addr constant [37 x i8] c"%s: couldn't reset non-blocking mode\00", align 1
@max_col = internal global i32 0, align 4
@current_col = internal global i32 0, align 4
@main.new_mode = internal global %struct.termios zeroinitializer, align 4
@.str.110 = private unnamed_addr constant [24 x i8] c"indx: mode: actual mode\00", align 1
@.str.111 = private unnamed_addr constant [25 x i8] c"0x%02x, 0x%02x: 0x%02x%s\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c" *\00", align 1
@.str.113 = private unnamed_addr constant [47 x i8] c"%s: unable to perform all requested operations\00", align 1
@.str.114 = private unnamed_addr constant [75 x i8] c"\0AMandatory arguments to long options are mandatory for short options too.\0A\00", align 1
@.str.115 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.116 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.117 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.118 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.119 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.120 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.121 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { ptr @.str.115, ptr @.str.116 }, %struct.infomap { ptr @.str.97, ptr @.str.117 }, %struct.infomap { ptr @.str.118, ptr @.str.119 }, %struct.infomap { ptr @.str.120, ptr @.str.119 }, %struct.infomap { ptr @.str.121, ptr @.str.119 }, %struct.infomap { ptr @.str.122, ptr @.str.119 }, %struct.infomap zeroinitializer], align 16
@.str.123 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.124 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.125 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.126 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.127 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@.str.128 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.129 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.130 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.131 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.132 = private unnamed_addr constant [5 x i8] c"save\00", align 1
@.str.133 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@.str.134 = private unnamed_addr constant [7 x i8] c"-debug\00", align 1
@.str.135 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.136 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@mode_info = internal constant [90 x %struct.mode_info] [%struct.mode_info { ptr @.str.150, i32 0, i8 4, i64 256, i64 0 }, %struct.mode_info { ptr @.str.151, i32 0, i8 4, i64 512, i64 0 }, %struct.mode_info { ptr @.str.152, i32 0, i8 4, i64 1073741824, i64 0 }, %struct.mode_info { ptr @.str.153, i32 0, i8 0, i64 0, i64 48 }, %struct.mode_info { ptr @.str.154, i32 0, i8 0, i64 16, i64 48 }, %struct.mode_info { ptr @.str.155, i32 0, i8 0, i64 32, i64 48 }, %struct.mode_info { ptr @.str.156, i32 0, i8 0, i64 48, i64 48 }, %struct.mode_info { ptr @.str.157, i32 0, i8 4, i64 1024, i64 0 }, %struct.mode_info { ptr @.str.158, i32 0, i8 12, i64 1024, i64 0 }, %struct.mode_info { ptr @.str.159, i32 0, i8 4, i64 64, i64 0 }, %struct.mode_info { ptr @.str.160, i32 0, i8 5, i64 128, i64 0 }, %struct.mode_info { ptr @.str.161, i32 0, i8 4, i64 2048, i64 0 }, %struct.mode_info { ptr @.str.162, i32 0, i8 4, i64 2147483648, i64 0 }, %struct.mode_info { ptr @.str.163, i32 1, i8 6, i64 1, i64 0 }, %struct.mode_info { ptr @.str.164, i32 1, i8 5, i64 2, i64 0 }, %struct.mode_info { ptr @.str.165, i32 1, i8 4, i64 4, i64 0 }, %struct.mode_info { ptr @.str.166, i32 1, i8 4, i64 8, i64 0 }, %struct.mode_info { ptr @.str.167, i32 1, i8 4, i64 16, i64 0 }, %struct.mode_info { ptr @.str.168, i32 1, i8 4, i64 32, i64 0 }, %struct.mode_info { ptr @.str.169, i32 1, i8 6, i64 64, i64 0 }, %struct.mode_info { ptr @.str.170, i32 1, i8 6, i64 128, i64 0 }, %struct.mode_info { ptr @.str.171, i32 1, i8 5, i64 256, i64 0 }, %struct.mode_info { ptr @.str.172, i32 1, i8 4, i64 1024, i64 0 }, %struct.mode_info { ptr @.str.173, i32 1, i8 6, i64 4096, i64 0 }, %struct.mode_info { ptr @.str.174, i32 1, i8 12, i64 4096, i64 0 }, %struct.mode_info { ptr @.str.175, i32 1, i8 6, i64 512, i64 0 }, %struct.mode_info { ptr @.str.176, i32 1, i8 6, i64 2048, i64 0 }, %struct.mode_info { ptr @.str.177, i32 1, i8 5, i64 8192, i64 0 }, %struct.mode_info { ptr @.str.178, i32 1, i8 6, i64 16384, i64 0 }, %struct.mode_info { ptr @.str.179, i32 2, i8 5, i64 1, i64 0 }, %struct.mode_info { ptr @.str.180, i32 2, i8 6, i64 2, i64 0 }, %struct.mode_info { ptr @.str.181, i32 2, i8 6, i64 8, i64 0 }, %struct.mode_info { ptr @.str.182, i32 2, i8 5, i64 4, i64 0 }, %struct.mode_info { ptr @.str.183, i32 2, i8 6, i64 16, i64 0 }, %struct.mode_info { ptr @.str.184, i32 2, i8 6, i64 32, i64 0 }, %struct.mode_info { ptr @.str.185, i32 2, i8 6, i64 64, i64 0 }, %struct.mode_info { ptr @.str.186, i32 2, i8 6, i64 128, i64 0 }, %struct.mode_info { ptr @.str.187, i32 2, i8 2, i64 256, i64 256 }, %struct.mode_info { ptr @.str.188, i32 2, i8 1, i64 0, i64 256 }, %struct.mode_info { ptr @.str.189, i32 2, i8 2, i64 1536, i64 1536 }, %struct.mode_info { ptr @.str.190, i32 2, i8 2, i64 1024, i64 1536 }, %struct.mode_info { ptr @.str.191, i32 2, i8 2, i64 512, i64 1536 }, %struct.mode_info { ptr @.str.192, i32 2, i8 1, i64 0, i64 1536 }, %struct.mode_info { ptr @.str.193, i32 2, i8 2, i64 6144, i64 6144 }, %struct.mode_info { ptr @.str.194, i32 2, i8 2, i64 4096, i64 6144 }, %struct.mode_info { ptr @.str.195, i32 2, i8 2, i64 2048, i64 6144 }, %struct.mode_info { ptr @.str.196, i32 2, i8 1, i64 0, i64 6144 }, %struct.mode_info { ptr @.str.197, i32 2, i8 2, i64 8192, i64 8192 }, %struct.mode_info { ptr @.str.198, i32 2, i8 1, i64 0, i64 8192 }, %struct.mode_info { ptr @.str.199, i32 2, i8 2, i64 16384, i64 16384 }, %struct.mode_info { ptr @.str.200, i32 2, i8 1, i64 0, i64 16384 }, %struct.mode_info { ptr @.str.201, i32 2, i8 2, i64 32768, i64 32768 }, %struct.mode_info { ptr @.str.202, i32 2, i8 1, i64 0, i64 32768 }, %struct.mode_info { ptr @.str.203, i32 3, i8 5, i64 1, i64 0 }, %struct.mode_info { ptr @.str.204, i32 3, i8 5, i64 2, i64 0 }, %struct.mode_info { ptr @.str.205, i32 3, i8 5, i64 32768, i64 0 }, %struct.mode_info { ptr @.str.206, i32 3, i8 5, i64 8, i64 0 }, %struct.mode_info { ptr @.str.207, i32 3, i8 5, i64 16, i64 0 }, %struct.mode_info { ptr @.str.208, i32 3, i8 12, i64 16, i64 0 }, %struct.mode_info { ptr @.str.209, i32 3, i8 5, i64 32, i64 0 }, %struct.mode_info { ptr @.str.210, i32 3, i8 6, i64 64, i64 0 }, %struct.mode_info { ptr @.str.211, i32 3, i8 6, i64 128, i64 0 }, %struct.mode_info { ptr @.str.212, i32 3, i8 6, i64 4, i64 0 }, %struct.mode_info { ptr @.str.213, i32 3, i8 6, i64 256, i64 0 }, %struct.mode_info { ptr @.str.214, i32 3, i8 6, i64 1024, i64 0 }, %struct.mode_info { ptr @.str.215, i32 3, i8 12, i64 1024, i64 0 }, %struct.mode_info { ptr @.str.216, i32 3, i8 5, i64 512, i64 0 }, %struct.mode_info { ptr @.str.217, i32 3, i8 12, i64 512, i64 0 }, %struct.mode_info { ptr @.str.218, i32 3, i8 5, i64 2048, i64 0 }, %struct.mode_info { ptr @.str.219, i32 3, i8 12, i64 2048, i64 0 }, %struct.mode_info { ptr @.str.220, i32 3, i8 6, i64 4096, i64 0 }, %struct.mode_info { ptr @.str.221, i32 3, i8 6, i64 65536, i64 0 }, %struct.mode_info { ptr @.str.222, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.223, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.224, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.225, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.226, i32 4, i8 8, i64 0, i64 0 }, %struct.mode_info { ptr @.str.227, i32 4, i8 8, i64 0, i64 0 }, %struct.mode_info { ptr @.str.228, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.229, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.230, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.231, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.232, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.233, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.234, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.235, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.236, i32 4, i8 12, i64 0, i64 0 }, %struct.mode_info { ptr @.str.237, i32 4, i8 8, i64 0, i64 0 }, %struct.mode_info { ptr @.str.238, i32 4, i8 8, i64 0, i64 0 }, %struct.mode_info zeroinitializer], align 16
@.str.137 = private unnamed_addr constant [20 x i8] c"invalid argument %s\00", align 1
@control_info = internal constant [19 x %struct.control_info] [%struct.control_info { ptr @.str.239, i8 3, i64 0 }, %struct.control_info { ptr @.str.240, i8 28, i64 1 }, %struct.control_info { ptr @.str.241, i8 127, i64 2 }, %struct.control_info { ptr @.str.242, i8 21, i64 3 }, %struct.control_info { ptr @.str.243, i8 4, i64 4 }, %struct.control_info { ptr @.str.244, i8 0, i64 11 }, %struct.control_info { ptr @.str.245, i8 0, i64 16 }, %struct.control_info { ptr @.str.246, i8 0, i64 7 }, %struct.control_info { ptr @.str.247, i8 17, i64 8 }, %struct.control_info { ptr @.str.248, i8 19, i64 9 }, %struct.control_info { ptr @.str.249, i8 26, i64 10 }, %struct.control_info { ptr @.str.250, i8 18, i64 12 }, %struct.control_info { ptr @.str.251, i8 23, i64 14 }, %struct.control_info { ptr @.str.252, i8 22, i64 15 }, %struct.control_info { ptr @.str.253, i8 15, i64 13 }, %struct.control_info { ptr @.str.254, i8 15, i64 13 }, %struct.control_info { ptr @.str.255, i8 1, i64 6 }, %struct.control_info { ptr @.str.256, i8 0, i64 5 }, %struct.control_info zeroinitializer], align 16
@.str.138 = private unnamed_addr constant [23 x i8] c"missing argument to %s\00", align 1
@.str.139 = private unnamed_addr constant [7 x i8] c"ispeed\00", align 1
@.str.140 = private unnamed_addr constant [18 x i8] c"invalid ispeed %s\00", align 1
@.str.141 = private unnamed_addr constant [7 x i8] c"ospeed\00", align 1
@.str.142 = private unnamed_addr constant [18 x i8] c"invalid ospeed %s\00", align 1
@.str.143 = private unnamed_addr constant [5 x i8] c"rows\00", align 1
@.str.144 = private unnamed_addr constant [5 x i8] c"cols\00", align 1
@.str.145 = private unnamed_addr constant [8 x i8] c"columns\00", align 1
@.str.146 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@.str.147 = private unnamed_addr constant [5 x i8] c"line\00", align 1
@.str.148 = private unnamed_addr constant [27 x i8] c"invalid line discipline %s\00", align 1
@.str.149 = private unnamed_addr constant [6 x i8] c"speed\00", align 1
@.str.150 = private unnamed_addr constant [7 x i8] c"parenb\00", align 1
@.str.151 = private unnamed_addr constant [7 x i8] c"parodd\00", align 1
@.str.152 = private unnamed_addr constant [7 x i8] c"cmspar\00", align 1
@.str.153 = private unnamed_addr constant [4 x i8] c"cs5\00", align 1
@.str.154 = private unnamed_addr constant [4 x i8] c"cs6\00", align 1
@.str.155 = private unnamed_addr constant [4 x i8] c"cs7\00", align 1
@.str.156 = private unnamed_addr constant [4 x i8] c"cs8\00", align 1
@.str.157 = private unnamed_addr constant [6 x i8] c"hupcl\00", align 1
@.str.158 = private unnamed_addr constant [4 x i8] c"hup\00", align 1
@.str.159 = private unnamed_addr constant [7 x i8] c"cstopb\00", align 1
@.str.160 = private unnamed_addr constant [6 x i8] c"cread\00", align 1
@.str.161 = private unnamed_addr constant [7 x i8] c"clocal\00", align 1
@.str.162 = private unnamed_addr constant [8 x i8] c"crtscts\00", align 1
@.str.163 = private unnamed_addr constant [7 x i8] c"ignbrk\00", align 1
@.str.164 = private unnamed_addr constant [7 x i8] c"brkint\00", align 1
@.str.165 = private unnamed_addr constant [7 x i8] c"ignpar\00", align 1
@.str.166 = private unnamed_addr constant [7 x i8] c"parmrk\00", align 1
@.str.167 = private unnamed_addr constant [6 x i8] c"inpck\00", align 1
@.str.168 = private unnamed_addr constant [7 x i8] c"istrip\00", align 1
@.str.169 = private unnamed_addr constant [6 x i8] c"inlcr\00", align 1
@.str.170 = private unnamed_addr constant [6 x i8] c"igncr\00", align 1
@.str.171 = private unnamed_addr constant [6 x i8] c"icrnl\00", align 1
@.str.172 = private unnamed_addr constant [5 x i8] c"ixon\00", align 1
@.str.173 = private unnamed_addr constant [6 x i8] c"ixoff\00", align 1
@.str.174 = private unnamed_addr constant [7 x i8] c"tandem\00", align 1
@.str.175 = private unnamed_addr constant [6 x i8] c"iuclc\00", align 1
@.str.176 = private unnamed_addr constant [6 x i8] c"ixany\00", align 1
@.str.177 = private unnamed_addr constant [8 x i8] c"imaxbel\00", align 1
@.str.178 = private unnamed_addr constant [6 x i8] c"iutf8\00", align 1
@.str.179 = private unnamed_addr constant [6 x i8] c"opost\00", align 1
@.str.180 = private unnamed_addr constant [6 x i8] c"olcuc\00", align 1
@.str.181 = private unnamed_addr constant [6 x i8] c"ocrnl\00", align 1
@.str.182 = private unnamed_addr constant [6 x i8] c"onlcr\00", align 1
@.str.183 = private unnamed_addr constant [6 x i8] c"onocr\00", align 1
@.str.184 = private unnamed_addr constant [7 x i8] c"onlret\00", align 1
@.str.185 = private unnamed_addr constant [6 x i8] c"ofill\00", align 1
@.str.186 = private unnamed_addr constant [6 x i8] c"ofdel\00", align 1
@.str.187 = private unnamed_addr constant [4 x i8] c"nl1\00", align 1
@.str.188 = private unnamed_addr constant [4 x i8] c"nl0\00", align 1
@.str.189 = private unnamed_addr constant [4 x i8] c"cr3\00", align 1
@.str.190 = private unnamed_addr constant [4 x i8] c"cr2\00", align 1
@.str.191 = private unnamed_addr constant [4 x i8] c"cr1\00", align 1
@.str.192 = private unnamed_addr constant [4 x i8] c"cr0\00", align 1
@.str.193 = private unnamed_addr constant [5 x i8] c"tab3\00", align 1
@.str.194 = private unnamed_addr constant [5 x i8] c"tab2\00", align 1
@.str.195 = private unnamed_addr constant [5 x i8] c"tab1\00", align 1
@.str.196 = private unnamed_addr constant [5 x i8] c"tab0\00", align 1
@.str.197 = private unnamed_addr constant [4 x i8] c"bs1\00", align 1
@.str.198 = private unnamed_addr constant [4 x i8] c"bs0\00", align 1
@.str.199 = private unnamed_addr constant [4 x i8] c"vt1\00", align 1
@.str.200 = private unnamed_addr constant [4 x i8] c"vt0\00", align 1
@.str.201 = private unnamed_addr constant [4 x i8] c"ff1\00", align 1
@.str.202 = private unnamed_addr constant [4 x i8] c"ff0\00", align 1
@.str.203 = private unnamed_addr constant [5 x i8] c"isig\00", align 1
@.str.204 = private unnamed_addr constant [7 x i8] c"icanon\00", align 1
@.str.205 = private unnamed_addr constant [7 x i8] c"iexten\00", align 1
@.str.206 = private unnamed_addr constant [5 x i8] c"echo\00", align 1
@.str.207 = private unnamed_addr constant [6 x i8] c"echoe\00", align 1
@.str.208 = private unnamed_addr constant [9 x i8] c"crterase\00", align 1
@.str.209 = private unnamed_addr constant [6 x i8] c"echok\00", align 1
@.str.210 = private unnamed_addr constant [7 x i8] c"echonl\00", align 1
@.str.211 = private unnamed_addr constant [7 x i8] c"noflsh\00", align 1
@.str.212 = private unnamed_addr constant [6 x i8] c"xcase\00", align 1
@.str.213 = private unnamed_addr constant [7 x i8] c"tostop\00", align 1
@.str.214 = private unnamed_addr constant [8 x i8] c"echoprt\00", align 1
@.str.215 = private unnamed_addr constant [9 x i8] c"prterase\00", align 1
@.str.216 = private unnamed_addr constant [8 x i8] c"echoctl\00", align 1
@.str.217 = private unnamed_addr constant [8 x i8] c"ctlecho\00", align 1
@.str.218 = private unnamed_addr constant [7 x i8] c"echoke\00", align 1
@.str.219 = private unnamed_addr constant [8 x i8] c"crtkill\00", align 1
@.str.220 = private unnamed_addr constant [7 x i8] c"flusho\00", align 1
@.str.221 = private unnamed_addr constant [8 x i8] c"extproc\00", align 1
@.str.222 = private unnamed_addr constant [6 x i8] c"evenp\00", align 1
@.str.223 = private unnamed_addr constant [7 x i8] c"parity\00", align 1
@.str.224 = private unnamed_addr constant [5 x i8] c"oddp\00", align 1
@.str.225 = private unnamed_addr constant [3 x i8] c"nl\00", align 1
@.str.226 = private unnamed_addr constant [3 x i8] c"ek\00", align 1
@.str.227 = private unnamed_addr constant [5 x i8] c"sane\00", align 1
@.str.228 = private unnamed_addr constant [7 x i8] c"cooked\00", align 1
@.str.229 = private unnamed_addr constant [4 x i8] c"raw\00", align 1
@.str.230 = private unnamed_addr constant [6 x i8] c"pass8\00", align 1
@.str.231 = private unnamed_addr constant [7 x i8] c"litout\00", align 1
@.str.232 = private unnamed_addr constant [7 x i8] c"cbreak\00", align 1
@.str.233 = private unnamed_addr constant [8 x i8] c"decctlq\00", align 1
@.str.234 = private unnamed_addr constant [5 x i8] c"tabs\00", align 1
@.str.235 = private unnamed_addr constant [6 x i8] c"lcase\00", align 1
@.str.236 = private unnamed_addr constant [6 x i8] c"LCASE\00", align 1
@.str.237 = private unnamed_addr constant [4 x i8] c"crt\00", align 1
@.str.238 = private unnamed_addr constant [4 x i8] c"dec\00", align 1
@.str.239 = private unnamed_addr constant [5 x i8] c"intr\00", align 1
@.str.240 = private unnamed_addr constant [5 x i8] c"quit\00", align 1
@.str.241 = private unnamed_addr constant [6 x i8] c"erase\00", align 1
@.str.242 = private unnamed_addr constant [5 x i8] c"kill\00", align 1
@.str.243 = private unnamed_addr constant [4 x i8] c"eof\00", align 1
@.str.244 = private unnamed_addr constant [4 x i8] c"eol\00", align 1
@.str.245 = private unnamed_addr constant [5 x i8] c"eol2\00", align 1
@.str.246 = private unnamed_addr constant [6 x i8] c"swtch\00", align 1
@.str.247 = private unnamed_addr constant [6 x i8] c"start\00", align 1
@.str.248 = private unnamed_addr constant [5 x i8] c"stop\00", align 1
@.str.249 = private unnamed_addr constant [5 x i8] c"susp\00", align 1
@.str.250 = private unnamed_addr constant [6 x i8] c"rprnt\00", align 1
@.str.251 = private unnamed_addr constant [7 x i8] c"werase\00", align 1
@.str.252 = private unnamed_addr constant [6 x i8] c"lnext\00", align 1
@.str.253 = private unnamed_addr constant [6 x i8] c"flush\00", align 1
@.str.254 = private unnamed_addr constant [8 x i8] c"discard\00", align 1
@.str.255 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@.str.256 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.257 = private unnamed_addr constant [3 x i8] c"^-\00", align 1
@.str.258 = private unnamed_addr constant [6 x i8] c"undef\00", align 1
@speeds = internal constant [35 x %struct.speed_map] [%struct.speed_map { ptr @.str.259, i32 0, i64 0 }, %struct.speed_map { ptr @.str.260, i32 1, i64 50 }, %struct.speed_map { ptr @.str.261, i32 2, i64 75 }, %struct.speed_map { ptr @.str.262, i32 3, i64 110 }, %struct.speed_map { ptr @.str.263, i32 4, i64 134 }, %struct.speed_map { ptr @.str.264, i32 4, i64 134 }, %struct.speed_map { ptr @.str.265, i32 5, i64 150 }, %struct.speed_map { ptr @.str.266, i32 6, i64 200 }, %struct.speed_map { ptr @.str.267, i32 7, i64 300 }, %struct.speed_map { ptr @.str.268, i32 8, i64 600 }, %struct.speed_map { ptr @.str.269, i32 9, i64 1200 }, %struct.speed_map { ptr @.str.270, i32 10, i64 1800 }, %struct.speed_map { ptr @.str.271, i32 11, i64 2400 }, %struct.speed_map { ptr @.str.272, i32 12, i64 4800 }, %struct.speed_map { ptr @.str.273, i32 13, i64 9600 }, %struct.speed_map { ptr @.str.274, i32 14, i64 19200 }, %struct.speed_map { ptr @.str.275, i32 15, i64 38400 }, %struct.speed_map { ptr @.str.276, i32 14, i64 19200 }, %struct.speed_map { ptr @.str.277, i32 15, i64 38400 }, %struct.speed_map { ptr @.str.278, i32 4097, i64 57600 }, %struct.speed_map { ptr @.str.279, i32 4098, i64 115200 }, %struct.speed_map { ptr @.str.280, i32 4099, i64 230400 }, %struct.speed_map { ptr @.str.281, i32 4100, i64 460800 }, %struct.speed_map { ptr @.str.282, i32 4101, i64 500000 }, %struct.speed_map { ptr @.str.283, i32 4102, i64 576000 }, %struct.speed_map { ptr @.str.284, i32 4103, i64 921600 }, %struct.speed_map { ptr @.str.285, i32 4104, i64 1000000 }, %struct.speed_map { ptr @.str.286, i32 4105, i64 1152000 }, %struct.speed_map { ptr @.str.287, i32 4106, i64 1500000 }, %struct.speed_map { ptr @.str.288, i32 4107, i64 2000000 }, %struct.speed_map { ptr @.str.289, i32 4108, i64 2500000 }, %struct.speed_map { ptr @.str.290, i32 4109, i64 3000000 }, %struct.speed_map { ptr @.str.291, i32 4110, i64 3500000 }, %struct.speed_map { ptr @.str.292, i32 4111, i64 4000000 }, %struct.speed_map zeroinitializer], align 16
@.str.259 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.260 = private unnamed_addr constant [3 x i8] c"50\00", align 1
@.str.261 = private unnamed_addr constant [3 x i8] c"75\00", align 1
@.str.262 = private unnamed_addr constant [4 x i8] c"110\00", align 1
@.str.263 = private unnamed_addr constant [4 x i8] c"134\00", align 1
@.str.264 = private unnamed_addr constant [6 x i8] c"134.5\00", align 1
@.str.265 = private unnamed_addr constant [4 x i8] c"150\00", align 1
@.str.266 = private unnamed_addr constant [4 x i8] c"200\00", align 1
@.str.267 = private unnamed_addr constant [4 x i8] c"300\00", align 1
@.str.268 = private unnamed_addr constant [4 x i8] c"600\00", align 1
@.str.269 = private unnamed_addr constant [5 x i8] c"1200\00", align 1
@.str.270 = private unnamed_addr constant [5 x i8] c"1800\00", align 1
@.str.271 = private unnamed_addr constant [5 x i8] c"2400\00", align 1
@.str.272 = private unnamed_addr constant [5 x i8] c"4800\00", align 1
@.str.273 = private unnamed_addr constant [5 x i8] c"9600\00", align 1
@.str.274 = private unnamed_addr constant [6 x i8] c"19200\00", align 1
@.str.275 = private unnamed_addr constant [6 x i8] c"38400\00", align 1
@.str.276 = private unnamed_addr constant [5 x i8] c"exta\00", align 1
@.str.277 = private unnamed_addr constant [5 x i8] c"extb\00", align 1
@.str.278 = private unnamed_addr constant [6 x i8] c"57600\00", align 1
@.str.279 = private unnamed_addr constant [7 x i8] c"115200\00", align 1
@.str.280 = private unnamed_addr constant [7 x i8] c"230400\00", align 1
@.str.281 = private unnamed_addr constant [7 x i8] c"460800\00", align 1
@.str.282 = private unnamed_addr constant [7 x i8] c"500000\00", align 1
@.str.283 = private unnamed_addr constant [7 x i8] c"576000\00", align 1
@.str.284 = private unnamed_addr constant [7 x i8] c"921600\00", align 1
@.str.285 = private unnamed_addr constant [8 x i8] c"1000000\00", align 1
@.str.286 = private unnamed_addr constant [8 x i8] c"1152000\00", align 1
@.str.287 = private unnamed_addr constant [8 x i8] c"1500000\00", align 1
@.str.288 = private unnamed_addr constant [8 x i8] c"2000000\00", align 1
@.str.289 = private unnamed_addr constant [8 x i8] c"2500000\00", align 1
@.str.290 = private unnamed_addr constant [8 x i8] c"3000000\00", align 1
@.str.291 = private unnamed_addr constant [8 x i8] c"3500000\00", align 1
@.str.292 = private unnamed_addr constant [8 x i8] c"4000000\00", align 1
@.str.293 = private unnamed_addr constant [21 x i8] c"baud != (speed_t) -1\00", align 1
@.str.294 = private unnamed_addr constant [11 x i8] c"src/stty.c\00", align 1
@__PRETTY_FUNCTION__.set_speed = private unnamed_addr constant [67 x i8] c"void set_speed(enum speed_setting, const char *, struct termios *)\00", align 1
@last_ibaud = internal global i32 -1, align 4
@.str.295 = private unnamed_addr constant [22 x i8] c"unsupported ispeed %s\00", align 1
@last_obaud = internal global i32 -1, align 4
@.str.296 = private unnamed_addr constant [22 x i8] c"unsupported ospeed %s\00", align 1
@.str.297 = private unnamed_addr constant [3 x i8] c"bB\00", align 1
@.str.298 = private unnamed_addr constant [25 x i8] c"invalid integer argument\00", align 1
@.str.299 = private unnamed_addr constant [40 x i8] c"%s: no size information for this device\00", align 1
@.str.300 = private unnamed_addr constant [21 x i8] c"rows %d; columns %d;\00", align 1
@.str.301 = private unnamed_addr constant [7 x i8] c"%d %d\0A\00", align 1
@.str.302 = private unnamed_addr constant [16 x i8] c"speed %lu baud;\00", align 1
@.str.303 = private unnamed_addr constant [5 x i8] c"%lu\0A\00", align 1
@.str.304 = private unnamed_addr constant [34 x i8] c"ispeed %lu baud; ospeed %lu baud;\00", align 1
@.str.305 = private unnamed_addr constant [9 x i8] c"%lu %lu\0A\00", align 1
@.str.306 = private unnamed_addr constant [58 x i8] c"asymmetric input (%lu), output (%lu) speeds not supported\00", align 1
@.str.307 = private unnamed_addr constant [8 x i8] c"COLUMNS\00", align 1
@.str.308 = private unnamed_addr constant [11 x i8] c"line = %d;\00", align 1
@.str.309 = private unnamed_addr constant [9 x i8] c"%s = %s;\00", align 1
@.str.310 = private unnamed_addr constant [24 x i8] c"min = %lu; time = %lu;\0A\00", align 1
@.str.311 = private unnamed_addr constant [4 x i8] c"-%s\00", align 1
@visible.buf = internal global [10 x i8] zeroinitializer, align 1
@.str.312 = private unnamed_addr constant [8 x i8] c"<undef>\00", align 1
@.str.313 = private unnamed_addr constant [23 x i8] c"min = %lu; time = %lu;\00", align 1
@.str.314 = private unnamed_addr constant [16 x i8] c"%lx:%lx:%lx:%lx\00", align 1
@.str.315 = private unnamed_addr constant [5 x i8] c":%lx\00", align 1
@.str.316 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.317 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.318 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.319 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.320 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.321 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.322 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.323 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.324 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.325 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_args = dso_local constant [11 x ptr] [ptr @.str.316, ptr @.str.1.317, ptr @.str.2.318, ptr @.str.3.319, ptr @.str.4.320, ptr @.str.5.321, ptr @.str.6.322, ptr @.str.7.323, ptr @.str.8.324, ptr @.str.9.325, ptr null], align 16
@quoting_style_vals = dso_local constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8
@slotvec = internal global ptr @slotvec0, align 8
@nslots = internal global i32 1, align 4
@slot0 = internal global [256 x i8] zeroinitializer, align 16
@slotvec0 = internal global %struct.slotvec { i64 256, ptr @slot0 }, align 8
@quote_quoting_options = dso_local global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, ptr null, ptr null }, align 8
@.str.10.326 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.327 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.328 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.329 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.14.330 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.15.331 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.16.332 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.17.333 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.18.334 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.19.335 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@file_name = internal global ptr null, align 8
@ignore_EPIPE = internal global i8 0, align 1
@.str.344 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.1.345 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.2.346 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.3.347 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.350 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.351 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@version_etc_copyright = external constant [0 x i8], align 1
@.str.2.352 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.3.353 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.4.354 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5.355 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.6.356 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.7.357 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.8.358 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.9.359 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.10.360 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.11.361 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.12.362 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.13.363 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.14.364 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.15.365 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.16.366 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@.str.17.369 = private unnamed_addr constant [20 x i8] c"Report bugs to: %s\0A\00", align 1
@.str.18.370 = private unnamed_addr constant [22 x i8] c"bug-coreutils@gnu.org\00", align 1
@.str.19.371 = private unnamed_addr constant [20 x i8] c"%s home page: <%s>\0A\00", align 1
@.str.20.372 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.21.373 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.22.374 = private unnamed_addr constant [39 x i8] c"General help using GNU software: <%s>\0A\00", align 1
@.str.23.375 = private unnamed_addr constant [29 x i8] c"https://www.gnu.org/gethelp/\00", align 1
@error_print_progname = dso_local global ptr null, align 8
@.str.376 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@error_one_per_line = dso_local global i32 0, align 4
@verror_at_line.old_file_name = internal global ptr null, align 8
@verror_at_line.old_line_number = internal global i32 0, align 4
@.str.1.382 = private unnamed_addr constant [4 x i8] c"%s:\00", align 1
@.str.2.383 = private unnamed_addr constant [8 x i8] c"%s:%u: \00", align 1
@.str.3.384 = private unnamed_addr constant [2 x i8] c" \00", align 1
@error_message_count = dso_local global i32 0, align 4
@stdout = external global ptr, align 8
@.str.4.377 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.5.378 = private unnamed_addr constant [21 x i8] c"Unknown system error\00", align 1
@.str.6.379 = private unnamed_addr constant [5 x i8] c": %s\00", align 1
@.str.389 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.390 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.393 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.394 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.395 = private unnamed_addr constant [7 x i8] c"(NULL)\00", align 1
@printf_fetchargs.wide_null_string = internal constant [7 x i32] [i32 40, i32 78, i32 85, i32 76, i32 76, i32 41, i32 0], align 16
@.str.398 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec = internal global i32 0, align 4
@.str.409 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@internal_state = internal global %struct.__mbstate_t zeroinitializer, align 4
@program_name = dso_local global ptr null, align 8
@.str.414 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.415 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.416 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_name = external global ptr, align 8
@program_invocation_short_name = external global ptr, align 8
@.str.433 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1.431 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.2.432 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.436 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@obstack_alloc_failed_handler = dso_local global ptr @print_and_abort, align 8
@stderr = external global ptr, align 8
@.str.445 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1.443 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.2.444 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@file_name.446 = internal global ptr null, align 8
@stdin = external global ptr, align 8
@.str.447 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.1.448 = private unnamed_addr constant [19 x i8] c"error closing file\00", align 1
@.str.2.449 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.3.450 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = external global i32, align 4
@internal_state.451 = internal global %struct.__mbstate_t zeroinitializer, align 4

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @usage(i32 noundef %status) #0 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, ptr %status.addr, align 4
  %0 = load i32, ptr %status.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load ptr, ptr @stderr, align 8
  %call = call ptr @gettext(ptr noundef @.str) #21
  %2 = load ptr, ptr @program_name, align 8
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef %call, ptr noundef %2)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call ptr @gettext(ptr noundef @.str.1) #21
  %3 = load ptr, ptr @program_name, align 8
  %4 = load ptr, ptr @program_name, align 8
  %5 = load ptr, ptr @program_name, align 8
  %call3 = call i32 (ptr, ...) @printf(ptr noundef %call2, ptr noundef %3, ptr noundef %4, ptr noundef %5)
  %call4 = call ptr @gettext(ptr noundef @.str.2) #21
  %6 = load ptr, ptr @stdout, align 8
  %call5 = call i32 @fputs_unlocked(ptr noundef %call4, ptr noundef %6)
  call void @emit_mandatory_arg_note()
  %call6 = call ptr @gettext(ptr noundef @.str.3) #21
  %7 = load ptr, ptr @stdout, align 8
  %call7 = call i32 @fputs_unlocked(ptr noundef %call6, ptr noundef %7)
  %call8 = call ptr @gettext(ptr noundef @.str.4) #21
  %8 = load ptr, ptr @stdout, align 8
  %call9 = call i32 @fputs_unlocked(ptr noundef %call8, ptr noundef %8)
  %call10 = call ptr @gettext(ptr noundef @.str.5) #21
  %9 = load ptr, ptr @stdout, align 8
  %call11 = call i32 @fputs_unlocked(ptr noundef %call10, ptr noundef %9)
  %call12 = call ptr @gettext(ptr noundef @.str.6) #21
  %10 = load ptr, ptr @stdout, align 8
  %call13 = call i32 @fputs_unlocked(ptr noundef %call12, ptr noundef %10)
  %call14 = call ptr @gettext(ptr noundef @.str.7) #21
  %11 = load ptr, ptr @stdout, align 8
  %call15 = call i32 @fputs_unlocked(ptr noundef %call14, ptr noundef %11)
  %call16 = call ptr @gettext(ptr noundef @.str.8) #21
  %12 = load ptr, ptr @stdout, align 8
  %call17 = call i32 @fputs_unlocked(ptr noundef %call16, ptr noundef %12)
  %call18 = call ptr @gettext(ptr noundef @.str.9) #21
  %13 = load ptr, ptr @stdout, align 8
  %call19 = call i32 @fputs_unlocked(ptr noundef %call18, ptr noundef %13)
  %call20 = call ptr @gettext(ptr noundef @.str.10) #21
  %14 = load ptr, ptr @stdout, align 8
  %call21 = call i32 @fputs_unlocked(ptr noundef %call20, ptr noundef %14)
  %call22 = call ptr @gettext(ptr noundef @.str.11) #21
  %15 = load ptr, ptr @stdout, align 8
  %call23 = call i32 @fputs_unlocked(ptr noundef %call22, ptr noundef %15)
  %call24 = call ptr @gettext(ptr noundef @.str.12) #21
  %16 = load ptr, ptr @stdout, align 8
  %call25 = call i32 @fputs_unlocked(ptr noundef %call24, ptr noundef %16)
  %call26 = call ptr @gettext(ptr noundef @.str.13) #21
  %17 = load ptr, ptr @stdout, align 8
  %call27 = call i32 @fputs_unlocked(ptr noundef %call26, ptr noundef %17)
  %call28 = call ptr @gettext(ptr noundef @.str.14) #21
  %18 = load ptr, ptr @stdout, align 8
  %call29 = call i32 @fputs_unlocked(ptr noundef %call28, ptr noundef %18)
  %call30 = call ptr @gettext(ptr noundef @.str.15) #21
  %19 = load ptr, ptr @stdout, align 8
  %call31 = call i32 @fputs_unlocked(ptr noundef %call30, ptr noundef %19)
  %call32 = call ptr @gettext(ptr noundef @.str.16) #21
  %20 = load ptr, ptr @stdout, align 8
  %call33 = call i32 @fputs_unlocked(ptr noundef %call32, ptr noundef %20)
  %call34 = call ptr @gettext(ptr noundef @.str.17) #21
  %21 = load ptr, ptr @stdout, align 8
  %call35 = call i32 @fputs_unlocked(ptr noundef %call34, ptr noundef %21)
  %call36 = call ptr @gettext(ptr noundef @.str.18) #21
  %22 = load ptr, ptr @stdout, align 8
  %call37 = call i32 @fputs_unlocked(ptr noundef %call36, ptr noundef %22)
  %call38 = call ptr @gettext(ptr noundef @.str.19) #21
  %23 = load ptr, ptr @stdout, align 8
  %call39 = call i32 @fputs_unlocked(ptr noundef %call38, ptr noundef %23)
  %call40 = call ptr @gettext(ptr noundef @.str.20) #21
  %24 = load i32, ptr @tcsetattr_options, align 4
  %cmp41 = icmp eq i32 %24, 1
  br i1 %cmp41, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %call42 = call ptr @gettext(ptr noundef @.str.21) #21
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call43 = call ptr @gettext(ptr noundef @.str.22) #21
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %call42, %cond.true ], [ %call43, %cond.false ]
  %call44 = call i32 (ptr, ...) @printf(ptr noundef %call40, ptr noundef %cond)
  %call45 = call ptr @gettext(ptr noundef @.str.23) #21
  %25 = load ptr, ptr @stdout, align 8
  %call46 = call i32 @fputs_unlocked(ptr noundef %call45, ptr noundef %25)
  %call47 = call ptr @gettext(ptr noundef @.str.24) #21
  %26 = load ptr, ptr @stdout, align 8
  %call48 = call i32 @fputs_unlocked(ptr noundef %call47, ptr noundef %26)
  %call49 = call ptr @gettext(ptr noundef @.str.25) #21
  %27 = load ptr, ptr @stdout, align 8
  %call50 = call i32 @fputs_unlocked(ptr noundef %call49, ptr noundef %27)
  %call51 = call ptr @gettext(ptr noundef @.str.26) #21
  %28 = load ptr, ptr @stdout, align 8
  %call52 = call i32 @fputs_unlocked(ptr noundef %call51, ptr noundef %28)
  %call53 = call ptr @gettext(ptr noundef @.str.27) #21
  %29 = load ptr, ptr @stdout, align 8
  %call54 = call i32 @fputs_unlocked(ptr noundef %call53, ptr noundef %29)
  %call55 = call ptr @gettext(ptr noundef @.str.28) #21
  %30 = load ptr, ptr @stdout, align 8
  %call56 = call i32 @fputs_unlocked(ptr noundef %call55, ptr noundef %30)
  %call57 = call ptr @gettext(ptr noundef @.str.29) #21
  %31 = load ptr, ptr @stdout, align 8
  %call58 = call i32 @fputs_unlocked(ptr noundef %call57, ptr noundef %31)
  %call59 = call ptr @gettext(ptr noundef @.str.30) #21
  %32 = load ptr, ptr @stdout, align 8
  %call60 = call i32 @fputs_unlocked(ptr noundef %call59, ptr noundef %32)
  %call61 = call ptr @gettext(ptr noundef @.str.31) #21
  %33 = load ptr, ptr @stdout, align 8
  %call62 = call i32 @fputs_unlocked(ptr noundef %call61, ptr noundef %33)
  %call63 = call ptr @gettext(ptr noundef @.str.32) #21
  %34 = load ptr, ptr @stdout, align 8
  %call64 = call i32 @fputs_unlocked(ptr noundef %call63, ptr noundef %34)
  %call65 = call ptr @gettext(ptr noundef @.str.33) #21
  %35 = load ptr, ptr @stdout, align 8
  %call66 = call i32 @fputs_unlocked(ptr noundef %call65, ptr noundef %35)
  %call67 = call ptr @gettext(ptr noundef @.str.34) #21
  %36 = load ptr, ptr @stdout, align 8
  %call68 = call i32 @fputs_unlocked(ptr noundef %call67, ptr noundef %36)
  %call69 = call ptr @gettext(ptr noundef @.str.35) #21
  %37 = load ptr, ptr @stdout, align 8
  %call70 = call i32 @fputs_unlocked(ptr noundef %call69, ptr noundef %37)
  %call71 = call ptr @gettext(ptr noundef @.str.36) #21
  %38 = load ptr, ptr @stdout, align 8
  %call72 = call i32 @fputs_unlocked(ptr noundef %call71, ptr noundef %38)
  %call73 = call ptr @gettext(ptr noundef @.str.37) #21
  %39 = load ptr, ptr @stdout, align 8
  %call74 = call i32 @fputs_unlocked(ptr noundef %call73, ptr noundef %39)
  %call75 = call ptr @gettext(ptr noundef @.str.38) #21
  %40 = load ptr, ptr @stdout, align 8
  %call76 = call i32 @fputs_unlocked(ptr noundef %call75, ptr noundef %40)
  %call77 = call ptr @gettext(ptr noundef @.str.39) #21
  %41 = load ptr, ptr @stdout, align 8
  %call78 = call i32 @fputs_unlocked(ptr noundef %call77, ptr noundef %41)
  %call79 = call ptr @gettext(ptr noundef @.str.40) #21
  %42 = load ptr, ptr @stdout, align 8
  %call80 = call i32 @fputs_unlocked(ptr noundef %call79, ptr noundef %42)
  %call81 = call ptr @gettext(ptr noundef @.str.41) #21
  %43 = load ptr, ptr @stdout, align 8
  %call82 = call i32 @fputs_unlocked(ptr noundef %call81, ptr noundef %43)
  %call83 = call ptr @gettext(ptr noundef @.str.42) #21
  %44 = load ptr, ptr @stdout, align 8
  %call84 = call i32 @fputs_unlocked(ptr noundef %call83, ptr noundef %44)
  %call85 = call ptr @gettext(ptr noundef @.str.43) #21
  %45 = load ptr, ptr @stdout, align 8
  %call86 = call i32 @fputs_unlocked(ptr noundef %call85, ptr noundef %45)
  %call87 = call ptr @gettext(ptr noundef @.str.44) #21
  %46 = load ptr, ptr @stdout, align 8
  %call88 = call i32 @fputs_unlocked(ptr noundef %call87, ptr noundef %46)
  %call89 = call ptr @gettext(ptr noundef @.str.45) #21
  %47 = load ptr, ptr @stdout, align 8
  %call90 = call i32 @fputs_unlocked(ptr noundef %call89, ptr noundef %47)
  %call91 = call ptr @gettext(ptr noundef @.str.46) #21
  %48 = load ptr, ptr @stdout, align 8
  %call92 = call i32 @fputs_unlocked(ptr noundef %call91, ptr noundef %48)
  %call93 = call ptr @gettext(ptr noundef @.str.47) #21
  %49 = load ptr, ptr @stdout, align 8
  %call94 = call i32 @fputs_unlocked(ptr noundef %call93, ptr noundef %49)
  %call95 = call ptr @gettext(ptr noundef @.str.48) #21
  %50 = load ptr, ptr @stdout, align 8
  %call96 = call i32 @fputs_unlocked(ptr noundef %call95, ptr noundef %50)
  %call97 = call ptr @gettext(ptr noundef @.str.49) #21
  %51 = load ptr, ptr @stdout, align 8
  %call98 = call i32 @fputs_unlocked(ptr noundef %call97, ptr noundef %51)
  %call99 = call ptr @gettext(ptr noundef @.str.50) #21
  %52 = load ptr, ptr @stdout, align 8
  %call100 = call i32 @fputs_unlocked(ptr noundef %call99, ptr noundef %52)
  %call101 = call ptr @gettext(ptr noundef @.str.51) #21
  %53 = load ptr, ptr @stdout, align 8
  %call102 = call i32 @fputs_unlocked(ptr noundef %call101, ptr noundef %53)
  %call103 = call ptr @gettext(ptr noundef @.str.52) #21
  %54 = load ptr, ptr @stdout, align 8
  %call104 = call i32 @fputs_unlocked(ptr noundef %call103, ptr noundef %54)
  %call105 = call ptr @gettext(ptr noundef @.str.53) #21
  %55 = load ptr, ptr @stdout, align 8
  %call106 = call i32 @fputs_unlocked(ptr noundef %call105, ptr noundef %55)
  %call107 = call ptr @gettext(ptr noundef @.str.54) #21
  %56 = load ptr, ptr @stdout, align 8
  %call108 = call i32 @fputs_unlocked(ptr noundef %call107, ptr noundef %56)
  %call109 = call ptr @gettext(ptr noundef @.str.55) #21
  %57 = load ptr, ptr @stdout, align 8
  %call110 = call i32 @fputs_unlocked(ptr noundef %call109, ptr noundef %57)
  %call111 = call ptr @gettext(ptr noundef @.str.56) #21
  %58 = load ptr, ptr @stdout, align 8
  %call112 = call i32 @fputs_unlocked(ptr noundef %call111, ptr noundef %58)
  %call113 = call ptr @gettext(ptr noundef @.str.57) #21
  %59 = load ptr, ptr @stdout, align 8
  %call114 = call i32 @fputs_unlocked(ptr noundef %call113, ptr noundef %59)
  %call115 = call ptr @gettext(ptr noundef @.str.58) #21
  %60 = load ptr, ptr @stdout, align 8
  %call116 = call i32 @fputs_unlocked(ptr noundef %call115, ptr noundef %60)
  %call117 = call ptr @gettext(ptr noundef @.str.59) #21
  %61 = load ptr, ptr @stdout, align 8
  %call118 = call i32 @fputs_unlocked(ptr noundef %call117, ptr noundef %61)
  %call119 = call ptr @gettext(ptr noundef @.str.60) #21
  %62 = load ptr, ptr @stdout, align 8
  %call120 = call i32 @fputs_unlocked(ptr noundef %call119, ptr noundef %62)
  %call121 = call ptr @gettext(ptr noundef @.str.61) #21
  %63 = load ptr, ptr @stdout, align 8
  %call122 = call i32 @fputs_unlocked(ptr noundef %call121, ptr noundef %63)
  %call123 = call ptr @gettext(ptr noundef @.str.62) #21
  %64 = load ptr, ptr @stdout, align 8
  %call124 = call i32 @fputs_unlocked(ptr noundef %call123, ptr noundef %64)
  %call125 = call ptr @gettext(ptr noundef @.str.63) #21
  %65 = load ptr, ptr @stdout, align 8
  %call126 = call i32 @fputs_unlocked(ptr noundef %call125, ptr noundef %65)
  %call127 = call ptr @gettext(ptr noundef @.str.64) #21
  %66 = load ptr, ptr @stdout, align 8
  %call128 = call i32 @fputs_unlocked(ptr noundef %call127, ptr noundef %66)
  %call129 = call ptr @gettext(ptr noundef @.str.65) #21
  %67 = load ptr, ptr @stdout, align 8
  %call130 = call i32 @fputs_unlocked(ptr noundef %call129, ptr noundef %67)
  %call131 = call ptr @gettext(ptr noundef @.str.66) #21
  %call132 = call i32 (ptr, ...) @printf(ptr noundef %call131, ptr noundef @.str.67)
  %call133 = call ptr @gettext(ptr noundef @.str.68) #21
  %68 = load ptr, ptr @stdout, align 8
  %call134 = call i32 @fputs_unlocked(ptr noundef %call133, ptr noundef %68)
  %call135 = call ptr @gettext(ptr noundef @.str.69) #21
  %69 = load ptr, ptr @stdout, align 8
  %call136 = call i32 @fputs_unlocked(ptr noundef %call135, ptr noundef %69)
  %call137 = call ptr @gettext(ptr noundef @.str.70) #21
  %70 = load ptr, ptr @stdout, align 8
  %call138 = call i32 @fputs_unlocked(ptr noundef %call137, ptr noundef %70)
  %call139 = call ptr @gettext(ptr noundef @.str.71) #21
  %71 = load ptr, ptr @stdout, align 8
  %call140 = call i32 @fputs_unlocked(ptr noundef %call139, ptr noundef %71)
  %call141 = call ptr @gettext(ptr noundef @.str.72) #21
  %72 = load ptr, ptr @stdout, align 8
  %call142 = call i32 @fputs_unlocked(ptr noundef %call141, ptr noundef %72)
  %call143 = call ptr @gettext(ptr noundef @.str.73) #21
  %73 = load ptr, ptr @stdout, align 8
  %call144 = call i32 @fputs_unlocked(ptr noundef %call143, ptr noundef %73)
  %call145 = call ptr @gettext(ptr noundef @.str.74) #21
  %74 = load ptr, ptr @stdout, align 8
  %call146 = call i32 @fputs_unlocked(ptr noundef %call145, ptr noundef %74)
  %call147 = call ptr @gettext(ptr noundef @.str.75) #21
  %75 = load ptr, ptr @stdout, align 8
  %call148 = call i32 @fputs_unlocked(ptr noundef %call147, ptr noundef %75)
  %call149 = call ptr @gettext(ptr noundef @.str.76) #21
  %call150 = call i32 (ptr, ...) @printf(ptr noundef %call149, ptr noundef @.str.77)
  %call151 = call ptr @gettext(ptr noundef @.str.78) #21
  %call152 = call i32 (ptr, ...) @printf(ptr noundef %call151, ptr noundef @.str.79)
  %call153 = call ptr @gettext(ptr noundef @.str.80) #21
  %76 = load ptr, ptr @stdout, align 8
  %call154 = call i32 @fputs_unlocked(ptr noundef %call153, ptr noundef %76)
  %call155 = call ptr @gettext(ptr noundef @.str.81) #21
  %77 = load ptr, ptr @stdout, align 8
  %call156 = call i32 @fputs_unlocked(ptr noundef %call155, ptr noundef %77)
  %call157 = call ptr @gettext(ptr noundef @.str.82) #21
  %78 = load ptr, ptr @stdout, align 8
  %call158 = call i32 @fputs_unlocked(ptr noundef %call157, ptr noundef %78)
  %call159 = call ptr @gettext(ptr noundef @.str.83) #21
  %79 = load ptr, ptr @stdout, align 8
  %call160 = call i32 @fputs_unlocked(ptr noundef %call159, ptr noundef %79)
  %call161 = call ptr @gettext(ptr noundef @.str.84) #21
  %call162 = call i32 (ptr, ...) @printf(ptr noundef %call161, ptr noundef @.str.85, ptr noundef @.str.86)
  %call163 = call ptr @gettext(ptr noundef @.str.87) #21
  %80 = load ptr, ptr @stdout, align 8
  %call164 = call i32 @fputs_unlocked(ptr noundef %call163, ptr noundef %80)
  %call165 = call ptr @gettext(ptr noundef @.str.88) #21
  %call166 = call i32 (ptr, ...) @printf(ptr noundef %call165, ptr noundef @.str.89)
  %call167 = call ptr @gettext(ptr noundef @.str.90) #21
  %call168 = call i32 (ptr, ...) @printf(ptr noundef %call167, ptr noundef @.str.91, ptr noundef @.str.92, ptr noundef @.str.93)
  %call169 = call ptr @gettext(ptr noundef @.str.94) #21
  %81 = load ptr, ptr @stdout, align 8
  %call170 = call i32 @fputs_unlocked(ptr noundef %call169, ptr noundef %81)
  call void @emit_ancillary_info(ptr noundef @.str.95)
  br label %if.end

if.end:                                           ; preds = %cond.end, %do.end
  %82 = load i32, ptr %status.addr, align 4
  call void @exit(i32 noundef %82) #22
  unreachable
}

; Function Attrs: nounwind
declare ptr @gettext(ptr noundef) #1

declare i32 @fprintf(ptr noundef, ptr noundef, ...) #2

declare i32 @printf(ptr noundef, ...) #2

declare i32 @fputs_unlocked(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_mandatory_arg_note() #3 {
entry:
  %call = call ptr @gettext(ptr noundef @.str.114) #21
  %0 = load ptr, ptr @stdout, align 8
  %call1 = call i32 @fputs_unlocked(ptr noundef %call, ptr noundef %0)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(ptr noundef %program) #3 {
entry:
  %program.addr = alloca ptr, align 8
  %infomap = alloca [7 x %struct.infomap], align 16
  %node = alloca ptr, align 8
  %map_prog = alloca ptr, align 8
  %lc_messages = alloca ptr, align 8
  %url_program = alloca ptr, align 8
  store ptr %program, ptr %program.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %infomap, ptr align 16 @__const.emit_ancillary_info.infomap, i64 112, i1 false)
  %0 = load ptr, ptr %program.addr, align 8
  store ptr %0, ptr %node, align 8
  %arraydecay = getelementptr inbounds [7 x %struct.infomap], ptr %infomap, i64 0, i64 0
  store ptr %arraydecay, ptr %map_prog, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load ptr, ptr %map_prog, align 8
  %program1 = getelementptr inbounds %struct.infomap, ptr %1, i32 0, i32 0
  %2 = load ptr, ptr %program1, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load ptr, ptr %program.addr, align 8
  %4 = load ptr, ptr %map_prog, align 8
  %program2 = getelementptr inbounds %struct.infomap, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %program2, align 8
  %call = call i32 @strcmp(ptr noundef %3, ptr noundef %5) #23
  %cmp = icmp eq i32 %call, 0
  %lnot = xor i1 %cmp, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load ptr, ptr %map_prog, align 8
  %incdec.ptr = getelementptr inbounds %struct.infomap, ptr %7, i32 1
  store ptr %incdec.ptr, ptr %map_prog, align 8
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %land.end
  %8 = load ptr, ptr %map_prog, align 8
  %node3 = getelementptr inbounds %struct.infomap, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %node3, align 8
  %tobool4 = icmp ne ptr %9, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %10 = load ptr, ptr %map_prog, align 8
  %node5 = getelementptr inbounds %struct.infomap, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %node5, align 8
  store ptr %11, ptr %node, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %call6 = call ptr @gettext(ptr noundef @.str.123) #21
  %call7 = call i32 (ptr, ...) @printf(ptr noundef %call6, ptr noundef @.str.101, ptr noundef @.str.124)
  %call8 = call ptr @setlocale(i32 noundef 5, ptr noundef null) #21
  store ptr %call8, ptr %lc_messages, align 8
  %12 = load ptr, ptr %lc_messages, align 8
  %tobool9 = icmp ne ptr %12, null
  br i1 %tobool9, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %if.end
  %13 = load ptr, ptr %lc_messages, align 8
  %call10 = call i32 @strncmp(ptr noundef %13, ptr noundef @.str.125, i64 noundef 3) #23
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then12, label %if.end15

if.then12:                                        ; preds = %land.lhs.true
  %call13 = call ptr @gettext(ptr noundef @.str.126) #21
  %14 = load ptr, ptr @stdout, align 8
  %call14 = call i32 @fputs_unlocked(ptr noundef %call13, ptr noundef %14)
  br label %if.end15

if.end15:                                         ; preds = %if.then12, %land.lhs.true, %if.end
  %15 = load ptr, ptr %program.addr, align 8
  %call16 = call i32 @strcmp(ptr noundef %15, ptr noundef @.str.115) #23
  %cmp17 = icmp eq i32 %call16, 0
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end15
  br label %cond.end

cond.false:                                       ; preds = %if.end15
  %16 = load ptr, ptr %program.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ @.str.127, %cond.true ], [ %16, %cond.false ]
  store ptr %cond, ptr %url_program, align 8
  %call18 = call ptr @gettext(ptr noundef @.str.128) #21
  %17 = load ptr, ptr %url_program, align 8
  %call19 = call i32 (ptr, ...) @printf(ptr noundef %call18, ptr noundef @.str.124, ptr noundef %17)
  %call20 = call ptr @gettext(ptr noundef @.str.129) #21
  %18 = load ptr, ptr %node, align 8
  %19 = load ptr, ptr %node, align 8
  %20 = load ptr, ptr %program.addr, align 8
  %cmp21 = icmp eq ptr %19, %20
  %21 = zext i1 %cmp21 to i64
  %cond22 = select i1 %cmp21, ptr @.str.130, ptr @.str.96
  %call23 = call i32 (ptr, ...) @printf(ptr noundef %call20, ptr noundef %18, ptr noundef %cond22)
  ret void
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind willreturn memory(read)
declare i32 @strcmp(ptr noundef, ptr noundef) #6

; Function Attrs: nounwind
declare ptr @setlocale(i32 noundef, ptr noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare i32 @strncmp(ptr noundef, ptr noundef, i64 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #3 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %output_type = alloca i32, align 4
  %optc = alloca i32, align 4
  %argi = alloca i32, align 4
  %opti = alloca i32, align 4
  %require_set_attr = alloca i8, align 1
  %verbose_output = alloca i8, align 1
  %recoverable_output = alloca i8, align 1
  %noargs = alloca i8, align 1
  %file_name = alloca ptr, align 8
  %device_name = alloca ptr, align 8
  %fdflags = alloca i32, align 4
  %i = alloca i32, align 4
  %newc = alloca i32, align 4
  %oldc = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  store ptr %argv, ptr %argv.addr, align 8
  store i32 0, ptr %argi, align 4
  store i32 1, ptr %opti, align 4
  store i8 1, ptr %noargs, align 1
  store ptr null, ptr %file_name, align 8
  %0 = load ptr, ptr %argv.addr, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %0, i64 0
  %1 = load ptr, ptr %arrayidx, align 8
  call void @set_program_name(ptr noundef %1)
  %call = call ptr @setlocale(i32 noundef 6, ptr noundef @.str.96) #21
  %call1 = call ptr @bindtextdomain(ptr noundef @.str.97, ptr noundef @.str.98) #21
  %call2 = call ptr @textdomain(ptr noundef @.str.97) #21
  %call3 = call i32 @atexit(ptr noundef @close_stdout) #21
  store i32 0, ptr %output_type, align 4
  store i8 0, ptr %verbose_output, align 1
  store i8 0, ptr %recoverable_output, align 1
  store i32 0, ptr @opterr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %entry
  %2 = load i32, ptr %argc.addr, align 4
  %3 = load i32, ptr %argi, align 4
  %sub = sub nsw i32 %2, %3
  %4 = load ptr, ptr %argv.addr, align 8
  %5 = load i32, ptr %argi, align 4
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds ptr, ptr %4, i64 %idx.ext
  %call4 = call i32 @getopt_long(i32 noundef %sub, ptr noundef %add.ptr, ptr noundef @.str.99, ptr noundef @longopts, ptr noundef null) #21
  store i32 %call4, ptr %optc, align 4
  %cmp = icmp ne i32 %call4, -1
  br i1 %cmp, label %while.body, label %while.end29

while.body:                                       ; preds = %while.cond
  %6 = load i32, ptr %optc, align 4
  switch i32 %6, label %sw.default [
    i32 97, label %sw.bb
    i32 103, label %sw.bb5
    i32 70, label %sw.bb6
    i32 128, label %sw.bb8
    i32 -130, label %sw.bb9
    i32 -131, label %sw.bb10
  ]

sw.bb:                                            ; preds = %while.body
  store i8 1, ptr %verbose_output, align 1
  store i32 1, ptr %output_type, align 4
  br label %sw.epilog

sw.bb5:                                           ; preds = %while.body
  store i8 1, ptr %recoverable_output, align 1
  store i32 2, ptr %output_type, align 4
  br label %sw.epilog

sw.bb6:                                           ; preds = %while.body
  %7 = load ptr, ptr %file_name, align 8
  %tobool = icmp ne ptr %7, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb6
  %call7 = call ptr @gettext(ptr noundef @.str.100) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call7) #24
  unreachable

if.end:                                           ; preds = %sw.bb6
  %8 = load ptr, ptr @optarg, align 8
  store ptr %8, ptr %file_name, align 8
  br label %sw.epilog

sw.bb8:                                           ; preds = %while.body
  store i8 1, ptr @dev_debug, align 1
  br label %sw.epilog

sw.bb9:                                           ; preds = %while.body
  call void @usage(i32 noundef 0) #25
  unreachable

sw.bb10:                                          ; preds = %while.body
  %9 = load ptr, ptr @stdout, align 8
  %10 = load ptr, ptr @Version, align 8
  %call11 = call ptr @proper_name_lite(ptr noundef @.str.102, ptr noundef @.str.102)
  call void (ptr, ptr, ptr, ptr, ...) @version_etc(ptr noundef %9, ptr noundef @.str.95, ptr noundef @.str.101, ptr noundef %10, ptr noundef %call11, ptr noundef null)
  call void @exit(i32 noundef 0) #22
  unreachable

sw.default:                                       ; preds = %while.body
  %11 = load ptr, ptr %argv.addr, align 8
  %12 = load i32, ptr %argi, align 4
  %13 = load i32, ptr %opti, align 4
  %add = add nsw i32 %12, %13
  %idxprom = sext i32 %add to i64
  %arrayidx12 = getelementptr inbounds ptr, ptr %11, i64 %idxprom
  %14 = load ptr, ptr %arrayidx12, align 8
  %call13 = call i32 @strcmp(ptr noundef %14, ptr noundef @.str.103) #23
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.end21, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.default
  %15 = load ptr, ptr %argv.addr, align 8
  %16 = load i32, ptr %argi, align 4
  %17 = load i32, ptr %opti, align 4
  %add15 = add nsw i32 %16, %17
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds ptr, ptr %15, i64 %idxprom16
  %18 = load ptr, ptr %arrayidx17, align 8
  %call18 = call i32 @strcmp(ptr noundef %18, ptr noundef @.str.104) #23
  %cmp19 = icmp eq i32 %call18, 0
  br i1 %cmp19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %land.lhs.true
  store i8 0, ptr %noargs, align 1
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %land.lhs.true, %sw.default
  %19 = load i32, ptr %opti, align 4
  %20 = load i32, ptr %argi, align 4
  %add22 = add nsw i32 %20, %19
  store i32 %add22, ptr %argi, align 4
  store i32 1, ptr %opti, align 4
  store i32 0, ptr @optind, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end21, %sw.bb8, %if.end, %sw.bb5, %sw.bb
  br label %while.cond23

while.cond23:                                     ; preds = %while.body25, %sw.epilog
  %21 = load i32, ptr %opti, align 4
  %22 = load i32, ptr @optind, align 4
  %cmp24 = icmp slt i32 %21, %22
  br i1 %cmp24, label %while.body25, label %while.end

while.body25:                                     ; preds = %while.cond23
  %23 = load ptr, ptr %argv.addr, align 8
  %24 = load i32, ptr %argi, align 4
  %25 = load i32, ptr %opti, align 4
  %inc = add nsw i32 %25, 1
  store i32 %inc, ptr %opti, align 4
  %add26 = add nsw i32 %24, %25
  %idxprom27 = sext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds ptr, ptr %23, i64 %idxprom27
  store ptr null, ptr %arrayidx28, align 8
  br label %while.cond23, !llvm.loop !8

while.end:                                        ; preds = %while.cond23
  br label %while.cond, !llvm.loop !9

while.end29:                                      ; preds = %while.cond
  %26 = load i8, ptr %verbose_output, align 1
  %tobool30 = trunc i8 %26 to i1
  br i1 %tobool30, label %land.lhs.true31, label %if.end35

land.lhs.true31:                                  ; preds = %while.end29
  %27 = load i8, ptr %recoverable_output, align 1
  %tobool32 = trunc i8 %27 to i1
  br i1 %tobool32, label %if.then33, label %if.end35

if.then33:                                        ; preds = %land.lhs.true31
  %call34 = call ptr @gettext(ptr noundef @.str.105) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call34) #24
  unreachable

if.end35:                                         ; preds = %land.lhs.true31, %while.end29
  %28 = load i8, ptr %noargs, align 1
  %tobool36 = trunc i8 %28 to i1
  br i1 %tobool36, label %if.end42, label %land.lhs.true37

land.lhs.true37:                                  ; preds = %if.end35
  %29 = load i8, ptr %verbose_output, align 1
  %tobool38 = trunc i8 %29 to i1
  br i1 %tobool38, label %if.then40, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true37
  %30 = load i8, ptr %recoverable_output, align 1
  %tobool39 = trunc i8 %30 to i1
  br i1 %tobool39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %lor.lhs.false, %land.lhs.true37
  %call41 = call ptr @gettext(ptr noundef @.str.106) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call41) #24
  unreachable

if.end42:                                         ; preds = %lor.lhs.false, %if.end35
  %31 = load ptr, ptr %file_name, align 8
  %tobool43 = icmp ne ptr %31, null
  br i1 %tobool43, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end42
  %32 = load ptr, ptr %file_name, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end42
  %call44 = call ptr @gettext(ptr noundef @.str.107) #21
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %32, %cond.true ], [ %call44, %cond.false ]
  store ptr %cond, ptr %device_name, align 8
  %33 = load i8, ptr %noargs, align 1
  %tobool45 = trunc i8 %33 to i1
  br i1 %tobool45, label %if.end51, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %cond.end
  %34 = load i8, ptr %verbose_output, align 1
  %tobool47 = trunc i8 %34 to i1
  br i1 %tobool47, label %if.end51, label %land.lhs.true48

land.lhs.true48:                                  ; preds = %land.lhs.true46
  %35 = load i8, ptr %recoverable_output, align 1
  %tobool49 = trunc i8 %35 to i1
  br i1 %tobool49, label %if.end51, label %if.then50

if.then50:                                        ; preds = %land.lhs.true48
  %36 = load ptr, ptr %device_name, align 8
  %37 = load ptr, ptr %argv.addr, align 8
  %38 = load i32, ptr %argc.addr, align 4
  call void @apply_settings(i1 noundef zeroext true, ptr noundef %36, ptr noundef %37, i32 noundef %38, ptr noundef @main.check_mode, ptr noundef %require_set_attr)
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %land.lhs.true48, %land.lhs.true46, %cond.end
  %39 = load ptr, ptr %file_name, align 8
  %tobool52 = icmp ne ptr %39, null
  br i1 %tobool52, label %if.then53, label %if.end70

if.then53:                                        ; preds = %if.end51
  %40 = load ptr, ptr %device_name, align 8
  %call54 = call i32 @fd_reopen(i32 noundef 0, ptr noundef %40, i32 noundef 2048, i32 noundef 0)
  %cmp55 = icmp slt i32 %call54, 0
  br i1 %cmp55, label %if.then56, label %if.end59

if.then56:                                        ; preds = %if.then53
  %call57 = call ptr @__errno_location() #26
  %41 = load i32, ptr %call57, align 4
  %42 = load ptr, ptr %device_name, align 8
  %call58 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %42)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %41, ptr noundef @.str.108, ptr noundef %call58) #24
  unreachable

if.end59:                                         ; preds = %if.then53
  %call60 = call i32 (i32, i32, ...) @rpl_fcntl(i32 noundef 0, i32 noundef 3)
  store i32 %call60, ptr %fdflags, align 4
  %cmp61 = icmp eq i32 %call60, -1
  br i1 %cmp61, label %if.then65, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %if.end59
  %43 = load i32, ptr %fdflags, align 4
  %and = and i32 %43, -2049
  %call63 = call i32 (i32, i32, ...) @rpl_fcntl(i32 noundef 0, i32 noundef 4, i32 noundef %and)
  %cmp64 = icmp slt i32 %call63, 0
  br i1 %cmp64, label %if.then65, label %if.end69

if.then65:                                        ; preds = %lor.lhs.false62, %if.end59
  %call66 = call ptr @__errno_location() #26
  %44 = load i32, ptr %call66, align 4
  %call67 = call ptr @gettext(ptr noundef @.str.109) #21
  %45 = load ptr, ptr %device_name, align 8
  %call68 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %45)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %44, ptr noundef %call67, ptr noundef %call68) #24
  unreachable

if.end69:                                         ; preds = %lor.lhs.false62
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.end51
  %call71 = call i32 @tcgetattr(i32 noundef 0, ptr noundef @main.mode) #21
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.then73, label %if.end76

if.then73:                                        ; preds = %if.end70
  %call74 = call ptr @__errno_location() #26
  %46 = load i32, ptr %call74, align 4
  %47 = load ptr, ptr %device_name, align 8
  %call75 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %47)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %46, ptr noundef @.str.108, ptr noundef %call75) #24
  unreachable

if.end76:                                         ; preds = %if.end70
  %48 = load i8, ptr %verbose_output, align 1
  %tobool77 = trunc i8 %48 to i1
  br i1 %tobool77, label %if.then82, label %lor.lhs.false78

lor.lhs.false78:                                  ; preds = %if.end76
  %49 = load i8, ptr %recoverable_output, align 1
  %tobool79 = trunc i8 %49 to i1
  br i1 %tobool79, label %if.then82, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %lor.lhs.false78
  %50 = load i8, ptr %noargs, align 1
  %tobool81 = trunc i8 %50 to i1
  br i1 %tobool81, label %if.then82, label %if.end84

if.then82:                                        ; preds = %lor.lhs.false80, %lor.lhs.false78, %if.end76
  %call83 = call i32 @screen_columns()
  store i32 %call83, ptr @max_col, align 4
  store i32 0, ptr @current_col, align 4
  %51 = load i32, ptr %output_type, align 4
  %52 = load ptr, ptr %device_name, align 8
  call void @display_settings(i32 noundef %51, ptr noundef @main.mode, ptr noundef %52)
  store i32 0, ptr %retval, align 4
  br label %return

if.end84:                                         ; preds = %lor.lhs.false80
  store i8 0, ptr %require_set_attr, align 1
  %53 = load ptr, ptr %device_name, align 8
  %54 = load ptr, ptr %argv.addr, align 8
  %55 = load i32, ptr %argc.addr, align 4
  call void @apply_settings(i1 noundef zeroext false, ptr noundef %53, ptr noundef %54, i32 noundef %55, ptr noundef @main.mode, ptr noundef %require_set_attr)
  %56 = load i8, ptr %require_set_attr, align 1
  %tobool85 = trunc i8 %56 to i1
  br i1 %tobool85, label %if.then86, label %if.end120

if.then86:                                        ; preds = %if.end84
  %57 = load i32, ptr @tcsetattr_options, align 4
  %call87 = call i32 @tcsetattr(i32 noundef 0, i32 noundef %57, ptr noundef @main.mode) #21
  %tobool88 = icmp ne i32 %call87, 0
  br i1 %tobool88, label %if.then89, label %if.end92

if.then89:                                        ; preds = %if.then86
  %call90 = call ptr @__errno_location() #26
  %58 = load i32, ptr %call90, align 4
  %59 = load ptr, ptr %device_name, align 8
  %call91 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %59)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %58, ptr noundef @.str.108, ptr noundef %call91) #24
  unreachable

if.end92:                                         ; preds = %if.then86
  %call93 = call i32 @tcgetattr(i32 noundef 0, ptr noundef @main.new_mode) #21
  %tobool94 = icmp ne i32 %call93, 0
  br i1 %tobool94, label %if.then95, label %if.end98

if.then95:                                        ; preds = %if.end92
  %call96 = call ptr @__errno_location() #26
  %60 = load i32, ptr %call96, align 4
  %61 = load ptr, ptr %device_name, align 8
  %call97 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %61)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %60, ptr noundef @.str.108, ptr noundef %call97) #24
  unreachable

if.end98:                                         ; preds = %if.end92
  %call99 = call zeroext i1 @eq_mode(ptr noundef @main.mode, ptr noundef @main.new_mode)
  br i1 %call99, label %if.end119, label %if.then100

if.then100:                                       ; preds = %if.end98
  %62 = load i8, ptr @dev_debug, align 1
  %tobool101 = trunc i8 %62 to i1
  br i1 %tobool101, label %if.then102, label %if.end116

if.then102:                                       ; preds = %if.then100
  %call103 = call ptr @gettext(ptr noundef @.str.110) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call103) #24
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then102
  %63 = load i32, ptr %i, align 4
  %conv = zext i32 %63 to i64
  %cmp104 = icmp ult i64 %conv, 60
  br i1 %cmp104, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %64 = load i32, ptr %i, align 4
  %idx.ext106 = zext i32 %64 to i64
  %add.ptr107 = getelementptr inbounds i8, ptr @main.new_mode, i64 %idx.ext106
  %65 = load i8, ptr %add.ptr107, align 1
  %conv108 = zext i8 %65 to i32
  store i32 %conv108, ptr %newc, align 4
  %66 = load i32, ptr %i, align 4
  %idx.ext109 = zext i32 %66 to i64
  %add.ptr110 = getelementptr inbounds i8, ptr @main.mode, i64 %idx.ext109
  %67 = load i8, ptr %add.ptr110, align 1
  %conv111 = zext i8 %67 to i32
  store i32 %conv111, ptr %oldc, align 4
  %68 = load i32, ptr %i, align 4
  %69 = load i32, ptr %oldc, align 4
  %70 = load i32, ptr %newc, align 4
  %71 = load i32, ptr %newc, align 4
  %72 = load i32, ptr %oldc, align 4
  %cmp112 = icmp eq i32 %71, %72
  %73 = zext i1 %cmp112 to i64
  %cond114 = select i1 %cmp112, ptr @.str.96, ptr @.str.112
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef @.str.111, i32 noundef %68, i32 noundef %69, i32 noundef %70, ptr noundef %cond114) #24
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %74 = load i32, ptr %i, align 4
  %inc115 = add i32 %74, 1
  store i32 %inc115, ptr %i, align 4
  br label %for.cond, !llvm.loop !10

for.end:                                          ; preds = %for.cond
  br label %if.end116

if.end116:                                        ; preds = %for.end, %if.then100
  %call117 = call ptr @gettext(ptr noundef @.str.113) #21
  %75 = load ptr, ptr %device_name, align 8
  %call118 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %75)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call117, ptr noundef %call118) #24
  unreachable

if.end119:                                        ; preds = %if.end98
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.end84
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end120, %if.then82
  %76 = load i32, ptr %retval, align 4
  ret i32 %76
}

; Function Attrs: nounwind
declare ptr @bindtextdomain(ptr noundef, ptr noundef) #1

; Function Attrs: nounwind
declare ptr @textdomain(ptr noundef) #1

; Function Attrs: nounwind
declare i32 @atexit(ptr noundef) #1

; Function Attrs: nounwind
declare i32 @getopt_long(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @apply_settings(i1 noundef zeroext %checking, ptr noundef %device_name, ptr noundef %settings, i32 noundef %n_settings, ptr noundef %mode, ptr noundef %require_set_attr) #3 {
entry:
  %checking.addr = alloca i8, align 1
  %device_name.addr = alloca ptr, align 8
  %settings.addr = alloca ptr, align 8
  %n_settings.addr = alloca i32, align 4
  %mode.addr = alloca ptr, align 8
  %require_set_attr.addr = alloca ptr, align 8
  %k = alloca i32, align 4
  %arg = alloca ptr, align 8
  %match_found = alloca i8, align 1
  %not_set_attr = alloca i8, align 1
  %reversed = alloca i8, align 1
  %i = alloca i32, align 4
  %value = alloca i64, align 8
  %frombool = zext i1 %checking to i8
  store i8 %frombool, ptr %checking.addr, align 1
  store ptr %device_name, ptr %device_name.addr, align 8
  store ptr %settings, ptr %settings.addr, align 8
  store i32 %n_settings, ptr %n_settings.addr, align 4
  store ptr %mode, ptr %mode.addr, align 8
  store ptr %require_set_attr, ptr %require_set_attr.addr, align 8
  store i32 1, ptr %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc284, %entry
  %0 = load i32, ptr %k, align 4
  %1 = load i32, ptr %n_settings.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end286

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %settings.addr, align 8
  %3 = load i32, ptr %k, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds ptr, ptr %2, i64 %idxprom
  %4 = load ptr, ptr %arrayidx, align 8
  store ptr %4, ptr %arg, align 8
  store i8 0, ptr %match_found, align 1
  store i8 0, ptr %not_set_attr, align 1
  store i8 0, ptr %reversed, align 1
  %5 = load ptr, ptr %arg, align 8
  %tobool = icmp ne ptr %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc284

if.end:                                           ; preds = %for.body
  %6 = load ptr, ptr %arg, align 8
  %arrayidx1 = getelementptr inbounds i8, ptr %6, i64 0
  %7 = load i8, ptr %arrayidx1, align 1
  %conv = sext i8 %7 to i32
  %cmp2 = icmp eq i32 %conv, 45
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %8 = load ptr, ptr %arg, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %arg, align 8
  store i8 1, ptr %reversed, align 1
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  %9 = load ptr, ptr %arg, align 8
  %call = call i32 @strcmp(ptr noundef %9, ptr noundef @.str.104) #23
  %cmp6 = icmp eq i32 %call, 0
  br i1 %cmp6, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end5
  %10 = load i8, ptr %reversed, align 1
  %tobool9 = trunc i8 %10 to i1
  %11 = zext i1 %tobool9 to i64
  %cond = select i1 %tobool9, i32 0, i32 1
  store i32 %cond, ptr @tcsetattr_options, align 4
  br label %for.inc284

if.end11:                                         ; preds = %if.end5
  store i32 0, ptr %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc, %if.end11
  %12 = load i32, ptr %i, align 4
  %idxprom13 = sext i32 %12 to i64
  %arrayidx14 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom13
  %name = getelementptr inbounds %struct.mode_info, ptr %arrayidx14, i32 0, i32 0
  %13 = load ptr, ptr %name, align 16
  %cmp15 = icmp ne ptr %13, null
  br i1 %cmp15, label %for.body17, label %for.end

for.body17:                                       ; preds = %for.cond12
  %14 = load ptr, ptr %arg, align 8
  %15 = load i32, ptr %i, align 4
  %idxprom18 = sext i32 %15 to i64
  %arrayidx19 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom18
  %name20 = getelementptr inbounds %struct.mode_info, ptr %arrayidx19, i32 0, i32 0
  %16 = load ptr, ptr %name20, align 16
  %call21 = call i32 @strcmp(ptr noundef %14, ptr noundef %16) #23
  %cmp22 = icmp eq i32 %call21, 0
  br i1 %cmp22, label %if.then24, label %if.end37

if.then24:                                        ; preds = %for.body17
  %17 = load i32, ptr %i, align 4
  %idxprom25 = sext i32 %17 to i64
  %arrayidx26 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom25
  %flags = getelementptr inbounds %struct.mode_info, ptr %arrayidx26, i32 0, i32 2
  %18 = load i8, ptr %flags, align 4
  %conv27 = sext i8 %18 to i32
  %and = and i32 %conv27, 16
  %cmp28 = icmp eq i32 %and, 0
  br i1 %cmp28, label %if.then30, label %if.else

if.then30:                                        ; preds = %if.then24
  %19 = load i32, ptr %i, align 4
  %idxprom31 = sext i32 %19 to i64
  %arrayidx32 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom31
  %20 = load i8, ptr %reversed, align 1
  %tobool33 = trunc i8 %20 to i1
  %21 = load ptr, ptr %mode.addr, align 8
  %call34 = call zeroext i1 @set_mode(ptr noundef %arrayidx32, i1 noundef zeroext %tobool33, ptr noundef %21)
  %frombool35 = zext i1 %call34 to i8
  store i8 %frombool35, ptr %match_found, align 1
  %22 = load ptr, ptr %require_set_attr.addr, align 8
  store i8 1, ptr %22, align 1
  br label %if.end36

if.else:                                          ; preds = %if.then24
  store i8 1, ptr %not_set_attr, align 1
  store i8 1, ptr %match_found, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then30
  br label %for.end

if.end37:                                         ; preds = %for.body17
  br label %for.inc

for.inc:                                          ; preds = %if.end37
  %23 = load i32, ptr %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond12, !llvm.loop !11

for.end:                                          ; preds = %if.end36, %for.cond12
  %24 = load i8, ptr %match_found, align 1
  %tobool38 = trunc i8 %24 to i1
  br i1 %tobool38, label %if.end44, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.end
  %25 = load i8, ptr %reversed, align 1
  %tobool39 = trunc i8 %25 to i1
  br i1 %tobool39, label %if.then41, label %if.end44

if.then41:                                        ; preds = %land.lhs.true
  %call42 = call ptr @gettext(ptr noundef @.str.137) #21
  %26 = load ptr, ptr %arg, align 8
  %add.ptr = getelementptr inbounds i8, ptr %26, i64 -1
  %call43 = call ptr @quote(ptr noundef %add.ptr)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call42, ptr noundef %call43) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end44:                                         ; preds = %land.lhs.true, %for.end
  %27 = load i8, ptr %match_found, align 1
  %tobool45 = trunc i8 %27 to i1
  br i1 %tobool45, label %if.end79, label %if.then46

if.then46:                                        ; preds = %if.end44
  store i32 0, ptr %i, align 4
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc76, %if.then46
  %28 = load i32, ptr %i, align 4
  %idxprom48 = sext i32 %28 to i64
  %arrayidx49 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom48
  %name50 = getelementptr inbounds %struct.control_info, ptr %arrayidx49, i32 0, i32 0
  %29 = load ptr, ptr %name50, align 8
  %cmp51 = icmp ne ptr %29, null
  br i1 %cmp51, label %for.body53, label %for.end78

for.body53:                                       ; preds = %for.cond47
  %30 = load ptr, ptr %arg, align 8
  %31 = load i32, ptr %i, align 4
  %idxprom54 = sext i32 %31 to i64
  %arrayidx55 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom54
  %name56 = getelementptr inbounds %struct.control_info, ptr %arrayidx55, i32 0, i32 0
  %32 = load ptr, ptr %name56, align 8
  %call57 = call i32 @strcmp(ptr noundef %30, ptr noundef %32) #23
  %cmp58 = icmp eq i32 %call57, 0
  br i1 %cmp58, label %if.then60, label %if.end75

if.then60:                                        ; preds = %for.body53
  br label %do.body

do.body:                                          ; preds = %if.then60
  %33 = load i32, ptr %k, align 4
  %34 = load i32, ptr %n_settings.addr, align 4
  %sub = sub nsw i32 %34, 1
  %cmp61 = icmp eq i32 %33, %sub
  br i1 %cmp61, label %if.then66, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.body
  %35 = load ptr, ptr %settings.addr, align 8
  %36 = load i32, ptr %k, align 4
  %add = add nsw i32 %36, 1
  %idxprom63 = sext i32 %add to i64
  %arrayidx64 = getelementptr inbounds ptr, ptr %35, i64 %idxprom63
  %37 = load ptr, ptr %arrayidx64, align 8
  %tobool65 = icmp ne ptr %37, null
  br i1 %tobool65, label %if.end69, label %if.then66

if.then66:                                        ; preds = %lor.lhs.false, %do.body
  %call67 = call ptr @gettext(ptr noundef @.str.138) #21
  %38 = load ptr, ptr %arg, align 8
  %call68 = call ptr @quote(ptr noundef %38)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call67, ptr noundef %call68) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end69:                                         ; preds = %lor.lhs.false
  br label %do.end

do.end:                                           ; preds = %if.end69
  store i8 1, ptr %match_found, align 1
  %39 = load i32, ptr %k, align 4
  %inc70 = add nsw i32 %39, 1
  store i32 %inc70, ptr %k, align 4
  %40 = load i32, ptr %i, align 4
  %idxprom71 = sext i32 %40 to i64
  %arrayidx72 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom71
  %41 = load ptr, ptr %settings.addr, align 8
  %42 = load i32, ptr %k, align 4
  %idxprom73 = sext i32 %42 to i64
  %arrayidx74 = getelementptr inbounds ptr, ptr %41, i64 %idxprom73
  %43 = load ptr, ptr %arrayidx74, align 8
  %44 = load ptr, ptr %mode.addr, align 8
  call void @set_control_char(ptr noundef %arrayidx72, ptr noundef %43, ptr noundef %44)
  %45 = load ptr, ptr %require_set_attr.addr, align 8
  store i8 1, ptr %45, align 1
  br label %for.end78

if.end75:                                         ; preds = %for.body53
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %46 = load i32, ptr %i, align 4
  %inc77 = add nsw i32 %46, 1
  store i32 %inc77, ptr %i, align 4
  br label %for.cond47, !llvm.loop !12

for.end78:                                        ; preds = %do.end, %for.cond47
  br label %if.end79

if.end79:                                         ; preds = %for.end78, %if.end44
  %47 = load i8, ptr %match_found, align 1
  %tobool80 = trunc i8 %47 to i1
  br i1 %tobool80, label %lor.lhs.false81, label %if.then84

lor.lhs.false81:                                  ; preds = %if.end79
  %48 = load i8, ptr %not_set_attr, align 1
  %tobool82 = trunc i8 %48 to i1
  br i1 %tobool82, label %if.then84, label %if.end283

if.then84:                                        ; preds = %lor.lhs.false81, %if.end79
  %49 = load ptr, ptr %arg, align 8
  %call85 = call i32 @strcmp(ptr noundef %49, ptr noundef @.str.139) #23
  %cmp86 = icmp eq i32 %call85, 0
  br i1 %cmp86, label %if.then88, label %if.else120

if.then88:                                        ; preds = %if.then84
  br label %do.body89

do.body89:                                        ; preds = %if.then88
  %50 = load i32, ptr %k, align 4
  %51 = load i32, ptr %n_settings.addr, align 4
  %sub90 = sub nsw i32 %51, 1
  %cmp91 = icmp eq i32 %50, %sub90
  br i1 %cmp91, label %if.then98, label %lor.lhs.false93

lor.lhs.false93:                                  ; preds = %do.body89
  %52 = load ptr, ptr %settings.addr, align 8
  %53 = load i32, ptr %k, align 4
  %add94 = add nsw i32 %53, 1
  %idxprom95 = sext i32 %add94 to i64
  %arrayidx96 = getelementptr inbounds ptr, ptr %52, i64 %idxprom95
  %54 = load ptr, ptr %arrayidx96, align 8
  %tobool97 = icmp ne ptr %54, null
  br i1 %tobool97, label %if.end101, label %if.then98

if.then98:                                        ; preds = %lor.lhs.false93, %do.body89
  %call99 = call ptr @gettext(ptr noundef @.str.138) #21
  %55 = load ptr, ptr %arg, align 8
  %call100 = call ptr @quote(ptr noundef %55)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call99, ptr noundef %call100) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end101:                                        ; preds = %lor.lhs.false93
  br label %do.end102

do.end102:                                        ; preds = %if.end101
  %56 = load i32, ptr %k, align 4
  %inc103 = add nsw i32 %56, 1
  store i32 %inc103, ptr %k, align 4
  %57 = load ptr, ptr %settings.addr, align 8
  %58 = load i32, ptr %k, align 4
  %idxprom104 = sext i32 %58 to i64
  %arrayidx105 = getelementptr inbounds ptr, ptr %57, i64 %idxprom104
  %59 = load ptr, ptr %arrayidx105, align 8
  %call106 = call i32 @string_to_baud(ptr noundef %59)
  %cmp107 = icmp eq i32 %call106, -1
  br i1 %cmp107, label %if.then109, label %if.end114

if.then109:                                       ; preds = %do.end102
  %call110 = call ptr @gettext(ptr noundef @.str.140) #21
  %60 = load ptr, ptr %settings.addr, align 8
  %61 = load i32, ptr %k, align 4
  %idxprom111 = sext i32 %61 to i64
  %arrayidx112 = getelementptr inbounds ptr, ptr %60, i64 %idxprom111
  %62 = load ptr, ptr %arrayidx112, align 8
  %call113 = call ptr @quote(ptr noundef %62)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call110, ptr noundef %call113) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end114:                                        ; preds = %do.end102
  %63 = load ptr, ptr %settings.addr, align 8
  %64 = load i32, ptr %k, align 4
  %idxprom115 = sext i32 %64 to i64
  %arrayidx116 = getelementptr inbounds ptr, ptr %63, i64 %idxprom115
  %65 = load ptr, ptr %arrayidx116, align 8
  %66 = load ptr, ptr %mode.addr, align 8
  call void @set_speed(i32 noundef 0, ptr noundef %65, ptr noundef %66)
  %67 = load i8, ptr %checking.addr, align 1
  %tobool117 = trunc i8 %67 to i1
  br i1 %tobool117, label %if.then118, label %if.end119

if.then118:                                       ; preds = %if.end114
  br label %for.inc284

if.end119:                                        ; preds = %if.end114
  %68 = load ptr, ptr %require_set_attr.addr, align 8
  store i8 1, ptr %68, align 1
  br label %if.end282

if.else120:                                       ; preds = %if.then84
  %69 = load ptr, ptr %arg, align 8
  %call121 = call i32 @strcmp(ptr noundef %69, ptr noundef @.str.141) #23
  %cmp122 = icmp eq i32 %call121, 0
  br i1 %cmp122, label %if.then124, label %if.else156

if.then124:                                       ; preds = %if.else120
  br label %do.body125

do.body125:                                       ; preds = %if.then124
  %70 = load i32, ptr %k, align 4
  %71 = load i32, ptr %n_settings.addr, align 4
  %sub126 = sub nsw i32 %71, 1
  %cmp127 = icmp eq i32 %70, %sub126
  br i1 %cmp127, label %if.then134, label %lor.lhs.false129

lor.lhs.false129:                                 ; preds = %do.body125
  %72 = load ptr, ptr %settings.addr, align 8
  %73 = load i32, ptr %k, align 4
  %add130 = add nsw i32 %73, 1
  %idxprom131 = sext i32 %add130 to i64
  %arrayidx132 = getelementptr inbounds ptr, ptr %72, i64 %idxprom131
  %74 = load ptr, ptr %arrayidx132, align 8
  %tobool133 = icmp ne ptr %74, null
  br i1 %tobool133, label %if.end137, label %if.then134

if.then134:                                       ; preds = %lor.lhs.false129, %do.body125
  %call135 = call ptr @gettext(ptr noundef @.str.138) #21
  %75 = load ptr, ptr %arg, align 8
  %call136 = call ptr @quote(ptr noundef %75)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call135, ptr noundef %call136) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end137:                                        ; preds = %lor.lhs.false129
  br label %do.end138

do.end138:                                        ; preds = %if.end137
  %76 = load i32, ptr %k, align 4
  %inc139 = add nsw i32 %76, 1
  store i32 %inc139, ptr %k, align 4
  %77 = load ptr, ptr %settings.addr, align 8
  %78 = load i32, ptr %k, align 4
  %idxprom140 = sext i32 %78 to i64
  %arrayidx141 = getelementptr inbounds ptr, ptr %77, i64 %idxprom140
  %79 = load ptr, ptr %arrayidx141, align 8
  %call142 = call i32 @string_to_baud(ptr noundef %79)
  %cmp143 = icmp eq i32 %call142, -1
  br i1 %cmp143, label %if.then145, label %if.end150

if.then145:                                       ; preds = %do.end138
  %call146 = call ptr @gettext(ptr noundef @.str.142) #21
  %80 = load ptr, ptr %settings.addr, align 8
  %81 = load i32, ptr %k, align 4
  %idxprom147 = sext i32 %81 to i64
  %arrayidx148 = getelementptr inbounds ptr, ptr %80, i64 %idxprom147
  %82 = load ptr, ptr %arrayidx148, align 8
  %call149 = call ptr @quote(ptr noundef %82)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call146, ptr noundef %call149) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end150:                                        ; preds = %do.end138
  %83 = load ptr, ptr %settings.addr, align 8
  %84 = load i32, ptr %k, align 4
  %idxprom151 = sext i32 %84 to i64
  %arrayidx152 = getelementptr inbounds ptr, ptr %83, i64 %idxprom151
  %85 = load ptr, ptr %arrayidx152, align 8
  %86 = load ptr, ptr %mode.addr, align 8
  call void @set_speed(i32 noundef 1, ptr noundef %85, ptr noundef %86)
  %87 = load i8, ptr %checking.addr, align 1
  %tobool153 = trunc i8 %87 to i1
  br i1 %tobool153, label %if.then154, label %if.end155

if.then154:                                       ; preds = %if.end150
  br label %for.inc284

if.end155:                                        ; preds = %if.end150
  %88 = load ptr, ptr %require_set_attr.addr, align 8
  store i8 1, ptr %88, align 1
  br label %if.end281

if.else156:                                       ; preds = %if.else120
  %89 = load ptr, ptr %arg, align 8
  %call157 = call i32 @strcmp(ptr noundef %89, ptr noundef @.str.143) #23
  %cmp158 = icmp eq i32 %call157, 0
  br i1 %cmp158, label %if.then160, label %if.else183

if.then160:                                       ; preds = %if.else156
  br label %do.body161

do.body161:                                       ; preds = %if.then160
  %90 = load i32, ptr %k, align 4
  %91 = load i32, ptr %n_settings.addr, align 4
  %sub162 = sub nsw i32 %91, 1
  %cmp163 = icmp eq i32 %90, %sub162
  br i1 %cmp163, label %if.then170, label %lor.lhs.false165

lor.lhs.false165:                                 ; preds = %do.body161
  %92 = load ptr, ptr %settings.addr, align 8
  %93 = load i32, ptr %k, align 4
  %add166 = add nsw i32 %93, 1
  %idxprom167 = sext i32 %add166 to i64
  %arrayidx168 = getelementptr inbounds ptr, ptr %92, i64 %idxprom167
  %94 = load ptr, ptr %arrayidx168, align 8
  %tobool169 = icmp ne ptr %94, null
  br i1 %tobool169, label %if.end173, label %if.then170

if.then170:                                       ; preds = %lor.lhs.false165, %do.body161
  %call171 = call ptr @gettext(ptr noundef @.str.138) #21
  %95 = load ptr, ptr %arg, align 8
  %call172 = call ptr @quote(ptr noundef %95)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call171, ptr noundef %call172) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end173:                                        ; preds = %lor.lhs.false165
  br label %do.end174

do.end174:                                        ; preds = %if.end173
  %96 = load i32, ptr %k, align 4
  %inc175 = add nsw i32 %96, 1
  store i32 %inc175, ptr %k, align 4
  %97 = load i8, ptr %checking.addr, align 1
  %tobool176 = trunc i8 %97 to i1
  br i1 %tobool176, label %if.then177, label %if.end178

if.then177:                                       ; preds = %do.end174
  br label %for.inc284

if.end178:                                        ; preds = %do.end174
  %98 = load ptr, ptr %settings.addr, align 8
  %99 = load i32, ptr %k, align 4
  %idxprom179 = sext i32 %99 to i64
  %arrayidx180 = getelementptr inbounds ptr, ptr %98, i64 %idxprom179
  %100 = load ptr, ptr %arrayidx180, align 8
  %call181 = call i64 @integer_arg(ptr noundef %100, i64 noundef 2147483647)
  %conv182 = trunc i64 %call181 to i32
  %101 = load ptr, ptr %device_name.addr, align 8
  call void @set_window_size(i32 noundef %conv182, i32 noundef -1, ptr noundef %101)
  br label %if.end280

if.else183:                                       ; preds = %if.else156
  %102 = load ptr, ptr %arg, align 8
  %call184 = call i32 @strcmp(ptr noundef %102, ptr noundef @.str.144) #23
  %cmp185 = icmp eq i32 %call184, 0
  br i1 %cmp185, label %if.then191, label %lor.lhs.false187

lor.lhs.false187:                                 ; preds = %if.else183
  %103 = load ptr, ptr %arg, align 8
  %call188 = call i32 @strcmp(ptr noundef %103, ptr noundef @.str.145) #23
  %cmp189 = icmp eq i32 %call188, 0
  br i1 %cmp189, label %if.then191, label %if.else214

if.then191:                                       ; preds = %lor.lhs.false187, %if.else183
  br label %do.body192

do.body192:                                       ; preds = %if.then191
  %104 = load i32, ptr %k, align 4
  %105 = load i32, ptr %n_settings.addr, align 4
  %sub193 = sub nsw i32 %105, 1
  %cmp194 = icmp eq i32 %104, %sub193
  br i1 %cmp194, label %if.then201, label %lor.lhs.false196

lor.lhs.false196:                                 ; preds = %do.body192
  %106 = load ptr, ptr %settings.addr, align 8
  %107 = load i32, ptr %k, align 4
  %add197 = add nsw i32 %107, 1
  %idxprom198 = sext i32 %add197 to i64
  %arrayidx199 = getelementptr inbounds ptr, ptr %106, i64 %idxprom198
  %108 = load ptr, ptr %arrayidx199, align 8
  %tobool200 = icmp ne ptr %108, null
  br i1 %tobool200, label %if.end204, label %if.then201

if.then201:                                       ; preds = %lor.lhs.false196, %do.body192
  %call202 = call ptr @gettext(ptr noundef @.str.138) #21
  %109 = load ptr, ptr %arg, align 8
  %call203 = call ptr @quote(ptr noundef %109)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call202, ptr noundef %call203) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end204:                                        ; preds = %lor.lhs.false196
  br label %do.end205

do.end205:                                        ; preds = %if.end204
  %110 = load i32, ptr %k, align 4
  %inc206 = add nsw i32 %110, 1
  store i32 %inc206, ptr %k, align 4
  %111 = load i8, ptr %checking.addr, align 1
  %tobool207 = trunc i8 %111 to i1
  br i1 %tobool207, label %if.then208, label %if.end209

if.then208:                                       ; preds = %do.end205
  br label %for.inc284

if.end209:                                        ; preds = %do.end205
  %112 = load ptr, ptr %settings.addr, align 8
  %113 = load i32, ptr %k, align 4
  %idxprom210 = sext i32 %113 to i64
  %arrayidx211 = getelementptr inbounds ptr, ptr %112, i64 %idxprom210
  %114 = load ptr, ptr %arrayidx211, align 8
  %call212 = call i64 @integer_arg(ptr noundef %114, i64 noundef 2147483647)
  %conv213 = trunc i64 %call212 to i32
  %115 = load ptr, ptr %device_name.addr, align 8
  call void @set_window_size(i32 noundef -1, i32 noundef %conv213, ptr noundef %115)
  br label %if.end279

if.else214:                                       ; preds = %lor.lhs.false187
  %116 = load ptr, ptr %arg, align 8
  %call215 = call i32 @strcmp(ptr noundef %116, ptr noundef @.str.146) #23
  %cmp216 = icmp eq i32 %call215, 0
  br i1 %cmp216, label %if.then218, label %if.else223

if.then218:                                       ; preds = %if.else214
  %117 = load i8, ptr %checking.addr, align 1
  %tobool219 = trunc i8 %117 to i1
  br i1 %tobool219, label %if.then220, label %if.end221

if.then220:                                       ; preds = %if.then218
  br label %for.inc284

if.end221:                                        ; preds = %if.then218
  %call222 = call i32 @screen_columns()
  store i32 %call222, ptr @max_col, align 4
  store i32 0, ptr @current_col, align 4
  %118 = load ptr, ptr %device_name.addr, align 8
  call void @display_window_size(i1 noundef zeroext false, ptr noundef %118)
  br label %if.end278

if.else223:                                       ; preds = %if.else214
  %119 = load ptr, ptr %arg, align 8
  %call224 = call i32 @strcmp(ptr noundef %119, ptr noundef @.str.147) #23
  %cmp225 = icmp eq i32 %call224, 0
  br i1 %cmp225, label %if.then227, label %if.else252

if.then227:                                       ; preds = %if.else223
  br label %do.body228

do.body228:                                       ; preds = %if.then227
  %120 = load i32, ptr %k, align 4
  %121 = load i32, ptr %n_settings.addr, align 4
  %sub229 = sub nsw i32 %121, 1
  %cmp230 = icmp eq i32 %120, %sub229
  br i1 %cmp230, label %if.then237, label %lor.lhs.false232

lor.lhs.false232:                                 ; preds = %do.body228
  %122 = load ptr, ptr %settings.addr, align 8
  %123 = load i32, ptr %k, align 4
  %add233 = add nsw i32 %123, 1
  %idxprom234 = sext i32 %add233 to i64
  %arrayidx235 = getelementptr inbounds ptr, ptr %122, i64 %idxprom234
  %124 = load ptr, ptr %arrayidx235, align 8
  %tobool236 = icmp ne ptr %124, null
  br i1 %tobool236, label %if.end240, label %if.then237

if.then237:                                       ; preds = %lor.lhs.false232, %do.body228
  %call238 = call ptr @gettext(ptr noundef @.str.138) #21
  %125 = load ptr, ptr %arg, align 8
  %call239 = call ptr @quote(ptr noundef %125)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call238, ptr noundef %call239) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end240:                                        ; preds = %lor.lhs.false232
  br label %do.end241

do.end241:                                        ; preds = %if.end240
  %126 = load i32, ptr %k, align 4
  %inc242 = add nsw i32 %126, 1
  store i32 %inc242, ptr %k, align 4
  %127 = load ptr, ptr %settings.addr, align 8
  %128 = load i32, ptr %k, align 4
  %idxprom243 = sext i32 %128 to i64
  %arrayidx244 = getelementptr inbounds ptr, ptr %127, i64 %idxprom243
  %129 = load ptr, ptr %arrayidx244, align 8
  %call245 = call i64 @integer_arg(ptr noundef %129, i64 noundef -1)
  store i64 %call245, ptr %value, align 8
  %130 = load i64, ptr %value, align 8
  %131 = load ptr, ptr %mode.addr, align 8
  %c_line = getelementptr inbounds %struct.termios, ptr %131, i32 0, i32 4
  %132 = zext i64 %130 to i65
  %133 = call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %132, i65 0)
  %134 = extractvalue { i65, i1 } %133, 1
  %135 = extractvalue { i65, i1 } %133, 0
  %136 = trunc i65 %135 to i8
  %137 = zext i8 %136 to i65
  %138 = icmp ne i65 %135, %137
  %139 = or i1 %134, %138
  store i8 %136, ptr %c_line, align 4
  br i1 %139, label %if.then246, label %if.end251

if.then246:                                       ; preds = %do.end241
  %call247 = call ptr @gettext(ptr noundef @.str.148) #21
  %140 = load ptr, ptr %settings.addr, align 8
  %141 = load i32, ptr %k, align 4
  %idxprom248 = sext i32 %141 to i64
  %arrayidx249 = getelementptr inbounds ptr, ptr %140, i64 %idxprom248
  %142 = load ptr, ptr %arrayidx249, align 8
  %call250 = call ptr @quote(ptr noundef %142)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 75, ptr noundef %call247, ptr noundef %call250) #24
  br label %if.end251

if.end251:                                        ; preds = %if.then246, %do.end241
  %143 = load ptr, ptr %require_set_attr.addr, align 8
  store i8 1, ptr %143, align 1
  br label %if.end277

if.else252:                                       ; preds = %if.else223
  %144 = load ptr, ptr %arg, align 8
  %call253 = call i32 @strcmp(ptr noundef %144, ptr noundef @.str.149) #23
  %cmp254 = icmp eq i32 %call253, 0
  br i1 %cmp254, label %if.then256, label %if.else261

if.then256:                                       ; preds = %if.else252
  %145 = load i8, ptr %checking.addr, align 1
  %tobool257 = trunc i8 %145 to i1
  br i1 %tobool257, label %if.then258, label %if.end259

if.then258:                                       ; preds = %if.then256
  br label %for.inc284

if.end259:                                        ; preds = %if.then256
  %call260 = call i32 @screen_columns()
  store i32 %call260, ptr @max_col, align 4
  %146 = load ptr, ptr %mode.addr, align 8
  call void @display_speed(ptr noundef %146, i1 noundef zeroext false)
  br label %if.end276

if.else261:                                       ; preds = %if.else252
  %147 = load ptr, ptr %arg, align 8
  %call262 = call i32 @string_to_baud(ptr noundef %147)
  %cmp263 = icmp ne i32 %call262, -1
  br i1 %cmp263, label %if.then265, label %if.else269

if.then265:                                       ; preds = %if.else261
  %148 = load ptr, ptr %arg, align 8
  %149 = load ptr, ptr %mode.addr, align 8
  call void @set_speed(i32 noundef 2, ptr noundef %148, ptr noundef %149)
  %150 = load i8, ptr %checking.addr, align 1
  %tobool266 = trunc i8 %150 to i1
  br i1 %tobool266, label %if.then267, label %if.end268

if.then267:                                       ; preds = %if.then265
  br label %for.inc284

if.end268:                                        ; preds = %if.then265
  %151 = load ptr, ptr %require_set_attr.addr, align 8
  store i8 1, ptr %151, align 1
  br label %if.end275

if.else269:                                       ; preds = %if.else261
  %152 = load ptr, ptr %arg, align 8
  %153 = load ptr, ptr %mode.addr, align 8
  %call270 = call zeroext i1 @recover_mode(ptr noundef %152, ptr noundef %153)
  br i1 %call270, label %if.end274, label %if.then271

if.then271:                                       ; preds = %if.else269
  %call272 = call ptr @gettext(ptr noundef @.str.137) #21
  %154 = load ptr, ptr %arg, align 8
  %call273 = call ptr @quote(ptr noundef %154)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call272, ptr noundef %call273) #24
  call void @usage(i32 noundef 1) #25
  unreachable

if.end274:                                        ; preds = %if.else269
  %155 = load ptr, ptr %require_set_attr.addr, align 8
  store i8 1, ptr %155, align 1
  br label %if.end275

if.end275:                                        ; preds = %if.end274, %if.end268
  br label %if.end276

if.end276:                                        ; preds = %if.end275, %if.end259
  br label %if.end277

if.end277:                                        ; preds = %if.end276, %if.end251
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %if.end221
  br label %if.end279

if.end279:                                        ; preds = %if.end278, %if.end209
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.end178
  br label %if.end281

if.end281:                                        ; preds = %if.end280, %if.end155
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %if.end119
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %lor.lhs.false81
  br label %for.inc284

for.inc284:                                       ; preds = %if.end283, %if.then267, %if.then258, %if.then220, %if.then208, %if.then177, %if.then154, %if.then118, %if.then8, %if.then
  %156 = load i32, ptr %k, align 4
  %inc285 = add nsw i32 %156, 1
  store i32 %inc285, ptr %k, align 4
  br label %for.cond, !llvm.loop !13

for.end286:                                       ; preds = %for.cond
  %157 = load i8, ptr %checking.addr, align 1
  %tobool287 = trunc i8 %157 to i1
  br i1 %tobool287, label %if.then288, label %if.end289

if.then288:                                       ; preds = %for.end286
  %158 = load ptr, ptr %mode.addr, align 8
  call void @check_speed(ptr noundef %158)
  br label %if.end289

if.end289:                                        ; preds = %if.then288, %for.end286
  ret void
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr @__errno_location() #7

; Function Attrs: nounwind
declare i32 @tcgetattr(i32 noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @screen_columns() #3 {
entry:
  %retval = alloca i32, align 4
  %win = alloca %struct.winsize, align 2
  %col_string = alloca ptr, align 8
  %n_columns = alloca i64, align 8
  %call = call i32 @get_win_size(i32 noundef 1, ptr noundef %win)
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %ws_col = getelementptr inbounds %struct.winsize, ptr %win, i32 0, i32 1
  %0 = load i16, ptr %ws_col, align 2
  %conv = zext i16 %0 to i32
  %cmp1 = icmp slt i32 0, %conv
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %ws_col3 = getelementptr inbounds %struct.winsize, ptr %win, i32 0, i32 1
  %1 = load i16, ptr %ws_col3, align 2
  %conv4 = zext i16 %1 to i32
  store i32 %conv4, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call5 = call ptr @getenv(ptr noundef @.str.307) #21
  store ptr %call5, ptr %col_string, align 8
  %2 = load ptr, ptr %col_string, align 8
  %cmp6 = icmp ne ptr %2, null
  br i1 %cmp6, label %land.lhs.true8, label %if.then18

land.lhs.true8:                                   ; preds = %if.end
  %3 = load ptr, ptr %col_string, align 8
  %call9 = call i32 @xstrtol(ptr noundef %3, ptr noundef null, i32 noundef 0, ptr noundef %n_columns, ptr noundef @.str.96)
  %cmp10 = icmp eq i32 %call9, 0
  br i1 %cmp10, label %land.lhs.true12, label %if.then18

land.lhs.true12:                                  ; preds = %land.lhs.true8
  %4 = load i64, ptr %n_columns, align 8
  %cmp13 = icmp slt i64 0, %4
  br i1 %cmp13, label %land.lhs.true15, label %if.then18

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %5 = load i64, ptr %n_columns, align 8
  %cmp16 = icmp sle i64 %5, 2147483647
  br i1 %cmp16, label %if.end19, label %if.then18

if.then18:                                        ; preds = %land.lhs.true15, %land.lhs.true12, %land.lhs.true8, %if.end
  store i64 80, ptr %n_columns, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %land.lhs.true15
  %6 = load i64, ptr %n_columns, align 8
  %conv20 = trunc i64 %6 to i32
  store i32 %conv20, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end19, %if.then
  %7 = load i32, ptr %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @display_settings(i32 noundef %output_type, ptr noundef %mode, ptr noundef %device_name) #3 {
entry:
  %output_type.addr = alloca i32, align 4
  %mode.addr = alloca ptr, align 8
  %device_name.addr = alloca ptr, align 8
  store i32 %output_type, ptr %output_type.addr, align 4
  store ptr %mode, ptr %mode.addr, align 8
  store ptr %device_name, ptr %device_name.addr, align 8
  %0 = load i32, ptr %output_type.addr, align 4
  switch i32 %0, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  %1 = load ptr, ptr %mode.addr, align 8
  call void @display_changed(ptr noundef %1)
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %2 = load ptr, ptr %mode.addr, align 8
  %3 = load ptr, ptr %device_name.addr, align 8
  call void @display_all(ptr noundef %2, ptr noundef %3)
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  %4 = load ptr, ptr %mode.addr, align 8
  call void @display_recoverable(ptr noundef %4)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb2, %sw.bb1, %sw.bb, %entry
  ret void
}

; Function Attrs: nounwind
declare i32 @tcsetattr(i32 noundef, i32 noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @eq_mode(ptr noundef %mode1, ptr noundef %mode2) #3 {
entry:
  %mode1.addr = alloca ptr, align 8
  %mode2.addr = alloca ptr, align 8
  store ptr %mode1, ptr %mode1.addr, align 8
  store ptr %mode2, ptr %mode2.addr, align 8
  %0 = load ptr, ptr %mode1.addr, align 8
  %c_iflag = getelementptr inbounds %struct.termios, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %c_iflag, align 4
  %2 = load ptr, ptr %mode2.addr, align 8
  %c_iflag1 = getelementptr inbounds %struct.termios, ptr %2, i32 0, i32 0
  %3 = load i32, ptr %c_iflag1, align 4
  %cmp = icmp eq i32 %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load ptr, ptr %mode1.addr, align 8
  %c_oflag = getelementptr inbounds %struct.termios, ptr %4, i32 0, i32 1
  %5 = load i32, ptr %c_oflag, align 4
  %6 = load ptr, ptr %mode2.addr, align 8
  %c_oflag2 = getelementptr inbounds %struct.termios, ptr %6, i32 0, i32 1
  %7 = load i32, ptr %c_oflag2, align 4
  %cmp3 = icmp eq i32 %5, %7
  br i1 %cmp3, label %land.lhs.true4, label %land.end

land.lhs.true4:                                   ; preds = %land.lhs.true
  %8 = load ptr, ptr %mode1.addr, align 8
  %c_cflag = getelementptr inbounds %struct.termios, ptr %8, i32 0, i32 2
  %9 = load i32, ptr %c_cflag, align 4
  %10 = load ptr, ptr %mode2.addr, align 8
  %c_cflag5 = getelementptr inbounds %struct.termios, ptr %10, i32 0, i32 2
  %11 = load i32, ptr %c_cflag5, align 4
  %cmp6 = icmp eq i32 %9, %11
  br i1 %cmp6, label %land.lhs.true7, label %land.end

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %12 = load ptr, ptr %mode1.addr, align 8
  %c_lflag = getelementptr inbounds %struct.termios, ptr %12, i32 0, i32 3
  %13 = load i32, ptr %c_lflag, align 4
  %14 = load ptr, ptr %mode2.addr, align 8
  %c_lflag8 = getelementptr inbounds %struct.termios, ptr %14, i32 0, i32 3
  %15 = load i32, ptr %c_lflag8, align 4
  %cmp9 = icmp eq i32 %13, %15
  br i1 %cmp9, label %land.lhs.true10, label %land.end

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %16 = load ptr, ptr %mode1.addr, align 8
  %c_line = getelementptr inbounds %struct.termios, ptr %16, i32 0, i32 4
  %17 = load i8, ptr %c_line, align 4
  %conv = zext i8 %17 to i32
  %18 = load ptr, ptr %mode2.addr, align 8
  %c_line11 = getelementptr inbounds %struct.termios, ptr %18, i32 0, i32 4
  %19 = load i8, ptr %c_line11, align 4
  %conv12 = zext i8 %19 to i32
  %cmp13 = icmp eq i32 %conv, %conv12
  br i1 %cmp13, label %land.lhs.true15, label %land.end

land.lhs.true15:                                  ; preds = %land.lhs.true10
  %20 = load ptr, ptr %mode1.addr, align 8
  %c_cc = getelementptr inbounds %struct.termios, ptr %20, i32 0, i32 5
  %arraydecay = getelementptr inbounds [32 x i8], ptr %c_cc, i64 0, i64 0
  %21 = load ptr, ptr %mode2.addr, align 8
  %c_cc16 = getelementptr inbounds %struct.termios, ptr %21, i32 0, i32 5
  %arraydecay17 = getelementptr inbounds [32 x i8], ptr %c_cc16, i64 0, i64 0
  %call = call i32 @memcmp(ptr noundef %arraydecay, ptr noundef %arraydecay17, i64 noundef 32) #23
  %cmp18 = icmp eq i32 %call, 0
  br i1 %cmp18, label %land.lhs.true20, label %land.end

land.lhs.true20:                                  ; preds = %land.lhs.true15
  %22 = load ptr, ptr %mode1.addr, align 8
  %call21 = call i32 @cfgetispeed(ptr noundef %22) #21
  %23 = load ptr, ptr %mode2.addr, align 8
  %call22 = call i32 @cfgetispeed(ptr noundef %23) #21
  %cmp23 = icmp eq i32 %call21, %call22
  br i1 %cmp23, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true20
  %24 = load ptr, ptr %mode1.addr, align 8
  %call25 = call i32 @cfgetospeed(ptr noundef %24) #21
  %25 = load ptr, ptr %mode2.addr, align 8
  %call26 = call i32 @cfgetospeed(ptr noundef %25) #21
  %cmp27 = icmp eq i32 %call25, %call26
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true20, %land.lhs.true15, %land.lhs.true10, %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %entry
  %26 = phi i1 [ false, %land.lhs.true20 ], [ false, %land.lhs.true15 ], [ false, %land.lhs.true10 ], [ false, %land.lhs.true7 ], [ false, %land.lhs.true4 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp27, %land.rhs ]
  ret i1 %26
}

; Function Attrs: nounwind willreturn memory(read)
declare i32 @memcmp(ptr noundef, ptr noundef, i64 noundef) #6

; Function Attrs: nounwind
declare i32 @cfgetispeed(ptr noundef) #1

; Function Attrs: nounwind
declare i32 @cfgetospeed(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @display_changed(ptr noundef %mode) #3 {
entry:
  %mode.addr = alloca ptr, align 8
  %i = alloca i32, align 4
  %empty_line = alloca i8, align 1
  %bitsp = alloca ptr, align 8
  %mask = alloca i64, align 8
  %prev_type = alloca i32, align 4
  store ptr %mode, ptr %mode.addr, align 8
  store i32 0, ptr %prev_type, align 4
  %0 = load ptr, ptr %mode.addr, align 8
  call void @display_speed(ptr noundef %0, i1 noundef zeroext true)
  %1 = load ptr, ptr %mode.addr, align 8
  %c_line = getelementptr inbounds %struct.termios, ptr %1, i32 0, i32 4
  %2 = load i8, ptr %c_line, align 4
  %conv = zext i8 %2 to i32
  call void (ptr, ...) @wrapf(ptr noundef @.str.308, i32 noundef %conv)
  %call = call i32 @putchar_unlocked(i32 noundef 10)
  store i32 0, ptr @current_col, align 4
  store i8 1, ptr %empty_line, align 1
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, ptr %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom
  %name = getelementptr inbounds %struct.control_info, ptr %arrayidx, i32 0, i32 0
  %4 = load ptr, ptr %name, align 8
  %call1 = call i32 @strcmp(ptr noundef %4, ptr noundef @.str.255) #23
  %cmp = icmp eq i32 %call1, 0
  %lnot = xor i1 %cmp, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load ptr, ptr %mode.addr, align 8
  %c_cc = getelementptr inbounds %struct.termios, ptr %5, i32 0, i32 5
  %6 = load i32, ptr %i, align 4
  %idxprom3 = sext i32 %6 to i64
  %arrayidx4 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom3
  %offset = getelementptr inbounds %struct.control_info, ptr %arrayidx4, i32 0, i32 2
  %7 = load i64, ptr %offset, align 8
  %arrayidx5 = getelementptr inbounds [32 x i8], ptr %c_cc, i64 0, i64 %7
  %8 = load i8, ptr %arrayidx5, align 1
  %conv6 = zext i8 %8 to i32
  %9 = load i32, ptr %i, align 4
  %idxprom7 = sext i32 %9 to i64
  %arrayidx8 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom7
  %saneval = getelementptr inbounds %struct.control_info, ptr %arrayidx8, i32 0, i32 1
  %10 = load i8, ptr %saneval, align 8
  %conv9 = zext i8 %10 to i32
  %cmp10 = icmp eq i32 %conv6, %conv9
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %11 = load i32, ptr %i, align 4
  %idxprom12 = sext i32 %11 to i64
  %arrayidx13 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom12
  %name14 = getelementptr inbounds %struct.control_info, ptr %arrayidx13, i32 0, i32 0
  %12 = load ptr, ptr %name14, align 8
  %call15 = call i32 @strcmp(ptr noundef %12, ptr noundef @.str.253) #23
  %cmp16 = icmp eq i32 %call15, 0
  br i1 %cmp16, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end
  br label %for.inc

if.end19:                                         ; preds = %if.end
  store i8 0, ptr %empty_line, align 1
  %13 = load i32, ptr %i, align 4
  %idxprom20 = sext i32 %13 to i64
  %arrayidx21 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom20
  %name22 = getelementptr inbounds %struct.control_info, ptr %arrayidx21, i32 0, i32 0
  %14 = load ptr, ptr %name22, align 8
  %15 = load ptr, ptr %mode.addr, align 8
  %c_cc23 = getelementptr inbounds %struct.termios, ptr %15, i32 0, i32 5
  %16 = load i32, ptr %i, align 4
  %idxprom24 = sext i32 %16 to i64
  %arrayidx25 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom24
  %offset26 = getelementptr inbounds %struct.control_info, ptr %arrayidx25, i32 0, i32 2
  %17 = load i64, ptr %offset26, align 8
  %arrayidx27 = getelementptr inbounds [32 x i8], ptr %c_cc23, i64 0, i64 %17
  %18 = load i8, ptr %arrayidx27, align 1
  %call28 = call ptr @visible(i8 noundef zeroext %18)
  call void (ptr, ...) @wrapf(ptr noundef @.str.309, ptr noundef %14, ptr noundef %call28)
  br label %for.inc

for.inc:                                          ; preds = %if.end19, %if.then18, %if.then
  %19 = load i32, ptr %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !14

for.end:                                          ; preds = %for.cond
  %20 = load ptr, ptr %mode.addr, align 8
  %c_lflag = getelementptr inbounds %struct.termios, ptr %20, i32 0, i32 3
  %21 = load i32, ptr %c_lflag, align 4
  %and = and i32 %21, 2
  %cmp29 = icmp eq i32 %and, 0
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %for.end
  %22 = load ptr, ptr %mode.addr, align 8
  %c_cc32 = getelementptr inbounds %struct.termios, ptr %22, i32 0, i32 5
  %arrayidx33 = getelementptr inbounds [32 x i8], ptr %c_cc32, i64 0, i64 6
  %23 = load i8, ptr %arrayidx33, align 1
  %conv34 = zext i8 %23 to i64
  %24 = load ptr, ptr %mode.addr, align 8
  %c_cc35 = getelementptr inbounds %struct.termios, ptr %24, i32 0, i32 5
  %arrayidx36 = getelementptr inbounds [32 x i8], ptr %c_cc35, i64 0, i64 5
  %25 = load i8, ptr %arrayidx36, align 1
  %conv37 = zext i8 %25 to i64
  call void (ptr, ...) @wrapf(ptr noundef @.str.310, i64 noundef %conv34, i64 noundef %conv37)
  br label %if.end41

if.else:                                          ; preds = %for.end
  %26 = load i8, ptr %empty_line, align 1
  %tobool = trunc i8 %26 to i1
  br i1 %tobool, label %if.end40, label %if.then38

if.then38:                                        ; preds = %if.else
  %call39 = call i32 @putchar_unlocked(i32 noundef 10)
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.else
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then31
  store i32 0, ptr @current_col, align 4
  store i8 1, ptr %empty_line, align 1
  store i32 0, ptr %i, align 4
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc115, %if.end41
  %27 = load i32, ptr %i, align 4
  %idxprom43 = sext i32 %27 to i64
  %arrayidx44 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom43
  %name45 = getelementptr inbounds %struct.mode_info, ptr %arrayidx44, i32 0, i32 0
  %28 = load ptr, ptr %name45, align 16
  %cmp46 = icmp ne ptr %28, null
  br i1 %cmp46, label %for.body48, label %for.end117

for.body48:                                       ; preds = %for.cond42
  %29 = load i32, ptr %i, align 4
  %idxprom49 = sext i32 %29 to i64
  %arrayidx50 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom49
  %flags = getelementptr inbounds %struct.mode_info, ptr %arrayidx50, i32 0, i32 2
  %30 = load i8, ptr %flags, align 4
  %conv51 = sext i8 %30 to i32
  %and52 = and i32 %conv51, 8
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %for.body48
  br label %for.inc115

if.end55:                                         ; preds = %for.body48
  %31 = load i32, ptr %i, align 4
  %idxprom56 = sext i32 %31 to i64
  %arrayidx57 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom56
  %type = getelementptr inbounds %struct.mode_info, ptr %arrayidx57, i32 0, i32 1
  %32 = load i32, ptr %type, align 8
  %33 = load i32, ptr %prev_type, align 4
  %cmp58 = icmp ne i32 %32, %33
  br i1 %cmp58, label %if.then60, label %if.end68

if.then60:                                        ; preds = %if.end55
  %34 = load i8, ptr %empty_line, align 1
  %tobool61 = trunc i8 %34 to i1
  br i1 %tobool61, label %if.end64, label %if.then62

if.then62:                                        ; preds = %if.then60
  %call63 = call i32 @putchar_unlocked(i32 noundef 10)
  store i32 0, ptr @current_col, align 4
  store i8 1, ptr %empty_line, align 1
  br label %if.end64

if.end64:                                         ; preds = %if.then62, %if.then60
  %35 = load i32, ptr %i, align 4
  %idxprom65 = sext i32 %35 to i64
  %arrayidx66 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom65
  %type67 = getelementptr inbounds %struct.mode_info, ptr %arrayidx66, i32 0, i32 1
  %36 = load i32, ptr %type67, align 8
  store i32 %36, ptr %prev_type, align 4
  br label %if.end68

if.end68:                                         ; preds = %if.end64, %if.end55
  %37 = load i32, ptr %i, align 4
  %idxprom69 = sext i32 %37 to i64
  %arrayidx70 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom69
  %type71 = getelementptr inbounds %struct.mode_info, ptr %arrayidx70, i32 0, i32 1
  %38 = load i32, ptr %type71, align 8
  %39 = load ptr, ptr %mode.addr, align 8
  %call72 = call ptr @mode_type_flag(i32 noundef %38, ptr noundef %39) #23
  store ptr %call72, ptr %bitsp, align 8
  %40 = load i32, ptr %i, align 4
  %idxprom73 = sext i32 %40 to i64
  %arrayidx74 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom73
  %mask75 = getelementptr inbounds %struct.mode_info, ptr %arrayidx74, i32 0, i32 4
  %41 = load i64, ptr %mask75, align 8
  %tobool76 = icmp ne i64 %41, 0
  br i1 %tobool76, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end68
  %42 = load i32, ptr %i, align 4
  %idxprom77 = sext i32 %42 to i64
  %arrayidx78 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom77
  %mask79 = getelementptr inbounds %struct.mode_info, ptr %arrayidx78, i32 0, i32 4
  %43 = load i64, ptr %mask79, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end68
  %44 = load i32, ptr %i, align 4
  %idxprom80 = sext i32 %44 to i64
  %arrayidx81 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom80
  %bits = getelementptr inbounds %struct.mode_info, ptr %arrayidx81, i32 0, i32 3
  %45 = load i64, ptr %bits, align 16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %43, %cond.true ], [ %45, %cond.false ]
  store i64 %cond, ptr %mask, align 8
  %46 = load ptr, ptr %bitsp, align 8
  %47 = load i32, ptr %46, align 4
  %conv82 = zext i32 %47 to i64
  %48 = load i64, ptr %mask, align 8
  %and83 = and i64 %conv82, %48
  %49 = load i32, ptr %i, align 4
  %idxprom84 = sext i32 %49 to i64
  %arrayidx85 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom84
  %bits86 = getelementptr inbounds %struct.mode_info, ptr %arrayidx85, i32 0, i32 3
  %50 = load i64, ptr %bits86, align 16
  %cmp87 = icmp eq i64 %and83, %50
  br i1 %cmp87, label %if.then89, label %if.else101

if.then89:                                        ; preds = %cond.end
  %51 = load i32, ptr %i, align 4
  %idxprom90 = sext i32 %51 to i64
  %arrayidx91 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom90
  %flags92 = getelementptr inbounds %struct.mode_info, ptr %arrayidx91, i32 0, i32 2
  %52 = load i8, ptr %flags92, align 4
  %conv93 = sext i8 %52 to i32
  %and94 = and i32 %conv93, 2
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %if.then96, label %if.end100

if.then96:                                        ; preds = %if.then89
  %53 = load i32, ptr %i, align 4
  %idxprom97 = sext i32 %53 to i64
  %arrayidx98 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom97
  %name99 = getelementptr inbounds %struct.mode_info, ptr %arrayidx98, i32 0, i32 0
  %54 = load ptr, ptr %name99, align 16
  call void (ptr, ...) @wrapf(ptr noundef @.str.108, ptr noundef %54)
  store i8 0, ptr %empty_line, align 1
  br label %if.end100

if.end100:                                        ; preds = %if.then96, %if.then89
  br label %if.end114

if.else101:                                       ; preds = %cond.end
  %55 = load i32, ptr %i, align 4
  %idxprom102 = sext i32 %55 to i64
  %arrayidx103 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom102
  %flags104 = getelementptr inbounds %struct.mode_info, ptr %arrayidx103, i32 0, i32 2
  %56 = load i8, ptr %flags104, align 4
  %conv105 = sext i8 %56 to i32
  %and106 = and i32 %conv105, 5
  %cmp107 = icmp eq i32 %and106, 5
  br i1 %cmp107, label %if.then109, label %if.end113

if.then109:                                       ; preds = %if.else101
  %57 = load i32, ptr %i, align 4
  %idxprom110 = sext i32 %57 to i64
  %arrayidx111 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom110
  %name112 = getelementptr inbounds %struct.mode_info, ptr %arrayidx111, i32 0, i32 0
  %58 = load ptr, ptr %name112, align 16
  call void (ptr, ...) @wrapf(ptr noundef @.str.311, ptr noundef %58)
  store i8 0, ptr %empty_line, align 1
  br label %if.end113

if.end113:                                        ; preds = %if.then109, %if.else101
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.end100
  br label %for.inc115

for.inc115:                                       ; preds = %if.end114, %if.then54
  %59 = load i32, ptr %i, align 4
  %inc116 = add nsw i32 %59, 1
  store i32 %inc116, ptr %i, align 4
  br label %for.cond42, !llvm.loop !15

for.end117:                                       ; preds = %for.cond42
  %60 = load i8, ptr %empty_line, align 1
  %tobool118 = trunc i8 %60 to i1
  br i1 %tobool118, label %if.end121, label %if.then119

if.then119:                                       ; preds = %for.end117
  %call120 = call i32 @putchar_unlocked(i32 noundef 10)
  br label %if.end121

if.end121:                                        ; preds = %if.then119, %for.end117
  store i32 0, ptr @current_col, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @display_all(ptr noundef %mode, ptr noundef %device_name) #3 {
entry:
  %mode.addr = alloca ptr, align 8
  %device_name.addr = alloca ptr, align 8
  %i = alloca i32, align 4
  %bitsp = alloca ptr, align 8
  %mask = alloca i64, align 8
  %prev_type = alloca i32, align 4
  store ptr %mode, ptr %mode.addr, align 8
  store ptr %device_name, ptr %device_name.addr, align 8
  store i32 0, ptr %prev_type, align 4
  %0 = load ptr, ptr %mode.addr, align 8
  call void @display_speed(ptr noundef %0, i1 noundef zeroext true)
  %1 = load ptr, ptr %device_name.addr, align 8
  call void @display_window_size(i1 noundef zeroext true, ptr noundef %1)
  %2 = load ptr, ptr %mode.addr, align 8
  %c_line = getelementptr inbounds %struct.termios, ptr %2, i32 0, i32 4
  %3 = load i8, ptr %c_line, align 4
  %conv = zext i8 %3 to i32
  call void (ptr, ...) @wrapf(ptr noundef @.str.308, i32 noundef %conv)
  %call = call i32 @putchar_unlocked(i32 noundef 10)
  store i32 0, ptr @current_col, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, ptr %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom
  %name = getelementptr inbounds %struct.control_info, ptr %arrayidx, i32 0, i32 0
  %5 = load ptr, ptr %name, align 8
  %call1 = call i32 @strcmp(ptr noundef %5, ptr noundef @.str.255) #23
  %cmp = icmp eq i32 %call1, 0
  %lnot = xor i1 %cmp, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, ptr %i, align 4
  %idxprom3 = sext i32 %6 to i64
  %arrayidx4 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom3
  %name5 = getelementptr inbounds %struct.control_info, ptr %arrayidx4, i32 0, i32 0
  %7 = load ptr, ptr %name5, align 8
  %call6 = call i32 @strcmp(ptr noundef %7, ptr noundef @.str.253) #23
  %cmp7 = icmp eq i32 %call6, 0
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %8 = load i32, ptr %i, align 4
  %idxprom9 = sext i32 %8 to i64
  %arrayidx10 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom9
  %name11 = getelementptr inbounds %struct.control_info, ptr %arrayidx10, i32 0, i32 0
  %9 = load ptr, ptr %name11, align 8
  %10 = load ptr, ptr %mode.addr, align 8
  %c_cc = getelementptr inbounds %struct.termios, ptr %10, i32 0, i32 5
  %11 = load i32, ptr %i, align 4
  %idxprom12 = sext i32 %11 to i64
  %arrayidx13 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom12
  %offset = getelementptr inbounds %struct.control_info, ptr %arrayidx13, i32 0, i32 2
  %12 = load i64, ptr %offset, align 8
  %arrayidx14 = getelementptr inbounds [32 x i8], ptr %c_cc, i64 0, i64 %12
  %13 = load i8, ptr %arrayidx14, align 1
  %call15 = call ptr @visible(i8 noundef zeroext %13)
  call void (ptr, ...) @wrapf(ptr noundef @.str.309, ptr noundef %9, ptr noundef %call15)
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %14 = load i32, ptr %i, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !16

for.end:                                          ; preds = %for.cond
  %15 = load ptr, ptr %mode.addr, align 8
  %c_cc16 = getelementptr inbounds %struct.termios, ptr %15, i32 0, i32 5
  %arrayidx17 = getelementptr inbounds [32 x i8], ptr %c_cc16, i64 0, i64 6
  %16 = load i8, ptr %arrayidx17, align 1
  %conv18 = zext i8 %16 to i64
  %17 = load ptr, ptr %mode.addr, align 8
  %c_cc19 = getelementptr inbounds %struct.termios, ptr %17, i32 0, i32 5
  %arrayidx20 = getelementptr inbounds [32 x i8], ptr %c_cc19, i64 0, i64 5
  %18 = load i8, ptr %arrayidx20, align 1
  %conv21 = zext i8 %18 to i64
  call void (ptr, ...) @wrapf(ptr noundef @.str.313, i64 noundef %conv18, i64 noundef %conv21)
  %19 = load i32, ptr @current_col, align 4
  %cmp22 = icmp ne i32 %19, 0
  br i1 %cmp22, label %if.then24, label %if.end26

if.then24:                                        ; preds = %for.end
  %call25 = call i32 @putchar_unlocked(i32 noundef 10)
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %for.end
  store i32 0, ptr @current_col, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc85, %if.end26
  %20 = load i32, ptr %i, align 4
  %idxprom28 = sext i32 %20 to i64
  %arrayidx29 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom28
  %name30 = getelementptr inbounds %struct.mode_info, ptr %arrayidx29, i32 0, i32 0
  %21 = load ptr, ptr %name30, align 16
  %cmp31 = icmp ne ptr %21, null
  br i1 %cmp31, label %for.body33, label %for.end87

for.body33:                                       ; preds = %for.cond27
  %22 = load i32, ptr %i, align 4
  %idxprom34 = sext i32 %22 to i64
  %arrayidx35 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom34
  %flags = getelementptr inbounds %struct.mode_info, ptr %arrayidx35, i32 0, i32 2
  %23 = load i8, ptr %flags, align 4
  %conv36 = sext i8 %23 to i32
  %and = and i32 %conv36, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.body33
  br label %for.inc85

if.end38:                                         ; preds = %for.body33
  %24 = load i32, ptr %i, align 4
  %idxprom39 = sext i32 %24 to i64
  %arrayidx40 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom39
  %type = getelementptr inbounds %struct.mode_info, ptr %arrayidx40, i32 0, i32 1
  %25 = load i32, ptr %type, align 8
  %26 = load i32, ptr %prev_type, align 4
  %cmp41 = icmp ne i32 %25, %26
  br i1 %cmp41, label %if.then43, label %if.end48

if.then43:                                        ; preds = %if.end38
  %call44 = call i32 @putchar_unlocked(i32 noundef 10)
  store i32 0, ptr @current_col, align 4
  %27 = load i32, ptr %i, align 4
  %idxprom45 = sext i32 %27 to i64
  %arrayidx46 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom45
  %type47 = getelementptr inbounds %struct.mode_info, ptr %arrayidx46, i32 0, i32 1
  %28 = load i32, ptr %type47, align 8
  store i32 %28, ptr %prev_type, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.then43, %if.end38
  %29 = load i32, ptr %i, align 4
  %idxprom49 = sext i32 %29 to i64
  %arrayidx50 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom49
  %type51 = getelementptr inbounds %struct.mode_info, ptr %arrayidx50, i32 0, i32 1
  %30 = load i32, ptr %type51, align 8
  %31 = load ptr, ptr %mode.addr, align 8
  %call52 = call ptr @mode_type_flag(i32 noundef %30, ptr noundef %31) #23
  store ptr %call52, ptr %bitsp, align 8
  %32 = load i32, ptr %i, align 4
  %idxprom53 = sext i32 %32 to i64
  %arrayidx54 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom53
  %mask55 = getelementptr inbounds %struct.mode_info, ptr %arrayidx54, i32 0, i32 4
  %33 = load i64, ptr %mask55, align 8
  %tobool56 = icmp ne i64 %33, 0
  br i1 %tobool56, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end48
  %34 = load i32, ptr %i, align 4
  %idxprom57 = sext i32 %34 to i64
  %arrayidx58 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom57
  %mask59 = getelementptr inbounds %struct.mode_info, ptr %arrayidx58, i32 0, i32 4
  %35 = load i64, ptr %mask59, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end48
  %36 = load i32, ptr %i, align 4
  %idxprom60 = sext i32 %36 to i64
  %arrayidx61 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom60
  %bits = getelementptr inbounds %struct.mode_info, ptr %arrayidx61, i32 0, i32 3
  %37 = load i64, ptr %bits, align 16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %35, %cond.true ], [ %37, %cond.false ]
  store i64 %cond, ptr %mask, align 8
  %38 = load ptr, ptr %bitsp, align 8
  %39 = load i32, ptr %38, align 4
  %conv62 = zext i32 %39 to i64
  %40 = load i64, ptr %mask, align 8
  %and63 = and i64 %conv62, %40
  %41 = load i32, ptr %i, align 4
  %idxprom64 = sext i32 %41 to i64
  %arrayidx65 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom64
  %bits66 = getelementptr inbounds %struct.mode_info, ptr %arrayidx65, i32 0, i32 3
  %42 = load i64, ptr %bits66, align 16
  %cmp67 = icmp eq i64 %and63, %42
  br i1 %cmp67, label %if.then69, label %if.else

if.then69:                                        ; preds = %cond.end
  %43 = load i32, ptr %i, align 4
  %idxprom70 = sext i32 %43 to i64
  %arrayidx71 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom70
  %name72 = getelementptr inbounds %struct.mode_info, ptr %arrayidx71, i32 0, i32 0
  %44 = load ptr, ptr %name72, align 16
  call void (ptr, ...) @wrapf(ptr noundef @.str.108, ptr noundef %44)
  br label %if.end84

if.else:                                          ; preds = %cond.end
  %45 = load i32, ptr %i, align 4
  %idxprom73 = sext i32 %45 to i64
  %arrayidx74 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom73
  %flags75 = getelementptr inbounds %struct.mode_info, ptr %arrayidx74, i32 0, i32 2
  %46 = load i8, ptr %flags75, align 4
  %conv76 = sext i8 %46 to i32
  %and77 = and i32 %conv76, 4
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.then79, label %if.end83

if.then79:                                        ; preds = %if.else
  %47 = load i32, ptr %i, align 4
  %idxprom80 = sext i32 %47 to i64
  %arrayidx81 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom80
  %name82 = getelementptr inbounds %struct.mode_info, ptr %arrayidx81, i32 0, i32 0
  %48 = load ptr, ptr %name82, align 16
  call void (ptr, ...) @wrapf(ptr noundef @.str.311, ptr noundef %48)
  br label %if.end83

if.end83:                                         ; preds = %if.then79, %if.else
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then69
  br label %for.inc85

for.inc85:                                        ; preds = %if.end84, %if.then37
  %49 = load i32, ptr %i, align 4
  %inc86 = add nsw i32 %49, 1
  store i32 %inc86, ptr %i, align 4
  br label %for.cond27, !llvm.loop !17

for.end87:                                        ; preds = %for.cond27
  %call88 = call i32 @putchar_unlocked(i32 noundef 10)
  store i32 0, ptr @current_col, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @display_recoverable(ptr noundef %mode) #3 {
entry:
  %mode.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load ptr, ptr %mode.addr, align 8
  %c_iflag = getelementptr inbounds %struct.termios, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %c_iflag, align 4
  %conv = zext i32 %1 to i64
  %2 = load ptr, ptr %mode.addr, align 8
  %c_oflag = getelementptr inbounds %struct.termios, ptr %2, i32 0, i32 1
  %3 = load i32, ptr %c_oflag, align 4
  %conv1 = zext i32 %3 to i64
  %4 = load ptr, ptr %mode.addr, align 8
  %c_cflag = getelementptr inbounds %struct.termios, ptr %4, i32 0, i32 2
  %5 = load i32, ptr %c_cflag, align 4
  %conv2 = zext i32 %5 to i64
  %6 = load ptr, ptr %mode.addr, align 8
  %c_lflag = getelementptr inbounds %struct.termios, ptr %6, i32 0, i32 3
  %7 = load i32, ptr %c_lflag, align 4
  %conv3 = zext i32 %7 to i64
  %call = call i32 (ptr, ...) @printf(ptr noundef @.str.314, i64 noundef %conv, i64 noundef %conv1, i64 noundef %conv2, i64 noundef %conv3)
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i64, ptr %i, align 8
  %cmp = icmp ult i64 %8, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load ptr, ptr %mode.addr, align 8
  %c_cc = getelementptr inbounds %struct.termios, ptr %9, i32 0, i32 5
  %10 = load i64, ptr %i, align 8
  %arrayidx = getelementptr inbounds [32 x i8], ptr %c_cc, i64 0, i64 %10
  %11 = load i8, ptr %arrayidx, align 1
  %conv5 = zext i8 %11 to i64
  %call6 = call i32 (ptr, ...) @printf(ptr noundef @.str.315, i64 noundef %conv5)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i64, ptr %i, align 8
  %inc = add i64 %12, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !18

for.end:                                          ; preds = %for.cond
  %call7 = call i32 @putchar_unlocked(i32 noundef 10)
  ret void
}

declare i32 @putchar_unlocked(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @display_speed(ptr noundef %mode, i1 noundef zeroext %fancy) #3 {
entry:
  %mode.addr = alloca ptr, align 8
  %fancy.addr = alloca i8, align 1
  store ptr %mode, ptr %mode.addr, align 8
  %frombool = zext i1 %fancy to i8
  store i8 %frombool, ptr %fancy.addr, align 1
  %0 = load ptr, ptr %mode.addr, align 8
  %call = call i32 @cfgetispeed(ptr noundef %0) #21
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load ptr, ptr %mode.addr, align 8
  %call1 = call i32 @cfgetispeed(ptr noundef %1) #21
  %2 = load ptr, ptr %mode.addr, align 8
  %call2 = call i32 @cfgetospeed(ptr noundef %2) #21
  %cmp3 = icmp eq i32 %call1, %call2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i8, ptr %fancy.addr, align 1
  %tobool = trunc i8 %3 to i1
  %4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, ptr @.str.302, ptr @.str.303
  %5 = load ptr, ptr %mode.addr, align 8
  %call4 = call i32 @cfgetospeed(ptr noundef %5) #21
  %call5 = call i64 @baud_to_value(i32 noundef %call4)
  call void (ptr, ...) @wrapf(ptr noundef %cond, i64 noundef %call5)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %6 = load i8, ptr %fancy.addr, align 1
  %tobool6 = trunc i8 %6 to i1
  %7 = zext i1 %tobool6 to i64
  %cond7 = select i1 %tobool6, ptr @.str.304, ptr @.str.305
  %8 = load ptr, ptr %mode.addr, align 8
  %call8 = call i32 @cfgetispeed(ptr noundef %8) #21
  %call9 = call i64 @baud_to_value(i32 noundef %call8)
  %9 = load ptr, ptr %mode.addr, align 8
  %call10 = call i32 @cfgetospeed(ptr noundef %9) #21
  %call11 = call i64 @baud_to_value(i32 noundef %call10)
  call void (ptr, ...) @wrapf(ptr noundef %cond7, i64 noundef %call9, i64 noundef %call11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load i8, ptr %fancy.addr, align 1
  %tobool12 = trunc i8 %10 to i1
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end
  store i32 0, ptr @current_col, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @display_window_size(i1 noundef zeroext %fancy, ptr noundef %device_name) #3 {
entry:
  %fancy.addr = alloca i8, align 1
  %device_name.addr = alloca ptr, align 8
  %win = alloca %struct.winsize, align 2
  %frombool = zext i1 %fancy to i8
  store i8 %frombool, ptr %fancy.addr, align 1
  store ptr %device_name, ptr %device_name.addr, align 8
  %call = call i32 @get_win_size(i32 noundef 0, ptr noundef %win)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call1 = call ptr @__errno_location() #26
  %0 = load i32, ptr %call1, align 4
  %cmp = icmp ne i32 %0, 22
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %call3 = call ptr @__errno_location() #26
  %1 = load i32, ptr %call3, align 4
  %2 = load ptr, ptr %device_name.addr, align 8
  %call4 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %2)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %1, ptr noundef @.str.108, ptr noundef %call4) #24
  unreachable

if.end:                                           ; preds = %if.then
  %3 = load i8, ptr %fancy.addr, align 1
  %tobool5 = trunc i8 %3 to i1
  br i1 %tobool5, label %if.end9, label %if.then6

if.then6:                                         ; preds = %if.end
  %call7 = call ptr @gettext(ptr noundef @.str.299) #21
  %4 = load ptr, ptr %device_name.addr, align 8
  %call8 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %4)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call7, ptr noundef %call8) #24
  unreachable

if.end9:                                          ; preds = %if.end
  br label %if.end15

if.else:                                          ; preds = %entry
  %5 = load i8, ptr %fancy.addr, align 1
  %tobool10 = trunc i8 %5 to i1
  %6 = zext i1 %tobool10 to i64
  %cond = select i1 %tobool10, ptr @.str.300, ptr @.str.301
  %ws_row = getelementptr inbounds %struct.winsize, ptr %win, i32 0, i32 0
  %7 = load i16, ptr %ws_row, align 2
  %conv = zext i16 %7 to i32
  %ws_col = getelementptr inbounds %struct.winsize, ptr %win, i32 0, i32 1
  %8 = load i16, ptr %ws_col, align 2
  %conv11 = zext i16 %8 to i32
  call void (ptr, ...) @wrapf(ptr noundef %cond, i32 noundef %conv, i32 noundef %conv11)
  %9 = load i8, ptr %fancy.addr, align 1
  %tobool12 = trunc i8 %9 to i1
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.else
  store i32 0, ptr @current_col, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wrapf(ptr noundef %message, ...) #3 {
entry:
  %message.addr = alloca ptr, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %buf = alloca ptr, align 8
  %buflen = alloca i32, align 4
  store ptr %message, ptr %message.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %args, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load ptr, ptr %message.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %args, i64 0, i64 0
  %call = call i32 @vasprintf(ptr noundef %buf, ptr noundef %0, ptr noundef %arraydecay1) #21
  store i32 %call, ptr %buflen, align 4
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %args, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay2)
  %1 = load i32, ptr %buflen, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @xalloc_die() #25
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i32, ptr @current_col, align 4
  %cmp3 = icmp slt i32 0, %2
  br i1 %cmp3, label %if.then4, label %if.end10

if.then4:                                         ; preds = %if.end
  %3 = load i32, ptr @max_col, align 4
  %4 = load i32, ptr @current_col, align 4
  %sub = sub nsw i32 %3, %4
  %5 = load i32, ptr %buflen, align 4
  %cmp5 = icmp sle i32 %sub, %5
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  %call7 = call i32 @putchar_unlocked(i32 noundef 10)
  store i32 0, ptr @current_col, align 4
  br label %if.end9

if.else:                                          ; preds = %if.then4
  %call8 = call i32 @putchar_unlocked(i32 noundef 32)
  %6 = load i32, ptr @current_col, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr @current_col, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.end
  %7 = load ptr, ptr %buf, align 8
  %8 = load ptr, ptr @stdout, align 8
  %call11 = call i32 @fputs_unlocked(ptr noundef %7, ptr noundef %8)
  %9 = load ptr, ptr %buf, align 8
  call void @free(ptr noundef %9) #21
  %10 = load i32, ptr %buflen, align 4
  %11 = load i32, ptr @current_col, align 4
  %add = add nsw i32 %11, %10
  store i32 %add, ptr @current_col, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @visible(i8 noundef zeroext %ch) #3 {
entry:
  %retval = alloca ptr, align 8
  %ch.addr = alloca i8, align 1
  %bpout = alloca ptr, align 8
  store i8 %ch, ptr %ch.addr, align 1
  store ptr @visible.buf, ptr %bpout, align 8
  %0 = load i8, ptr %ch.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr @.str.312, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8, ptr %ch.addr, align 1
  %conv2 = zext i8 %1 to i32
  %cmp3 = icmp sge i32 %conv2, 32
  br i1 %cmp3, label %if.then5, label %if.else43

if.then5:                                         ; preds = %if.end
  %2 = load i8, ptr %ch.addr, align 1
  %conv6 = zext i8 %2 to i32
  %cmp7 = icmp slt i32 %conv6, 127
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then5
  %3 = load i8, ptr %ch.addr, align 1
  %4 = load ptr, ptr %bpout, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %4, i32 1
  store ptr %incdec.ptr, ptr %bpout, align 8
  store i8 %3, ptr %4, align 1
  br label %if.end42

if.else:                                          ; preds = %if.then5
  %5 = load i8, ptr %ch.addr, align 1
  %conv10 = zext i8 %5 to i32
  %cmp11 = icmp eq i32 %conv10, 127
  br i1 %cmp11, label %if.then13, label %if.else16

if.then13:                                        ; preds = %if.else
  %6 = load ptr, ptr %bpout, align 8
  %incdec.ptr14 = getelementptr inbounds i8, ptr %6, i32 1
  store ptr %incdec.ptr14, ptr %bpout, align 8
  store i8 94, ptr %6, align 1
  %7 = load ptr, ptr %bpout, align 8
  %incdec.ptr15 = getelementptr inbounds i8, ptr %7, i32 1
  store ptr %incdec.ptr15, ptr %bpout, align 8
  store i8 63, ptr %7, align 1
  br label %if.end41

if.else16:                                        ; preds = %if.else
  %8 = load ptr, ptr %bpout, align 8
  %incdec.ptr17 = getelementptr inbounds i8, ptr %8, i32 1
  store ptr %incdec.ptr17, ptr %bpout, align 8
  store i8 77, ptr %8, align 1
  %9 = load ptr, ptr %bpout, align 8
  %incdec.ptr18 = getelementptr inbounds i8, ptr %9, i32 1
  store ptr %incdec.ptr18, ptr %bpout, align 8
  store i8 45, ptr %9, align 1
  %10 = load i8, ptr %ch.addr, align 1
  %conv19 = zext i8 %10 to i32
  %cmp20 = icmp sge i32 %conv19, 160
  br i1 %cmp20, label %if.then22, label %if.else34

if.then22:                                        ; preds = %if.else16
  %11 = load i8, ptr %ch.addr, align 1
  %conv23 = zext i8 %11 to i32
  %cmp24 = icmp slt i32 %conv23, 255
  br i1 %cmp24, label %if.then26, label %if.else30

if.then26:                                        ; preds = %if.then22
  %12 = load i8, ptr %ch.addr, align 1
  %conv27 = zext i8 %12 to i32
  %sub = sub nsw i32 %conv27, 128
  %conv28 = trunc i32 %sub to i8
  %13 = load ptr, ptr %bpout, align 8
  %incdec.ptr29 = getelementptr inbounds i8, ptr %13, i32 1
  store ptr %incdec.ptr29, ptr %bpout, align 8
  store i8 %conv28, ptr %13, align 1
  br label %if.end33

if.else30:                                        ; preds = %if.then22
  %14 = load ptr, ptr %bpout, align 8
  %incdec.ptr31 = getelementptr inbounds i8, ptr %14, i32 1
  store ptr %incdec.ptr31, ptr %bpout, align 8
  store i8 94, ptr %14, align 1
  %15 = load ptr, ptr %bpout, align 8
  %incdec.ptr32 = getelementptr inbounds i8, ptr %15, i32 1
  store ptr %incdec.ptr32, ptr %bpout, align 8
  store i8 63, ptr %15, align 1
  br label %if.end33

if.end33:                                         ; preds = %if.else30, %if.then26
  br label %if.end40

if.else34:                                        ; preds = %if.else16
  %16 = load ptr, ptr %bpout, align 8
  %incdec.ptr35 = getelementptr inbounds i8, ptr %16, i32 1
  store ptr %incdec.ptr35, ptr %bpout, align 8
  store i8 94, ptr %16, align 1
  %17 = load i8, ptr %ch.addr, align 1
  %conv36 = zext i8 %17 to i32
  %sub37 = sub nsw i32 %conv36, 128
  %add = add nsw i32 %sub37, 64
  %conv38 = trunc i32 %add to i8
  %18 = load ptr, ptr %bpout, align 8
  %incdec.ptr39 = getelementptr inbounds i8, ptr %18, i32 1
  store ptr %incdec.ptr39, ptr %bpout, align 8
  store i8 %conv38, ptr %18, align 1
  br label %if.end40

if.end40:                                         ; preds = %if.else34, %if.end33
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then13
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then9
  br label %if.end49

if.else43:                                        ; preds = %if.end
  %19 = load ptr, ptr %bpout, align 8
  %incdec.ptr44 = getelementptr inbounds i8, ptr %19, i32 1
  store ptr %incdec.ptr44, ptr %bpout, align 8
  store i8 94, ptr %19, align 1
  %20 = load i8, ptr %ch.addr, align 1
  %conv45 = zext i8 %20 to i32
  %add46 = add nsw i32 %conv45, 64
  %conv47 = trunc i32 %add46 to i8
  %21 = load ptr, ptr %bpout, align 8
  %incdec.ptr48 = getelementptr inbounds i8, ptr %21, i32 1
  store ptr %incdec.ptr48, ptr %bpout, align 8
  store i8 %conv47, ptr %21, align 1
  br label %if.end49

if.end49:                                         ; preds = %if.else43, %if.end42
  %22 = load ptr, ptr %bpout, align 8
  store i8 0, ptr %22, align 1
  store ptr @visible.buf, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end49, %if.then
  %23 = load ptr, ptr %retval, align 8
  ret ptr %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @mode_type_flag(i32 noundef %type, ptr noundef %mode) #3 {
entry:
  %retval = alloca ptr, align 8
  %type.addr = alloca i32, align 4
  %mode.addr = alloca ptr, align 8
  store i32 %type, ptr %type.addr, align 4
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load i32, ptr %type.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
    i32 4, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry
  %1 = load ptr, ptr %mode.addr, align 8
  %c_cflag = getelementptr inbounds %struct.termios, ptr %1, i32 0, i32 2
  store ptr %c_cflag, ptr %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  %2 = load ptr, ptr %mode.addr, align 8
  %c_iflag = getelementptr inbounds %struct.termios, ptr %2, i32 0, i32 0
  store ptr %c_iflag, ptr %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %entry
  %3 = load ptr, ptr %mode.addr, align 8
  %c_oflag = getelementptr inbounds %struct.termios, ptr %3, i32 0, i32 1
  store ptr %c_oflag, ptr %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  %4 = load ptr, ptr %mode.addr, align 8
  %c_lflag = getelementptr inbounds %struct.termios, ptr %4, i32 0, i32 3
  store ptr %c_lflag, ptr %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry
  store ptr null, ptr %retval, align 8
  br label %return

sw.default:                                       ; preds = %entry
  unreachable

return:                                           ; preds = %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %5 = load ptr, ptr %retval, align 8
  ret ptr %5
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #8

; Function Attrs: nounwind
declare i32 @vasprintf(ptr noundef, ptr noundef, ptr noundef) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #8

; Function Attrs: nounwind
declare void @free(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @get_win_size(i32 noundef %fd, ptr noundef %win) #3 {
entry:
  %fd.addr = alloca i32, align 4
  %win.addr = alloca ptr, align 8
  %err = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  store ptr %win, ptr %win.addr, align 8
  %0 = load i32, ptr %fd.addr, align 4
  %1 = load ptr, ptr %win.addr, align 8
  %call = call i32 (i32, i64, ...) @ioctl(i32 noundef %0, i64 noundef 21523, ptr noundef %1) #21
  store i32 %call, ptr %err, align 4
  %2 = load i32, ptr %err, align 4
  ret i32 %2
}

; Function Attrs: nounwind
declare i32 @ioctl(i32 noundef, i64 noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @baud_to_value(i32 noundef %speed) #3 {
entry:
  %retval = alloca i64, align 8
  %speed.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %speed, ptr %speed.addr, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [35 x %struct.speed_map], ptr @speeds, i64 0, i64 %idxprom
  %string = getelementptr inbounds %struct.speed_map, ptr %arrayidx, i32 0, i32 0
  %1 = load ptr, ptr %string, align 8
  %cmp = icmp ne ptr %1, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, ptr %speed.addr, align 4
  %3 = load i32, ptr %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [35 x %struct.speed_map], ptr @speeds, i64 0, i64 %idxprom1
  %speed3 = getelementptr inbounds %struct.speed_map, ptr %arrayidx2, i32 0, i32 1
  %4 = load i32, ptr %speed3, align 8
  %cmp4 = icmp eq i32 %2, %4
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, ptr %i, align 4
  %idxprom5 = sext i32 %5 to i64
  %arrayidx6 = getelementptr inbounds [35 x %struct.speed_map], ptr @speeds, i64 0, i64 %idxprom5
  %value = getelementptr inbounds %struct.speed_map, ptr %arrayidx6, i32 0, i32 2
  %6 = load i64, ptr %value, align 8
  store i64 %6, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, ptr %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !19

for.end:                                          ; preds = %for.cond
  store i64 0, ptr %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %8 = load i64, ptr %retval, align 8
  ret i64 %8
}

; Function Attrs: nounwind
declare ptr @getenv(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @set_mode(ptr noundef %info, i1 noundef zeroext %reversed, ptr noundef %mode) #3 {
entry:
  %retval = alloca i1, align 1
  %info.addr = alloca ptr, align 8
  %reversed.addr = alloca i8, align 1
  %mode.addr = alloca ptr, align 8
  %bitsp = alloca ptr, align 8
  store ptr %info, ptr %info.addr, align 8
  %frombool = zext i1 %reversed to i8
  store i8 %frombool, ptr %reversed.addr, align 1
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load i8, ptr %reversed.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load ptr, ptr %info.addr, align 8
  %flags = getelementptr inbounds %struct.mode_info, ptr %1, i32 0, i32 2
  %2 = load i8, ptr %flags, align 4
  %conv = sext i8 %2 to i32
  %and = and i32 %conv, 4
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load ptr, ptr %info.addr, align 8
  %type = getelementptr inbounds %struct.mode_info, ptr %3, i32 0, i32 1
  %4 = load i32, ptr %type, align 8
  %5 = load ptr, ptr %mode.addr, align 8
  %call = call ptr @mode_type_flag(i32 noundef %4, ptr noundef %5)
  store ptr %call, ptr %bitsp, align 8
  %6 = load ptr, ptr %bitsp, align 8
  %cmp2 = icmp eq ptr %6, null
  br i1 %cmp2, label %if.then4, label %if.else291

if.then4:                                         ; preds = %if.end
  %7 = load ptr, ptr %info.addr, align 8
  %name = getelementptr inbounds %struct.mode_info, ptr %7, i32 0, i32 0
  %8 = load ptr, ptr %name, align 8
  %call5 = call i32 @strcmp(ptr noundef %8, ptr noundef @.str.222) #23
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then4
  %9 = load ptr, ptr %info.addr, align 8
  %name8 = getelementptr inbounds %struct.mode_info, ptr %9, i32 0, i32 0
  %10 = load ptr, ptr %name8, align 8
  %call9 = call i32 @strcmp(ptr noundef %10, ptr noundef @.str.223) #23
  %cmp10 = icmp eq i32 %call9, 0
  br i1 %cmp10, label %if.then12, label %if.else25

if.then12:                                        ; preds = %lor.lhs.false, %if.then4
  %11 = load i8, ptr %reversed.addr, align 1
  %tobool13 = trunc i8 %11 to i1
  br i1 %tobool13, label %if.then14, label %if.else

if.then14:                                        ; preds = %if.then12
  %12 = load ptr, ptr %mode.addr, align 8
  %c_cflag = getelementptr inbounds %struct.termios, ptr %12, i32 0, i32 2
  %13 = load i32, ptr %c_cflag, align 4
  %and15 = and i32 %13, -257
  %and16 = and i32 %and15, -49
  %or = or i32 %and16, 48
  %14 = load ptr, ptr %mode.addr, align 8
  %c_cflag17 = getelementptr inbounds %struct.termios, ptr %14, i32 0, i32 2
  store i32 %or, ptr %c_cflag17, align 4
  br label %if.end24

if.else:                                          ; preds = %if.then12
  %15 = load ptr, ptr %mode.addr, align 8
  %c_cflag18 = getelementptr inbounds %struct.termios, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %c_cflag18, align 4
  %and19 = and i32 %16, -513
  %and20 = and i32 %and19, -49
  %or21 = or i32 %and20, 256
  %or22 = or i32 %or21, 32
  %17 = load ptr, ptr %mode.addr, align 8
  %c_cflag23 = getelementptr inbounds %struct.termios, ptr %17, i32 0, i32 2
  store i32 %or22, ptr %c_cflag23, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.then14
  br label %if.end290

if.else25:                                        ; preds = %lor.lhs.false
  %18 = load ptr, ptr %info.addr, align 8
  %name26 = getelementptr inbounds %struct.mode_info, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %name26, align 8
  %call27 = call i32 @strcmp(ptr noundef %19, ptr noundef @.str.224) #23
  %cmp28 = icmp eq i32 %call27, 0
  br i1 %cmp28, label %if.then30, label %if.else46

if.then30:                                        ; preds = %if.else25
  %20 = load i8, ptr %reversed.addr, align 1
  %tobool31 = trunc i8 %20 to i1
  br i1 %tobool31, label %if.then32, label %if.else38

if.then32:                                        ; preds = %if.then30
  %21 = load ptr, ptr %mode.addr, align 8
  %c_cflag33 = getelementptr inbounds %struct.termios, ptr %21, i32 0, i32 2
  %22 = load i32, ptr %c_cflag33, align 4
  %and34 = and i32 %22, -257
  %and35 = and i32 %and34, -49
  %or36 = or i32 %and35, 48
  %23 = load ptr, ptr %mode.addr, align 8
  %c_cflag37 = getelementptr inbounds %struct.termios, ptr %23, i32 0, i32 2
  store i32 %or36, ptr %c_cflag37, align 4
  br label %if.end45

if.else38:                                        ; preds = %if.then30
  %24 = load ptr, ptr %mode.addr, align 8
  %c_cflag39 = getelementptr inbounds %struct.termios, ptr %24, i32 0, i32 2
  %25 = load i32, ptr %c_cflag39, align 4
  %and40 = and i32 %25, -49
  %or41 = or i32 %and40, 32
  %or42 = or i32 %or41, 512
  %or43 = or i32 %or42, 256
  %26 = load ptr, ptr %mode.addr, align 8
  %c_cflag44 = getelementptr inbounds %struct.termios, ptr %26, i32 0, i32 2
  store i32 %or43, ptr %c_cflag44, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then32
  br label %if.end289

if.else46:                                        ; preds = %if.else25
  %27 = load ptr, ptr %info.addr, align 8
  %name47 = getelementptr inbounds %struct.mode_info, ptr %27, i32 0, i32 0
  %28 = load ptr, ptr %name47, align 8
  %call48 = call i32 @strcmp(ptr noundef %28, ptr noundef @.str.225) #23
  %cmp49 = icmp eq i32 %call48, 0
  br i1 %cmp49, label %if.then51, label %if.else70

if.then51:                                        ; preds = %if.else46
  %29 = load i8, ptr %reversed.addr, align 1
  %tobool52 = trunc i8 %29 to i1
  br i1 %tobool52, label %if.then53, label %if.else62

if.then53:                                        ; preds = %if.then51
  %30 = load ptr, ptr %mode.addr, align 8
  %c_iflag = getelementptr inbounds %struct.termios, ptr %30, i32 0, i32 0
  %31 = load i32, ptr %c_iflag, align 4
  %or54 = or i32 %31, 256
  %and55 = and i32 %or54, -65
  %and56 = and i32 %and55, -129
  %32 = load ptr, ptr %mode.addr, align 8
  %c_iflag57 = getelementptr inbounds %struct.termios, ptr %32, i32 0, i32 0
  store i32 %and56, ptr %c_iflag57, align 4
  %33 = load ptr, ptr %mode.addr, align 8
  %c_oflag = getelementptr inbounds %struct.termios, ptr %33, i32 0, i32 1
  %34 = load i32, ptr %c_oflag, align 4
  %or58 = or i32 %34, 4
  %and59 = and i32 %or58, -9
  %and60 = and i32 %and59, -33
  %35 = load ptr, ptr %mode.addr, align 8
  %c_oflag61 = getelementptr inbounds %struct.termios, ptr %35, i32 0, i32 1
  store i32 %and60, ptr %c_oflag61, align 4
  br label %if.end69

if.else62:                                        ; preds = %if.then51
  %36 = load ptr, ptr %mode.addr, align 8
  %c_iflag63 = getelementptr inbounds %struct.termios, ptr %36, i32 0, i32 0
  %37 = load i32, ptr %c_iflag63, align 4
  %and64 = and i32 %37, -257
  %38 = load ptr, ptr %mode.addr, align 8
  %c_iflag65 = getelementptr inbounds %struct.termios, ptr %38, i32 0, i32 0
  store i32 %and64, ptr %c_iflag65, align 4
  %39 = load ptr, ptr %mode.addr, align 8
  %c_oflag66 = getelementptr inbounds %struct.termios, ptr %39, i32 0, i32 1
  %40 = load i32, ptr %c_oflag66, align 4
  %and67 = and i32 %40, -5
  %41 = load ptr, ptr %mode.addr, align 8
  %c_oflag68 = getelementptr inbounds %struct.termios, ptr %41, i32 0, i32 1
  store i32 %and67, ptr %c_oflag68, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.else62, %if.then53
  br label %if.end288

if.else70:                                        ; preds = %if.else46
  %42 = load ptr, ptr %info.addr, align 8
  %name71 = getelementptr inbounds %struct.mode_info, ptr %42, i32 0, i32 0
  %43 = load ptr, ptr %name71, align 8
  %call72 = call i32 @strcmp(ptr noundef %43, ptr noundef @.str.226) #23
  %cmp73 = icmp eq i32 %call72, 0
  br i1 %cmp73, label %if.then75, label %if.else78

if.then75:                                        ; preds = %if.else70
  %44 = load ptr, ptr %mode.addr, align 8
  %c_cc = getelementptr inbounds %struct.termios, ptr %44, i32 0, i32 5
  %arrayidx = getelementptr inbounds [32 x i8], ptr %c_cc, i64 0, i64 2
  store i8 127, ptr %arrayidx, align 1
  %45 = load ptr, ptr %mode.addr, align 8
  %c_cc76 = getelementptr inbounds %struct.termios, ptr %45, i32 0, i32 5
  %arrayidx77 = getelementptr inbounds [32 x i8], ptr %c_cc76, i64 0, i64 3
  store i8 21, ptr %arrayidx77, align 1
  br label %if.end287

if.else78:                                        ; preds = %if.else70
  %46 = load ptr, ptr %info.addr, align 8
  %name79 = getelementptr inbounds %struct.mode_info, ptr %46, i32 0, i32 0
  %47 = load ptr, ptr %name79, align 8
  %call80 = call i32 @strcmp(ptr noundef %47, ptr noundef @.str.227) #23
  %cmp81 = icmp eq i32 %call80, 0
  br i1 %cmp81, label %if.then83, label %if.else84

if.then83:                                        ; preds = %if.else78
  %48 = load ptr, ptr %mode.addr, align 8
  call void @sane_mode(ptr noundef %48)
  br label %if.end286

if.else84:                                        ; preds = %if.else78
  %49 = load ptr, ptr %info.addr, align 8
  %name85 = getelementptr inbounds %struct.mode_info, ptr %49, i32 0, i32 0
  %50 = load ptr, ptr %name85, align 8
  %call86 = call i32 @strcmp(ptr noundef %50, ptr noundef @.str.232) #23
  %cmp87 = icmp eq i32 %call86, 0
  br i1 %cmp87, label %if.then89, label %if.else97

if.then89:                                        ; preds = %if.else84
  %51 = load i8, ptr %reversed.addr, align 1
  %tobool90 = trunc i8 %51 to i1
  br i1 %tobool90, label %if.then91, label %if.else93

if.then91:                                        ; preds = %if.then89
  %52 = load ptr, ptr %mode.addr, align 8
  %c_lflag = getelementptr inbounds %struct.termios, ptr %52, i32 0, i32 3
  %53 = load i32, ptr %c_lflag, align 4
  %or92 = or i32 %53, 2
  store i32 %or92, ptr %c_lflag, align 4
  br label %if.end96

if.else93:                                        ; preds = %if.then89
  %54 = load ptr, ptr %mode.addr, align 8
  %c_lflag94 = getelementptr inbounds %struct.termios, ptr %54, i32 0, i32 3
  %55 = load i32, ptr %c_lflag94, align 4
  %and95 = and i32 %55, -3
  store i32 %and95, ptr %c_lflag94, align 4
  br label %if.end96

if.end96:                                         ; preds = %if.else93, %if.then91
  br label %if.end285

if.else97:                                        ; preds = %if.else84
  %56 = load ptr, ptr %info.addr, align 8
  %name98 = getelementptr inbounds %struct.mode_info, ptr %56, i32 0, i32 0
  %57 = load ptr, ptr %name98, align 8
  %call99 = call i32 @strcmp(ptr noundef %57, ptr noundef @.str.230) #23
  %cmp100 = icmp eq i32 %call99, 0
  br i1 %cmp100, label %if.then102, label %if.else121

if.then102:                                       ; preds = %if.else97
  %58 = load i8, ptr %reversed.addr, align 1
  %tobool103 = trunc i8 %58 to i1
  br i1 %tobool103, label %if.then104, label %if.else112

if.then104:                                       ; preds = %if.then102
  %59 = load ptr, ptr %mode.addr, align 8
  %c_cflag105 = getelementptr inbounds %struct.termios, ptr %59, i32 0, i32 2
  %60 = load i32, ptr %c_cflag105, align 4
  %and106 = and i32 %60, -49
  %or107 = or i32 %and106, 32
  %or108 = or i32 %or107, 256
  %61 = load ptr, ptr %mode.addr, align 8
  %c_cflag109 = getelementptr inbounds %struct.termios, ptr %61, i32 0, i32 2
  store i32 %or108, ptr %c_cflag109, align 4
  %62 = load ptr, ptr %mode.addr, align 8
  %c_iflag110 = getelementptr inbounds %struct.termios, ptr %62, i32 0, i32 0
  %63 = load i32, ptr %c_iflag110, align 4
  %or111 = or i32 %63, 32
  store i32 %or111, ptr %c_iflag110, align 4
  br label %if.end120

if.else112:                                       ; preds = %if.then102
  %64 = load ptr, ptr %mode.addr, align 8
  %c_cflag113 = getelementptr inbounds %struct.termios, ptr %64, i32 0, i32 2
  %65 = load i32, ptr %c_cflag113, align 4
  %and114 = and i32 %65, -257
  %and115 = and i32 %and114, -49
  %or116 = or i32 %and115, 48
  %66 = load ptr, ptr %mode.addr, align 8
  %c_cflag117 = getelementptr inbounds %struct.termios, ptr %66, i32 0, i32 2
  store i32 %or116, ptr %c_cflag117, align 4
  %67 = load ptr, ptr %mode.addr, align 8
  %c_iflag118 = getelementptr inbounds %struct.termios, ptr %67, i32 0, i32 0
  %68 = load i32, ptr %c_iflag118, align 4
  %and119 = and i32 %68, -33
  store i32 %and119, ptr %c_iflag118, align 4
  br label %if.end120

if.end120:                                        ; preds = %if.else112, %if.then104
  br label %if.end284

if.else121:                                       ; preds = %if.else97
  %69 = load ptr, ptr %info.addr, align 8
  %name122 = getelementptr inbounds %struct.mode_info, ptr %69, i32 0, i32 0
  %70 = load ptr, ptr %name122, align 8
  %call123 = call i32 @strcmp(ptr noundef %70, ptr noundef @.str.231) #23
  %cmp124 = icmp eq i32 %call123, 0
  br i1 %cmp124, label %if.then126, label %if.else149

if.then126:                                       ; preds = %if.else121
  %71 = load i8, ptr %reversed.addr, align 1
  %tobool127 = trunc i8 %71 to i1
  br i1 %tobool127, label %if.then128, label %if.else138

if.then128:                                       ; preds = %if.then126
  %72 = load ptr, ptr %mode.addr, align 8
  %c_cflag129 = getelementptr inbounds %struct.termios, ptr %72, i32 0, i32 2
  %73 = load i32, ptr %c_cflag129, align 4
  %and130 = and i32 %73, -49
  %or131 = or i32 %and130, 32
  %or132 = or i32 %or131, 256
  %74 = load ptr, ptr %mode.addr, align 8
  %c_cflag133 = getelementptr inbounds %struct.termios, ptr %74, i32 0, i32 2
  store i32 %or132, ptr %c_cflag133, align 4
  %75 = load ptr, ptr %mode.addr, align 8
  %c_iflag134 = getelementptr inbounds %struct.termios, ptr %75, i32 0, i32 0
  %76 = load i32, ptr %c_iflag134, align 4
  %or135 = or i32 %76, 32
  store i32 %or135, ptr %c_iflag134, align 4
  %77 = load ptr, ptr %mode.addr, align 8
  %c_oflag136 = getelementptr inbounds %struct.termios, ptr %77, i32 0, i32 1
  %78 = load i32, ptr %c_oflag136, align 4
  %or137 = or i32 %78, 1
  store i32 %or137, ptr %c_oflag136, align 4
  br label %if.end148

if.else138:                                       ; preds = %if.then126
  %79 = load ptr, ptr %mode.addr, align 8
  %c_cflag139 = getelementptr inbounds %struct.termios, ptr %79, i32 0, i32 2
  %80 = load i32, ptr %c_cflag139, align 4
  %and140 = and i32 %80, -257
  %and141 = and i32 %and140, -49
  %or142 = or i32 %and141, 48
  %81 = load ptr, ptr %mode.addr, align 8
  %c_cflag143 = getelementptr inbounds %struct.termios, ptr %81, i32 0, i32 2
  store i32 %or142, ptr %c_cflag143, align 4
  %82 = load ptr, ptr %mode.addr, align 8
  %c_iflag144 = getelementptr inbounds %struct.termios, ptr %82, i32 0, i32 0
  %83 = load i32, ptr %c_iflag144, align 4
  %and145 = and i32 %83, -33
  store i32 %and145, ptr %c_iflag144, align 4
  %84 = load ptr, ptr %mode.addr, align 8
  %c_oflag146 = getelementptr inbounds %struct.termios, ptr %84, i32 0, i32 1
  %85 = load i32, ptr %c_oflag146, align 4
  %and147 = and i32 %85, -2
  store i32 %and147, ptr %c_oflag146, align 4
  br label %if.end148

if.end148:                                        ; preds = %if.else138, %if.then128
  br label %if.end283

if.else149:                                       ; preds = %if.else121
  %86 = load ptr, ptr %info.addr, align 8
  %name150 = getelementptr inbounds %struct.mode_info, ptr %86, i32 0, i32 0
  %87 = load ptr, ptr %name150, align 8
  %call151 = call i32 @strcmp(ptr noundef %87, ptr noundef @.str.229) #23
  %cmp152 = icmp eq i32 %call151, 0
  br i1 %cmp152, label %if.then159, label %lor.lhs.false154

lor.lhs.false154:                                 ; preds = %if.else149
  %88 = load ptr, ptr %info.addr, align 8
  %name155 = getelementptr inbounds %struct.mode_info, ptr %88, i32 0, i32 0
  %89 = load ptr, ptr %name155, align 8
  %call156 = call i32 @strcmp(ptr noundef %89, ptr noundef @.str.228) #23
  %cmp157 = icmp eq i32 %call156, 0
  br i1 %cmp157, label %if.then159, label %if.else194

if.then159:                                       ; preds = %lor.lhs.false154, %if.else149
  %90 = load ptr, ptr %info.addr, align 8
  %name160 = getelementptr inbounds %struct.mode_info, ptr %90, i32 0, i32 0
  %91 = load ptr, ptr %name160, align 8
  %arrayidx161 = getelementptr inbounds i8, ptr %91, i64 0
  %92 = load i8, ptr %arrayidx161, align 1
  %conv162 = sext i8 %92 to i32
  %cmp163 = icmp eq i32 %conv162, 114
  br i1 %cmp163, label %land.lhs.true165, label %lor.lhs.false168

land.lhs.true165:                                 ; preds = %if.then159
  %93 = load i8, ptr %reversed.addr, align 1
  %tobool166 = trunc i8 %93 to i1
  br i1 %tobool166, label %if.then176, label %lor.lhs.false168

lor.lhs.false168:                                 ; preds = %land.lhs.true165, %if.then159
  %94 = load ptr, ptr %info.addr, align 8
  %name169 = getelementptr inbounds %struct.mode_info, ptr %94, i32 0, i32 0
  %95 = load ptr, ptr %name169, align 8
  %arrayidx170 = getelementptr inbounds i8, ptr %95, i64 0
  %96 = load i8, ptr %arrayidx170, align 1
  %conv171 = sext i8 %96 to i32
  %cmp172 = icmp eq i32 %conv171, 99
  br i1 %cmp172, label %land.lhs.true174, label %if.else183

land.lhs.true174:                                 ; preds = %lor.lhs.false168
  %97 = load i8, ptr %reversed.addr, align 1
  %tobool175 = trunc i8 %97 to i1
  br i1 %tobool175, label %if.else183, label %if.then176

if.then176:                                       ; preds = %land.lhs.true174, %land.lhs.true165
  %98 = load ptr, ptr %mode.addr, align 8
  %c_iflag177 = getelementptr inbounds %struct.termios, ptr %98, i32 0, i32 0
  %99 = load i32, ptr %c_iflag177, align 4
  %or178 = or i32 %99, 1318
  store i32 %or178, ptr %c_iflag177, align 4
  %100 = load ptr, ptr %mode.addr, align 8
  %c_oflag179 = getelementptr inbounds %struct.termios, ptr %100, i32 0, i32 1
  %101 = load i32, ptr %c_oflag179, align 4
  %or180 = or i32 %101, 1
  store i32 %or180, ptr %c_oflag179, align 4
  %102 = load ptr, ptr %mode.addr, align 8
  %c_lflag181 = getelementptr inbounds %struct.termios, ptr %102, i32 0, i32 3
  %103 = load i32, ptr %c_lflag181, align 4
  %or182 = or i32 %103, 3
  store i32 %or182, ptr %c_lflag181, align 4
  br label %if.end193

if.else183:                                       ; preds = %land.lhs.true174, %lor.lhs.false168
  %104 = load ptr, ptr %mode.addr, align 8
  %c_iflag184 = getelementptr inbounds %struct.termios, ptr %104, i32 0, i32 0
  store i32 0, ptr %c_iflag184, align 4
  %105 = load ptr, ptr %mode.addr, align 8
  %c_oflag185 = getelementptr inbounds %struct.termios, ptr %105, i32 0, i32 1
  %106 = load i32, ptr %c_oflag185, align 4
  %and186 = and i32 %106, -2
  store i32 %and186, ptr %c_oflag185, align 4
  %107 = load ptr, ptr %mode.addr, align 8
  %c_lflag187 = getelementptr inbounds %struct.termios, ptr %107, i32 0, i32 3
  %108 = load i32, ptr %c_lflag187, align 4
  %and188 = and i32 %108, -8
  store i32 %and188, ptr %c_lflag187, align 4
  %109 = load ptr, ptr %mode.addr, align 8
  %c_cc189 = getelementptr inbounds %struct.termios, ptr %109, i32 0, i32 5
  %arrayidx190 = getelementptr inbounds [32 x i8], ptr %c_cc189, i64 0, i64 6
  store i8 1, ptr %arrayidx190, align 1
  %110 = load ptr, ptr %mode.addr, align 8
  %c_cc191 = getelementptr inbounds %struct.termios, ptr %110, i32 0, i32 5
  %arrayidx192 = getelementptr inbounds [32 x i8], ptr %c_cc191, i64 0, i64 5
  store i8 0, ptr %arrayidx192, align 1
  br label %if.end193

if.end193:                                        ; preds = %if.else183, %if.then176
  br label %if.end282

if.else194:                                       ; preds = %lor.lhs.false154
  %111 = load ptr, ptr %info.addr, align 8
  %name195 = getelementptr inbounds %struct.mode_info, ptr %111, i32 0, i32 0
  %112 = load ptr, ptr %name195, align 8
  %call196 = call i32 @strcmp(ptr noundef %112, ptr noundef @.str.233) #23
  %cmp197 = icmp eq i32 %call196, 0
  br i1 %cmp197, label %if.then199, label %if.else208

if.then199:                                       ; preds = %if.else194
  %113 = load i8, ptr %reversed.addr, align 1
  %tobool200 = trunc i8 %113 to i1
  br i1 %tobool200, label %if.then201, label %if.else204

if.then201:                                       ; preds = %if.then199
  %114 = load ptr, ptr %mode.addr, align 8
  %c_iflag202 = getelementptr inbounds %struct.termios, ptr %114, i32 0, i32 0
  %115 = load i32, ptr %c_iflag202, align 4
  %or203 = or i32 %115, 2048
  store i32 %or203, ptr %c_iflag202, align 4
  br label %if.end207

if.else204:                                       ; preds = %if.then199
  %116 = load ptr, ptr %mode.addr, align 8
  %c_iflag205 = getelementptr inbounds %struct.termios, ptr %116, i32 0, i32 0
  %117 = load i32, ptr %c_iflag205, align 4
  %and206 = and i32 %117, -2049
  store i32 %and206, ptr %c_iflag205, align 4
  br label %if.end207

if.end207:                                        ; preds = %if.else204, %if.then201
  br label %if.end281

if.else208:                                       ; preds = %if.else194
  %118 = load ptr, ptr %info.addr, align 8
  %name209 = getelementptr inbounds %struct.mode_info, ptr %118, i32 0, i32 0
  %119 = load ptr, ptr %name209, align 8
  %call210 = call i32 @strcmp(ptr noundef %119, ptr noundef @.str.234) #23
  %cmp211 = icmp eq i32 %call210, 0
  br i1 %cmp211, label %if.then213, label %if.else226

if.then213:                                       ; preds = %if.else208
  %120 = load i8, ptr %reversed.addr, align 1
  %tobool214 = trunc i8 %120 to i1
  br i1 %tobool214, label %if.then215, label %if.else220

if.then215:                                       ; preds = %if.then213
  %121 = load ptr, ptr %mode.addr, align 8
  %c_oflag216 = getelementptr inbounds %struct.termios, ptr %121, i32 0, i32 1
  %122 = load i32, ptr %c_oflag216, align 4
  %and217 = and i32 %122, -6145
  %or218 = or i32 %and217, 6144
  %123 = load ptr, ptr %mode.addr, align 8
  %c_oflag219 = getelementptr inbounds %struct.termios, ptr %123, i32 0, i32 1
  store i32 %or218, ptr %c_oflag219, align 4
  br label %if.end225

if.else220:                                       ; preds = %if.then213
  %124 = load ptr, ptr %mode.addr, align 8
  %c_oflag221 = getelementptr inbounds %struct.termios, ptr %124, i32 0, i32 1
  %125 = load i32, ptr %c_oflag221, align 4
  %and222 = and i32 %125, -6145
  %or223 = or i32 %and222, 0
  %126 = load ptr, ptr %mode.addr, align 8
  %c_oflag224 = getelementptr inbounds %struct.termios, ptr %126, i32 0, i32 1
  store i32 %or223, ptr %c_oflag224, align 4
  br label %if.end225

if.end225:                                        ; preds = %if.else220, %if.then215
  br label %if.end280

if.else226:                                       ; preds = %if.else208
  %127 = load ptr, ptr %info.addr, align 8
  %name227 = getelementptr inbounds %struct.mode_info, ptr %127, i32 0, i32 0
  %128 = load ptr, ptr %name227, align 8
  %call228 = call i32 @strcmp(ptr noundef %128, ptr noundef @.str.235) #23
  %cmp229 = icmp eq i32 %call228, 0
  br i1 %cmp229, label %if.then236, label %lor.lhs.false231

lor.lhs.false231:                                 ; preds = %if.else226
  %129 = load ptr, ptr %info.addr, align 8
  %name232 = getelementptr inbounds %struct.mode_info, ptr %129, i32 0, i32 0
  %130 = load ptr, ptr %name232, align 8
  %call233 = call i32 @strcmp(ptr noundef %130, ptr noundef @.str.236) #23
  %cmp234 = icmp eq i32 %call233, 0
  br i1 %cmp234, label %if.then236, label %if.else253

if.then236:                                       ; preds = %lor.lhs.false231, %if.else226
  %131 = load i8, ptr %reversed.addr, align 1
  %tobool237 = trunc i8 %131 to i1
  br i1 %tobool237, label %if.then238, label %if.else245

if.then238:                                       ; preds = %if.then236
  %132 = load ptr, ptr %mode.addr, align 8
  %c_lflag239 = getelementptr inbounds %struct.termios, ptr %132, i32 0, i32 3
  %133 = load i32, ptr %c_lflag239, align 4
  %and240 = and i32 %133, -5
  store i32 %and240, ptr %c_lflag239, align 4
  %134 = load ptr, ptr %mode.addr, align 8
  %c_iflag241 = getelementptr inbounds %struct.termios, ptr %134, i32 0, i32 0
  %135 = load i32, ptr %c_iflag241, align 4
  %and242 = and i32 %135, -513
  store i32 %and242, ptr %c_iflag241, align 4
  %136 = load ptr, ptr %mode.addr, align 8
  %c_oflag243 = getelementptr inbounds %struct.termios, ptr %136, i32 0, i32 1
  %137 = load i32, ptr %c_oflag243, align 4
  %and244 = and i32 %137, -3
  store i32 %and244, ptr %c_oflag243, align 4
  br label %if.end252

if.else245:                                       ; preds = %if.then236
  %138 = load ptr, ptr %mode.addr, align 8
  %c_lflag246 = getelementptr inbounds %struct.termios, ptr %138, i32 0, i32 3
  %139 = load i32, ptr %c_lflag246, align 4
  %or247 = or i32 %139, 4
  store i32 %or247, ptr %c_lflag246, align 4
  %140 = load ptr, ptr %mode.addr, align 8
  %c_iflag248 = getelementptr inbounds %struct.termios, ptr %140, i32 0, i32 0
  %141 = load i32, ptr %c_iflag248, align 4
  %or249 = or i32 %141, 512
  store i32 %or249, ptr %c_iflag248, align 4
  %142 = load ptr, ptr %mode.addr, align 8
  %c_oflag250 = getelementptr inbounds %struct.termios, ptr %142, i32 0, i32 1
  %143 = load i32, ptr %c_oflag250, align 4
  %or251 = or i32 %143, 2
  store i32 %or251, ptr %c_oflag250, align 4
  br label %if.end252

if.end252:                                        ; preds = %if.else245, %if.then238
  br label %if.end279

if.else253:                                       ; preds = %lor.lhs.false231
  %144 = load ptr, ptr %info.addr, align 8
  %name254 = getelementptr inbounds %struct.mode_info, ptr %144, i32 0, i32 0
  %145 = load ptr, ptr %name254, align 8
  %call255 = call i32 @strcmp(ptr noundef %145, ptr noundef @.str.237) #23
  %cmp256 = icmp eq i32 %call255, 0
  br i1 %cmp256, label %if.then258, label %if.else261

if.then258:                                       ; preds = %if.else253
  %146 = load ptr, ptr %mode.addr, align 8
  %c_lflag259 = getelementptr inbounds %struct.termios, ptr %146, i32 0, i32 3
  %147 = load i32, ptr %c_lflag259, align 4
  %or260 = or i32 %147, 2576
  store i32 %or260, ptr %c_lflag259, align 4
  br label %if.end278

if.else261:                                       ; preds = %if.else253
  %148 = load ptr, ptr %info.addr, align 8
  %name262 = getelementptr inbounds %struct.mode_info, ptr %148, i32 0, i32 0
  %149 = load ptr, ptr %name262, align 8
  %call263 = call i32 @strcmp(ptr noundef %149, ptr noundef @.str.238) #23
  %cmp264 = icmp eq i32 %call263, 0
  br i1 %cmp264, label %if.then266, label %if.end277

if.then266:                                       ; preds = %if.else261
  %150 = load ptr, ptr %mode.addr, align 8
  %c_cc267 = getelementptr inbounds %struct.termios, ptr %150, i32 0, i32 5
  %arrayidx268 = getelementptr inbounds [32 x i8], ptr %c_cc267, i64 0, i64 0
  store i8 3, ptr %arrayidx268, align 1
  %151 = load ptr, ptr %mode.addr, align 8
  %c_cc269 = getelementptr inbounds %struct.termios, ptr %151, i32 0, i32 5
  %arrayidx270 = getelementptr inbounds [32 x i8], ptr %c_cc269, i64 0, i64 2
  store i8 127, ptr %arrayidx270, align 1
  %152 = load ptr, ptr %mode.addr, align 8
  %c_cc271 = getelementptr inbounds %struct.termios, ptr %152, i32 0, i32 5
  %arrayidx272 = getelementptr inbounds [32 x i8], ptr %c_cc271, i64 0, i64 3
  store i8 21, ptr %arrayidx272, align 1
  %153 = load ptr, ptr %mode.addr, align 8
  %c_lflag273 = getelementptr inbounds %struct.termios, ptr %153, i32 0, i32 3
  %154 = load i32, ptr %c_lflag273, align 4
  %or274 = or i32 %154, 2576
  store i32 %or274, ptr %c_lflag273, align 4
  %155 = load ptr, ptr %mode.addr, align 8
  %c_iflag275 = getelementptr inbounds %struct.termios, ptr %155, i32 0, i32 0
  %156 = load i32, ptr %c_iflag275, align 4
  %and276 = and i32 %156, -2049
  store i32 %and276, ptr %c_iflag275, align 4
  br label %if.end277

if.end277:                                        ; preds = %if.then266, %if.else261
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %if.then258
  br label %if.end279

if.end279:                                        ; preds = %if.end278, %if.end252
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.end225
  br label %if.end281

if.end281:                                        ; preds = %if.end280, %if.end207
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %if.end193
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %if.end148
  br label %if.end284

if.end284:                                        ; preds = %if.end283, %if.end120
  br label %if.end285

if.end285:                                        ; preds = %if.end284, %if.end96
  br label %if.end286

if.end286:                                        ; preds = %if.end285, %if.then83
  br label %if.end287

if.end287:                                        ; preds = %if.end286, %if.then75
  br label %if.end288

if.end288:                                        ; preds = %if.end287, %if.end69
  br label %if.end289

if.end289:                                        ; preds = %if.end288, %if.end45
  br label %if.end290

if.end290:                                        ; preds = %if.end289, %if.end24
  br label %if.end308

if.else291:                                       ; preds = %if.end
  %157 = load i8, ptr %reversed.addr, align 1
  %tobool292 = trunc i8 %157 to i1
  br i1 %tobool292, label %if.then293, label %if.else299

if.then293:                                       ; preds = %if.else291
  %158 = load ptr, ptr %bitsp, align 8
  %159 = load i32, ptr %158, align 4
  %conv294 = zext i32 %159 to i64
  %160 = load ptr, ptr %info.addr, align 8
  %mask = getelementptr inbounds %struct.mode_info, ptr %160, i32 0, i32 4
  %161 = load i64, ptr %mask, align 8
  %not = xor i64 %161, -1
  %and295 = and i64 %conv294, %not
  %162 = load ptr, ptr %info.addr, align 8
  %bits = getelementptr inbounds %struct.mode_info, ptr %162, i32 0, i32 3
  %163 = load i64, ptr %bits, align 8
  %not296 = xor i64 %163, -1
  %and297 = and i64 %and295, %not296
  %conv298 = trunc i64 %and297 to i32
  %164 = load ptr, ptr %bitsp, align 8
  store i32 %conv298, ptr %164, align 4
  br label %if.end307

if.else299:                                       ; preds = %if.else291
  %165 = load ptr, ptr %bitsp, align 8
  %166 = load i32, ptr %165, align 4
  %conv300 = zext i32 %166 to i64
  %167 = load ptr, ptr %info.addr, align 8
  %mask301 = getelementptr inbounds %struct.mode_info, ptr %167, i32 0, i32 4
  %168 = load i64, ptr %mask301, align 8
  %not302 = xor i64 %168, -1
  %and303 = and i64 %conv300, %not302
  %169 = load ptr, ptr %info.addr, align 8
  %bits304 = getelementptr inbounds %struct.mode_info, ptr %169, i32 0, i32 3
  %170 = load i64, ptr %bits304, align 8
  %or305 = or i64 %and303, %170
  %conv306 = trunc i64 %or305 to i32
  %171 = load ptr, ptr %bitsp, align 8
  store i32 %conv306, ptr %171, align 4
  br label %if.end307

if.end307:                                        ; preds = %if.else299, %if.then293
  br label %if.end308

if.end308:                                        ; preds = %if.end307, %if.end290
  store i1 true, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end308, %if.then
  %172 = load i1, ptr %retval, align 1
  ret i1 %172
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_control_char(ptr noundef %info, ptr noundef %arg, ptr noundef %mode) #3 {
entry:
  %info.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  %mode.addr = alloca ptr, align 8
  %value = alloca i64, align 8
  store ptr %info, ptr %info.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load ptr, ptr %info.addr, align 8
  %name = getelementptr inbounds %struct.control_info, ptr %0, i32 0, i32 0
  %1 = load ptr, ptr %name, align 8
  %call = call i32 @strcmp(ptr noundef %1, ptr noundef @.str.255) #23
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load ptr, ptr %info.addr, align 8
  %name1 = getelementptr inbounds %struct.control_info, ptr %2, i32 0, i32 0
  %3 = load ptr, ptr %name1, align 8
  %call2 = call i32 @strcmp(ptr noundef %3, ptr noundef @.str.256) #23
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load ptr, ptr %arg.addr, align 8
  %call4 = call i64 @integer_arg(ptr noundef %4, i64 noundef 255)
  store i64 %call4, ptr %value, align 8
  br label %if.end50

if.else:                                          ; preds = %lor.lhs.false
  %5 = load ptr, ptr %arg.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %5, i64 0
  %6 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp5 = icmp eq i32 %conv, 0
  br i1 %cmp5, label %if.then12, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %if.else
  %7 = load ptr, ptr %arg.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, ptr %7, i64 1
  %8 = load i8, ptr %arrayidx8, align 1
  %conv9 = sext i8 %8 to i32
  %cmp10 = icmp eq i32 %conv9, 0
  br i1 %cmp10, label %if.then12, label %if.else16

if.then12:                                        ; preds = %lor.lhs.false7, %if.else
  %9 = load ptr, ptr %arg.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, ptr %9, i64 0
  %10 = load i8, ptr %arrayidx13, align 1
  %call14 = call zeroext i8 @to_uchar(i8 noundef signext %10)
  %conv15 = zext i8 %call14 to i64
  store i64 %conv15, ptr %value, align 8
  br label %if.end49

if.else16:                                        ; preds = %lor.lhs.false7
  %11 = load ptr, ptr %arg.addr, align 8
  %call17 = call i32 @strcmp(ptr noundef %11, ptr noundef @.str.257) #23
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.then24, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.else16
  %12 = load ptr, ptr %arg.addr, align 8
  %call21 = call i32 @strcmp(ptr noundef %12, ptr noundef @.str.258) #23
  %cmp22 = icmp eq i32 %call21, 0
  br i1 %cmp22, label %if.then24, label %if.else25

if.then24:                                        ; preds = %lor.lhs.false20, %if.else16
  store i64 0, ptr %value, align 8
  br label %if.end48

if.else25:                                        ; preds = %lor.lhs.false20
  %13 = load ptr, ptr %arg.addr, align 8
  %arrayidx26 = getelementptr inbounds i8, ptr %13, i64 0
  %14 = load i8, ptr %arrayidx26, align 1
  %conv27 = sext i8 %14 to i32
  %cmp28 = icmp eq i32 %conv27, 94
  br i1 %cmp28, label %land.lhs.true, label %if.else45

land.lhs.true:                                    ; preds = %if.else25
  %15 = load ptr, ptr %arg.addr, align 8
  %arrayidx30 = getelementptr inbounds i8, ptr %15, i64 1
  %16 = load i8, ptr %arrayidx30, align 1
  %conv31 = sext i8 %16 to i32
  %cmp32 = icmp ne i32 %conv31, 0
  br i1 %cmp32, label %if.then34, label %if.else45

if.then34:                                        ; preds = %land.lhs.true
  %17 = load ptr, ptr %arg.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, ptr %17, i64 1
  %18 = load i8, ptr %arrayidx35, align 1
  %conv36 = sext i8 %18 to i32
  %cmp37 = icmp eq i32 %conv36, 63
  br i1 %cmp37, label %if.then39, label %if.else40

if.then39:                                        ; preds = %if.then34
  store i64 127, ptr %value, align 8
  br label %if.end

if.else40:                                        ; preds = %if.then34
  %19 = load ptr, ptr %arg.addr, align 8
  %arrayidx41 = getelementptr inbounds i8, ptr %19, i64 1
  %20 = load i8, ptr %arrayidx41, align 1
  %call42 = call zeroext i8 @to_uchar(i8 noundef signext %20)
  %conv43 = zext i8 %call42 to i32
  %and = and i32 %conv43, -97
  %conv44 = sext i32 %and to i64
  store i64 %conv44, ptr %value, align 8
  br label %if.end

if.end:                                           ; preds = %if.else40, %if.then39
  br label %if.end47

if.else45:                                        ; preds = %land.lhs.true, %if.else25
  %21 = load ptr, ptr %arg.addr, align 8
  %call46 = call i64 @integer_arg(ptr noundef %21, i64 noundef 255)
  store i64 %call46, ptr %value, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.else45, %if.end
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then24
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then12
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then
  %22 = load i64, ptr %value, align 8
  %conv51 = trunc i64 %22 to i8
  %23 = load ptr, ptr %mode.addr, align 8
  %c_cc = getelementptr inbounds %struct.termios, ptr %23, i32 0, i32 5
  %24 = load ptr, ptr %info.addr, align 8
  %offset = getelementptr inbounds %struct.control_info, ptr %24, i32 0, i32 2
  %25 = load i64, ptr %offset, align 8
  %arrayidx52 = getelementptr inbounds [32 x i8], ptr %c_cc, i64 0, i64 %25
  store i8 %conv51, ptr %arrayidx52, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @string_to_baud(ptr noundef %arg) #3 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %i = alloca i32, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [35 x %struct.speed_map], ptr @speeds, i64 0, i64 %idxprom
  %string = getelementptr inbounds %struct.speed_map, ptr %arrayidx, i32 0, i32 0
  %1 = load ptr, ptr %string, align 8
  %cmp = icmp ne ptr %1, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %arg.addr, align 8
  %3 = load i32, ptr %i, align 4
  %idxprom1 = sext i32 %3 to i64
  %arrayidx2 = getelementptr inbounds [35 x %struct.speed_map], ptr @speeds, i64 0, i64 %idxprom1
  %string3 = getelementptr inbounds %struct.speed_map, ptr %arrayidx2, i32 0, i32 0
  %4 = load ptr, ptr %string3, align 8
  %call = call i32 @strcmp(ptr noundef %2, ptr noundef %4) #23
  %cmp4 = icmp eq i32 %call, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, ptr %i, align 4
  %idxprom5 = sext i32 %5 to i64
  %arrayidx6 = getelementptr inbounds [35 x %struct.speed_map], ptr @speeds, i64 0, i64 %idxprom5
  %speed = getelementptr inbounds %struct.speed_map, ptr %arrayidx6, i32 0, i32 1
  %6 = load i32, ptr %speed, align 8
  store i32 %6, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, ptr %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !20

for.end:                                          ; preds = %for.cond
  store i32 -1, ptr %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %8 = load i32, ptr %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_speed(i32 noundef %type, ptr noundef %arg, ptr noundef %mode) #3 {
entry:
  %type.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %mode.addr = alloca ptr, align 8
  %baud = alloca i32, align 4
  store i32 %type, ptr %type.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %call = call i32 @string_to_baud(ptr noundef %0)
  store i32 %call, ptr %baud, align 4
  %1 = load i32, ptr %baud, align 4
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end

if.else:                                          ; preds = %entry
  call void @__assert_fail(ptr noundef @.str.293, ptr noundef @.str.294, i32 noundef 1724, ptr noundef @__PRETTY_FUNCTION__.set_speed) #22
  unreachable

if.end:                                           ; preds = %if.then
  %2 = load i32, ptr %type.addr, align 4
  %cmp1 = icmp eq i32 %2, 0
  br i1 %cmp1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i32, ptr %type.addr, align 4
  %cmp2 = icmp eq i32 %3, 2
  br i1 %cmp2, label %if.then3, label %if.end9

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %4 = load i32, ptr %baud, align 4
  store i32 %4, ptr @last_ibaud, align 4
  %5 = load ptr, ptr %mode.addr, align 8
  %6 = load i32, ptr %baud, align 4
  %call4 = call i32 @cfsetispeed(ptr noundef %5, i32 noundef %6) #21
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.then3
  %call6 = call ptr @gettext(ptr noundef @.str.295) #21
  %7 = load ptr, ptr %arg.addr, align 8
  %call7 = call ptr @quotearg_style(i32 noundef 4, ptr noundef %7)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call6, ptr noundef %call7) #24
  unreachable

if.end8:                                          ; preds = %if.then3
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %lor.lhs.false
  %8 = load i32, ptr %type.addr, align 4
  %cmp10 = icmp eq i32 %8, 1
  br i1 %cmp10, label %if.then13, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %if.end9
  %9 = load i32, ptr %type.addr, align 4
  %cmp12 = icmp eq i32 %9, 2
  br i1 %cmp12, label %if.then13, label %if.end20

if.then13:                                        ; preds = %lor.lhs.false11, %if.end9
  %10 = load i32, ptr %baud, align 4
  store i32 %10, ptr @last_obaud, align 4
  %11 = load ptr, ptr %mode.addr, align 8
  %12 = load i32, ptr %baud, align 4
  %call14 = call i32 @cfsetospeed(ptr noundef %11, i32 noundef %12) #21
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.then13
  %call17 = call ptr @gettext(ptr noundef @.str.296) #21
  %13 = load ptr, ptr %arg.addr, align 8
  %call18 = call ptr @quotearg_style(i32 noundef 4, ptr noundef %13)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call17, ptr noundef %call18) #24
  unreachable

if.end19:                                         ; preds = %if.then13
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %lor.lhs.false11
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @integer_arg(ptr noundef %s, i64 noundef %maxval) #3 {
entry:
  %s.addr = alloca ptr, align 8
  %maxval.addr = alloca i64, align 8
  store ptr %s, ptr %s.addr, align 8
  store i64 %maxval, ptr %maxval.addr, align 8
  %0 = load ptr, ptr %s.addr, align 8
  %1 = load i64, ptr %maxval.addr, align 8
  %call = call ptr @gettext(ptr noundef @.str.298) #21
  %call1 = call i64 @xnumtoumax(ptr noundef %0, i32 noundef 0, i64 noundef 0, i64 noundef %1, ptr noundef @.str.297, ptr noundef %call, i32 noundef 0, i32 noundef 0)
  ret i64 %call1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_window_size(i32 noundef %rows, i32 noundef %cols, ptr noundef %device_name) #3 {
entry:
  %rows.addr = alloca i32, align 4
  %cols.addr = alloca i32, align 4
  %device_name.addr = alloca ptr, align 8
  %win = alloca %struct.winsize, align 2
  store i32 %rows, ptr %rows.addr, align 4
  store i32 %cols, ptr %cols.addr, align 4
  store ptr %device_name, ptr %device_name.addr, align 8
  %call = call i32 @get_win_size(i32 noundef 0, ptr noundef %win)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %call1 = call ptr @__errno_location() #26
  %0 = load i32, ptr %call1, align 4
  %cmp = icmp ne i32 %0, 22
  br i1 %cmp, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %call3 = call ptr @__errno_location() #26
  %1 = load i32, ptr %call3, align 4
  %2 = load ptr, ptr %device_name.addr, align 8
  %call4 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %2)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %1, ptr noundef @.str.108, ptr noundef %call4) #24
  unreachable

if.end:                                           ; preds = %if.then
  call void @llvm.memset.p0.i64(ptr align 2 %win, i8 0, i64 8, i1 false)
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  %3 = load i32, ptr %rows.addr, align 4
  %cmp6 = icmp sge i32 %3, 0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end5
  %4 = load i32, ptr %rows.addr, align 4
  %conv = trunc i32 %4 to i16
  %ws_row = getelementptr inbounds %struct.winsize, ptr %win, i32 0, i32 0
  store i16 %conv, ptr %ws_row, align 2
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end5
  %5 = load i32, ptr %cols.addr, align 4
  %cmp9 = icmp sge i32 %5, 0
  br i1 %cmp9, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end8
  %6 = load i32, ptr %cols.addr, align 4
  %conv12 = trunc i32 %6 to i16
  %ws_col = getelementptr inbounds %struct.winsize, ptr %win, i32 0, i32 1
  store i16 %conv12, ptr %ws_col, align 2
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.end8
  %call14 = call i32 (i32, i64, ...) @ioctl(i32 noundef 0, i64 noundef 21524, ptr noundef %win) #21
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end13
  %call17 = call ptr @__errno_location() #26
  %7 = load i32, ptr %call17, align 4
  %8 = load ptr, ptr %device_name.addr, align 8
  %call18 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %8)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %7, ptr noundef @.str.108, ptr noundef %call18) #24
  unreachable

if.end19:                                         ; preds = %if.end13
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i65, i1 } @llvm.sadd.with.overflow.i65(i65, i65) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @recover_mode(ptr noundef %arg, ptr noundef %mode) #3 {
entry:
  %retval = alloca i1, align 1
  %arg.addr = alloca ptr, align 8
  %mode.addr = alloca ptr, align 8
  %flag = alloca [4 x i32], align 16
  %s = alloca ptr, align 8
  %i = alloca i64, align 8
  %p = alloca ptr, align 8
  %p9 = alloca ptr, align 8
  %delim = alloca i8, align 1
  store ptr %arg, ptr %arg.addr, align 8
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  store ptr %0, ptr %s, align 8
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, ptr %i, align 8
  %cmp = icmp ult i64 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %s, align 8
  %arraydecay = getelementptr inbounds [4 x i32], ptr %flag, i64 0, i64 0
  %3 = load i64, ptr %i, align 8
  %add.ptr = getelementptr inbounds i32, ptr %arraydecay, i64 %3
  %call = call i32 @strtoul_tcflag_t(ptr noundef %2, i32 noundef 16, ptr noundef %p, ptr noundef %add.ptr, i8 noundef signext 58)
  %cmp1 = icmp ne i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %for.body
  %4 = load ptr, ptr %p, align 8
  %add.ptr2 = getelementptr inbounds i8, ptr %4, i64 1
  store ptr %add.ptr2, ptr %s, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i64, ptr %i, align 8
  %inc = add i64 %5, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !21

for.end:                                          ; preds = %for.cond
  %arrayidx = getelementptr inbounds [4 x i32], ptr %flag, i64 0, i64 0
  %6 = load i32, ptr %arrayidx, align 16
  %7 = load ptr, ptr %mode.addr, align 8
  %c_iflag = getelementptr inbounds %struct.termios, ptr %7, i32 0, i32 0
  store i32 %6, ptr %c_iflag, align 4
  %arrayidx3 = getelementptr inbounds [4 x i32], ptr %flag, i64 0, i64 1
  %8 = load i32, ptr %arrayidx3, align 4
  %9 = load ptr, ptr %mode.addr, align 8
  %c_oflag = getelementptr inbounds %struct.termios, ptr %9, i32 0, i32 1
  store i32 %8, ptr %c_oflag, align 4
  %arrayidx4 = getelementptr inbounds [4 x i32], ptr %flag, i64 0, i64 2
  %10 = load i32, ptr %arrayidx4, align 8
  %11 = load ptr, ptr %mode.addr, align 8
  %c_cflag = getelementptr inbounds %struct.termios, ptr %11, i32 0, i32 2
  store i32 %10, ptr %c_cflag, align 4
  %arrayidx5 = getelementptr inbounds [4 x i32], ptr %flag, i64 0, i64 3
  %12 = load i32, ptr %arrayidx5, align 4
  %13 = load ptr, ptr %mode.addr, align 8
  %c_lflag = getelementptr inbounds %struct.termios, ptr %13, i32 0, i32 3
  store i32 %12, ptr %c_lflag, align 4
  store i64 0, ptr %i, align 8
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc19, %for.end
  %14 = load i64, ptr %i, align 8
  %cmp7 = icmp ult i64 %14, 32
  br i1 %cmp7, label %for.body8, label %for.end21

for.body8:                                        ; preds = %for.cond6
  %15 = load i64, ptr %i, align 8
  %cmp10 = icmp ult i64 %15, 31
  %16 = zext i1 %cmp10 to i64
  %cond = select i1 %cmp10, i32 58, i32 0
  %conv = trunc i32 %cond to i8
  store i8 %conv, ptr %delim, align 1
  %17 = load ptr, ptr %s, align 8
  %18 = load ptr, ptr %mode.addr, align 8
  %c_cc = getelementptr inbounds %struct.termios, ptr %18, i32 0, i32 5
  %arraydecay11 = getelementptr inbounds [32 x i8], ptr %c_cc, i64 0, i64 0
  %19 = load i64, ptr %i, align 8
  %add.ptr12 = getelementptr inbounds i8, ptr %arraydecay11, i64 %19
  %20 = load i8, ptr %delim, align 1
  %call13 = call i32 @strtoul_cc_t(ptr noundef %17, i32 noundef 16, ptr noundef %p9, ptr noundef %add.ptr12, i8 noundef signext %20)
  %cmp14 = icmp ne i32 %call13, 0
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %for.body8
  store i1 false, ptr %retval, align 1
  br label %return

if.end17:                                         ; preds = %for.body8
  %21 = load ptr, ptr %p9, align 8
  %add.ptr18 = getelementptr inbounds i8, ptr %21, i64 1
  store ptr %add.ptr18, ptr %s, align 8
  br label %for.inc19

for.inc19:                                        ; preds = %if.end17
  %22 = load i64, ptr %i, align 8
  %inc20 = add i64 %22, 1
  store i64 %inc20, ptr %i, align 8
  br label %for.cond6, !llvm.loop !22

for.end21:                                        ; preds = %for.cond6
  store i1 true, ptr %retval, align 1
  br label %return

return:                                           ; preds = %for.end21, %if.then16, %if.then
  %23 = load i1, ptr %retval, align 1
  ret i1 %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @check_speed(ptr noundef %mode) #3 {
entry:
  %mode.addr = alloca ptr, align 8
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load i32, ptr @last_ibaud, align 4
  %cmp = icmp ne i32 %0, -1
  br i1 %cmp, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @last_obaud, align 4
  %cmp1 = icmp ne i32 %1, -1
  br i1 %cmp1, label %if.then, label %if.end9

if.then:                                          ; preds = %land.lhs.true
  %2 = load ptr, ptr %mode.addr, align 8
  %call = call i32 @cfgetispeed(ptr noundef %2) #21
  %3 = load i32, ptr @last_ibaud, align 4
  %cmp2 = icmp ne i32 %call, %3
  br i1 %cmp2, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %4 = load ptr, ptr %mode.addr, align 8
  %call3 = call i32 @cfgetospeed(ptr noundef %4) #21
  %5 = load i32, ptr @last_obaud, align 4
  %cmp4 = icmp ne i32 %call3, %5
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  %call6 = call ptr @gettext(ptr noundef @.str.306) #21
  %6 = load i32, ptr @last_ibaud, align 4
  %call7 = call i64 @baud_to_value(i32 noundef %6)
  %7 = load i32, ptr @last_obaud, align 4
  %call8 = call i64 @baud_to_value(i32 noundef %7)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call6, i64 noundef %call7, i64 noundef %call8) #24
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end9

if.end9:                                          ; preds = %if.end, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @strtoul_tcflag_t(ptr noundef %s, i32 noundef %base, ptr noundef %p, ptr noundef %result, i8 noundef signext %delim) #3 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %p.addr = alloca ptr, align 8
  %result.addr = alloca ptr, align 8
  %delim.addr = alloca i8, align 1
  %ul = alloca i64, align 8
  store ptr %s, ptr %s.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store ptr %p, ptr %p.addr, align 8
  store ptr %result, ptr %result.addr, align 8
  store i8 %delim, ptr %delim.addr, align 1
  %call = call ptr @__errno_location() #26
  store i32 0, ptr %call, align 4
  %0 = load ptr, ptr %s.addr, align 8
  %1 = load ptr, ptr %p.addr, align 8
  %2 = load i32, ptr %base.addr, align 4
  %call1 = call i64 @__isoc23_strtoul(ptr noundef %0, ptr noundef %1, i32 noundef %2) #21
  store i64 %call1, ptr %ul, align 8
  %call2 = call ptr @__errno_location() #26
  %3 = load i32, ptr %call2, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load ptr, ptr %p.addr, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = load i8, ptr %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8, ptr %delim.addr, align 1
  %conv3 = sext i8 %7 to i32
  %cmp = icmp ne i32 %conv, %conv3
  br i1 %cmp, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %8 = load ptr, ptr %p.addr, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %s.addr, align 8
  %cmp6 = icmp eq ptr %9, %10
  br i1 %cmp6, label %if.then, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false5
  %11 = load i64, ptr %ul, align 8
  %conv9 = trunc i64 %11 to i32
  %conv10 = zext i32 %conv9 to i64
  %12 = load i64, ptr %ul, align 8
  %cmp11 = icmp ne i64 %conv10, %12
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false5, %lor.lhs.false, %entry
  store i32 -1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false8
  %13 = load i64, ptr %ul, align 8
  %conv13 = trunc i64 %13 to i32
  %14 = load ptr, ptr %result.addr, align 8
  store i32 %conv13, ptr %14, align 4
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load i32, ptr %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @strtoul_cc_t(ptr noundef %s, i32 noundef %base, ptr noundef %p, ptr noundef %result, i8 noundef signext %delim) #3 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %p.addr = alloca ptr, align 8
  %result.addr = alloca ptr, align 8
  %delim.addr = alloca i8, align 1
  %ul = alloca i64, align 8
  store ptr %s, ptr %s.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store ptr %p, ptr %p.addr, align 8
  store ptr %result, ptr %result.addr, align 8
  store i8 %delim, ptr %delim.addr, align 1
  %call = call ptr @__errno_location() #26
  store i32 0, ptr %call, align 4
  %0 = load ptr, ptr %s.addr, align 8
  %1 = load ptr, ptr %p.addr, align 8
  %2 = load i32, ptr %base.addr, align 4
  %call1 = call i64 @__isoc23_strtoul(ptr noundef %0, ptr noundef %1, i32 noundef %2) #21
  store i64 %call1, ptr %ul, align 8
  %call2 = call ptr @__errno_location() #26
  %3 = load i32, ptr %call2, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load ptr, ptr %p.addr, align 8
  %5 = load ptr, ptr %4, align 8
  %6 = load i8, ptr %5, align 1
  %conv = sext i8 %6 to i32
  %7 = load i8, ptr %delim.addr, align 1
  %conv3 = sext i8 %7 to i32
  %cmp = icmp ne i32 %conv, %conv3
  br i1 %cmp, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %8 = load ptr, ptr %p.addr, align 8
  %9 = load ptr, ptr %8, align 8
  %10 = load ptr, ptr %s.addr, align 8
  %cmp6 = icmp eq ptr %9, %10
  br i1 %cmp6, label %if.then, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false5
  %11 = load i64, ptr %ul, align 8
  %conv9 = trunc i64 %11 to i8
  %conv10 = zext i8 %conv9 to i64
  %12 = load i64, ptr %ul, align 8
  %cmp11 = icmp ne i64 %conv10, %12
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false5, %lor.lhs.false, %entry
  store i32 -1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false8
  %13 = load i64, ptr %ul, align 8
  %conv13 = trunc i64 %13 to i8
  %14 = load ptr, ptr %result.addr, align 8
  store i8 %conv13, ptr %14, align 1
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load i32, ptr %retval, align 4
  ret i32 %15
}

; Function Attrs: nounwind
declare i64 @__isoc23_strtoul(ptr noundef, ptr noundef, i32 noundef) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #10

; Function Attrs: noreturn nounwind
declare void @__assert_fail(ptr noundef, ptr noundef, i32 noundef, ptr noundef) #4

; Function Attrs: nounwind
declare i32 @cfsetispeed(ptr noundef, i32 noundef) #1

; Function Attrs: nounwind
declare i32 @cfsetospeed(ptr noundef, i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @to_uchar(i8 noundef signext %ch) #3 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, ptr %ch.addr, align 1
  %0 = load i8, ptr %ch.addr, align 1
  ret i8 %0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sane_mode(ptr noundef %mode) #3 {
entry:
  %mode.addr = alloca ptr, align 8
  %i = alloca i32, align 4
  %bitsp = alloca ptr, align 8
  store ptr %mode, ptr %mode.addr, align 8
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom
  %name = getelementptr inbounds %struct.control_info, ptr %arrayidx, i32 0, i32 0
  %1 = load ptr, ptr %name, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, ptr %i, align 4
  %idxprom1 = sext i32 %2 to i64
  %arrayidx2 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom1
  %saneval = getelementptr inbounds %struct.control_info, ptr %arrayidx2, i32 0, i32 1
  %3 = load i8, ptr %saneval, align 8
  %4 = load ptr, ptr %mode.addr, align 8
  %c_cc = getelementptr inbounds %struct.termios, ptr %4, i32 0, i32 5
  %5 = load i32, ptr %i, align 4
  %idxprom3 = sext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds [19 x %struct.control_info], ptr @control_info, i64 0, i64 %idxprom3
  %offset = getelementptr inbounds %struct.control_info, ptr %arrayidx4, i32 0, i32 2
  %6 = load i64, ptr %offset, align 8
  %arrayidx5 = getelementptr inbounds [32 x i8], ptr %c_cc, i64 0, i64 %6
  store i8 %3, ptr %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, ptr %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !23

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc61, %for.end
  %8 = load i32, ptr %i, align 4
  %idxprom7 = sext i32 %8 to i64
  %arrayidx8 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom7
  %name9 = getelementptr inbounds %struct.mode_info, ptr %arrayidx8, i32 0, i32 0
  %9 = load ptr, ptr %name9, align 16
  %cmp = icmp ne ptr %9, null
  br i1 %cmp, label %for.body10, label %for.end63

for.body10:                                       ; preds = %for.cond6
  %10 = load i32, ptr %i, align 4
  %idxprom11 = sext i32 %10 to i64
  %arrayidx12 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom11
  %flags = getelementptr inbounds %struct.mode_info, ptr %arrayidx12, i32 0, i32 2
  %11 = load i8, ptr %flags, align 4
  %conv = sext i8 %11 to i32
  %and = and i32 %conv, 16
  %tobool13 = icmp ne i32 %and, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body10
  br label %for.inc61

if.end:                                           ; preds = %for.body10
  %12 = load i32, ptr %i, align 4
  %idxprom14 = sext i32 %12 to i64
  %arrayidx15 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom14
  %flags16 = getelementptr inbounds %struct.mode_info, ptr %arrayidx15, i32 0, i32 2
  %13 = load i8, ptr %flags16, align 4
  %conv17 = sext i8 %13 to i32
  %and18 = and i32 %conv17, 1
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.end
  %14 = load i32, ptr %i, align 4
  %idxprom21 = sext i32 %14 to i64
  %arrayidx22 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom21
  %type = getelementptr inbounds %struct.mode_info, ptr %arrayidx22, i32 0, i32 1
  %15 = load i32, ptr %type, align 8
  %16 = load ptr, ptr %mode.addr, align 8
  %call = call ptr @mode_type_flag(i32 noundef %15, ptr noundef %16) #23
  store ptr %call, ptr %bitsp, align 8
  %17 = load ptr, ptr %bitsp, align 8
  %tobool23 = icmp ne ptr %17, null
  br i1 %tobool23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then20
  br label %cond.end

cond.false:                                       ; preds = %if.then20
  unreachable

unreachable.cont:                                 ; No predecessors!
  br label %cond.end

cond.end:                                         ; preds = %unreachable.cont, %cond.true
  %18 = load ptr, ptr %bitsp, align 8
  %19 = load i32, ptr %18, align 4
  %conv24 = zext i32 %19 to i64
  %20 = load i32, ptr %i, align 4
  %idxprom25 = sext i32 %20 to i64
  %arrayidx26 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom25
  %mask = getelementptr inbounds %struct.mode_info, ptr %arrayidx26, i32 0, i32 4
  %21 = load i64, ptr %mask, align 8
  %not = xor i64 %21, -1
  %and27 = and i64 %conv24, %not
  %22 = load i32, ptr %i, align 4
  %idxprom28 = sext i32 %22 to i64
  %arrayidx29 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom28
  %bits = getelementptr inbounds %struct.mode_info, ptr %arrayidx29, i32 0, i32 3
  %23 = load i64, ptr %bits, align 16
  %or = or i64 %and27, %23
  %conv30 = trunc i64 %or to i32
  %24 = load ptr, ptr %bitsp, align 8
  store i32 %conv30, ptr %24, align 4
  br label %if.end60

if.else:                                          ; preds = %if.end
  %25 = load i32, ptr %i, align 4
  %idxprom31 = sext i32 %25 to i64
  %arrayidx32 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom31
  %flags33 = getelementptr inbounds %struct.mode_info, ptr %arrayidx32, i32 0, i32 2
  %26 = load i8, ptr %flags33, align 4
  %conv34 = sext i8 %26 to i32
  %and35 = and i32 %conv34, 2
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.then37, label %if.end59

if.then37:                                        ; preds = %if.else
  %27 = load i32, ptr %i, align 4
  %idxprom38 = sext i32 %27 to i64
  %arrayidx39 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom38
  %type40 = getelementptr inbounds %struct.mode_info, ptr %arrayidx39, i32 0, i32 1
  %28 = load i32, ptr %type40, align 8
  %29 = load ptr, ptr %mode.addr, align 8
  %call41 = call ptr @mode_type_flag(i32 noundef %28, ptr noundef %29) #23
  store ptr %call41, ptr %bitsp, align 8
  %30 = load ptr, ptr %bitsp, align 8
  %tobool42 = icmp ne ptr %30, null
  br i1 %tobool42, label %cond.true43, label %cond.false44

cond.true43:                                      ; preds = %if.then37
  br label %cond.end46

cond.false44:                                     ; preds = %if.then37
  unreachable

unreachable.cont45:                               ; No predecessors!
  br label %cond.end46

cond.end46:                                       ; preds = %unreachable.cont45, %cond.true43
  %31 = load ptr, ptr %bitsp, align 8
  %32 = load i32, ptr %31, align 4
  %conv47 = zext i32 %32 to i64
  %33 = load i32, ptr %i, align 4
  %idxprom48 = sext i32 %33 to i64
  %arrayidx49 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom48
  %mask50 = getelementptr inbounds %struct.mode_info, ptr %arrayidx49, i32 0, i32 4
  %34 = load i64, ptr %mask50, align 8
  %not51 = xor i64 %34, -1
  %and52 = and i64 %conv47, %not51
  %35 = load i32, ptr %i, align 4
  %idxprom53 = sext i32 %35 to i64
  %arrayidx54 = getelementptr inbounds [90 x %struct.mode_info], ptr @mode_info, i64 0, i64 %idxprom53
  %bits55 = getelementptr inbounds %struct.mode_info, ptr %arrayidx54, i32 0, i32 3
  %36 = load i64, ptr %bits55, align 16
  %not56 = xor i64 %36, -1
  %and57 = and i64 %and52, %not56
  %conv58 = trunc i64 %and57 to i32
  %37 = load ptr, ptr %bitsp, align 8
  store i32 %conv58, ptr %37, align 4
  br label %if.end59

if.end59:                                         ; preds = %cond.end46, %if.else
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %cond.end
  br label %for.inc61

for.inc61:                                        ; preds = %if.end60, %if.then
  %38 = load i32, ptr %i, align 4
  %inc62 = add nsw i32 %38, 1
  store i32 %inc62, ptr %i, align 4
  br label %for.cond6, !llvm.loop !24

for.end63:                                        ; preds = %for.cond6
  ret void
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local i32 @c_strcasecmp(ptr noundef %s1, ptr noundef %s2) #11 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca ptr, align 8
  %s2.addr = alloca ptr, align 8
  %p1 = alloca ptr, align 8
  %p2 = alloca ptr, align 8
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  store ptr %s1, ptr %s1.addr, align 8
  store ptr %s2, ptr %s2.addr, align 8
  %0 = load ptr, ptr %s1.addr, align 8
  store ptr %0, ptr %p1, align 8
  %1 = load ptr, ptr %s2.addr, align 8
  store ptr %1, ptr %p2, align 8
  %2 = load ptr, ptr %p1, align 8
  %3 = load ptr, ptr %p2, align 8
  %cmp = icmp eq ptr %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %4 = load ptr, ptr %p1, align 8
  %5 = load i8, ptr %4, align 1
  %conv = zext i8 %5 to i32
  %call = call i32 @c_tolower(i32 noundef %conv)
  %conv1 = trunc i32 %call to i8
  store i8 %conv1, ptr %c1, align 1
  %6 = load ptr, ptr %p2, align 8
  %7 = load i8, ptr %6, align 1
  %conv2 = zext i8 %7 to i32
  %call3 = call i32 @c_tolower(i32 noundef %conv2)
  %conv4 = trunc i32 %call3 to i8
  store i8 %conv4, ptr %c2, align 1
  %8 = load i8, ptr %c1, align 1
  %conv5 = zext i8 %8 to i32
  %cmp6 = icmp eq i32 %conv5, 0
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %do.body
  br label %do.end

if.end9:                                          ; preds = %do.body
  %9 = load ptr, ptr %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %9, i32 1
  store ptr %incdec.ptr, ptr %p1, align 8
  %10 = load ptr, ptr %p2, align 8
  %incdec.ptr10 = getelementptr inbounds i8, ptr %10, i32 1
  store ptr %incdec.ptr10, ptr %p2, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end9
  %11 = load i8, ptr %c1, align 1
  %conv11 = zext i8 %11 to i32
  %12 = load i8, ptr %c2, align 1
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv11, %conv12
  br i1 %cmp13, label %do.body, label %do.end, !llvm.loop !25

do.end:                                           ; preds = %do.cond, %if.then8
  %13 = load i8, ptr %c1, align 1
  %conv15 = zext i8 %13 to i32
  %14 = load i8, ptr %c2, align 1
  %conv16 = zext i8 %14 to i32
  %sub = sub nsw i32 %conv15, %conv16
  store i32 %sub, ptr %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %15 = load i32, ptr %retval, align 4
  ret i32 %15
}

declare i32 @c_tolower(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @clone_quoting_options(ptr noundef %o) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %e = alloca i32, align 4
  %p = alloca ptr, align 8
  store ptr %o, ptr %o.addr, align 8
  %call = call ptr @__errno_location() #26
  %0 = load i32, ptr %call, align 4
  store i32 %0, ptr %e, align 4
  %1 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  %call1 = call noalias nonnull ptr @xmemdup(ptr noundef %cond, i64 noundef 56) #27
  store ptr %call1, ptr %p, align 8
  %3 = load i32, ptr %e, align 4
  %call2 = call ptr @__errno_location() #26
  store i32 %3, ptr %call2, align 4
  %4 = load ptr, ptr %p, align 8
  ret ptr %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_quoting_style(ptr noundef %o) #3 {
entry:
  %o.addr = alloca ptr, align 8
  store ptr %o, ptr %o.addr, align 8
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ @default_quoting_options, %cond.false ]
  %style = getelementptr inbounds %struct.quoting_options, ptr %cond, i32 0, i32 0
  %2 = load i32, ptr %style, align 8
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_quoting_style(ptr noundef %o, i32 noundef %s) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %s.addr = alloca i32, align 4
  store ptr %o, ptr %o.addr, align 8
  store i32 %s, ptr %s.addr, align 4
  %0 = load i32, ptr %s.addr, align 4
  %1 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  %style = getelementptr inbounds %struct.quoting_options, ptr %cond, i32 0, i32 0
  store i32 %0, ptr %style, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_char_quoting(ptr noundef %o, i8 noundef signext %c, i32 noundef %i) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %c.addr = alloca i8, align 1
  %i.addr = alloca i32, align 4
  %uc = alloca i8, align 1
  %p = alloca ptr, align 8
  %shift = alloca i32, align 4
  %r = alloca i32, align 4
  store ptr %o, ptr %o.addr, align 8
  store i8 %c, ptr %c.addr, align 1
  store i32 %i, ptr %i.addr, align 4
  %0 = load i8, ptr %c.addr, align 1
  store i8 %0, ptr %uc, align 1
  %1 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  %quote_these_too = getelementptr inbounds %struct.quoting_options, ptr %cond, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], ptr %quote_these_too, i64 0, i64 0
  %3 = load i8, ptr %uc, align 1
  %conv = zext i8 %3 to i64
  %div = udiv i64 %conv, 32
  %add.ptr = getelementptr inbounds i32, ptr %arraydecay, i64 %div
  store ptr %add.ptr, ptr %p, align 8
  %4 = load i8, ptr %uc, align 1
  %conv1 = zext i8 %4 to i64
  %rem = urem i64 %conv1, 32
  %conv2 = trunc i64 %rem to i32
  store i32 %conv2, ptr %shift, align 4
  %5 = load ptr, ptr %p, align 8
  %6 = load i32, ptr %5, align 4
  %7 = load i32, ptr %shift, align 4
  %shr = lshr i32 %6, %7
  %and = and i32 %shr, 1
  store i32 %and, ptr %r, align 4
  %8 = load i32, ptr %i.addr, align 4
  %and3 = and i32 %8, 1
  %9 = load i32, ptr %r, align 4
  %xor = xor i32 %and3, %9
  %10 = load i32, ptr %shift, align 4
  %shl = shl i32 %xor, %10
  %11 = load ptr, ptr %p, align 8
  %12 = load i32, ptr %11, align 4
  %xor4 = xor i32 %12, %shl
  store i32 %xor4, ptr %11, align 4
  %13 = load i32, ptr %r, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_quoting_flags(ptr noundef %o, i32 noundef %i) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %i.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store ptr %o, ptr %o.addr, align 8
  store i32 %i, ptr %i.addr, align 4
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store ptr @default_quoting_options, ptr %o.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %o.addr, align 8
  %flags = getelementptr inbounds %struct.quoting_options, ptr %1, i32 0, i32 1
  %2 = load i32, ptr %flags, align 4
  store i32 %2, ptr %r, align 4
  %3 = load i32, ptr %i.addr, align 4
  %4 = load ptr, ptr %o.addr, align 8
  %flags1 = getelementptr inbounds %struct.quoting_options, ptr %4, i32 0, i32 1
  store i32 %3, ptr %flags1, align 4
  %5 = load i32, ptr %r, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_custom_quoting(ptr noundef %o, ptr noundef %left_quote, ptr noundef %right_quote) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  store ptr %o, ptr %o.addr, align 8
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store ptr @default_quoting_options, ptr %o.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %o.addr, align 8
  %style = getelementptr inbounds %struct.quoting_options, ptr %1, i32 0, i32 0
  store i32 10, ptr %style, align 8
  %2 = load ptr, ptr %left_quote.addr, align 8
  %tobool1 = icmp ne ptr %2, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %if.end
  %3 = load ptr, ptr %right_quote.addr, align 8
  %tobool2 = icmp ne ptr %3, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  call void @abort() #22
  unreachable

if.end4:                                          ; preds = %lor.lhs.false
  %4 = load ptr, ptr %left_quote.addr, align 8
  %5 = load ptr, ptr %o.addr, align 8
  %left_quote5 = getelementptr inbounds %struct.quoting_options, ptr %5, i32 0, i32 3
  store ptr %4, ptr %left_quote5, align 8
  %6 = load ptr, ptr %right_quote.addr, align 8
  %7 = load ptr, ptr %o.addr, align 8
  %right_quote6 = getelementptr inbounds %struct.quoting_options, ptr %7, i32 0, i32 4
  store ptr %6, ptr %right_quote6, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @quotearg_buffer(ptr noundef %buffer, i64 noundef %buffersize, ptr noundef %arg, i64 noundef %argsize, ptr noundef %o) #3 {
entry:
  %buffer.addr = alloca ptr, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %e = alloca i32, align 4
  %r = alloca i64, align 8
  store ptr %buffer, ptr %buffer.addr, align 8
  store i64 %buffersize, ptr %buffersize.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store ptr %o, ptr %o.addr, align 8
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ @default_quoting_options, %cond.false ]
  store ptr %cond, ptr %p, align 8
  %call = call ptr @__errno_location() #26
  %2 = load i32, ptr %call, align 4
  store i32 %2, ptr %e, align 4
  %3 = load ptr, ptr %buffer.addr, align 8
  %4 = load i64, ptr %buffersize.addr, align 8
  %5 = load ptr, ptr %arg.addr, align 8
  %6 = load i64, ptr %argsize.addr, align 8
  %7 = load ptr, ptr %p, align 8
  %style = getelementptr inbounds %struct.quoting_options, ptr %7, i32 0, i32 0
  %8 = load i32, ptr %style, align 8
  %9 = load ptr, ptr %p, align 8
  %flags = getelementptr inbounds %struct.quoting_options, ptr %9, i32 0, i32 1
  %10 = load i32, ptr %flags, align 4
  %11 = load ptr, ptr %p, align 8
  %quote_these_too = getelementptr inbounds %struct.quoting_options, ptr %11, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], ptr %quote_these_too, i64 0, i64 0
  %12 = load ptr, ptr %p, align 8
  %left_quote = getelementptr inbounds %struct.quoting_options, ptr %12, i32 0, i32 3
  %13 = load ptr, ptr %left_quote, align 8
  %14 = load ptr, ptr %p, align 8
  %right_quote = getelementptr inbounds %struct.quoting_options, ptr %14, i32 0, i32 4
  %15 = load ptr, ptr %right_quote, align 8
  %call1 = call i64 @quotearg_buffer_restyled(ptr noundef %3, i64 noundef %4, ptr noundef %5, i64 noundef %6, i32 noundef %8, i32 noundef %10, ptr noundef %arraydecay, ptr noundef %13, ptr noundef %15)
  store i64 %call1, ptr %r, align 8
  %16 = load i32, ptr %e, align 4
  %call2 = call ptr @__errno_location() #26
  store i32 %16, ptr %call2, align 4
  %17 = load i64, ptr %r, align 8
  ret i64 %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(ptr noundef %buffer, i64 noundef %buffersize, ptr noundef %arg, i64 noundef %argsize, i32 noundef %quoting_style, i32 noundef %flags, ptr noundef %quote_these_too, ptr noundef %left_quote, ptr noundef %right_quote) #3 {
entry:
  %retval = alloca i64, align 8
  %buffer.addr = alloca ptr, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %quoting_style.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %quote_these_too.addr = alloca ptr, align 8
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %orig_buffersize = alloca i64, align 8
  %quote_string = alloca ptr, align 8
  %quote_string_len = alloca i64, align 8
  %backslash_escapes = alloca i8, align 1
  %unibyte_locale = alloca i8, align 1
  %elide_outer_quotes = alloca i8, align 1
  %encountered_single_quote = alloca i8, align 1
  %all_c_and_shell_quote_compat = alloca i8, align 1
  %pending_shell_escape_end = alloca i8, align 1
  %c = alloca i8, align 1
  %esc = alloca i8, align 1
  %is_right_quote = alloca i8, align 1
  %escaping = alloca i8, align 1
  %c_and_shell_quote_compat = alloca i8, align 1
  %m = alloca i64, align 8
  %printable = alloca i8, align 1
  %mbstate = alloca %struct.__mbstate_t, align 4
  %w = alloca i32, align 4
  %bytes = alloca i64, align 8
  %j = alloca i64, align 8
  %ilim = alloca i64, align 8
  store ptr %buffer, ptr %buffer.addr, align 8
  store i64 %buffersize, ptr %buffersize.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store i32 %quoting_style, ptr %quoting_style.addr, align 4
  store i32 %flags, ptr %flags.addr, align 4
  store ptr %quote_these_too, ptr %quote_these_too.addr, align 8
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store i64 0, ptr %len, align 8
  store i64 0, ptr %orig_buffersize, align 8
  store ptr null, ptr %quote_string, align 8
  store i64 0, ptr %quote_string_len, align 8
  store i8 0, ptr %backslash_escapes, align 1
  %call = call i64 @__ctype_get_mb_cur_max() #21
  %cmp = icmp eq i64 %call, 1
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, ptr %unibyte_locale, align 1
  %0 = load i32, ptr %flags.addr, align 4
  %and = and i32 %0, 2
  %cmp1 = icmp ne i32 %and, 0
  %frombool2 = zext i1 %cmp1 to i8
  store i8 %frombool2, ptr %elide_outer_quotes, align 1
  store i8 0, ptr %encountered_single_quote, align 1
  store i8 1, ptr %all_c_and_shell_quote_compat, align 1
  br label %process_input

process_input:                                    ; preds = %if.then674, %entry
  store i8 0, ptr %pending_shell_escape_end, align 1
  %1 = load i32, ptr %quoting_style.addr, align 4
  switch i32 %1, label %sw.default [
    i32 6, label %sw.bb
    i32 5, label %sw.bb3
    i32 7, label %sw.bb7
    i32 8, label %sw.bb8
    i32 9, label %sw.bb8
    i32 10, label %sw.bb8
    i32 3, label %sw.bb26
    i32 1, label %sw.bb27
    i32 4, label %sw.bb28
    i32 2, label %sw.bb32
    i32 0, label %sw.bb43
  ]

sw.bb:                                            ; preds = %process_input
  store i32 5, ptr %quoting_style.addr, align 4
  store i8 1, ptr %elide_outer_quotes, align 1
  br label %sw.bb3

sw.bb3:                                           ; preds = %sw.bb, %process_input
  %2 = load i8, ptr %elide_outer_quotes, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %sw.bb3
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load i64, ptr %len, align 8
  %4 = load i64, ptr %buffersize.addr, align 8
  %cmp4 = icmp ult i64 %3, %4
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  %5 = load ptr, ptr %buffer.addr, align 8
  %6 = load i64, ptr %len, align 8
  %arrayidx = getelementptr inbounds i8, ptr %5, i64 %6
  store i8 34, ptr %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then5, %do.body
  %7 = load i64, ptr %len, align 8
  %inc = add i64 %7, 1
  store i64 %inc, ptr %len, align 8
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end6

if.end6:                                          ; preds = %do.end, %sw.bb3
  store i8 1, ptr %backslash_escapes, align 1
  store ptr @.str.10.326, ptr %quote_string, align 8
  store i64 1, ptr %quote_string_len, align 8
  br label %sw.epilog

sw.bb7:                                           ; preds = %process_input
  store i8 1, ptr %backslash_escapes, align 1
  store i8 0, ptr %elide_outer_quotes, align 1
  br label %sw.epilog

sw.bb8:                                           ; preds = %process_input, %process_input, %process_input
  %8 = load i32, ptr %quoting_style.addr, align 4
  %cmp9 = icmp ne i32 %8, 10
  br i1 %cmp9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %sw.bb8
  %9 = load i32, ptr %quoting_style.addr, align 4
  %call11 = call ptr @gettext_quote(ptr noundef @.str.11.327, i32 noundef %9)
  store ptr %call11, ptr %left_quote.addr, align 8
  %10 = load i32, ptr %quoting_style.addr, align 4
  %call12 = call ptr @gettext_quote(ptr noundef @.str.12.328, i32 noundef %10)
  store ptr %call12, ptr %right_quote.addr, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %sw.bb8
  %11 = load i8, ptr %elide_outer_quotes, align 1
  %tobool14 = trunc i8 %11 to i1
  br i1 %tobool14, label %if.end24, label %if.then15

if.then15:                                        ; preds = %if.end13
  %12 = load ptr, ptr %left_quote.addr, align 8
  store ptr %12, ptr %quote_string, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then15
  %13 = load ptr, ptr %quote_string, align 8
  %14 = load i8, ptr %13, align 1
  %tobool16 = icmp ne i8 %14, 0
  br i1 %tobool16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body17

do.body17:                                        ; preds = %for.body
  %15 = load i64, ptr %len, align 8
  %16 = load i64, ptr %buffersize.addr, align 8
  %cmp18 = icmp ult i64 %15, %16
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %do.body17
  %17 = load ptr, ptr %quote_string, align 8
  %18 = load i8, ptr %17, align 1
  %19 = load ptr, ptr %buffer.addr, align 8
  %20 = load i64, ptr %len, align 8
  %arrayidx20 = getelementptr inbounds i8, ptr %19, i64 %20
  store i8 %18, ptr %arrayidx20, align 1
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %do.body17
  %21 = load i64, ptr %len, align 8
  %inc22 = add i64 %21, 1
  store i64 %inc22, ptr %len, align 8
  br label %do.end23

do.end23:                                         ; preds = %if.end21
  br label %for.inc

for.inc:                                          ; preds = %do.end23
  %22 = load ptr, ptr %quote_string, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %22, i32 1
  store ptr %incdec.ptr, ptr %quote_string, align 8
  br label %for.cond, !llvm.loop !26

for.end:                                          ; preds = %for.cond
  br label %if.end24

if.end24:                                         ; preds = %for.end, %if.end13
  store i8 1, ptr %backslash_escapes, align 1
  %23 = load ptr, ptr %right_quote.addr, align 8
  store ptr %23, ptr %quote_string, align 8
  %24 = load ptr, ptr %quote_string, align 8
  %call25 = call i64 @strlen(ptr noundef %24) #23
  store i64 %call25, ptr %quote_string_len, align 8
  br label %sw.epilog

sw.bb26:                                          ; preds = %process_input
  store i8 1, ptr %backslash_escapes, align 1
  br label %sw.bb27

sw.bb27:                                          ; preds = %sw.bb26, %process_input
  store i8 1, ptr %elide_outer_quotes, align 1
  br label %sw.bb28

sw.bb28:                                          ; preds = %sw.bb27, %process_input
  %25 = load i8, ptr %elide_outer_quotes, align 1
  %tobool29 = trunc i8 %25 to i1
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %sw.bb28
  store i8 1, ptr %backslash_escapes, align 1
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %sw.bb28
  br label %sw.bb32

sw.bb32:                                          ; preds = %if.end31, %process_input
  store i32 2, ptr %quoting_style.addr, align 4
  %26 = load i8, ptr %elide_outer_quotes, align 1
  %tobool33 = trunc i8 %26 to i1
  br i1 %tobool33, label %if.end42, label %if.then34

if.then34:                                        ; preds = %sw.bb32
  br label %do.body35

do.body35:                                        ; preds = %if.then34
  %27 = load i64, ptr %len, align 8
  %28 = load i64, ptr %buffersize.addr, align 8
  %cmp36 = icmp ult i64 %27, %28
  br i1 %cmp36, label %if.then37, label %if.end39

if.then37:                                        ; preds = %do.body35
  %29 = load ptr, ptr %buffer.addr, align 8
  %30 = load i64, ptr %len, align 8
  %arrayidx38 = getelementptr inbounds i8, ptr %29, i64 %30
  store i8 39, ptr %arrayidx38, align 1
  br label %if.end39

if.end39:                                         ; preds = %if.then37, %do.body35
  %31 = load i64, ptr %len, align 8
  %inc40 = add i64 %31, 1
  store i64 %inc40, ptr %len, align 8
  br label %do.end41

do.end41:                                         ; preds = %if.end39
  br label %if.end42

if.end42:                                         ; preds = %do.end41, %sw.bb32
  store ptr @.str.12.328, ptr %quote_string, align 8
  store i64 1, ptr %quote_string_len, align 8
  br label %sw.epilog

sw.bb43:                                          ; preds = %process_input
  store i8 0, ptr %elide_outer_quotes, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %process_input
  call void @abort() #22
  unreachable

sw.epilog:                                        ; preds = %sw.bb43, %if.end42, %if.end24, %sw.bb7, %if.end6
  store i64 0, ptr %i, align 8
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc646, %sw.epilog
  %32 = load i64, ptr %argsize.addr, align 8
  %cmp45 = icmp eq i64 %32, -1
  br i1 %cmp45, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond44
  %33 = load ptr, ptr %arg.addr, align 8
  %34 = load i64, ptr %i, align 8
  %arrayidx46 = getelementptr inbounds i8, ptr %33, i64 %34
  %35 = load i8, ptr %arrayidx46, align 1
  %conv = sext i8 %35 to i32
  %cmp47 = icmp eq i32 %conv, 0
  %conv48 = zext i1 %cmp47 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond44
  %36 = load i64, ptr %i, align 8
  %37 = load i64, ptr %argsize.addr, align 8
  %cmp49 = icmp eq i64 %36, %37
  %conv50 = zext i1 %cmp49 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv48, %cond.true ], [ %conv50, %cond.false ]
  %tobool51 = icmp ne i32 %cond, 0
  %lnot = xor i1 %tobool51, true
  br i1 %lnot, label %for.body52, label %for.end648

for.body52:                                       ; preds = %cond.end
  store i8 0, ptr %is_right_quote, align 1
  store i8 0, ptr %escaping, align 1
  store i8 0, ptr %c_and_shell_quote_compat, align 1
  %38 = load i8, ptr %backslash_escapes, align 1
  %tobool53 = trunc i8 %38 to i1
  br i1 %tobool53, label %land.lhs.true, label %if.end80

land.lhs.true:                                    ; preds = %for.body52
  %39 = load i32, ptr %quoting_style.addr, align 4
  %cmp55 = icmp ne i32 %39, 2
  br i1 %cmp55, label %land.lhs.true57, label %if.end80

land.lhs.true57:                                  ; preds = %land.lhs.true
  %40 = load i64, ptr %quote_string_len, align 8
  %tobool58 = icmp ne i64 %40, 0
  br i1 %tobool58, label %land.lhs.true59, label %if.end80

land.lhs.true59:                                  ; preds = %land.lhs.true57
  %41 = load i64, ptr %i, align 8
  %42 = load i64, ptr %quote_string_len, align 8
  %add = add i64 %41, %42
  %43 = load i64, ptr %argsize.addr, align 8
  %cmp60 = icmp eq i64 %43, -1
  br i1 %cmp60, label %land.lhs.true62, label %cond.false67

land.lhs.true62:                                  ; preds = %land.lhs.true59
  %44 = load i64, ptr %quote_string_len, align 8
  %cmp63 = icmp ult i64 1, %44
  br i1 %cmp63, label %cond.true65, label %cond.false67

cond.true65:                                      ; preds = %land.lhs.true62
  %45 = load ptr, ptr %arg.addr, align 8
  %call66 = call i64 @strlen(ptr noundef %45) #23
  store i64 %call66, ptr %argsize.addr, align 8
  br label %cond.end68

cond.false67:                                     ; preds = %land.lhs.true62, %land.lhs.true59
  %46 = load i64, ptr %argsize.addr, align 8
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi i64 [ %call66, %cond.true65 ], [ %46, %cond.false67 ]
  %cmp70 = icmp ule i64 %add, %cond69
  br i1 %cmp70, label %land.lhs.true72, label %if.end80

land.lhs.true72:                                  ; preds = %cond.end68
  %47 = load ptr, ptr %arg.addr, align 8
  %48 = load i64, ptr %i, align 8
  %add.ptr = getelementptr inbounds i8, ptr %47, i64 %48
  %49 = load ptr, ptr %quote_string, align 8
  %50 = load i64, ptr %quote_string_len, align 8
  %call73 = call i32 @memcmp(ptr noundef %add.ptr, ptr noundef %49, i64 noundef %50) #23
  %cmp74 = icmp eq i32 %call73, 0
  br i1 %cmp74, label %if.then76, label %if.end80

if.then76:                                        ; preds = %land.lhs.true72
  %51 = load i8, ptr %elide_outer_quotes, align 1
  %tobool77 = trunc i8 %51 to i1
  br i1 %tobool77, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.then76
  br label %force_outer_quoting_style

if.end79:                                         ; preds = %if.then76
  store i8 1, ptr %is_right_quote, align 1
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %land.lhs.true72, %cond.end68, %land.lhs.true57, %land.lhs.true, %for.body52
  %52 = load ptr, ptr %arg.addr, align 8
  %53 = load i64, ptr %i, align 8
  %arrayidx81 = getelementptr inbounds i8, ptr %52, i64 %53
  %54 = load i8, ptr %arrayidx81, align 1
  store i8 %54, ptr %c, align 1
  %55 = load i8, ptr %c, align 1
  %conv82 = zext i8 %55 to i32
  switch i32 %conv82, label %sw.default333 [
    i32 0, label %sw.bb83
    i32 63, label %sw.bb170
    i32 7, label %sw.bb234
    i32 8, label %sw.bb235
    i32 12, label %sw.bb236
    i32 10, label %sw.bb237
    i32 13, label %sw.bb238
    i32 9, label %sw.bb239
    i32 11, label %sw.bb240
    i32 92, label %sw.bb241
    i32 123, label %sw.bb268
    i32 125, label %sw.bb268
    i32 35, label %sw.bb281
    i32 126, label %sw.bb281
    i32 32, label %sw.bb286
    i32 33, label %sw.bb287
    i32 34, label %sw.bb287
    i32 36, label %sw.bb287
    i32 38, label %sw.bb287
    i32 40, label %sw.bb287
    i32 41, label %sw.bb287
    i32 42, label %sw.bb287
    i32 59, label %sw.bb287
    i32 60, label %sw.bb287
    i32 61, label %sw.bb287
    i32 62, label %sw.bb287
    i32 91, label %sw.bb287
    i32 94, label %sw.bb287
    i32 96, label %sw.bb287
    i32 124, label %sw.bb287
    i32 39, label %sw.bb295
    i32 37, label %sw.bb332
    i32 43, label %sw.bb332
    i32 44, label %sw.bb332
    i32 45, label %sw.bb332
    i32 46, label %sw.bb332
    i32 47, label %sw.bb332
    i32 48, label %sw.bb332
    i32 49, label %sw.bb332
    i32 50, label %sw.bb332
    i32 51, label %sw.bb332
    i32 52, label %sw.bb332
    i32 53, label %sw.bb332
    i32 54, label %sw.bb332
    i32 55, label %sw.bb332
    i32 56, label %sw.bb332
    i32 57, label %sw.bb332
    i32 58, label %sw.bb332
    i32 65, label %sw.bb332
    i32 66, label %sw.bb332
    i32 67, label %sw.bb332
    i32 68, label %sw.bb332
    i32 69, label %sw.bb332
    i32 70, label %sw.bb332
    i32 71, label %sw.bb332
    i32 72, label %sw.bb332
    i32 73, label %sw.bb332
    i32 74, label %sw.bb332
    i32 75, label %sw.bb332
    i32 76, label %sw.bb332
    i32 77, label %sw.bb332
    i32 78, label %sw.bb332
    i32 79, label %sw.bb332
    i32 80, label %sw.bb332
    i32 81, label %sw.bb332
    i32 82, label %sw.bb332
    i32 83, label %sw.bb332
    i32 84, label %sw.bb332
    i32 85, label %sw.bb332
    i32 86, label %sw.bb332
    i32 87, label %sw.bb332
    i32 88, label %sw.bb332
    i32 89, label %sw.bb332
    i32 90, label %sw.bb332
    i32 93, label %sw.bb332
    i32 95, label %sw.bb332
    i32 97, label %sw.bb332
    i32 98, label %sw.bb332
    i32 99, label %sw.bb332
    i32 100, label %sw.bb332
    i32 101, label %sw.bb332
    i32 102, label %sw.bb332
    i32 103, label %sw.bb332
    i32 104, label %sw.bb332
    i32 105, label %sw.bb332
    i32 106, label %sw.bb332
    i32 107, label %sw.bb332
    i32 108, label %sw.bb332
    i32 109, label %sw.bb332
    i32 110, label %sw.bb332
    i32 111, label %sw.bb332
    i32 112, label %sw.bb332
    i32 113, label %sw.bb332
    i32 114, label %sw.bb332
    i32 115, label %sw.bb332
    i32 116, label %sw.bb332
    i32 117, label %sw.bb332
    i32 118, label %sw.bb332
    i32 119, label %sw.bb332
    i32 120, label %sw.bb332
    i32 121, label %sw.bb332
    i32 122, label %sw.bb332
  ]

sw.bb83:                                          ; preds = %if.end80
  %56 = load i8, ptr %backslash_escapes, align 1
  %tobool84 = trunc i8 %56 to i1
  br i1 %tobool84, label %if.then85, label %if.else

if.then85:                                        ; preds = %sw.bb83
  br label %do.body86

do.body86:                                        ; preds = %if.then85
  %57 = load i8, ptr %elide_outer_quotes, align 1
  %tobool87 = trunc i8 %57 to i1
  br i1 %tobool87, label %if.then88, label %if.end89

if.then88:                                        ; preds = %do.body86
  br label %force_outer_quoting_style

if.end89:                                         ; preds = %do.body86
  store i8 1, ptr %escaping, align 1
  %58 = load i32, ptr %quoting_style.addr, align 4
  %cmp90 = icmp eq i32 %58, 2
  br i1 %cmp90, label %land.lhs.true92, label %if.end119

land.lhs.true92:                                  ; preds = %if.end89
  %59 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool93 = trunc i8 %59 to i1
  br i1 %tobool93, label %if.end119, label %if.then94

if.then94:                                        ; preds = %land.lhs.true92
  br label %do.body95

do.body95:                                        ; preds = %if.then94
  %60 = load i64, ptr %len, align 8
  %61 = load i64, ptr %buffersize.addr, align 8
  %cmp96 = icmp ult i64 %60, %61
  br i1 %cmp96, label %if.then98, label %if.end100

if.then98:                                        ; preds = %do.body95
  %62 = load ptr, ptr %buffer.addr, align 8
  %63 = load i64, ptr %len, align 8
  %arrayidx99 = getelementptr inbounds i8, ptr %62, i64 %63
  store i8 39, ptr %arrayidx99, align 1
  br label %if.end100

if.end100:                                        ; preds = %if.then98, %do.body95
  %64 = load i64, ptr %len, align 8
  %inc101 = add i64 %64, 1
  store i64 %inc101, ptr %len, align 8
  br label %do.end102

do.end102:                                        ; preds = %if.end100
  br label %do.body103

do.body103:                                       ; preds = %do.end102
  %65 = load i64, ptr %len, align 8
  %66 = load i64, ptr %buffersize.addr, align 8
  %cmp104 = icmp ult i64 %65, %66
  br i1 %cmp104, label %if.then106, label %if.end108

if.then106:                                       ; preds = %do.body103
  %67 = load ptr, ptr %buffer.addr, align 8
  %68 = load i64, ptr %len, align 8
  %arrayidx107 = getelementptr inbounds i8, ptr %67, i64 %68
  store i8 36, ptr %arrayidx107, align 1
  br label %if.end108

if.end108:                                        ; preds = %if.then106, %do.body103
  %69 = load i64, ptr %len, align 8
  %inc109 = add i64 %69, 1
  store i64 %inc109, ptr %len, align 8
  br label %do.end110

do.end110:                                        ; preds = %if.end108
  br label %do.body111

do.body111:                                       ; preds = %do.end110
  %70 = load i64, ptr %len, align 8
  %71 = load i64, ptr %buffersize.addr, align 8
  %cmp112 = icmp ult i64 %70, %71
  br i1 %cmp112, label %if.then114, label %if.end116

if.then114:                                       ; preds = %do.body111
  %72 = load ptr, ptr %buffer.addr, align 8
  %73 = load i64, ptr %len, align 8
  %arrayidx115 = getelementptr inbounds i8, ptr %72, i64 %73
  store i8 39, ptr %arrayidx115, align 1
  br label %if.end116

if.end116:                                        ; preds = %if.then114, %do.body111
  %74 = load i64, ptr %len, align 8
  %inc117 = add i64 %74, 1
  store i64 %inc117, ptr %len, align 8
  br label %do.end118

do.end118:                                        ; preds = %if.end116
  store i8 1, ptr %pending_shell_escape_end, align 1
  br label %if.end119

if.end119:                                        ; preds = %do.end118, %land.lhs.true92, %if.end89
  br label %do.body120

do.body120:                                       ; preds = %if.end119
  %75 = load i64, ptr %len, align 8
  %76 = load i64, ptr %buffersize.addr, align 8
  %cmp121 = icmp ult i64 %75, %76
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %do.body120
  %77 = load ptr, ptr %buffer.addr, align 8
  %78 = load i64, ptr %len, align 8
  %arrayidx124 = getelementptr inbounds i8, ptr %77, i64 %78
  store i8 92, ptr %arrayidx124, align 1
  br label %if.end125

if.end125:                                        ; preds = %if.then123, %do.body120
  %79 = load i64, ptr %len, align 8
  %inc126 = add i64 %79, 1
  store i64 %inc126, ptr %len, align 8
  br label %do.end127

do.end127:                                        ; preds = %if.end125
  br label %do.end128

do.end128:                                        ; preds = %do.end127
  %80 = load i32, ptr %quoting_style.addr, align 4
  %cmp129 = icmp ne i32 %80, 2
  br i1 %cmp129, label %land.lhs.true131, label %if.end164

land.lhs.true131:                                 ; preds = %do.end128
  %81 = load i64, ptr %i, align 8
  %add132 = add i64 %81, 1
  %82 = load i64, ptr %argsize.addr, align 8
  %cmp133 = icmp ult i64 %add132, %82
  br i1 %cmp133, label %land.lhs.true135, label %if.end164

land.lhs.true135:                                 ; preds = %land.lhs.true131
  %83 = load ptr, ptr %arg.addr, align 8
  %84 = load i64, ptr %i, align 8
  %add136 = add i64 %84, 1
  %arrayidx137 = getelementptr inbounds i8, ptr %83, i64 %add136
  %85 = load i8, ptr %arrayidx137, align 1
  %conv138 = sext i8 %85 to i32
  %cmp139 = icmp sle i32 48, %conv138
  br i1 %cmp139, label %land.lhs.true141, label %if.end164

land.lhs.true141:                                 ; preds = %land.lhs.true135
  %86 = load ptr, ptr %arg.addr, align 8
  %87 = load i64, ptr %i, align 8
  %add142 = add i64 %87, 1
  %arrayidx143 = getelementptr inbounds i8, ptr %86, i64 %add142
  %88 = load i8, ptr %arrayidx143, align 1
  %conv144 = sext i8 %88 to i32
  %cmp145 = icmp sle i32 %conv144, 57
  br i1 %cmp145, label %if.then147, label %if.end164

if.then147:                                       ; preds = %land.lhs.true141
  br label %do.body148

do.body148:                                       ; preds = %if.then147
  %89 = load i64, ptr %len, align 8
  %90 = load i64, ptr %buffersize.addr, align 8
  %cmp149 = icmp ult i64 %89, %90
  br i1 %cmp149, label %if.then151, label %if.end153

if.then151:                                       ; preds = %do.body148
  %91 = load ptr, ptr %buffer.addr, align 8
  %92 = load i64, ptr %len, align 8
  %arrayidx152 = getelementptr inbounds i8, ptr %91, i64 %92
  store i8 48, ptr %arrayidx152, align 1
  br label %if.end153

if.end153:                                        ; preds = %if.then151, %do.body148
  %93 = load i64, ptr %len, align 8
  %inc154 = add i64 %93, 1
  store i64 %inc154, ptr %len, align 8
  br label %do.end155

do.end155:                                        ; preds = %if.end153
  br label %do.body156

do.body156:                                       ; preds = %do.end155
  %94 = load i64, ptr %len, align 8
  %95 = load i64, ptr %buffersize.addr, align 8
  %cmp157 = icmp ult i64 %94, %95
  br i1 %cmp157, label %if.then159, label %if.end161

if.then159:                                       ; preds = %do.body156
  %96 = load ptr, ptr %buffer.addr, align 8
  %97 = load i64, ptr %len, align 8
  %arrayidx160 = getelementptr inbounds i8, ptr %96, i64 %97
  store i8 48, ptr %arrayidx160, align 1
  br label %if.end161

if.end161:                                        ; preds = %if.then159, %do.body156
  %98 = load i64, ptr %len, align 8
  %inc162 = add i64 %98, 1
  store i64 %inc162, ptr %len, align 8
  br label %do.end163

do.end163:                                        ; preds = %if.end161
  br label %if.end164

if.end164:                                        ; preds = %do.end163, %land.lhs.true141, %land.lhs.true135, %land.lhs.true131, %do.end128
  store i8 48, ptr %c, align 1
  br label %if.end169

if.else:                                          ; preds = %sw.bb83
  %99 = load i32, ptr %flags.addr, align 4
  %and165 = and i32 %99, 1
  %tobool166 = icmp ne i32 %and165, 0
  br i1 %tobool166, label %if.then167, label %if.end168

if.then167:                                       ; preds = %if.else
  br label %for.inc646

if.end168:                                        ; preds = %if.else
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %if.end164
  br label %sw.epilog546

sw.bb170:                                         ; preds = %if.end80
  %100 = load i32, ptr %quoting_style.addr, align 4
  switch i32 %100, label %sw.epilog233 [
    i32 2, label %sw.bb171
    i32 5, label %sw.bb175
  ]

sw.bb171:                                         ; preds = %sw.bb170
  %101 = load i8, ptr %elide_outer_quotes, align 1
  %tobool172 = trunc i8 %101 to i1
  br i1 %tobool172, label %if.then173, label %if.end174

if.then173:                                       ; preds = %sw.bb171
  br label %force_outer_quoting_style

if.end174:                                        ; preds = %sw.bb171
  br label %sw.epilog233

sw.bb175:                                         ; preds = %sw.bb170
  %102 = load i32, ptr %flags.addr, align 4
  %and176 = and i32 %102, 4
  %tobool177 = icmp ne i32 %and176, 0
  br i1 %tobool177, label %land.lhs.true178, label %if.end232

land.lhs.true178:                                 ; preds = %sw.bb175
  %103 = load i64, ptr %i, align 8
  %add179 = add i64 %103, 2
  %104 = load i64, ptr %argsize.addr, align 8
  %cmp180 = icmp ult i64 %add179, %104
  br i1 %cmp180, label %land.lhs.true182, label %if.end232

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %105 = load ptr, ptr %arg.addr, align 8
  %106 = load i64, ptr %i, align 8
  %add183 = add i64 %106, 1
  %arrayidx184 = getelementptr inbounds i8, ptr %105, i64 %add183
  %107 = load i8, ptr %arrayidx184, align 1
  %conv185 = sext i8 %107 to i32
  %cmp186 = icmp eq i32 %conv185, 63
  br i1 %cmp186, label %if.then188, label %if.end232

if.then188:                                       ; preds = %land.lhs.true182
  %108 = load ptr, ptr %arg.addr, align 8
  %109 = load i64, ptr %i, align 8
  %add189 = add i64 %109, 2
  %arrayidx190 = getelementptr inbounds i8, ptr %108, i64 %add189
  %110 = load i8, ptr %arrayidx190, align 1
  %conv191 = sext i8 %110 to i32
  switch i32 %conv191, label %sw.epilog231 [
    i32 33, label %sw.bb192
    i32 39, label %sw.bb192
    i32 40, label %sw.bb192
    i32 41, label %sw.bb192
    i32 45, label %sw.bb192
    i32 47, label %sw.bb192
    i32 60, label %sw.bb192
    i32 61, label %sw.bb192
    i32 62, label %sw.bb192
  ]

sw.bb192:                                         ; preds = %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188
  %111 = load i8, ptr %elide_outer_quotes, align 1
  %tobool193 = trunc i8 %111 to i1
  br i1 %tobool193, label %if.then194, label %if.end195

if.then194:                                       ; preds = %sw.bb192
  br label %force_outer_quoting_style

if.end195:                                        ; preds = %sw.bb192
  %112 = load ptr, ptr %arg.addr, align 8
  %113 = load i64, ptr %i, align 8
  %add196 = add i64 %113, 2
  %arrayidx197 = getelementptr inbounds i8, ptr %112, i64 %add196
  %114 = load i8, ptr %arrayidx197, align 1
  store i8 %114, ptr %c, align 1
  %115 = load i64, ptr %i, align 8
  %add198 = add i64 %115, 2
  store i64 %add198, ptr %i, align 8
  br label %do.body199

do.body199:                                       ; preds = %if.end195
  %116 = load i64, ptr %len, align 8
  %117 = load i64, ptr %buffersize.addr, align 8
  %cmp200 = icmp ult i64 %116, %117
  br i1 %cmp200, label %if.then202, label %if.end204

if.then202:                                       ; preds = %do.body199
  %118 = load ptr, ptr %buffer.addr, align 8
  %119 = load i64, ptr %len, align 8
  %arrayidx203 = getelementptr inbounds i8, ptr %118, i64 %119
  store i8 63, ptr %arrayidx203, align 1
  br label %if.end204

if.end204:                                        ; preds = %if.then202, %do.body199
  %120 = load i64, ptr %len, align 8
  %inc205 = add i64 %120, 1
  store i64 %inc205, ptr %len, align 8
  br label %do.end206

do.end206:                                        ; preds = %if.end204
  br label %do.body207

do.body207:                                       ; preds = %do.end206
  %121 = load i64, ptr %len, align 8
  %122 = load i64, ptr %buffersize.addr, align 8
  %cmp208 = icmp ult i64 %121, %122
  br i1 %cmp208, label %if.then210, label %if.end212

if.then210:                                       ; preds = %do.body207
  %123 = load ptr, ptr %buffer.addr, align 8
  %124 = load i64, ptr %len, align 8
  %arrayidx211 = getelementptr inbounds i8, ptr %123, i64 %124
  store i8 34, ptr %arrayidx211, align 1
  br label %if.end212

if.end212:                                        ; preds = %if.then210, %do.body207
  %125 = load i64, ptr %len, align 8
  %inc213 = add i64 %125, 1
  store i64 %inc213, ptr %len, align 8
  br label %do.end214

do.end214:                                        ; preds = %if.end212
  br label %do.body215

do.body215:                                       ; preds = %do.end214
  %126 = load i64, ptr %len, align 8
  %127 = load i64, ptr %buffersize.addr, align 8
  %cmp216 = icmp ult i64 %126, %127
  br i1 %cmp216, label %if.then218, label %if.end220

if.then218:                                       ; preds = %do.body215
  %128 = load ptr, ptr %buffer.addr, align 8
  %129 = load i64, ptr %len, align 8
  %arrayidx219 = getelementptr inbounds i8, ptr %128, i64 %129
  store i8 34, ptr %arrayidx219, align 1
  br label %if.end220

if.end220:                                        ; preds = %if.then218, %do.body215
  %130 = load i64, ptr %len, align 8
  %inc221 = add i64 %130, 1
  store i64 %inc221, ptr %len, align 8
  br label %do.end222

do.end222:                                        ; preds = %if.end220
  br label %do.body223

do.body223:                                       ; preds = %do.end222
  %131 = load i64, ptr %len, align 8
  %132 = load i64, ptr %buffersize.addr, align 8
  %cmp224 = icmp ult i64 %131, %132
  br i1 %cmp224, label %if.then226, label %if.end228

if.then226:                                       ; preds = %do.body223
  %133 = load ptr, ptr %buffer.addr, align 8
  %134 = load i64, ptr %len, align 8
  %arrayidx227 = getelementptr inbounds i8, ptr %133, i64 %134
  store i8 63, ptr %arrayidx227, align 1
  br label %if.end228

if.end228:                                        ; preds = %if.then226, %do.body223
  %135 = load i64, ptr %len, align 8
  %inc229 = add i64 %135, 1
  store i64 %inc229, ptr %len, align 8
  br label %do.end230

do.end230:                                        ; preds = %if.end228
  br label %sw.epilog231

sw.epilog231:                                     ; preds = %do.end230, %if.then188
  br label %if.end232

if.end232:                                        ; preds = %sw.epilog231, %land.lhs.true182, %land.lhs.true178, %sw.bb175
  br label %sw.epilog233

sw.epilog233:                                     ; preds = %if.end232, %if.end174, %sw.bb170
  br label %sw.epilog546

sw.bb234:                                         ; preds = %if.end80
  store i8 97, ptr %esc, align 1
  br label %c_escape

sw.bb235:                                         ; preds = %if.end80
  store i8 98, ptr %esc, align 1
  br label %c_escape

sw.bb236:                                         ; preds = %if.end80
  store i8 102, ptr %esc, align 1
  br label %c_escape

sw.bb237:                                         ; preds = %if.end80
  store i8 110, ptr %esc, align 1
  br label %c_and_shell_escape

sw.bb238:                                         ; preds = %if.end80
  store i8 114, ptr %esc, align 1
  br label %c_and_shell_escape

sw.bb239:                                         ; preds = %if.end80
  store i8 116, ptr %esc, align 1
  br label %c_and_shell_escape

sw.bb240:                                         ; preds = %if.end80
  store i8 118, ptr %esc, align 1
  br label %c_escape

sw.bb241:                                         ; preds = %if.end80
  %136 = load i8, ptr %c, align 1
  store i8 %136, ptr %esc, align 1
  %137 = load i32, ptr %quoting_style.addr, align 4
  %cmp242 = icmp eq i32 %137, 2
  br i1 %cmp242, label %if.then244, label %if.end248

if.then244:                                       ; preds = %sw.bb241
  %138 = load i8, ptr %elide_outer_quotes, align 1
  %tobool245 = trunc i8 %138 to i1
  br i1 %tobool245, label %if.then246, label %if.end247

if.then246:                                       ; preds = %if.then244
  br label %force_outer_quoting_style

if.end247:                                        ; preds = %if.then244
  br label %store_c

if.end248:                                        ; preds = %sw.bb241
  %139 = load i8, ptr %backslash_escapes, align 1
  %tobool249 = trunc i8 %139 to i1
  br i1 %tobool249, label %land.lhs.true251, label %if.end257

land.lhs.true251:                                 ; preds = %if.end248
  %140 = load i8, ptr %elide_outer_quotes, align 1
  %tobool252 = trunc i8 %140 to i1
  br i1 %tobool252, label %land.lhs.true254, label %if.end257

land.lhs.true254:                                 ; preds = %land.lhs.true251
  %141 = load i64, ptr %quote_string_len, align 8
  %tobool255 = icmp ne i64 %141, 0
  br i1 %tobool255, label %if.then256, label %if.end257

if.then256:                                       ; preds = %land.lhs.true254
  br label %store_c

if.end257:                                        ; preds = %land.lhs.true254, %land.lhs.true251, %if.end248
  br label %c_and_shell_escape

c_and_shell_escape:                               ; preds = %if.end257, %sw.bb239, %sw.bb238, %sw.bb237
  %142 = load i32, ptr %quoting_style.addr, align 4
  %cmp258 = icmp eq i32 %142, 2
  br i1 %cmp258, label %land.lhs.true260, label %if.end264

land.lhs.true260:                                 ; preds = %c_and_shell_escape
  %143 = load i8, ptr %elide_outer_quotes, align 1
  %tobool261 = trunc i8 %143 to i1
  br i1 %tobool261, label %if.then263, label %if.end264

if.then263:                                       ; preds = %land.lhs.true260
  br label %force_outer_quoting_style

if.end264:                                        ; preds = %land.lhs.true260, %c_and_shell_escape
  br label %c_escape

c_escape:                                         ; preds = %if.end264, %sw.bb240, %sw.bb236, %sw.bb235, %sw.bb234
  %144 = load i8, ptr %backslash_escapes, align 1
  %tobool265 = trunc i8 %144 to i1
  br i1 %tobool265, label %if.then266, label %if.end267

if.then266:                                       ; preds = %c_escape
  %145 = load i8, ptr %esc, align 1
  store i8 %145, ptr %c, align 1
  br label %store_escape

if.end267:                                        ; preds = %c_escape
  br label %sw.epilog546

sw.bb268:                                         ; preds = %if.end80, %if.end80
  %146 = load i64, ptr %argsize.addr, align 8
  %cmp269 = icmp eq i64 %146, -1
  br i1 %cmp269, label %cond.true271, label %cond.false276

cond.true271:                                     ; preds = %sw.bb268
  %147 = load ptr, ptr %arg.addr, align 8
  %arrayidx272 = getelementptr inbounds i8, ptr %147, i64 1
  %148 = load i8, ptr %arrayidx272, align 1
  %conv273 = sext i8 %148 to i32
  %cmp274 = icmp eq i32 %conv273, 0
  br i1 %cmp274, label %if.end280, label %if.then279

cond.false276:                                    ; preds = %sw.bb268
  %149 = load i64, ptr %argsize.addr, align 8
  %cmp277 = icmp eq i64 %149, 1
  br i1 %cmp277, label %if.end280, label %if.then279

if.then279:                                       ; preds = %cond.false276, %cond.true271
  br label %sw.epilog546

if.end280:                                        ; preds = %cond.false276, %cond.true271
  br label %sw.bb281

sw.bb281:                                         ; preds = %if.end280, %if.end80, %if.end80
  %150 = load i64, ptr %i, align 8
  %cmp282 = icmp ne i64 %150, 0
  br i1 %cmp282, label %if.then284, label %if.end285

if.then284:                                       ; preds = %sw.bb281
  br label %sw.epilog546

if.end285:                                        ; preds = %sw.bb281
  br label %sw.bb286

sw.bb286:                                         ; preds = %if.end285, %if.end80
  store i8 1, ptr %c_and_shell_quote_compat, align 1
  br label %sw.bb287

sw.bb287:                                         ; preds = %sw.bb286, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  %151 = load i32, ptr %quoting_style.addr, align 4
  %cmp288 = icmp eq i32 %151, 2
  br i1 %cmp288, label %land.lhs.true290, label %if.end294

land.lhs.true290:                                 ; preds = %sw.bb287
  %152 = load i8, ptr %elide_outer_quotes, align 1
  %tobool291 = trunc i8 %152 to i1
  br i1 %tobool291, label %if.then293, label %if.end294

if.then293:                                       ; preds = %land.lhs.true290
  br label %force_outer_quoting_style

if.end294:                                        ; preds = %land.lhs.true290, %sw.bb287
  br label %sw.epilog546

sw.bb295:                                         ; preds = %if.end80
  store i8 1, ptr %encountered_single_quote, align 1
  store i8 1, ptr %c_and_shell_quote_compat, align 1
  %153 = load i32, ptr %quoting_style.addr, align 4
  %cmp296 = icmp eq i32 %153, 2
  br i1 %cmp296, label %if.then298, label %if.end331

if.then298:                                       ; preds = %sw.bb295
  %154 = load i8, ptr %elide_outer_quotes, align 1
  %tobool299 = trunc i8 %154 to i1
  br i1 %tobool299, label %if.then300, label %if.end301

if.then300:                                       ; preds = %if.then298
  br label %force_outer_quoting_style

if.end301:                                        ; preds = %if.then298
  %155 = load i64, ptr %buffersize.addr, align 8
  %tobool302 = icmp ne i64 %155, 0
  br i1 %tobool302, label %land.lhs.true303, label %if.end306

land.lhs.true303:                                 ; preds = %if.end301
  %156 = load i64, ptr %orig_buffersize, align 8
  %tobool304 = icmp ne i64 %156, 0
  br i1 %tobool304, label %if.end306, label %if.then305

if.then305:                                       ; preds = %land.lhs.true303
  %157 = load i64, ptr %buffersize.addr, align 8
  store i64 %157, ptr %orig_buffersize, align 8
  store i64 0, ptr %buffersize.addr, align 8
  br label %if.end306

if.end306:                                        ; preds = %if.then305, %land.lhs.true303, %if.end301
  br label %do.body307

do.body307:                                       ; preds = %if.end306
  %158 = load i64, ptr %len, align 8
  %159 = load i64, ptr %buffersize.addr, align 8
  %cmp308 = icmp ult i64 %158, %159
  br i1 %cmp308, label %if.then310, label %if.end312

if.then310:                                       ; preds = %do.body307
  %160 = load ptr, ptr %buffer.addr, align 8
  %161 = load i64, ptr %len, align 8
  %arrayidx311 = getelementptr inbounds i8, ptr %160, i64 %161
  store i8 39, ptr %arrayidx311, align 1
  br label %if.end312

if.end312:                                        ; preds = %if.then310, %do.body307
  %162 = load i64, ptr %len, align 8
  %inc313 = add i64 %162, 1
  store i64 %inc313, ptr %len, align 8
  br label %do.end314

do.end314:                                        ; preds = %if.end312
  br label %do.body315

do.body315:                                       ; preds = %do.end314
  %163 = load i64, ptr %len, align 8
  %164 = load i64, ptr %buffersize.addr, align 8
  %cmp316 = icmp ult i64 %163, %164
  br i1 %cmp316, label %if.then318, label %if.end320

if.then318:                                       ; preds = %do.body315
  %165 = load ptr, ptr %buffer.addr, align 8
  %166 = load i64, ptr %len, align 8
  %arrayidx319 = getelementptr inbounds i8, ptr %165, i64 %166
  store i8 92, ptr %arrayidx319, align 1
  br label %if.end320

if.end320:                                        ; preds = %if.then318, %do.body315
  %167 = load i64, ptr %len, align 8
  %inc321 = add i64 %167, 1
  store i64 %inc321, ptr %len, align 8
  br label %do.end322

do.end322:                                        ; preds = %if.end320
  br label %do.body323

do.body323:                                       ; preds = %do.end322
  %168 = load i64, ptr %len, align 8
  %169 = load i64, ptr %buffersize.addr, align 8
  %cmp324 = icmp ult i64 %168, %169
  br i1 %cmp324, label %if.then326, label %if.end328

if.then326:                                       ; preds = %do.body323
  %170 = load ptr, ptr %buffer.addr, align 8
  %171 = load i64, ptr %len, align 8
  %arrayidx327 = getelementptr inbounds i8, ptr %170, i64 %171
  store i8 39, ptr %arrayidx327, align 1
  br label %if.end328

if.end328:                                        ; preds = %if.then326, %do.body323
  %172 = load i64, ptr %len, align 8
  %inc329 = add i64 %172, 1
  store i64 %inc329, ptr %len, align 8
  br label %do.end330

do.end330:                                        ; preds = %if.end328
  store i8 0, ptr %pending_shell_escape_end, align 1
  br label %if.end331

if.end331:                                        ; preds = %do.end330, %sw.bb295
  br label %sw.epilog546

sw.bb332:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  store i8 1, ptr %c_and_shell_quote_compat, align 1
  br label %sw.epilog546

sw.default333:                                    ; preds = %if.end80
  %173 = load i8, ptr %unibyte_locale, align 1
  %tobool334 = trunc i8 %173 to i1
  br i1 %tobool334, label %if.then335, label %if.else344

if.then335:                                       ; preds = %sw.default333
  store i64 1, ptr %m, align 8
  %call336 = call ptr @__ctype_b_loc() #26
  %174 = load ptr, ptr %call336, align 8
  %175 = load i8, ptr %c, align 1
  %conv337 = zext i8 %175 to i32
  %idxprom = sext i32 %conv337 to i64
  %arrayidx338 = getelementptr inbounds i16, ptr %174, i64 %idxprom
  %176 = load i16, ptr %arrayidx338, align 2
  %conv339 = zext i16 %176 to i32
  %and340 = and i32 %conv339, 16384
  %cmp341 = icmp ne i32 %and340, 0
  %frombool343 = zext i1 %cmp341 to i8
  store i8 %frombool343, ptr %printable, align 1
  br label %if.end404

if.else344:                                       ; preds = %sw.default333
  call void @mbszero(ptr noundef %mbstate)
  store i64 0, ptr %m, align 8
  store i8 1, ptr %printable, align 1
  %177 = load i64, ptr %argsize.addr, align 8
  %cmp345 = icmp eq i64 %177, -1
  br i1 %cmp345, label %if.then347, label %if.end349

if.then347:                                       ; preds = %if.else344
  %178 = load ptr, ptr %arg.addr, align 8
  %call348 = call i64 @strlen(ptr noundef %178) #23
  store i64 %call348, ptr %argsize.addr, align 8
  br label %if.end349

if.end349:                                        ; preds = %if.then347, %if.else344
  br label %for.cond350

for.cond350:                                      ; preds = %if.end349
  %179 = load ptr, ptr %arg.addr, align 8
  %180 = load i64, ptr %i, align 8
  %181 = load i64, ptr %m, align 8
  %add351 = add i64 %180, %181
  %arrayidx352 = getelementptr inbounds i8, ptr %179, i64 %add351
  %182 = load i64, ptr %argsize.addr, align 8
  %183 = load i64, ptr %i, align 8
  %184 = load i64, ptr %m, align 8
  %add353 = add i64 %183, %184
  %sub = sub i64 %182, %add353
  %call354 = call i64 @rpl_mbrtoc32(ptr noundef %w, ptr noundef %arrayidx352, i64 noundef %sub, ptr noundef %mbstate)
  store i64 %call354, ptr %bytes, align 8
  %185 = load i64, ptr %bytes, align 8
  %cmp355 = icmp eq i64 %185, 0
  br i1 %cmp355, label %if.then357, label %if.else358

if.then357:                                       ; preds = %for.cond350
  br label %for.end403

if.else358:                                       ; preds = %for.cond350
  %186 = load i64, ptr %bytes, align 8
  %cmp359 = icmp eq i64 %186, -1
  br i1 %cmp359, label %if.then361, label %if.else362

if.then361:                                       ; preds = %if.else358
  store i8 0, ptr %printable, align 1
  br label %for.end403

if.else362:                                       ; preds = %if.else358
  %187 = load i64, ptr %bytes, align 8
  %cmp363 = icmp eq i64 %187, -2
  br i1 %cmp363, label %if.then365, label %if.else374

if.then365:                                       ; preds = %if.else362
  store i8 0, ptr %printable, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then365
  %188 = load i64, ptr %i, align 8
  %189 = load i64, ptr %m, align 8
  %add366 = add i64 %188, %189
  %190 = load i64, ptr %argsize.addr, align 8
  %cmp367 = icmp ult i64 %add366, %190
  br i1 %cmp367, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %191 = load ptr, ptr %arg.addr, align 8
  %192 = load i64, ptr %i, align 8
  %193 = load i64, ptr %m, align 8
  %add369 = add i64 %192, %193
  %arrayidx370 = getelementptr inbounds i8, ptr %191, i64 %add369
  %194 = load i8, ptr %arrayidx370, align 1
  %conv371 = sext i8 %194 to i32
  %tobool372 = icmp ne i32 %conv371, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %195 = phi i1 [ false, %while.cond ], [ %tobool372, %land.rhs ]
  br i1 %195, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %196 = load i64, ptr %m, align 8
  %inc373 = add i64 %196, 1
  store i64 %inc373, ptr %m, align 8
  br label %while.cond, !llvm.loop !27

while.end:                                        ; preds = %land.end
  br label %for.end403

if.else374:                                       ; preds = %if.else362
  %197 = load i8, ptr %elide_outer_quotes, align 1
  %tobool375 = trunc i8 %197 to i1
  br i1 %tobool375, label %land.lhs.true377, label %if.end394

land.lhs.true377:                                 ; preds = %if.else374
  %198 = load i32, ptr %quoting_style.addr, align 4
  %cmp378 = icmp eq i32 %198, 2
  br i1 %cmp378, label %if.then380, label %if.end394

if.then380:                                       ; preds = %land.lhs.true377
  store i64 1, ptr %j, align 8
  br label %for.cond381

for.cond381:                                      ; preds = %for.inc391, %if.then380
  %199 = load i64, ptr %j, align 8
  %200 = load i64, ptr %bytes, align 8
  %cmp382 = icmp ult i64 %199, %200
  br i1 %cmp382, label %for.body384, label %for.end393

for.body384:                                      ; preds = %for.cond381
  %201 = load ptr, ptr %arg.addr, align 8
  %202 = load i64, ptr %i, align 8
  %203 = load i64, ptr %m, align 8
  %add385 = add i64 %202, %203
  %204 = load i64, ptr %j, align 8
  %add386 = add i64 %add385, %204
  %arrayidx387 = getelementptr inbounds i8, ptr %201, i64 %add386
  %205 = load i8, ptr %arrayidx387, align 1
  %conv388 = sext i8 %205 to i32
  switch i32 %conv388, label %sw.epilog390 [
    i32 91, label %sw.bb389
    i32 92, label %sw.bb389
    i32 94, label %sw.bb389
    i32 96, label %sw.bb389
    i32 124, label %sw.bb389
  ]

sw.bb389:                                         ; preds = %for.body384, %for.body384, %for.body384, %for.body384, %for.body384
  br label %force_outer_quoting_style

sw.epilog390:                                     ; preds = %for.body384
  br label %for.inc391

for.inc391:                                       ; preds = %sw.epilog390
  %206 = load i64, ptr %j, align 8
  %inc392 = add i64 %206, 1
  store i64 %inc392, ptr %j, align 8
  br label %for.cond381, !llvm.loop !28

for.end393:                                       ; preds = %for.cond381
  br label %if.end394

if.end394:                                        ; preds = %for.end393, %land.lhs.true377, %if.else374
  %207 = load i32, ptr %w, align 4
  %call395 = call i32 @c32isprint(i32 noundef %207)
  %tobool396 = icmp ne i32 %call395, 0
  br i1 %tobool396, label %if.end398, label %if.then397

if.then397:                                       ; preds = %if.end394
  store i8 0, ptr %printable, align 1
  br label %if.end398

if.end398:                                        ; preds = %if.then397, %if.end394
  %208 = load i64, ptr %bytes, align 8
  %209 = load i64, ptr %m, align 8
  %add399 = add i64 %209, %208
  store i64 %add399, ptr %m, align 8
  br label %if.end400

if.end400:                                        ; preds = %if.end398
  br label %if.end401

if.end401:                                        ; preds = %if.end400
  br label %if.end402

if.end402:                                        ; preds = %if.end401
  br label %for.end403

for.end403:                                       ; preds = %if.end402, %while.end, %if.then361, %if.then357
  br label %if.end404

if.end404:                                        ; preds = %for.end403, %if.then335
  %210 = load i8, ptr %printable, align 1
  %tobool405 = trunc i8 %210 to i1
  %frombool406 = zext i1 %tobool405 to i8
  store i8 %frombool406, ptr %c_and_shell_quote_compat, align 1
  %211 = load i64, ptr %m, align 8
  %cmp407 = icmp ult i64 1, %211
  br i1 %cmp407, label %if.then413, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end404
  %212 = load i8, ptr %backslash_escapes, align 1
  %tobool409 = trunc i8 %212 to i1
  br i1 %tobool409, label %land.lhs.true411, label %if.end545

land.lhs.true411:                                 ; preds = %lor.lhs.false
  %213 = load i8, ptr %printable, align 1
  %tobool412 = trunc i8 %213 to i1
  br i1 %tobool412, label %if.end545, label %if.then413

if.then413:                                       ; preds = %land.lhs.true411, %if.end404
  %214 = load i64, ptr %i, align 8
  %215 = load i64, ptr %m, align 8
  %add414 = add i64 %214, %215
  store i64 %add414, ptr %ilim, align 8
  br label %for.cond415

for.cond415:                                      ; preds = %do.end541, %if.then413
  %216 = load i8, ptr %backslash_escapes, align 1
  %tobool416 = trunc i8 %216 to i1
  br i1 %tobool416, label %land.lhs.true418, label %if.else492

land.lhs.true418:                                 ; preds = %for.cond415
  %217 = load i8, ptr %printable, align 1
  %tobool419 = trunc i8 %217 to i1
  br i1 %tobool419, label %if.else492, label %if.then420

if.then420:                                       ; preds = %land.lhs.true418
  br label %do.body421

do.body421:                                       ; preds = %if.then420
  %218 = load i8, ptr %elide_outer_quotes, align 1
  %tobool422 = trunc i8 %218 to i1
  br i1 %tobool422, label %if.then423, label %if.end424

if.then423:                                       ; preds = %do.body421
  br label %force_outer_quoting_style

if.end424:                                        ; preds = %do.body421
  store i8 1, ptr %escaping, align 1
  %219 = load i32, ptr %quoting_style.addr, align 4
  %cmp425 = icmp eq i32 %219, 2
  br i1 %cmp425, label %land.lhs.true427, label %if.end454

land.lhs.true427:                                 ; preds = %if.end424
  %220 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool428 = trunc i8 %220 to i1
  br i1 %tobool428, label %if.end454, label %if.then429

if.then429:                                       ; preds = %land.lhs.true427
  br label %do.body430

do.body430:                                       ; preds = %if.then429
  %221 = load i64, ptr %len, align 8
  %222 = load i64, ptr %buffersize.addr, align 8
  %cmp431 = icmp ult i64 %221, %222
  br i1 %cmp431, label %if.then433, label %if.end435

if.then433:                                       ; preds = %do.body430
  %223 = load ptr, ptr %buffer.addr, align 8
  %224 = load i64, ptr %len, align 8
  %arrayidx434 = getelementptr inbounds i8, ptr %223, i64 %224
  store i8 39, ptr %arrayidx434, align 1
  br label %if.end435

if.end435:                                        ; preds = %if.then433, %do.body430
  %225 = load i64, ptr %len, align 8
  %inc436 = add i64 %225, 1
  store i64 %inc436, ptr %len, align 8
  br label %do.end437

do.end437:                                        ; preds = %if.end435
  br label %do.body438

do.body438:                                       ; preds = %do.end437
  %226 = load i64, ptr %len, align 8
  %227 = load i64, ptr %buffersize.addr, align 8
  %cmp439 = icmp ult i64 %226, %227
  br i1 %cmp439, label %if.then441, label %if.end443

if.then441:                                       ; preds = %do.body438
  %228 = load ptr, ptr %buffer.addr, align 8
  %229 = load i64, ptr %len, align 8
  %arrayidx442 = getelementptr inbounds i8, ptr %228, i64 %229
  store i8 36, ptr %arrayidx442, align 1
  br label %if.end443

if.end443:                                        ; preds = %if.then441, %do.body438
  %230 = load i64, ptr %len, align 8
  %inc444 = add i64 %230, 1
  store i64 %inc444, ptr %len, align 8
  br label %do.end445

do.end445:                                        ; preds = %if.end443
  br label %do.body446

do.body446:                                       ; preds = %do.end445
  %231 = load i64, ptr %len, align 8
  %232 = load i64, ptr %buffersize.addr, align 8
  %cmp447 = icmp ult i64 %231, %232
  br i1 %cmp447, label %if.then449, label %if.end451

if.then449:                                       ; preds = %do.body446
  %233 = load ptr, ptr %buffer.addr, align 8
  %234 = load i64, ptr %len, align 8
  %arrayidx450 = getelementptr inbounds i8, ptr %233, i64 %234
  store i8 39, ptr %arrayidx450, align 1
  br label %if.end451

if.end451:                                        ; preds = %if.then449, %do.body446
  %235 = load i64, ptr %len, align 8
  %inc452 = add i64 %235, 1
  store i64 %inc452, ptr %len, align 8
  br label %do.end453

do.end453:                                        ; preds = %if.end451
  store i8 1, ptr %pending_shell_escape_end, align 1
  br label %if.end454

if.end454:                                        ; preds = %do.end453, %land.lhs.true427, %if.end424
  br label %do.body455

do.body455:                                       ; preds = %if.end454
  %236 = load i64, ptr %len, align 8
  %237 = load i64, ptr %buffersize.addr, align 8
  %cmp456 = icmp ult i64 %236, %237
  br i1 %cmp456, label %if.then458, label %if.end460

if.then458:                                       ; preds = %do.body455
  %238 = load ptr, ptr %buffer.addr, align 8
  %239 = load i64, ptr %len, align 8
  %arrayidx459 = getelementptr inbounds i8, ptr %238, i64 %239
  store i8 92, ptr %arrayidx459, align 1
  br label %if.end460

if.end460:                                        ; preds = %if.then458, %do.body455
  %240 = load i64, ptr %len, align 8
  %inc461 = add i64 %240, 1
  store i64 %inc461, ptr %len, align 8
  br label %do.end462

do.end462:                                        ; preds = %if.end460
  br label %do.end463

do.end463:                                        ; preds = %do.end462
  br label %do.body464

do.body464:                                       ; preds = %do.end463
  %241 = load i64, ptr %len, align 8
  %242 = load i64, ptr %buffersize.addr, align 8
  %cmp465 = icmp ult i64 %241, %242
  br i1 %cmp465, label %if.then467, label %if.end472

if.then467:                                       ; preds = %do.body464
  %243 = load i8, ptr %c, align 1
  %conv468 = zext i8 %243 to i32
  %shr = ashr i32 %conv468, 6
  %add469 = add nsw i32 48, %shr
  %conv470 = trunc i32 %add469 to i8
  %244 = load ptr, ptr %buffer.addr, align 8
  %245 = load i64, ptr %len, align 8
  %arrayidx471 = getelementptr inbounds i8, ptr %244, i64 %245
  store i8 %conv470, ptr %arrayidx471, align 1
  br label %if.end472

if.end472:                                        ; preds = %if.then467, %do.body464
  %246 = load i64, ptr %len, align 8
  %inc473 = add i64 %246, 1
  store i64 %inc473, ptr %len, align 8
  br label %do.end474

do.end474:                                        ; preds = %if.end472
  br label %do.body475

do.body475:                                       ; preds = %do.end474
  %247 = load i64, ptr %len, align 8
  %248 = load i64, ptr %buffersize.addr, align 8
  %cmp476 = icmp ult i64 %247, %248
  br i1 %cmp476, label %if.then478, label %if.end485

if.then478:                                       ; preds = %do.body475
  %249 = load i8, ptr %c, align 1
  %conv479 = zext i8 %249 to i32
  %shr480 = ashr i32 %conv479, 3
  %and481 = and i32 %shr480, 7
  %add482 = add nsw i32 48, %and481
  %conv483 = trunc i32 %add482 to i8
  %250 = load ptr, ptr %buffer.addr, align 8
  %251 = load i64, ptr %len, align 8
  %arrayidx484 = getelementptr inbounds i8, ptr %250, i64 %251
  store i8 %conv483, ptr %arrayidx484, align 1
  br label %if.end485

if.end485:                                        ; preds = %if.then478, %do.body475
  %252 = load i64, ptr %len, align 8
  %inc486 = add i64 %252, 1
  store i64 %inc486, ptr %len, align 8
  br label %do.end487

do.end487:                                        ; preds = %if.end485
  %253 = load i8, ptr %c, align 1
  %conv488 = zext i8 %253 to i32
  %and489 = and i32 %conv488, 7
  %add490 = add nsw i32 48, %and489
  %conv491 = trunc i32 %add490 to i8
  store i8 %conv491, ptr %c, align 1
  br label %if.end504

if.else492:                                       ; preds = %land.lhs.true418, %for.cond415
  %254 = load i8, ptr %is_right_quote, align 1
  %tobool493 = trunc i8 %254 to i1
  br i1 %tobool493, label %if.then494, label %if.end503

if.then494:                                       ; preds = %if.else492
  br label %do.body495

do.body495:                                       ; preds = %if.then494
  %255 = load i64, ptr %len, align 8
  %256 = load i64, ptr %buffersize.addr, align 8
  %cmp496 = icmp ult i64 %255, %256
  br i1 %cmp496, label %if.then498, label %if.end500

if.then498:                                       ; preds = %do.body495
  %257 = load ptr, ptr %buffer.addr, align 8
  %258 = load i64, ptr %len, align 8
  %arrayidx499 = getelementptr inbounds i8, ptr %257, i64 %258
  store i8 92, ptr %arrayidx499, align 1
  br label %if.end500

if.end500:                                        ; preds = %if.then498, %do.body495
  %259 = load i64, ptr %len, align 8
  %inc501 = add i64 %259, 1
  store i64 %inc501, ptr %len, align 8
  br label %do.end502

do.end502:                                        ; preds = %if.end500
  store i8 0, ptr %is_right_quote, align 1
  br label %if.end503

if.end503:                                        ; preds = %do.end502, %if.else492
  br label %if.end504

if.end504:                                        ; preds = %if.end503, %do.end487
  %260 = load i64, ptr %ilim, align 8
  %261 = load i64, ptr %i, align 8
  %add505 = add i64 %261, 1
  %cmp506 = icmp ule i64 %260, %add505
  br i1 %cmp506, label %if.then508, label %if.end509

if.then508:                                       ; preds = %if.end504
  br label %for.end544

if.end509:                                        ; preds = %if.end504
  br label %do.body510

do.body510:                                       ; preds = %if.end509
  %262 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool511 = trunc i8 %262 to i1
  br i1 %tobool511, label %land.lhs.true513, label %if.end532

land.lhs.true513:                                 ; preds = %do.body510
  %263 = load i8, ptr %escaping, align 1
  %tobool514 = trunc i8 %263 to i1
  br i1 %tobool514, label %if.end532, label %if.then515

if.then515:                                       ; preds = %land.lhs.true513
  br label %do.body516

do.body516:                                       ; preds = %if.then515
  %264 = load i64, ptr %len, align 8
  %265 = load i64, ptr %buffersize.addr, align 8
  %cmp517 = icmp ult i64 %264, %265
  br i1 %cmp517, label %if.then519, label %if.end521

if.then519:                                       ; preds = %do.body516
  %266 = load ptr, ptr %buffer.addr, align 8
  %267 = load i64, ptr %len, align 8
  %arrayidx520 = getelementptr inbounds i8, ptr %266, i64 %267
  store i8 39, ptr %arrayidx520, align 1
  br label %if.end521

if.end521:                                        ; preds = %if.then519, %do.body516
  %268 = load i64, ptr %len, align 8
  %inc522 = add i64 %268, 1
  store i64 %inc522, ptr %len, align 8
  br label %do.end523

do.end523:                                        ; preds = %if.end521
  br label %do.body524

do.body524:                                       ; preds = %do.end523
  %269 = load i64, ptr %len, align 8
  %270 = load i64, ptr %buffersize.addr, align 8
  %cmp525 = icmp ult i64 %269, %270
  br i1 %cmp525, label %if.then527, label %if.end529

if.then527:                                       ; preds = %do.body524
  %271 = load ptr, ptr %buffer.addr, align 8
  %272 = load i64, ptr %len, align 8
  %arrayidx528 = getelementptr inbounds i8, ptr %271, i64 %272
  store i8 39, ptr %arrayidx528, align 1
  br label %if.end529

if.end529:                                        ; preds = %if.then527, %do.body524
  %273 = load i64, ptr %len, align 8
  %inc530 = add i64 %273, 1
  store i64 %inc530, ptr %len, align 8
  br label %do.end531

do.end531:                                        ; preds = %if.end529
  store i8 0, ptr %pending_shell_escape_end, align 1
  br label %if.end532

if.end532:                                        ; preds = %do.end531, %land.lhs.true513, %do.body510
  br label %do.end533

do.end533:                                        ; preds = %if.end532
  br label %do.body534

do.body534:                                       ; preds = %do.end533
  %274 = load i64, ptr %len, align 8
  %275 = load i64, ptr %buffersize.addr, align 8
  %cmp535 = icmp ult i64 %274, %275
  br i1 %cmp535, label %if.then537, label %if.end539

if.then537:                                       ; preds = %do.body534
  %276 = load i8, ptr %c, align 1
  %277 = load ptr, ptr %buffer.addr, align 8
  %278 = load i64, ptr %len, align 8
  %arrayidx538 = getelementptr inbounds i8, ptr %277, i64 %278
  store i8 %276, ptr %arrayidx538, align 1
  br label %if.end539

if.end539:                                        ; preds = %if.then537, %do.body534
  %279 = load i64, ptr %len, align 8
  %inc540 = add i64 %279, 1
  store i64 %inc540, ptr %len, align 8
  br label %do.end541

do.end541:                                        ; preds = %if.end539
  %280 = load ptr, ptr %arg.addr, align 8
  %281 = load i64, ptr %i, align 8
  %inc542 = add i64 %281, 1
  store i64 %inc542, ptr %i, align 8
  %arrayidx543 = getelementptr inbounds i8, ptr %280, i64 %inc542
  %282 = load i8, ptr %arrayidx543, align 1
  store i8 %282, ptr %c, align 1
  br label %for.cond415

for.end544:                                       ; preds = %if.then508
  br label %store_c

if.end545:                                        ; preds = %land.lhs.true411, %lor.lhs.false
  br label %sw.epilog546

sw.epilog546:                                     ; preds = %if.end545, %sw.bb332, %if.end331, %if.end294, %if.then284, %if.then279, %if.end267, %sw.epilog233, %if.end169
  %283 = load i8, ptr %backslash_escapes, align 1
  %tobool547 = trunc i8 %283 to i1
  br i1 %tobool547, label %land.lhs.true549, label %lor.lhs.false552

land.lhs.true549:                                 ; preds = %sw.epilog546
  %284 = load i32, ptr %quoting_style.addr, align 4
  %cmp550 = icmp ne i32 %284, 2
  br i1 %cmp550, label %land.lhs.true555, label %lor.lhs.false552

lor.lhs.false552:                                 ; preds = %land.lhs.true549, %sw.epilog546
  %285 = load i8, ptr %elide_outer_quotes, align 1
  %tobool553 = trunc i8 %285 to i1
  br i1 %tobool553, label %land.lhs.true555, label %land.lhs.true564

land.lhs.true555:                                 ; preds = %lor.lhs.false552, %land.lhs.true549
  %286 = load ptr, ptr %quote_these_too.addr, align 8
  %tobool556 = icmp ne ptr %286, null
  br i1 %tobool556, label %land.lhs.true557, label %land.lhs.true564

land.lhs.true557:                                 ; preds = %land.lhs.true555
  %287 = load ptr, ptr %quote_these_too.addr, align 8
  %288 = load i8, ptr %c, align 1
  %conv558 = zext i8 %288 to i64
  %div = udiv i64 %conv558, 32
  %arrayidx559 = getelementptr inbounds i32, ptr %287, i64 %div
  %289 = load i32, ptr %arrayidx559, align 4
  %290 = load i8, ptr %c, align 1
  %conv560 = zext i8 %290 to i64
  %rem = urem i64 %conv560, 32
  %sh_prom = trunc i64 %rem to i32
  %shr561 = lshr i32 %289, %sh_prom
  %and562 = and i32 %shr561, 1
  %tobool563 = icmp ne i32 %and562, 0
  br i1 %tobool563, label %if.end567, label %land.lhs.true564

land.lhs.true564:                                 ; preds = %land.lhs.true557, %land.lhs.true555, %lor.lhs.false552
  %291 = load i8, ptr %is_right_quote, align 1
  %tobool565 = trunc i8 %291 to i1
  br i1 %tobool565, label %if.end567, label %if.then566

if.then566:                                       ; preds = %land.lhs.true564
  br label %store_c

if.end567:                                        ; preds = %land.lhs.true564, %land.lhs.true557
  br label %store_escape

store_escape:                                     ; preds = %if.end567, %if.then266
  br label %do.body568

do.body568:                                       ; preds = %store_escape
  %292 = load i8, ptr %elide_outer_quotes, align 1
  %tobool569 = trunc i8 %292 to i1
  br i1 %tobool569, label %if.then570, label %if.end571

if.then570:                                       ; preds = %do.body568
  br label %force_outer_quoting_style

if.end571:                                        ; preds = %do.body568
  store i8 1, ptr %escaping, align 1
  %293 = load i32, ptr %quoting_style.addr, align 4
  %cmp572 = icmp eq i32 %293, 2
  br i1 %cmp572, label %land.lhs.true574, label %if.end601

land.lhs.true574:                                 ; preds = %if.end571
  %294 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool575 = trunc i8 %294 to i1
  br i1 %tobool575, label %if.end601, label %if.then576

if.then576:                                       ; preds = %land.lhs.true574
  br label %do.body577

do.body577:                                       ; preds = %if.then576
  %295 = load i64, ptr %len, align 8
  %296 = load i64, ptr %buffersize.addr, align 8
  %cmp578 = icmp ult i64 %295, %296
  br i1 %cmp578, label %if.then580, label %if.end582

if.then580:                                       ; preds = %do.body577
  %297 = load ptr, ptr %buffer.addr, align 8
  %298 = load i64, ptr %len, align 8
  %arrayidx581 = getelementptr inbounds i8, ptr %297, i64 %298
  store i8 39, ptr %arrayidx581, align 1
  br label %if.end582

if.end582:                                        ; preds = %if.then580, %do.body577
  %299 = load i64, ptr %len, align 8
  %inc583 = add i64 %299, 1
  store i64 %inc583, ptr %len, align 8
  br label %do.end584

do.end584:                                        ; preds = %if.end582
  br label %do.body585

do.body585:                                       ; preds = %do.end584
  %300 = load i64, ptr %len, align 8
  %301 = load i64, ptr %buffersize.addr, align 8
  %cmp586 = icmp ult i64 %300, %301
  br i1 %cmp586, label %if.then588, label %if.end590

if.then588:                                       ; preds = %do.body585
  %302 = load ptr, ptr %buffer.addr, align 8
  %303 = load i64, ptr %len, align 8
  %arrayidx589 = getelementptr inbounds i8, ptr %302, i64 %303
  store i8 36, ptr %arrayidx589, align 1
  br label %if.end590

if.end590:                                        ; preds = %if.then588, %do.body585
  %304 = load i64, ptr %len, align 8
  %inc591 = add i64 %304, 1
  store i64 %inc591, ptr %len, align 8
  br label %do.end592

do.end592:                                        ; preds = %if.end590
  br label %do.body593

do.body593:                                       ; preds = %do.end592
  %305 = load i64, ptr %len, align 8
  %306 = load i64, ptr %buffersize.addr, align 8
  %cmp594 = icmp ult i64 %305, %306
  br i1 %cmp594, label %if.then596, label %if.end598

if.then596:                                       ; preds = %do.body593
  %307 = load ptr, ptr %buffer.addr, align 8
  %308 = load i64, ptr %len, align 8
  %arrayidx597 = getelementptr inbounds i8, ptr %307, i64 %308
  store i8 39, ptr %arrayidx597, align 1
  br label %if.end598

if.end598:                                        ; preds = %if.then596, %do.body593
  %309 = load i64, ptr %len, align 8
  %inc599 = add i64 %309, 1
  store i64 %inc599, ptr %len, align 8
  br label %do.end600

do.end600:                                        ; preds = %if.end598
  store i8 1, ptr %pending_shell_escape_end, align 1
  br label %if.end601

if.end601:                                        ; preds = %do.end600, %land.lhs.true574, %if.end571
  br label %do.body602

do.body602:                                       ; preds = %if.end601
  %310 = load i64, ptr %len, align 8
  %311 = load i64, ptr %buffersize.addr, align 8
  %cmp603 = icmp ult i64 %310, %311
  br i1 %cmp603, label %if.then605, label %if.end607

if.then605:                                       ; preds = %do.body602
  %312 = load ptr, ptr %buffer.addr, align 8
  %313 = load i64, ptr %len, align 8
  %arrayidx606 = getelementptr inbounds i8, ptr %312, i64 %313
  store i8 92, ptr %arrayidx606, align 1
  br label %if.end607

if.end607:                                        ; preds = %if.then605, %do.body602
  %314 = load i64, ptr %len, align 8
  %inc608 = add i64 %314, 1
  store i64 %inc608, ptr %len, align 8
  br label %do.end609

do.end609:                                        ; preds = %if.end607
  br label %do.end610

do.end610:                                        ; preds = %do.end609
  br label %store_c

store_c:                                          ; preds = %do.end610, %if.then566, %for.end544, %if.then256, %if.end247
  br label %do.body611

do.body611:                                       ; preds = %store_c
  %315 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool612 = trunc i8 %315 to i1
  br i1 %tobool612, label %land.lhs.true614, label %if.end633

land.lhs.true614:                                 ; preds = %do.body611
  %316 = load i8, ptr %escaping, align 1
  %tobool615 = trunc i8 %316 to i1
  br i1 %tobool615, label %if.end633, label %if.then616

if.then616:                                       ; preds = %land.lhs.true614
  br label %do.body617

do.body617:                                       ; preds = %if.then616
  %317 = load i64, ptr %len, align 8
  %318 = load i64, ptr %buffersize.addr, align 8
  %cmp618 = icmp ult i64 %317, %318
  br i1 %cmp618, label %if.then620, label %if.end622

if.then620:                                       ; preds = %do.body617
  %319 = load ptr, ptr %buffer.addr, align 8
  %320 = load i64, ptr %len, align 8
  %arrayidx621 = getelementptr inbounds i8, ptr %319, i64 %320
  store i8 39, ptr %arrayidx621, align 1
  br label %if.end622

if.end622:                                        ; preds = %if.then620, %do.body617
  %321 = load i64, ptr %len, align 8
  %inc623 = add i64 %321, 1
  store i64 %inc623, ptr %len, align 8
  br label %do.end624

do.end624:                                        ; preds = %if.end622
  br label %do.body625

do.body625:                                       ; preds = %do.end624
  %322 = load i64, ptr %len, align 8
  %323 = load i64, ptr %buffersize.addr, align 8
  %cmp626 = icmp ult i64 %322, %323
  br i1 %cmp626, label %if.then628, label %if.end630

if.then628:                                       ; preds = %do.body625
  %324 = load ptr, ptr %buffer.addr, align 8
  %325 = load i64, ptr %len, align 8
  %arrayidx629 = getelementptr inbounds i8, ptr %324, i64 %325
  store i8 39, ptr %arrayidx629, align 1
  br label %if.end630

if.end630:                                        ; preds = %if.then628, %do.body625
  %326 = load i64, ptr %len, align 8
  %inc631 = add i64 %326, 1
  store i64 %inc631, ptr %len, align 8
  br label %do.end632

do.end632:                                        ; preds = %if.end630
  store i8 0, ptr %pending_shell_escape_end, align 1
  br label %if.end633

if.end633:                                        ; preds = %do.end632, %land.lhs.true614, %do.body611
  br label %do.end634

do.end634:                                        ; preds = %if.end633
  br label %do.body635

do.body635:                                       ; preds = %do.end634
  %327 = load i64, ptr %len, align 8
  %328 = load i64, ptr %buffersize.addr, align 8
  %cmp636 = icmp ult i64 %327, %328
  br i1 %cmp636, label %if.then638, label %if.end640

if.then638:                                       ; preds = %do.body635
  %329 = load i8, ptr %c, align 1
  %330 = load ptr, ptr %buffer.addr, align 8
  %331 = load i64, ptr %len, align 8
  %arrayidx639 = getelementptr inbounds i8, ptr %330, i64 %331
  store i8 %329, ptr %arrayidx639, align 1
  br label %if.end640

if.end640:                                        ; preds = %if.then638, %do.body635
  %332 = load i64, ptr %len, align 8
  %inc641 = add i64 %332, 1
  store i64 %inc641, ptr %len, align 8
  br label %do.end642

do.end642:                                        ; preds = %if.end640
  %333 = load i8, ptr %c_and_shell_quote_compat, align 1
  %tobool643 = trunc i8 %333 to i1
  br i1 %tobool643, label %if.end645, label %if.then644

if.then644:                                       ; preds = %do.end642
  store i8 0, ptr %all_c_and_shell_quote_compat, align 1
  br label %if.end645

if.end645:                                        ; preds = %if.then644, %do.end642
  br label %for.inc646

for.inc646:                                       ; preds = %if.end645, %if.then167
  %334 = load i64, ptr %i, align 8
  %inc647 = add i64 %334, 1
  store i64 %inc647, ptr %i, align 8
  br label %for.cond44, !llvm.loop !29

for.end648:                                       ; preds = %cond.end
  %335 = load i64, ptr %len, align 8
  %cmp649 = icmp eq i64 %335, 0
  br i1 %cmp649, label %land.lhs.true651, label %if.end658

land.lhs.true651:                                 ; preds = %for.end648
  %336 = load i32, ptr %quoting_style.addr, align 4
  %cmp652 = icmp eq i32 %336, 2
  br i1 %cmp652, label %land.lhs.true654, label %if.end658

land.lhs.true654:                                 ; preds = %land.lhs.true651
  %337 = load i8, ptr %elide_outer_quotes, align 1
  %tobool655 = trunc i8 %337 to i1
  br i1 %tobool655, label %if.then657, label %if.end658

if.then657:                                       ; preds = %land.lhs.true654
  br label %force_outer_quoting_style

if.end658:                                        ; preds = %land.lhs.true654, %land.lhs.true651, %for.end648
  %338 = load i32, ptr %quoting_style.addr, align 4
  %cmp659 = icmp eq i32 %338, 2
  br i1 %cmp659, label %land.lhs.true661, label %if.end677

land.lhs.true661:                                 ; preds = %if.end658
  %339 = load i8, ptr %elide_outer_quotes, align 1
  %tobool662 = trunc i8 %339 to i1
  br i1 %tobool662, label %if.end677, label %land.lhs.true663

land.lhs.true663:                                 ; preds = %land.lhs.true661
  %340 = load i8, ptr %encountered_single_quote, align 1
  %tobool664 = trunc i8 %340 to i1
  br i1 %tobool664, label %if.then666, label %if.end677

if.then666:                                       ; preds = %land.lhs.true663
  %341 = load i8, ptr %all_c_and_shell_quote_compat, align 1
  %tobool667 = trunc i8 %341 to i1
  br i1 %tobool667, label %if.then668, label %if.else670

if.then668:                                       ; preds = %if.then666
  %342 = load ptr, ptr %buffer.addr, align 8
  %343 = load i64, ptr %orig_buffersize, align 8
  %344 = load ptr, ptr %arg.addr, align 8
  %345 = load i64, ptr %argsize.addr, align 8
  %346 = load i32, ptr %flags.addr, align 4
  %347 = load ptr, ptr %quote_these_too.addr, align 8
  %348 = load ptr, ptr %left_quote.addr, align 8
  %349 = load ptr, ptr %right_quote.addr, align 8
  %call669 = call i64 @quotearg_buffer_restyled(ptr noundef %342, i64 noundef %343, ptr noundef %344, i64 noundef %345, i32 noundef 5, i32 noundef %346, ptr noundef %347, ptr noundef %348, ptr noundef %349)
  store i64 %call669, ptr %retval, align 8
  br label %return

if.else670:                                       ; preds = %if.then666
  %350 = load i64, ptr %buffersize.addr, align 8
  %tobool671 = icmp ne i64 %350, 0
  br i1 %tobool671, label %if.end675, label %land.lhs.true672

land.lhs.true672:                                 ; preds = %if.else670
  %351 = load i64, ptr %orig_buffersize, align 8
  %tobool673 = icmp ne i64 %351, 0
  br i1 %tobool673, label %if.then674, label %if.end675

if.then674:                                       ; preds = %land.lhs.true672
  %352 = load i64, ptr %orig_buffersize, align 8
  store i64 %352, ptr %buffersize.addr, align 8
  store i64 0, ptr %len, align 8
  br label %process_input

if.end675:                                        ; preds = %land.lhs.true672, %if.else670
  br label %if.end676

if.end676:                                        ; preds = %if.end675
  br label %if.end677

if.end677:                                        ; preds = %if.end676, %land.lhs.true663, %land.lhs.true661, %if.end658
  %353 = load ptr, ptr %quote_string, align 8
  %tobool678 = icmp ne ptr %353, null
  br i1 %tobool678, label %land.lhs.true679, label %if.end696

land.lhs.true679:                                 ; preds = %if.end677
  %354 = load i8, ptr %elide_outer_quotes, align 1
  %tobool680 = trunc i8 %354 to i1
  br i1 %tobool680, label %if.end696, label %if.then681

if.then681:                                       ; preds = %land.lhs.true679
  br label %for.cond682

for.cond682:                                      ; preds = %for.inc693, %if.then681
  %355 = load ptr, ptr %quote_string, align 8
  %356 = load i8, ptr %355, align 1
  %tobool683 = icmp ne i8 %356, 0
  br i1 %tobool683, label %for.body684, label %for.end695

for.body684:                                      ; preds = %for.cond682
  br label %do.body685

do.body685:                                       ; preds = %for.body684
  %357 = load i64, ptr %len, align 8
  %358 = load i64, ptr %buffersize.addr, align 8
  %cmp686 = icmp ult i64 %357, %358
  br i1 %cmp686, label %if.then688, label %if.end690

if.then688:                                       ; preds = %do.body685
  %359 = load ptr, ptr %quote_string, align 8
  %360 = load i8, ptr %359, align 1
  %361 = load ptr, ptr %buffer.addr, align 8
  %362 = load i64, ptr %len, align 8
  %arrayidx689 = getelementptr inbounds i8, ptr %361, i64 %362
  store i8 %360, ptr %arrayidx689, align 1
  br label %if.end690

if.end690:                                        ; preds = %if.then688, %do.body685
  %363 = load i64, ptr %len, align 8
  %inc691 = add i64 %363, 1
  store i64 %inc691, ptr %len, align 8
  br label %do.end692

do.end692:                                        ; preds = %if.end690
  br label %for.inc693

for.inc693:                                       ; preds = %do.end692
  %364 = load ptr, ptr %quote_string, align 8
  %incdec.ptr694 = getelementptr inbounds i8, ptr %364, i32 1
  store ptr %incdec.ptr694, ptr %quote_string, align 8
  br label %for.cond682, !llvm.loop !30

for.end695:                                       ; preds = %for.cond682
  br label %if.end696

if.end696:                                        ; preds = %for.end695, %land.lhs.true679, %if.end677
  %365 = load i64, ptr %len, align 8
  %366 = load i64, ptr %buffersize.addr, align 8
  %cmp697 = icmp ult i64 %365, %366
  br i1 %cmp697, label %if.then699, label %if.end701

if.then699:                                       ; preds = %if.end696
  %367 = load ptr, ptr %buffer.addr, align 8
  %368 = load i64, ptr %len, align 8
  %arrayidx700 = getelementptr inbounds i8, ptr %367, i64 %368
  store i8 0, ptr %arrayidx700, align 1
  br label %if.end701

if.end701:                                        ; preds = %if.then699, %if.end696
  %369 = load i64, ptr %len, align 8
  store i64 %369, ptr %retval, align 8
  br label %return

force_outer_quoting_style:                        ; preds = %if.then657, %if.then570, %if.then423, %sw.bb389, %if.then300, %if.then293, %if.then263, %if.then246, %if.then194, %if.then173, %if.then88, %if.then78
  %370 = load i32, ptr %quoting_style.addr, align 4
  %cmp702 = icmp eq i32 %370, 2
  br i1 %cmp702, label %land.lhs.true704, label %if.end708

land.lhs.true704:                                 ; preds = %force_outer_quoting_style
  %371 = load i8, ptr %backslash_escapes, align 1
  %tobool705 = trunc i8 %371 to i1
  br i1 %tobool705, label %if.then707, label %if.end708

if.then707:                                       ; preds = %land.lhs.true704
  store i32 4, ptr %quoting_style.addr, align 4
  br label %if.end708

if.end708:                                        ; preds = %if.then707, %land.lhs.true704, %force_outer_quoting_style
  %372 = load ptr, ptr %buffer.addr, align 8
  %373 = load i64, ptr %buffersize.addr, align 8
  %374 = load ptr, ptr %arg.addr, align 8
  %375 = load i64, ptr %argsize.addr, align 8
  %376 = load i32, ptr %quoting_style.addr, align 4
  %377 = load i32, ptr %flags.addr, align 4
  %and709 = and i32 %377, -3
  %378 = load ptr, ptr %left_quote.addr, align 8
  %379 = load ptr, ptr %right_quote.addr, align 8
  %call710 = call i64 @quotearg_buffer_restyled(ptr noundef %372, i64 noundef %373, ptr noundef %374, i64 noundef %375, i32 noundef %376, i32 noundef %and709, ptr noundef null, ptr noundef %378, ptr noundef %379)
  store i64 %call710, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end708, %if.end701, %if.then668
  %380 = load i64, ptr %retval, align 8
  ret i64 %380
}

; Function Attrs: nounwind
declare i64 @__ctype_get_mb_cur_max() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @gettext_quote(ptr noundef %msgid, i32 noundef %s) #3 {
entry:
  %retval = alloca ptr, align 8
  %msgid.addr = alloca ptr, align 8
  %s.addr = alloca i32, align 4
  %translation = alloca ptr, align 8
  %locale_code = alloca ptr, align 8
  store ptr %msgid, ptr %msgid.addr, align 8
  store i32 %s, ptr %s.addr, align 4
  %0 = load ptr, ptr %msgid.addr, align 8
  %call = call ptr @dgettext(ptr noundef @.str.13.329, ptr noundef %0) #21
  store ptr %call, ptr %translation, align 8
  %1 = load ptr, ptr %translation, align 8
  %2 = load ptr, ptr %msgid.addr, align 8
  %cmp = icmp ne ptr %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load ptr, ptr %translation, align 8
  store ptr %3, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call ptr @locale_charset()
  store ptr %call1, ptr %locale_code, align 8
  %4 = load ptr, ptr %locale_code, align 8
  %call2 = call i32 @c_strcasecmp(ptr noundef %4, ptr noundef @.str.14.330) #23
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.end
  %5 = load ptr, ptr %msgid.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %5, i64 0
  %6 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp5 = icmp eq i32 %conv, 96
  %7 = zext i1 %cmp5 to i64
  %cond = select i1 %cmp5, ptr @.str.15.331, ptr @.str.16.332
  store ptr %cond, ptr %retval, align 8
  br label %return

if.end7:                                          ; preds = %if.end
  %8 = load ptr, ptr %locale_code, align 8
  %call8 = call i32 @c_strcasecmp(ptr noundef %8, ptr noundef @.str.17.333) #23
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then11, label %if.end17

if.then11:                                        ; preds = %if.end7
  %9 = load ptr, ptr %msgid.addr, align 8
  %arrayidx12 = getelementptr inbounds i8, ptr %9, i64 0
  %10 = load i8, ptr %arrayidx12, align 1
  %conv13 = sext i8 %10 to i32
  %cmp14 = icmp eq i32 %conv13, 96
  %11 = zext i1 %cmp14 to i64
  %cond16 = select i1 %cmp14, ptr @.str.18.334, ptr @.str.19.335
  store ptr %cond16, ptr %retval, align 8
  br label %return

if.end17:                                         ; preds = %if.end7
  %12 = load i32, ptr %s.addr, align 4
  %cmp18 = icmp eq i32 %12, 9
  %13 = zext i1 %cmp18 to i64
  %cond20 = select i1 %cmp18, ptr @.str.10.326, ptr @.str.12.328
  store ptr %cond20, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end17, %if.then11, %if.then4, %if.then
  %14 = load ptr, ptr %retval, align 8
  ret ptr %14
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #6

; Function Attrs: nounwind willreturn memory(none)
declare ptr @__ctype_b_loc() #7

declare void @mbszero(ptr noundef) #2

declare i32 @c32isprint(i32 noundef) #2

; Function Attrs: nounwind
declare ptr @dgettext(ptr noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @quotearg_alloc(ptr noundef %arg, i64 noundef %argsize, ptr noundef %o) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store ptr %o, ptr %o.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i64, ptr %argsize.addr, align 8
  %2 = load ptr, ptr %o.addr, align 8
  %call = call noalias nonnull ptr @quotearg_alloc_mem(ptr noundef %0, i64 noundef %1, ptr noundef null, ptr noundef %2)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @quotearg_alloc_mem(ptr noundef %arg, i64 noundef %argsize, ptr noundef %size, ptr noundef %o) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %size.addr = alloca ptr, align 8
  %o.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %e = alloca i32, align 4
  %flags = alloca i32, align 4
  %bufsize = alloca i64, align 8
  %buf = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store ptr %size, ptr %size.addr, align 8
  store ptr %o, ptr %o.addr, align 8
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ @default_quoting_options, %cond.false ]
  store ptr %cond, ptr %p, align 8
  %call = call ptr @__errno_location() #26
  %2 = load i32, ptr %call, align 4
  store i32 %2, ptr %e, align 4
  %3 = load ptr, ptr %p, align 8
  %flags1 = getelementptr inbounds %struct.quoting_options, ptr %3, i32 0, i32 1
  %4 = load i32, ptr %flags1, align 4
  %5 = load ptr, ptr %size.addr, align 8
  %tobool2 = icmp ne ptr %5, null
  %6 = zext i1 %tobool2 to i64
  %cond3 = select i1 %tobool2, i32 0, i32 1
  %or = or i32 %4, %cond3
  store i32 %or, ptr %flags, align 4
  %7 = load ptr, ptr %arg.addr, align 8
  %8 = load i64, ptr %argsize.addr, align 8
  %9 = load ptr, ptr %p, align 8
  %style = getelementptr inbounds %struct.quoting_options, ptr %9, i32 0, i32 0
  %10 = load i32, ptr %style, align 8
  %11 = load i32, ptr %flags, align 4
  %12 = load ptr, ptr %p, align 8
  %quote_these_too = getelementptr inbounds %struct.quoting_options, ptr %12, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], ptr %quote_these_too, i64 0, i64 0
  %13 = load ptr, ptr %p, align 8
  %left_quote = getelementptr inbounds %struct.quoting_options, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %left_quote, align 8
  %15 = load ptr, ptr %p, align 8
  %right_quote = getelementptr inbounds %struct.quoting_options, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %right_quote, align 8
  %call4 = call i64 @quotearg_buffer_restyled(ptr noundef null, i64 noundef 0, ptr noundef %7, i64 noundef %8, i32 noundef %10, i32 noundef %11, ptr noundef %arraydecay, ptr noundef %14, ptr noundef %16)
  %add = add i64 %call4, 1
  store i64 %add, ptr %bufsize, align 8
  %17 = load i64, ptr %bufsize, align 8
  %call5 = call noalias nonnull ptr @xcharalloc(i64 noundef %17) #28
  store ptr %call5, ptr %buf, align 8
  %18 = load ptr, ptr %buf, align 8
  %19 = load i64, ptr %bufsize, align 8
  %20 = load ptr, ptr %arg.addr, align 8
  %21 = load i64, ptr %argsize.addr, align 8
  %22 = load ptr, ptr %p, align 8
  %style6 = getelementptr inbounds %struct.quoting_options, ptr %22, i32 0, i32 0
  %23 = load i32, ptr %style6, align 8
  %24 = load i32, ptr %flags, align 4
  %25 = load ptr, ptr %p, align 8
  %quote_these_too7 = getelementptr inbounds %struct.quoting_options, ptr %25, i32 0, i32 2
  %arraydecay8 = getelementptr inbounds [8 x i32], ptr %quote_these_too7, i64 0, i64 0
  %26 = load ptr, ptr %p, align 8
  %left_quote9 = getelementptr inbounds %struct.quoting_options, ptr %26, i32 0, i32 3
  %27 = load ptr, ptr %left_quote9, align 8
  %28 = load ptr, ptr %p, align 8
  %right_quote10 = getelementptr inbounds %struct.quoting_options, ptr %28, i32 0, i32 4
  %29 = load ptr, ptr %right_quote10, align 8
  %call11 = call i64 @quotearg_buffer_restyled(ptr noundef %18, i64 noundef %19, ptr noundef %20, i64 noundef %21, i32 noundef %23, i32 noundef %24, ptr noundef %arraydecay8, ptr noundef %27, ptr noundef %29)
  %30 = load i32, ptr %e, align 4
  %call12 = call ptr @__errno_location() #26
  store i32 %30, ptr %call12, align 4
  %31 = load ptr, ptr %size.addr, align 8
  %tobool13 = icmp ne ptr %31, null
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %32 = load i64, ptr %bufsize, align 8
  %sub = sub i64 %32, 1
  %33 = load ptr, ptr %size.addr, align 8
  store i64 %sub, ptr %33, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %34 = load ptr, ptr %buf, align 8
  ret ptr %34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @quotearg_free() #3 {
entry:
  %sv = alloca ptr, align 8
  %i = alloca i32, align 4
  %0 = load ptr, ptr @slotvec, align 8
  store ptr %0, ptr %sv, align 8
  store i32 1, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, ptr %i, align 4
  %2 = load i32, ptr @nslots, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %sv, align 8
  %4 = load i32, ptr %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds %struct.slotvec, ptr %3, i64 %idxprom
  %val = getelementptr inbounds %struct.slotvec, ptr %arrayidx, i32 0, i32 1
  %5 = load ptr, ptr %val, align 8
  call void @free(ptr noundef %5) #21
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !31

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %sv, align 8
  %arrayidx1 = getelementptr inbounds %struct.slotvec, ptr %7, i64 0
  %val2 = getelementptr inbounds %struct.slotvec, ptr %arrayidx1, i32 0, i32 1
  %8 = load ptr, ptr %val2, align 8
  %cmp3 = icmp ne ptr %8, @slot0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %9 = load ptr, ptr %sv, align 8
  %arrayidx4 = getelementptr inbounds %struct.slotvec, ptr %9, i64 0
  %val5 = getelementptr inbounds %struct.slotvec, ptr %arrayidx4, i32 0, i32 1
  %10 = load ptr, ptr %val5, align 8
  call void @free(ptr noundef %10) #21
  store i64 256, ptr @slotvec0, align 8
  store ptr @slot0, ptr getelementptr inbounds (%struct.slotvec, ptr @slotvec0, i32 0, i32 1), align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %11 = load ptr, ptr %sv, align 8
  %cmp6 = icmp ne ptr %11, @slotvec0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  %12 = load ptr, ptr %sv, align 8
  call void @free(ptr noundef %12) #21
  store ptr @slotvec0, ptr @slotvec, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  store i32 1, ptr @nslots, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n(i32 noundef %n, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %0, ptr noundef %1, i64 noundef -1, ptr noundef @default_quoting_options)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @quotearg_n_options(i32 noundef %n, ptr noundef %arg, i64 noundef %argsize, ptr noundef %options) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %options.addr = alloca ptr, align 8
  %e = alloca i32, align 4
  %sv = alloca ptr, align 8
  %nslots_max = alloca i32, align 4
  %preallocated = alloca i8, align 1
  %new_nslots = alloca i64, align 8
  %size = alloca i64, align 8
  %val = alloca ptr, align 8
  %flags = alloca i32, align 4
  %qsize = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store ptr %options, ptr %options.addr, align 8
  %call = call ptr @__errno_location() #26
  %0 = load i32, ptr %call, align 4
  store i32 %0, ptr %e, align 4
  %1 = load ptr, ptr @slotvec, align 8
  store ptr %1, ptr %sv, align 8
  store i32 2147483647, ptr %nslots_max, align 4
  %2 = load i32, ptr %n.addr, align 4
  %cmp = icmp sle i32 0, %2
  br i1 %cmp, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, ptr %n.addr, align 4
  %4 = load i32, ptr %nslots_max, align 4
  %cmp1 = icmp slt i32 %3, %4
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  call void @abort() #22
  unreachable

if.end:                                           ; preds = %land.lhs.true
  %5 = load i32, ptr @nslots, align 4
  %6 = load i32, ptr %n.addr, align 4
  %cmp2 = icmp sle i32 %5, %6
  br i1 %cmp2, label %if.then3, label %if.end15

if.then3:                                         ; preds = %if.end
  %7 = load ptr, ptr %sv, align 8
  %cmp4 = icmp eq ptr %7, @slotvec0
  %frombool = zext i1 %cmp4 to i8
  store i8 %frombool, ptr %preallocated, align 1
  %8 = load i32, ptr @nslots, align 4
  %conv = sext i32 %8 to i64
  store i64 %conv, ptr %new_nslots, align 8
  %9 = load i8, ptr %preallocated, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  %10 = load ptr, ptr %sv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ null, %cond.true ], [ %10, %cond.false ]
  %11 = load i32, ptr %n.addr, align 4
  %12 = load i32, ptr @nslots, align 4
  %sub = sub nsw i32 %11, %12
  %add = add nsw i32 %sub, 1
  %conv6 = sext i32 %add to i64
  %13 = load i32, ptr %nslots_max, align 4
  %conv7 = sext i32 %13 to i64
  %call8 = call nonnull ptr @xpalloc(ptr noundef %cond, ptr noundef %new_nslots, i64 noundef %conv6, i64 noundef %conv7, i64 noundef 16)
  store ptr %call8, ptr %sv, align 8
  store ptr %call8, ptr @slotvec, align 8
  %14 = load i8, ptr %preallocated, align 1
  %tobool9 = trunc i8 %14 to i1
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %cond.end
  %15 = load ptr, ptr %sv, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 @slotvec0, i64 16, i1 false)
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %cond.end
  %16 = load ptr, ptr %sv, align 8
  %17 = load i32, ptr @nslots, align 4
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds %struct.slotvec, ptr %16, i64 %idx.ext
  %18 = load i64, ptr %new_nslots, align 8
  %19 = load i32, ptr @nslots, align 4
  %conv12 = sext i32 %19 to i64
  %sub13 = sub nsw i64 %18, %conv12
  %mul = mul i64 %sub13, 16
  call void @llvm.memset.p0.i64(ptr align 8 %add.ptr, i8 0, i64 %mul, i1 false)
  %20 = load i64, ptr %new_nslots, align 8
  %conv14 = trunc i64 %20 to i32
  store i32 %conv14, ptr @nslots, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.end11, %if.end
  %21 = load ptr, ptr %sv, align 8
  %22 = load i32, ptr %n.addr, align 4
  %idxprom = sext i32 %22 to i64
  %arrayidx = getelementptr inbounds %struct.slotvec, ptr %21, i64 %idxprom
  %size16 = getelementptr inbounds %struct.slotvec, ptr %arrayidx, i32 0, i32 0
  %23 = load i64, ptr %size16, align 8
  store i64 %23, ptr %size, align 8
  %24 = load ptr, ptr %sv, align 8
  %25 = load i32, ptr %n.addr, align 4
  %idxprom17 = sext i32 %25 to i64
  %arrayidx18 = getelementptr inbounds %struct.slotvec, ptr %24, i64 %idxprom17
  %val19 = getelementptr inbounds %struct.slotvec, ptr %arrayidx18, i32 0, i32 1
  %26 = load ptr, ptr %val19, align 8
  store ptr %26, ptr %val, align 8
  %27 = load ptr, ptr %options.addr, align 8
  %flags20 = getelementptr inbounds %struct.quoting_options, ptr %27, i32 0, i32 1
  %28 = load i32, ptr %flags20, align 4
  %or = or i32 %28, 1
  store i32 %or, ptr %flags, align 4
  %29 = load ptr, ptr %val, align 8
  %30 = load i64, ptr %size, align 8
  %31 = load ptr, ptr %arg.addr, align 8
  %32 = load i64, ptr %argsize.addr, align 8
  %33 = load ptr, ptr %options.addr, align 8
  %style = getelementptr inbounds %struct.quoting_options, ptr %33, i32 0, i32 0
  %34 = load i32, ptr %style, align 8
  %35 = load i32, ptr %flags, align 4
  %36 = load ptr, ptr %options.addr, align 8
  %quote_these_too = getelementptr inbounds %struct.quoting_options, ptr %36, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], ptr %quote_these_too, i64 0, i64 0
  %37 = load ptr, ptr %options.addr, align 8
  %left_quote = getelementptr inbounds %struct.quoting_options, ptr %37, i32 0, i32 3
  %38 = load ptr, ptr %left_quote, align 8
  %39 = load ptr, ptr %options.addr, align 8
  %right_quote = getelementptr inbounds %struct.quoting_options, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %right_quote, align 8
  %call21 = call i64 @quotearg_buffer_restyled(ptr noundef %29, i64 noundef %30, ptr noundef %31, i64 noundef %32, i32 noundef %34, i32 noundef %35, ptr noundef %arraydecay, ptr noundef %38, ptr noundef %40)
  store i64 %call21, ptr %qsize, align 8
  %41 = load i64, ptr %size, align 8
  %42 = load i64, ptr %qsize, align 8
  %cmp22 = icmp ule i64 %41, %42
  br i1 %cmp22, label %if.then24, label %if.end43

if.then24:                                        ; preds = %if.end15
  %43 = load i64, ptr %qsize, align 8
  %add25 = add i64 %43, 1
  store i64 %add25, ptr %size, align 8
  %44 = load ptr, ptr %sv, align 8
  %45 = load i32, ptr %n.addr, align 4
  %idxprom26 = sext i32 %45 to i64
  %arrayidx27 = getelementptr inbounds %struct.slotvec, ptr %44, i64 %idxprom26
  %size28 = getelementptr inbounds %struct.slotvec, ptr %arrayidx27, i32 0, i32 0
  store i64 %add25, ptr %size28, align 8
  %46 = load ptr, ptr %val, align 8
  %cmp29 = icmp ne ptr %46, @slot0
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.then24
  %47 = load ptr, ptr %val, align 8
  call void @free(ptr noundef %47) #21
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.then24
  %48 = load i64, ptr %size, align 8
  %call33 = call noalias nonnull ptr @xcharalloc(i64 noundef %48) #28
  store ptr %call33, ptr %val, align 8
  %49 = load ptr, ptr %sv, align 8
  %50 = load i32, ptr %n.addr, align 4
  %idxprom34 = sext i32 %50 to i64
  %arrayidx35 = getelementptr inbounds %struct.slotvec, ptr %49, i64 %idxprom34
  %val36 = getelementptr inbounds %struct.slotvec, ptr %arrayidx35, i32 0, i32 1
  store ptr %call33, ptr %val36, align 8
  %51 = load ptr, ptr %val, align 8
  %52 = load i64, ptr %size, align 8
  %53 = load ptr, ptr %arg.addr, align 8
  %54 = load i64, ptr %argsize.addr, align 8
  %55 = load ptr, ptr %options.addr, align 8
  %style37 = getelementptr inbounds %struct.quoting_options, ptr %55, i32 0, i32 0
  %56 = load i32, ptr %style37, align 8
  %57 = load i32, ptr %flags, align 4
  %58 = load ptr, ptr %options.addr, align 8
  %quote_these_too38 = getelementptr inbounds %struct.quoting_options, ptr %58, i32 0, i32 2
  %arraydecay39 = getelementptr inbounds [8 x i32], ptr %quote_these_too38, i64 0, i64 0
  %59 = load ptr, ptr %options.addr, align 8
  %left_quote40 = getelementptr inbounds %struct.quoting_options, ptr %59, i32 0, i32 3
  %60 = load ptr, ptr %left_quote40, align 8
  %61 = load ptr, ptr %options.addr, align 8
  %right_quote41 = getelementptr inbounds %struct.quoting_options, ptr %61, i32 0, i32 4
  %62 = load ptr, ptr %right_quote41, align 8
  %call42 = call i64 @quotearg_buffer_restyled(ptr noundef %51, i64 noundef %52, ptr noundef %53, i64 noundef %54, i32 noundef %56, i32 noundef %57, ptr noundef %arraydecay39, ptr noundef %60, ptr noundef %62)
  br label %if.end43

if.end43:                                         ; preds = %if.end32, %if.end15
  %63 = load i32, ptr %e, align 4
  %call44 = call ptr @__errno_location() #26
  store i32 %63, ptr %call44, align 4
  %64 = load ptr, ptr %val, align 8
  ret ptr %64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_mem(i32 noundef %n, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %2 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %0, ptr noundef %1, i64 noundef %2, ptr noundef @default_quoting_options)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg(ptr noundef %arg) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n(i32 noundef 0, ptr noundef %0)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_mem(ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_mem(i32 noundef 0, ptr noundef %0, i64 noundef %1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_style(i32 noundef %n, i32 noundef %s, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, ptr %n.addr, align 4
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  call void @quoting_options_from_style(ptr dead_on_unwind writable sret(%struct.quoting_options) align 8 %o, i32 noundef %0)
  %1 = load i32, ptr %n.addr, align 4
  %2 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %1, ptr noundef %2, i64 noundef -1, ptr noundef %o)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(ptr dead_on_unwind noalias writable sret(%struct.quoting_options) align 8 %agg.result, i32 noundef %style) #3 {
entry:
  %style.addr = alloca i32, align 4
  store i32 %style, ptr %style.addr, align 4
  call void @llvm.memset.p0.i64(ptr align 8 %agg.result, i8 0, i64 56, i1 false)
  %0 = load i32, ptr %style.addr, align 4
  %cmp = icmp eq i32 %0, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @abort() #22
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i32, ptr %style.addr, align 4
  %style1 = getelementptr inbounds %struct.quoting_options, ptr %agg.result, i32 0, i32 0
  store i32 %1, ptr %style1, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_style_mem(i32 noundef %n, i32 noundef %s, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, ptr %n.addr, align 4
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  call void @quoting_options_from_style(ptr dead_on_unwind writable sret(%struct.quoting_options) align 8 %o, i32 noundef %0)
  %1 = load i32, ptr %n.addr, align 4
  %2 = load ptr, ptr %arg.addr, align 8
  %3 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %1, ptr noundef %2, i64 noundef %3, ptr noundef %o)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_style(i32 noundef %s, ptr noundef %arg) #3 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_style(i32 noundef 0, i32 noundef %0, ptr noundef %1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_style_mem(i32 noundef %s, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %2 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_style_mem(i32 noundef 0, i32 noundef %0, ptr noundef %1, i64 noundef %2)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_char_mem(ptr noundef %arg, i64 noundef %argsize, i8 noundef signext %ch) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %ch.addr = alloca i8, align 1
  %options = alloca %struct.quoting_options, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store i8 %ch, ptr %ch.addr, align 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %options, ptr align 8 @default_quoting_options, i64 56, i1 false)
  %0 = load i8, ptr %ch.addr, align 1
  %call = call i32 @set_char_quoting(ptr noundef %options, i8 noundef signext %0, i32 noundef 1)
  %1 = load ptr, ptr %arg.addr, align 8
  %2 = load i64, ptr %argsize.addr, align 8
  %call1 = call ptr @quotearg_n_options(i32 noundef 0, ptr noundef %1, i64 noundef %2, ptr noundef %options)
  ret ptr %call1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_char(ptr noundef %arg, i8 noundef signext %ch) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %ch.addr = alloca i8, align 1
  store ptr %arg, ptr %arg.addr, align 8
  store i8 %ch, ptr %ch.addr, align 1
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i8, ptr %ch.addr, align 1
  %call = call ptr @quotearg_char_mem(ptr noundef %0, i64 noundef -1, i8 noundef signext %1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_colon(ptr noundef %arg) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_char(ptr noundef %0, i8 noundef signext 58)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_colon_mem(ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_char_mem(ptr noundef %0, i64 noundef %1, i8 noundef signext 58)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_style_colon(i32 noundef %n, i32 noundef %s, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %options = alloca %struct.quoting_options, align 8
  %tmp = alloca %struct.quoting_options, align 8
  store i32 %n, ptr %n.addr, align 4
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  call void @quoting_options_from_style(ptr dead_on_unwind writable sret(%struct.quoting_options) align 8 %tmp, i32 noundef %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %options, ptr align 8 %tmp, i64 56, i1 false)
  %call = call i32 @set_char_quoting(ptr noundef %options, i8 noundef signext 58, i32 noundef 1)
  %1 = load i32, ptr %n.addr, align 4
  %2 = load ptr, ptr %arg.addr, align 8
  %call1 = call ptr @quotearg_n_options(i32 noundef %1, ptr noundef %2, i64 noundef -1, ptr noundef %options)
  ret ptr %call1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_custom(i32 noundef %n, ptr noundef %left_quote, ptr noundef %right_quote, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %left_quote.addr, align 8
  %2 = load ptr, ptr %right_quote.addr, align 8
  %3 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_custom_mem(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i64 noundef -1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_custom_mem(i32 noundef %n, ptr noundef %left_quote, ptr noundef %right_quote, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %o, ptr align 8 @default_quoting_options, i64 56, i1 false)
  %0 = load ptr, ptr %left_quote.addr, align 8
  %1 = load ptr, ptr %right_quote.addr, align 8
  call void @set_custom_quoting(ptr noundef %o, ptr noundef %0, ptr noundef %1)
  %2 = load i32, ptr %n.addr, align 4
  %3 = load ptr, ptr %arg.addr, align 8
  %4 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %2, ptr noundef %3, i64 noundef %4, ptr noundef %o)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_custom(ptr noundef %left_quote, ptr noundef %right_quote, ptr noundef %arg) #3 {
entry:
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %left_quote.addr, align 8
  %1 = load ptr, ptr %right_quote.addr, align 8
  %2 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_custom(i32 noundef 0, ptr noundef %0, ptr noundef %1, ptr noundef %2)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_custom_mem(ptr noundef %left_quote, ptr noundef %right_quote, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load ptr, ptr %left_quote.addr, align 8
  %1 = load ptr, ptr %right_quote.addr, align 8
  %2 = load ptr, ptr %arg.addr, align 8
  %3 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_custom_mem(i32 noundef 0, ptr noundef %0, ptr noundef %1, ptr noundef %2, i64 noundef %3)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quote_n_mem(i32 noundef %n, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %2 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %0, ptr noundef %1, i64 noundef %2, ptr noundef @quote_quoting_options)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quote_mem(ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quote_n_mem(i32 noundef 0, ptr noundef %0, i64 noundef %1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quote_n(i32 noundef %n, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quote_n_mem(i32 noundef %0, ptr noundef %1, i64 noundef -1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quote(ptr noundef %arg) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quote_n(i32 noundef 0, ptr noundef %0)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout_set_file_name(ptr noundef %file) #3 {
entry:
  %file.addr = alloca ptr, align 8
  store ptr %file, ptr %file.addr, align 8
  %0 = load ptr, ptr %file.addr, align 8
  store ptr %0, ptr @file_name, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout_set_ignore_EPIPE(i1 noundef zeroext %ignore) #3 {
entry:
  %ignore.addr = alloca i8, align 1
  %frombool = zext i1 %ignore to i8
  store i8 %frombool, ptr %ignore.addr, align 1
  %0 = load i8, ptr %ignore.addr, align 1
  %tobool = trunc i8 %0 to i1
  %frombool1 = zext i1 %tobool to i8
  store i8 %frombool1, ptr @ignore_EPIPE, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout() #3 {
entry:
  %write_error = alloca ptr, align 8
  %0 = load ptr, ptr @stdout, align 8
  %call = call i32 @close_stream(ptr noundef %0)
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, ptr @ignore_EPIPE, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %land.lhs.true1, label %if.then

land.lhs.true1:                                   ; preds = %land.lhs.true
  %call2 = call ptr @__errno_location() #26
  %2 = load i32, ptr %call2, align 4
  %cmp3 = icmp eq i32 %2, 32
  br i1 %cmp3, label %if.end10, label %if.then

if.then:                                          ; preds = %land.lhs.true1, %land.lhs.true
  %call4 = call ptr @dgettext(ptr noundef @.str.344, ptr noundef @.str.1.345) #21
  store ptr %call4, ptr %write_error, align 8
  %3 = load ptr, ptr @file_name, align 8
  %tobool5 = icmp ne ptr %3, null
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then
  %call7 = call ptr @__errno_location() #26
  %4 = load i32, ptr %call7, align 4
  %5 = load ptr, ptr @file_name, align 8
  %call8 = call ptr @quotearg_colon(ptr noundef %5)
  %6 = load ptr, ptr %write_error, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %4, ptr noundef @.str.2.346, ptr noundef %call8, ptr noundef %6) #24
  br label %if.end

if.else:                                          ; preds = %if.then
  %call9 = call ptr @__errno_location() #26
  %7 = load i32, ptr %call9, align 4
  %8 = load ptr, ptr %write_error, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %7, ptr noundef @.str.3.347, ptr noundef %8) #24
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  %9 = load volatile i32, ptr @exit_failure, align 4
  call void @_exit(i32 noundef %9) #25
  unreachable

if.end10:                                         ; preds = %land.lhs.true1, %entry
  %10 = load ptr, ptr @stderr, align 8
  %call11 = call i32 @close_stream(ptr noundef %10)
  %cmp12 = icmp ne i32 %call11, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end10
  %11 = load volatile i32, ptr @exit_failure, align 4
  call void @_exit(i32 noundef %11) #25
  unreachable

if.end14:                                         ; preds = %if.end10
  ret void
}

; Function Attrs: noreturn
declare void @_exit(i32 noundef) #12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @close_stream(ptr noundef %stream) #3 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca ptr, align 8
  %some_pending = alloca i8, align 1
  %prev_fail = alloca i8, align 1
  %fclose_fail = alloca i8, align 1
  store ptr %stream, ptr %stream.addr, align 8
  %0 = load ptr, ptr %stream.addr, align 8
  %call = call i64 @__fpending(ptr noundef %0) #21
  %cmp = icmp ne i64 %call, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, ptr %some_pending, align 1
  %1 = load ptr, ptr %stream.addr, align 8
  %call1 = call i32 @ferror_unlocked(ptr noundef %1) #21
  %cmp2 = icmp ne i32 %call1, 0
  %frombool3 = zext i1 %cmp2 to i8
  store i8 %frombool3, ptr %prev_fail, align 1
  %2 = load ptr, ptr %stream.addr, align 8
  %call4 = call i32 @rpl_fclose(ptr noundef %2)
  %cmp5 = icmp ne i32 %call4, 0
  %frombool6 = zext i1 %cmp5 to i8
  store i8 %frombool6, ptr %fclose_fail, align 1
  %3 = load i8, ptr %prev_fail, align 1
  %tobool = trunc i8 %3 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8, ptr %fclose_fail, align 1
  %tobool7 = trunc i8 %4 to i1
  br i1 %tobool7, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load i8, ptr %some_pending, align 1
  %tobool8 = trunc i8 %5 to i1
  br i1 %tobool8, label %if.then, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %land.lhs.true
  %call10 = call ptr @__errno_location() #26
  %6 = load i32, ptr %call10, align 4
  %cmp11 = icmp ne i32 %6, 9
  br i1 %cmp11, label %if.then, label %if.end15

if.then:                                          ; preds = %lor.lhs.false9, %land.lhs.true, %entry
  %7 = load i8, ptr %fclose_fail, align 1
  %tobool12 = trunc i8 %7 to i1
  br i1 %tobool12, label %if.end, label %if.then13

if.then13:                                        ; preds = %if.then
  %call14 = call ptr @__errno_location() #26
  store i32 0, ptr %call14, align 4
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.then
  store i32 -1, ptr %retval, align 4
  br label %return

if.end15:                                         ; preds = %lor.lhs.false9, %lor.lhs.false
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end15, %if.end
  %8 = load i32, ptr %retval, align 4
  ret i32 %8
}

; Function Attrs: nounwind
declare i64 @__fpending(ptr noundef) #1

; Function Attrs: nounwind
declare i32 @ferror_unlocked(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_arn(ptr noundef %stream, ptr noundef %command_name, ptr noundef %package, ptr noundef %version, ptr noundef %authors, i64 noundef %n_authors) #3 {
entry:
  %stream.addr = alloca ptr, align 8
  %command_name.addr = alloca ptr, align 8
  %package.addr = alloca ptr, align 8
  %version.addr = alloca ptr, align 8
  %authors.addr = alloca ptr, align 8
  %n_authors.addr = alloca i64, align 8
  store ptr %stream, ptr %stream.addr, align 8
  store ptr %command_name, ptr %command_name.addr, align 8
  store ptr %package, ptr %package.addr, align 8
  store ptr %version, ptr %version.addr, align 8
  store ptr %authors, ptr %authors.addr, align 8
  store i64 %n_authors, ptr %n_authors.addr, align 8
  %0 = load ptr, ptr %command_name.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %stream.addr, align 8
  %2 = load ptr, ptr %command_name.addr, align 8
  %3 = load ptr, ptr %package.addr, align 8
  %4 = load ptr, ptr %version.addr, align 8
  %call = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef @.str.350, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load ptr, ptr %stream.addr, align 8
  %6 = load ptr, ptr %package.addr, align 8
  %7 = load ptr, ptr %version.addr, align 8
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef @.str.1.351, ptr noundef %6, ptr noundef %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load ptr, ptr %stream.addr, align 8
  %call2 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.3.353) #21
  %call3 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef @version_etc_copyright, ptr noundef %call2, i32 noundef 2025)
  %9 = load ptr, ptr %stream.addr, align 8
  %call4 = call i32 @fputs_unlocked(ptr noundef @.str.4.354, ptr noundef %9)
  %10 = load ptr, ptr %stream.addr, align 8
  %call5 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.5.355) #21
  %call6 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %10, ptr noundef %call5, ptr noundef @.str.6.356)
  %11 = load ptr, ptr %stream.addr, align 8
  %call7 = call i32 @fputs_unlocked(ptr noundef @.str.4.354, ptr noundef %11)
  %12 = load i64, ptr %n_authors.addr, align 8
  switch i64 %12, label %sw.default [
    i64 0, label %sw.bb
    i64 1, label %sw.bb8
    i64 2, label %sw.bb11
    i64 3, label %sw.bb16
    i64 4, label %sw.bb22
    i64 5, label %sw.bb29
    i64 6, label %sw.bb37
    i64 7, label %sw.bb46
    i64 8, label %sw.bb56
    i64 9, label %sw.bb67
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb8:                                           ; preds = %if.end
  %13 = load ptr, ptr %stream.addr, align 8
  %call9 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.7.357) #21
  %14 = load ptr, ptr %authors.addr, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %14, i64 0
  %15 = load ptr, ptr %arrayidx, align 8
  %call10 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %13, ptr noundef %call9, ptr noundef %15)
  br label %sw.epilog

sw.bb11:                                          ; preds = %if.end
  %16 = load ptr, ptr %stream.addr, align 8
  %call12 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.8.358) #21
  %17 = load ptr, ptr %authors.addr, align 8
  %arrayidx13 = getelementptr inbounds ptr, ptr %17, i64 0
  %18 = load ptr, ptr %arrayidx13, align 8
  %19 = load ptr, ptr %authors.addr, align 8
  %arrayidx14 = getelementptr inbounds ptr, ptr %19, i64 1
  %20 = load ptr, ptr %arrayidx14, align 8
  %call15 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %16, ptr noundef %call12, ptr noundef %18, ptr noundef %20)
  br label %sw.epilog

sw.bb16:                                          ; preds = %if.end
  %21 = load ptr, ptr %stream.addr, align 8
  %call17 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.9.359) #21
  %22 = load ptr, ptr %authors.addr, align 8
  %arrayidx18 = getelementptr inbounds ptr, ptr %22, i64 0
  %23 = load ptr, ptr %arrayidx18, align 8
  %24 = load ptr, ptr %authors.addr, align 8
  %arrayidx19 = getelementptr inbounds ptr, ptr %24, i64 1
  %25 = load ptr, ptr %arrayidx19, align 8
  %26 = load ptr, ptr %authors.addr, align 8
  %arrayidx20 = getelementptr inbounds ptr, ptr %26, i64 2
  %27 = load ptr, ptr %arrayidx20, align 8
  %call21 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %21, ptr noundef %call17, ptr noundef %23, ptr noundef %25, ptr noundef %27)
  br label %sw.epilog

sw.bb22:                                          ; preds = %if.end
  %28 = load ptr, ptr %stream.addr, align 8
  %call23 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.10.360) #21
  %29 = load ptr, ptr %authors.addr, align 8
  %arrayidx24 = getelementptr inbounds ptr, ptr %29, i64 0
  %30 = load ptr, ptr %arrayidx24, align 8
  %31 = load ptr, ptr %authors.addr, align 8
  %arrayidx25 = getelementptr inbounds ptr, ptr %31, i64 1
  %32 = load ptr, ptr %arrayidx25, align 8
  %33 = load ptr, ptr %authors.addr, align 8
  %arrayidx26 = getelementptr inbounds ptr, ptr %33, i64 2
  %34 = load ptr, ptr %arrayidx26, align 8
  %35 = load ptr, ptr %authors.addr, align 8
  %arrayidx27 = getelementptr inbounds ptr, ptr %35, i64 3
  %36 = load ptr, ptr %arrayidx27, align 8
  %call28 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %28, ptr noundef %call23, ptr noundef %30, ptr noundef %32, ptr noundef %34, ptr noundef %36)
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end
  %37 = load ptr, ptr %stream.addr, align 8
  %call30 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.11.361) #21
  %38 = load ptr, ptr %authors.addr, align 8
  %arrayidx31 = getelementptr inbounds ptr, ptr %38, i64 0
  %39 = load ptr, ptr %arrayidx31, align 8
  %40 = load ptr, ptr %authors.addr, align 8
  %arrayidx32 = getelementptr inbounds ptr, ptr %40, i64 1
  %41 = load ptr, ptr %arrayidx32, align 8
  %42 = load ptr, ptr %authors.addr, align 8
  %arrayidx33 = getelementptr inbounds ptr, ptr %42, i64 2
  %43 = load ptr, ptr %arrayidx33, align 8
  %44 = load ptr, ptr %authors.addr, align 8
  %arrayidx34 = getelementptr inbounds ptr, ptr %44, i64 3
  %45 = load ptr, ptr %arrayidx34, align 8
  %46 = load ptr, ptr %authors.addr, align 8
  %arrayidx35 = getelementptr inbounds ptr, ptr %46, i64 4
  %47 = load ptr, ptr %arrayidx35, align 8
  %call36 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %37, ptr noundef %call30, ptr noundef %39, ptr noundef %41, ptr noundef %43, ptr noundef %45, ptr noundef %47)
  br label %sw.epilog

sw.bb37:                                          ; preds = %if.end
  %48 = load ptr, ptr %stream.addr, align 8
  %call38 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.12.362) #21
  %49 = load ptr, ptr %authors.addr, align 8
  %arrayidx39 = getelementptr inbounds ptr, ptr %49, i64 0
  %50 = load ptr, ptr %arrayidx39, align 8
  %51 = load ptr, ptr %authors.addr, align 8
  %arrayidx40 = getelementptr inbounds ptr, ptr %51, i64 1
  %52 = load ptr, ptr %arrayidx40, align 8
  %53 = load ptr, ptr %authors.addr, align 8
  %arrayidx41 = getelementptr inbounds ptr, ptr %53, i64 2
  %54 = load ptr, ptr %arrayidx41, align 8
  %55 = load ptr, ptr %authors.addr, align 8
  %arrayidx42 = getelementptr inbounds ptr, ptr %55, i64 3
  %56 = load ptr, ptr %arrayidx42, align 8
  %57 = load ptr, ptr %authors.addr, align 8
  %arrayidx43 = getelementptr inbounds ptr, ptr %57, i64 4
  %58 = load ptr, ptr %arrayidx43, align 8
  %59 = load ptr, ptr %authors.addr, align 8
  %arrayidx44 = getelementptr inbounds ptr, ptr %59, i64 5
  %60 = load ptr, ptr %arrayidx44, align 8
  %call45 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %48, ptr noundef %call38, ptr noundef %50, ptr noundef %52, ptr noundef %54, ptr noundef %56, ptr noundef %58, ptr noundef %60)
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.end
  %61 = load ptr, ptr %stream.addr, align 8
  %call47 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.13.363) #21
  %62 = load ptr, ptr %authors.addr, align 8
  %arrayidx48 = getelementptr inbounds ptr, ptr %62, i64 0
  %63 = load ptr, ptr %arrayidx48, align 8
  %64 = load ptr, ptr %authors.addr, align 8
  %arrayidx49 = getelementptr inbounds ptr, ptr %64, i64 1
  %65 = load ptr, ptr %arrayidx49, align 8
  %66 = load ptr, ptr %authors.addr, align 8
  %arrayidx50 = getelementptr inbounds ptr, ptr %66, i64 2
  %67 = load ptr, ptr %arrayidx50, align 8
  %68 = load ptr, ptr %authors.addr, align 8
  %arrayidx51 = getelementptr inbounds ptr, ptr %68, i64 3
  %69 = load ptr, ptr %arrayidx51, align 8
  %70 = load ptr, ptr %authors.addr, align 8
  %arrayidx52 = getelementptr inbounds ptr, ptr %70, i64 4
  %71 = load ptr, ptr %arrayidx52, align 8
  %72 = load ptr, ptr %authors.addr, align 8
  %arrayidx53 = getelementptr inbounds ptr, ptr %72, i64 5
  %73 = load ptr, ptr %arrayidx53, align 8
  %74 = load ptr, ptr %authors.addr, align 8
  %arrayidx54 = getelementptr inbounds ptr, ptr %74, i64 6
  %75 = load ptr, ptr %arrayidx54, align 8
  %call55 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %61, ptr noundef %call47, ptr noundef %63, ptr noundef %65, ptr noundef %67, ptr noundef %69, ptr noundef %71, ptr noundef %73, ptr noundef %75)
  br label %sw.epilog

sw.bb56:                                          ; preds = %if.end
  %76 = load ptr, ptr %stream.addr, align 8
  %call57 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.14.364) #21
  %77 = load ptr, ptr %authors.addr, align 8
  %arrayidx58 = getelementptr inbounds ptr, ptr %77, i64 0
  %78 = load ptr, ptr %arrayidx58, align 8
  %79 = load ptr, ptr %authors.addr, align 8
  %arrayidx59 = getelementptr inbounds ptr, ptr %79, i64 1
  %80 = load ptr, ptr %arrayidx59, align 8
  %81 = load ptr, ptr %authors.addr, align 8
  %arrayidx60 = getelementptr inbounds ptr, ptr %81, i64 2
  %82 = load ptr, ptr %arrayidx60, align 8
  %83 = load ptr, ptr %authors.addr, align 8
  %arrayidx61 = getelementptr inbounds ptr, ptr %83, i64 3
  %84 = load ptr, ptr %arrayidx61, align 8
  %85 = load ptr, ptr %authors.addr, align 8
  %arrayidx62 = getelementptr inbounds ptr, ptr %85, i64 4
  %86 = load ptr, ptr %arrayidx62, align 8
  %87 = load ptr, ptr %authors.addr, align 8
  %arrayidx63 = getelementptr inbounds ptr, ptr %87, i64 5
  %88 = load ptr, ptr %arrayidx63, align 8
  %89 = load ptr, ptr %authors.addr, align 8
  %arrayidx64 = getelementptr inbounds ptr, ptr %89, i64 6
  %90 = load ptr, ptr %arrayidx64, align 8
  %91 = load ptr, ptr %authors.addr, align 8
  %arrayidx65 = getelementptr inbounds ptr, ptr %91, i64 7
  %92 = load ptr, ptr %arrayidx65, align 8
  %call66 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef %call57, ptr noundef %78, ptr noundef %80, ptr noundef %82, ptr noundef %84, ptr noundef %86, ptr noundef %88, ptr noundef %90, ptr noundef %92)
  br label %sw.epilog

sw.bb67:                                          ; preds = %if.end
  %93 = load ptr, ptr %stream.addr, align 8
  %call68 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.15.365) #21
  %94 = load ptr, ptr %authors.addr, align 8
  %arrayidx69 = getelementptr inbounds ptr, ptr %94, i64 0
  %95 = load ptr, ptr %arrayidx69, align 8
  %96 = load ptr, ptr %authors.addr, align 8
  %arrayidx70 = getelementptr inbounds ptr, ptr %96, i64 1
  %97 = load ptr, ptr %arrayidx70, align 8
  %98 = load ptr, ptr %authors.addr, align 8
  %arrayidx71 = getelementptr inbounds ptr, ptr %98, i64 2
  %99 = load ptr, ptr %arrayidx71, align 8
  %100 = load ptr, ptr %authors.addr, align 8
  %arrayidx72 = getelementptr inbounds ptr, ptr %100, i64 3
  %101 = load ptr, ptr %arrayidx72, align 8
  %102 = load ptr, ptr %authors.addr, align 8
  %arrayidx73 = getelementptr inbounds ptr, ptr %102, i64 4
  %103 = load ptr, ptr %arrayidx73, align 8
  %104 = load ptr, ptr %authors.addr, align 8
  %arrayidx74 = getelementptr inbounds ptr, ptr %104, i64 5
  %105 = load ptr, ptr %arrayidx74, align 8
  %106 = load ptr, ptr %authors.addr, align 8
  %arrayidx75 = getelementptr inbounds ptr, ptr %106, i64 6
  %107 = load ptr, ptr %arrayidx75, align 8
  %108 = load ptr, ptr %authors.addr, align 8
  %arrayidx76 = getelementptr inbounds ptr, ptr %108, i64 7
  %109 = load ptr, ptr %arrayidx76, align 8
  %110 = load ptr, ptr %authors.addr, align 8
  %arrayidx77 = getelementptr inbounds ptr, ptr %110, i64 8
  %111 = load ptr, ptr %arrayidx77, align 8
  %call78 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %93, ptr noundef %call68, ptr noundef %95, ptr noundef %97, ptr noundef %99, ptr noundef %101, ptr noundef %103, ptr noundef %105, ptr noundef %107, ptr noundef %109, ptr noundef %111)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %112 = load ptr, ptr %stream.addr, align 8
  %call79 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.16.366) #21
  %113 = load ptr, ptr %authors.addr, align 8
  %arrayidx80 = getelementptr inbounds ptr, ptr %113, i64 0
  %114 = load ptr, ptr %arrayidx80, align 8
  %115 = load ptr, ptr %authors.addr, align 8
  %arrayidx81 = getelementptr inbounds ptr, ptr %115, i64 1
  %116 = load ptr, ptr %arrayidx81, align 8
  %117 = load ptr, ptr %authors.addr, align 8
  %arrayidx82 = getelementptr inbounds ptr, ptr %117, i64 2
  %118 = load ptr, ptr %arrayidx82, align 8
  %119 = load ptr, ptr %authors.addr, align 8
  %arrayidx83 = getelementptr inbounds ptr, ptr %119, i64 3
  %120 = load ptr, ptr %arrayidx83, align 8
  %121 = load ptr, ptr %authors.addr, align 8
  %arrayidx84 = getelementptr inbounds ptr, ptr %121, i64 4
  %122 = load ptr, ptr %arrayidx84, align 8
  %123 = load ptr, ptr %authors.addr, align 8
  %arrayidx85 = getelementptr inbounds ptr, ptr %123, i64 5
  %124 = load ptr, ptr %arrayidx85, align 8
  %125 = load ptr, ptr %authors.addr, align 8
  %arrayidx86 = getelementptr inbounds ptr, ptr %125, i64 6
  %126 = load ptr, ptr %arrayidx86, align 8
  %127 = load ptr, ptr %authors.addr, align 8
  %arrayidx87 = getelementptr inbounds ptr, ptr %127, i64 7
  %128 = load ptr, ptr %arrayidx87, align 8
  %129 = load ptr, ptr %authors.addr, align 8
  %arrayidx88 = getelementptr inbounds ptr, ptr %129, i64 8
  %130 = load ptr, ptr %arrayidx88, align 8
  %call89 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %112, ptr noundef %call79, ptr noundef %114, ptr noundef %116, ptr noundef %118, ptr noundef %120, ptr noundef %122, ptr noundef %124, ptr noundef %126, ptr noundef %128, ptr noundef %130)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb67, %sw.bb56, %sw.bb46, %sw.bb37, %sw.bb29, %sw.bb22, %sw.bb16, %sw.bb11, %sw.bb8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_ar(ptr noundef %stream, ptr noundef %command_name, ptr noundef %package, ptr noundef %version, ptr noundef %authors) #3 {
entry:
  %stream.addr = alloca ptr, align 8
  %command_name.addr = alloca ptr, align 8
  %package.addr = alloca ptr, align 8
  %version.addr = alloca ptr, align 8
  %authors.addr = alloca ptr, align 8
  %n_authors = alloca i64, align 8
  store ptr %stream, ptr %stream.addr, align 8
  store ptr %command_name, ptr %command_name.addr, align 8
  store ptr %package, ptr %package.addr, align 8
  store ptr %version, ptr %version.addr, align 8
  store ptr %authors, ptr %authors.addr, align 8
  store i64 0, ptr %n_authors, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load ptr, ptr %authors.addr, align 8
  %1 = load i64, ptr %n_authors, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %0, i64 %1
  %2 = load ptr, ptr %arrayidx, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, ptr %n_authors, align 8
  %inc = add i64 %3, 1
  store i64 %inc, ptr %n_authors, align 8
  br label %for.cond, !llvm.loop !32

for.end:                                          ; preds = %for.cond
  %4 = load ptr, ptr %stream.addr, align 8
  %5 = load ptr, ptr %command_name.addr, align 8
  %6 = load ptr, ptr %package.addr, align 8
  %7 = load ptr, ptr %version.addr, align 8
  %8 = load ptr, ptr %authors.addr, align 8
  %9 = load i64, ptr %n_authors, align 8
  call void @version_etc_arn(ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr noundef %7, ptr noundef %8, i64 noundef %9)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_va(ptr noundef %stream, ptr noundef %command_name, ptr noundef %package, ptr noundef %version, ptr noundef %authors) #3 {
entry:
  %stream.addr = alloca ptr, align 8
  %command_name.addr = alloca ptr, align 8
  %package.addr = alloca ptr, align 8
  %version.addr = alloca ptr, align 8
  %authors.addr = alloca ptr, align 8
  %n_authors = alloca i64, align 8
  %authtab = alloca [10 x ptr], align 16
  store ptr %stream, ptr %stream.addr, align 8
  store ptr %command_name, ptr %command_name.addr, align 8
  store ptr %package, ptr %package.addr, align 8
  store ptr %version, ptr %version.addr, align 8
  store ptr %authors, ptr %authors.addr, align 8
  store i64 0, ptr %n_authors, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, ptr %n_authors, align 8
  %cmp = icmp ult i64 %0, 10
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load ptr, ptr %authors.addr, align 8
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, ptr %1, i32 0, i32 0
  %gp_offset = load i32, ptr %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %land.rhs
  %2 = getelementptr inbounds %struct.__va_list_tag, ptr %1, i32 0, i32 3
  %reg_save_area = load ptr, ptr %2, align 8
  %3 = getelementptr i8, ptr %reg_save_area, i32 %gp_offset
  %4 = add i32 %gp_offset, 8
  store i32 %4, ptr %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %land.rhs
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, ptr %1, i32 0, i32 2
  %overflow_arg_area = load ptr, ptr %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8, ptr %overflow_arg_area, i32 8
  store ptr %overflow_arg_area.next, ptr %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi ptr [ %3, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %5 = load ptr, ptr %vaarg.addr, align 8
  %6 = load i64, ptr %n_authors, align 8
  %arrayidx = getelementptr inbounds [10 x ptr], ptr %authtab, i64 0, i64 %6
  store ptr %5, ptr %arrayidx, align 8
  %cmp1 = icmp ne ptr %5, null
  br label %land.end

land.end:                                         ; preds = %vaarg.end, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %cmp1, %vaarg.end ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i64, ptr %n_authors, align 8
  %inc = add i64 %8, 1
  store i64 %inc, ptr %n_authors, align 8
  br label %for.cond, !llvm.loop !33

for.end:                                          ; preds = %land.end
  %9 = load ptr, ptr %stream.addr, align 8
  %10 = load ptr, ptr %command_name.addr, align 8
  %11 = load ptr, ptr %package.addr, align 8
  %12 = load ptr, ptr %version.addr, align 8
  %arraydecay = getelementptr inbounds [10 x ptr], ptr %authtab, i64 0, i64 0
  %13 = load i64, ptr %n_authors, align 8
  call void @version_etc_arn(ptr noundef %9, ptr noundef %10, ptr noundef %11, ptr noundef %12, ptr noundef %arraydecay, i64 noundef %13)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc(ptr noundef %stream, ptr noundef %command_name, ptr noundef %package, ptr noundef %version, ...) #3 {
entry:
  %stream.addr = alloca ptr, align 8
  %command_name.addr = alloca ptr, align 8
  %package.addr = alloca ptr, align 8
  %version.addr = alloca ptr, align 8
  %authors = alloca [1 x %struct.__va_list_tag], align 16
  store ptr %stream, ptr %stream.addr, align 8
  store ptr %command_name, ptr %command_name.addr, align 8
  store ptr %package, ptr %package.addr, align 8
  store ptr %version, ptr %version.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %authors, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load ptr, ptr %stream.addr, align 8
  %1 = load ptr, ptr %command_name.addr, align 8
  %2 = load ptr, ptr %package.addr, align 8
  %3 = load ptr, ptr %version.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %authors, i64 0, i64 0
  call void @version_etc_va(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %arraydecay1)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %authors, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @emit_bug_reporting_address() #3 {
entry:
  %0 = load ptr, ptr @stdout, align 8
  %call = call i32 @fputs_unlocked(ptr noundef @.str.4.354, ptr noundef %0)
  %call1 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.17.369) #21
  %call2 = call i32 (ptr, ...) @printf(ptr noundef %call1, ptr noundef @.str.18.370)
  %call3 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.19.371) #21
  %call4 = call i32 (ptr, ...) @printf(ptr noundef %call3, ptr noundef @.str.20.372, ptr noundef @.str.21.373)
  %call5 = call ptr @dgettext(ptr noundef @.str.2.352, ptr noundef @.str.22.374) #21
  %call6 = call i32 (ptr, ...) @printf(ptr noundef %call5, ptr noundef @.str.23.375)
  ret void
}

; Function Attrs: cold noinline nounwind optnone uwtable
define dso_local void @verror(i32 noundef %status, i32 noundef %errnum, ptr noundef %message, ptr noundef %args) #13 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  call void @flush_stdout()
  %0 = load ptr, ptr @error_print_progname, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @error_print_progname, align 8
  call void %1()
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load ptr, ptr @stderr, align 8
  %call = call ptr @getprogname() #23
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef @.str.376, ptr noundef %call)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i32, ptr %status.addr, align 4
  %4 = load i32, ptr %errnum.addr, align 4
  %5 = load ptr, ptr %message.addr, align 8
  %6 = load ptr, ptr %args.addr, align 8
  call void @error_tail(i32 noundef %3, i32 noundef %4, ptr noundef %5, ptr noundef %6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @flush_stdout() #3 {
entry:
  %stdout_fd = alloca i32, align 4
  store i32 1, ptr %stdout_fd, align 4
  %0 = load i32, ptr %stdout_fd, align 4
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr %stdout_fd, align 4
  %call = call i32 @is_open(i32 noundef %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load ptr, ptr @stdout, align 8
  %call1 = call i32 @fflush_unlocked(ptr noundef %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @error_tail(i32 noundef %status, i32 noundef %errnum, ptr noundef nonnull %message, ptr noundef %args) #3 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  %0 = load ptr, ptr @stderr, align 8
  %1 = load ptr, ptr %message.addr, align 8
  %2 = load ptr, ptr %args.addr, align 8
  %call = call i32 @vfprintf(ptr noundef %0, ptr noundef %1, ptr noundef %2)
  %3 = load i32, ptr @error_message_count, align 4
  %inc = add i32 %3, 1
  store i32 %inc, ptr @error_message_count, align 4
  %4 = load i32, ptr %errnum.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, ptr %errnum.addr, align 4
  call void @print_errno_message(i32 noundef %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load ptr, ptr @stderr, align 8
  %call1 = call i32 @putc_unlocked(i32 noundef 10, ptr noundef %6)
  %7 = load ptr, ptr @stderr, align 8
  %call2 = call i32 @fflush_unlocked(ptr noundef %7)
  %8 = load i32, ptr %status.addr, align 4
  %tobool3 = icmp ne i32 %8, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %9 = load i32, ptr %status.addr, align 4
  call void @exit(i32 noundef %9) #22
  unreachable

if.end5:                                          ; preds = %if.end
  ret void
}

declare i32 @vfprintf(ptr noundef, ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_errno_message(i32 noundef %errnum) #3 {
entry:
  %errnum.addr = alloca i32, align 4
  %s = alloca ptr, align 8
  %errbuf = alloca [1024 x i8], align 16
  store i32 %errnum, ptr %errnum.addr, align 4
  %0 = load i32, ptr %errnum.addr, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], ptr %errbuf, i64 0, i64 0
  %call = call ptr @strerror_r(i32 noundef %0, ptr noundef %arraydecay, i64 noundef 1024) #21
  store ptr %call, ptr %s, align 8
  %1 = load ptr, ptr %s, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call ptr @dgettext(ptr noundef @.str.4.377, ptr noundef @.str.5.378) #21
  store ptr %call1, ptr %s, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load ptr, ptr @stderr, align 8
  %3 = load ptr, ptr %s, align 8
  %call2 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef @.str.6.379, ptr noundef %3)
  ret void
}

declare i32 @putc_unlocked(i32 noundef, ptr noundef) #2

declare i32 @fflush_unlocked(ptr noundef) #2

; Function Attrs: nounwind
declare ptr @strerror_r(i32 noundef, ptr noundef, i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_open(i32 noundef %fd) #3 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  %0 = load i32, ptr %fd.addr, align 4
  %call = call i32 (i32, i32, ...) @fcntl(i32 noundef %0, i32 noundef 3)
  %cmp = icmp sle i32 0, %call
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i32 @fcntl(i32 noundef, i32 noundef, ...) #2

; Function Attrs: cold noinline nounwind optnone uwtable
define dso_local void @error(i32 noundef %status, i32 noundef %errnum, ptr noundef %message, ...) #13 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load i32, ptr %status.addr, align 4
  %1 = load i32, ptr %errnum.addr, align 4
  %2 = load ptr, ptr %message.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @verror(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %arraydecay1) #24
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay2)
  ret void
}

; Function Attrs: cold noinline nounwind optnone uwtable
define dso_local void @verror_at_line(i32 noundef %status, i32 noundef %errnum, ptr noundef %file_name, i32 noundef %line_number, ptr noundef %message, ptr noundef %args) #13 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %file_name.addr = alloca ptr, align 8
  %line_number.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %file_name, ptr %file_name.addr, align 8
  store i32 %line_number, ptr %line_number.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  %0 = load i32, ptr @error_one_per_line, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %1 = load i32, ptr @verror_at_line.old_line_number, align 4
  %2 = load i32, ptr %line_number.addr, align 4
  %cmp = icmp eq i32 %1, %2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %3 = load ptr, ptr %file_name.addr, align 8
  %4 = load ptr, ptr @verror_at_line.old_file_name, align 8
  %cmp1 = icmp eq ptr %3, %4
  br i1 %cmp1, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load ptr, ptr @verror_at_line.old_file_name, align 8
  %cmp2 = icmp ne ptr %5, null
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %6 = load ptr, ptr %file_name.addr, align 8
  %cmp4 = icmp ne ptr %6, null
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %7 = load ptr, ptr @verror_at_line.old_file_name, align 8
  %8 = load ptr, ptr %file_name.addr, align 8
  %call = call i32 @strcmp(ptr noundef %7, ptr noundef %8) #23
  %cmp6 = icmp eq i32 %call, 0
  br i1 %cmp6, label %if.then7, label %if.end

if.then7:                                         ; preds = %land.lhs.true5, %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true5, %land.lhs.true3, %lor.lhs.false, %if.then
  %9 = load ptr, ptr %file_name.addr, align 8
  store ptr %9, ptr @verror_at_line.old_file_name, align 8
  %10 = load i32, ptr %line_number.addr, align 4
  store i32 %10, ptr @verror_at_line.old_line_number, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  call void @flush_stdout()
  %11 = load ptr, ptr @error_print_progname, align 8
  %tobool9 = icmp ne ptr %11, null
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end8
  %12 = load ptr, ptr @error_print_progname, align 8
  call void %12()
  br label %if.end13

if.else:                                          ; preds = %if.end8
  %13 = load ptr, ptr @stderr, align 8
  %call11 = call ptr @getprogname() #23
  %call12 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %13, ptr noundef @.str.1.382, ptr noundef %call11)
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then10
  %14 = load ptr, ptr @stderr, align 8
  %15 = load ptr, ptr %file_name.addr, align 8
  %cmp14 = icmp ne ptr %15, null
  %16 = zext i1 %cmp14 to i64
  %cond = select i1 %cmp14, ptr @.str.2.383, ptr @.str.3.384
  %17 = load ptr, ptr %file_name.addr, align 8
  %18 = load i32, ptr %line_number.addr, align 4
  %call15 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %14, ptr noundef %cond, ptr noundef %17, i32 noundef %18)
  %19 = load i32, ptr %status.addr, align 4
  %20 = load i32, ptr %errnum.addr, align 4
  %21 = load ptr, ptr %message.addr, align 8
  %22 = load ptr, ptr %args.addr, align 8
  call void @error_tail(i32 noundef %19, i32 noundef %20, ptr noundef %21, ptr noundef %22)
  br label %return

return:                                           ; preds = %if.end13, %if.then7
  ret void
}

; Function Attrs: cold noinline nounwind optnone uwtable
define dso_local void @error_at_line(i32 noundef %status, i32 noundef %errnum, ptr noundef %file_name, i32 noundef %line_number, ptr noundef %message, ...) #13 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %file_name.addr = alloca ptr, align 8
  %line_number.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %file_name, ptr %file_name.addr, align 8
  store i32 %line_number, ptr %line_number.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load i32, ptr %status.addr, align 4
  %1 = load i32, ptr %errnum.addr, align 4
  %2 = load ptr, ptr %file_name.addr, align 8
  %3 = load i32, ptr %line_number.addr, align 4
  %4 = load ptr, ptr %message.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @verror_at_line(i32 noundef %0, i32 noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %arraydecay1) #24
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fd_reopen(i32 noundef %desired_fd, ptr noundef nonnull %file, i32 noundef %flags, i32 noundef %mode) #3 {
entry:
  %retval = alloca i32, align 4
  %desired_fd.addr = alloca i32, align 4
  %file.addr = alloca ptr, align 8
  %flags.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  %fd2 = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  store i32 %desired_fd, ptr %desired_fd.addr, align 4
  store ptr %file, ptr %file.addr, align 8
  store i32 %flags, ptr %flags.addr, align 4
  store i32 %mode, ptr %mode.addr, align 4
  %0 = load ptr, ptr %file.addr, align 8
  %1 = load i32, ptr %flags.addr, align 4
  %2 = load i32, ptr %mode.addr, align 4
  %call = call i32 (ptr, i32, ...) @open(ptr noundef %0, i32 noundef %1, i32 noundef %2)
  store i32 %call, ptr %fd, align 4
  %3 = load i32, ptr %fd, align 4
  %4 = load i32, ptr %desired_fd.addr, align 4
  %cmp = icmp eq i32 %3, %4
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, ptr %fd, align 4
  %cmp1 = icmp slt i32 %5, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load i32, ptr %fd, align 4
  store i32 %6, ptr %retval, align 4
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %7 = load i32, ptr %fd, align 4
  %8 = load i32, ptr %desired_fd.addr, align 4
  %call2 = call i32 @dup2(i32 noundef %7, i32 noundef %8) #21
  store i32 %call2, ptr %fd2, align 4
  %call3 = call ptr @__errno_location() #26
  %9 = load i32, ptr %call3, align 4
  store i32 %9, ptr %saved_errno, align 4
  %10 = load i32, ptr %fd, align 4
  %call4 = call i32 @close(i32 noundef %10)
  %11 = load i32, ptr %saved_errno, align 4
  %call5 = call ptr @__errno_location() #26
  store i32 %11, ptr %call5, align 4
  %12 = load i32, ptr %fd2, align 4
  store i32 %12, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %13 = load i32, ptr %retval, align 4
  ret i32 %13
}

declare i32 @open(ptr noundef, i32 noundef, ...) #2

; Function Attrs: nounwind
declare i32 @dup2(i32 noundef, i32 noundef) #1

declare i32 @close(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fseterr(ptr noundef %fp) #3 {
entry:
  %fp.addr = alloca ptr, align 8
  store ptr %fp, ptr %fp.addr, align 8
  %0 = load ptr, ptr %fp.addr, align 8
  %_flags = getelementptr inbounds %struct._IO_FILE, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %_flags, align 8
  %or = or i32 %1, 32
  store i32 %or, ptr %_flags, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local ptr @getprogname() #11 {
entry:
  %0 = load ptr, ptr @program_invocation_short_name, align 8
  ret ptr %0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @hard_locale(i32 noundef %category) #3 {
entry:
  %retval = alloca i1, align 1
  %category.addr = alloca i32, align 4
  %locale = alloca [257 x i8], align 16
  store i32 %category, ptr %category.addr, align 4
  %0 = load i32, ptr %category.addr, align 4
  %arraydecay = getelementptr inbounds [257 x i8], ptr %locale, i64 0, i64 0
  %call = call i32 @setlocale_null_r(i32 noundef %0, ptr noundef %arraydecay, i64 noundef 257)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %arraydecay1 = getelementptr inbounds [257 x i8], ptr %locale, i64 0, i64 0
  %call2 = call i32 @strcmp(ptr noundef %arraydecay1, ptr noundef @.str.389) #23
  %cmp = icmp eq i32 %call2, 0
  br i1 %cmp, label %if.end7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %arraydecay3 = getelementptr inbounds [257 x i8], ptr %locale, i64 0, i64 0
  %call4 = call i32 @strcmp(ptr noundef %arraydecay3, ptr noundef @.str.1.390) #23
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %lor.lhs.false
  store i1 true, ptr %retval, align 1
  br label %return

if.end7:                                          ; preds = %lor.lhs.false, %if.end
  store i1 false, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end7, %if.then6, %if.then
  %1 = load i1, ptr %retval, align 1
  ret i1 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @locale_charset() #3 {
entry:
  %codeset = alloca ptr, align 8
  %call = call ptr @rpl_nl_langinfo(i32 noundef 14)
  store ptr %call, ptr %codeset, align 8
  %0 = load ptr, ptr %codeset, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr @.str.393, ptr %codeset, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %codeset, align 8
  %arrayidx = getelementptr inbounds i8, ptr %1, i64 0
  %2 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store ptr @.str.1.394, ptr %codeset, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %3 = load ptr, ptr %codeset, align 8
  ret ptr %3
}

declare ptr @rpl_nl_langinfo(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @printf_fetchargs(ptr noundef %args, ptr noundef %a) #3 {
entry:
  %retval = alloca i32, align 4
  %args.addr = alloca ptr, align 8
  %a.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %ap = alloca ptr, align 8
  store ptr %args, ptr %args.addr, align 8
  store ptr %a, ptr %a.addr, align 8
  store i64 0, ptr %i, align 8
  %0 = load ptr, ptr %a.addr, align 8
  %arg = getelementptr inbounds %struct.arguments, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %arg, align 8
  %arrayidx = getelementptr inbounds %struct.argument, ptr %1, i64 0
  store ptr %arrayidx, ptr %ap, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, ptr %i, align 8
  %3 = load ptr, ptr %a.addr, align 8
  %count = getelementptr inbounds %struct.arguments, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %count, align 16
  %cmp = icmp ult i64 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load ptr, ptr %ap, align 8
  %type = getelementptr inbounds %struct.argument, ptr %5, i32 0, i32 0
  %6 = load i32, ptr %type, align 16
  switch i32 %6, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb16
    i32 4, label %sw.bb30
    i32 5, label %sw.bb44
    i32 6, label %sw.bb57
    i32 7, label %sw.bb70
    i32 8, label %sw.bb83
    i32 9, label %sw.bb96
    i32 10, label %sw.bb109
    i32 11, label %sw.bb122
    i32 12, label %sw.bb136
    i32 13, label %sw.bb150
    i32 14, label %sw.bb164
    i32 15, label %sw.bb178
    i32 16, label %sw.bb191
    i32 17, label %sw.bb204
    i32 18, label %sw.bb217
    i32 19, label %sw.bb230
    i32 20, label %sw.bb244
    i32 21, label %sw.bb258
    i32 22, label %sw.bb271
    i32 23, label %sw.bb284
    i32 24, label %sw.bb297
    i32 25, label %sw.bb310
    i32 26, label %sw.bb323
    i32 27, label %sw.bb336
    i32 28, label %sw.bb346
    i32 29, label %sw.bb351
    i32 30, label %sw.bb364
    i32 31, label %sw.bb377
    i32 32, label %sw.bb394
    i32 33, label %sw.bb413
    i32 34, label %sw.bb426
    i32 35, label %sw.bb439
    i32 36, label %sw.bb452
    i32 37, label %sw.bb465
    i32 38, label %sw.bb478
    i32 39, label %sw.bb491
    i32 40, label %sw.bb504
    i32 41, label %sw.bb517
    i32 42, label %sw.bb530
    i32 43, label %sw.bb543
    i32 44, label %sw.bb556
    i32 45, label %sw.bb569
    i32 46, label %sw.bb582
    i32 0, label %sw.bb595
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load ptr, ptr %args.addr, align 8
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, ptr %7, i32 0, i32 0
  %gp_offset = load i32, ptr %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb
  %8 = getelementptr inbounds %struct.__va_list_tag, ptr %7, i32 0, i32 3
  %reg_save_area = load ptr, ptr %8, align 8
  %9 = getelementptr i8, ptr %reg_save_area, i32 %gp_offset
  %10 = add i32 %gp_offset, 8
  store i32 %10, ptr %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, ptr %7, i32 0, i32 2
  %overflow_arg_area = load ptr, ptr %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8, ptr %overflow_arg_area, i32 8
  store ptr %overflow_arg_area.next, ptr %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi ptr [ %9, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %11 = load i32, ptr %vaarg.addr, align 4
  %conv = trunc i32 %11 to i8
  %12 = load ptr, ptr %ap, align 8
  %a1 = getelementptr inbounds %struct.argument, ptr %12, i32 0, i32 1
  store i8 %conv, ptr %a1, align 16
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %13 = load ptr, ptr %args.addr, align 8
  %gp_offset_p3 = getelementptr inbounds %struct.__va_list_tag, ptr %13, i32 0, i32 0
  %gp_offset4 = load i32, ptr %gp_offset_p3, align 8
  %fits_in_gp5 = icmp ule i32 %gp_offset4, 40
  br i1 %fits_in_gp5, label %vaarg.in_reg6, label %vaarg.in_mem8

vaarg.in_reg6:                                    ; preds = %sw.bb2
  %14 = getelementptr inbounds %struct.__va_list_tag, ptr %13, i32 0, i32 3
  %reg_save_area7 = load ptr, ptr %14, align 8
  %15 = getelementptr i8, ptr %reg_save_area7, i32 %gp_offset4
  %16 = add i32 %gp_offset4, 8
  store i32 %16, ptr %gp_offset_p3, align 8
  br label %vaarg.end12

vaarg.in_mem8:                                    ; preds = %sw.bb2
  %overflow_arg_area_p9 = getelementptr inbounds %struct.__va_list_tag, ptr %13, i32 0, i32 2
  %overflow_arg_area10 = load ptr, ptr %overflow_arg_area_p9, align 8
  %overflow_arg_area.next11 = getelementptr i8, ptr %overflow_arg_area10, i32 8
  store ptr %overflow_arg_area.next11, ptr %overflow_arg_area_p9, align 8
  br label %vaarg.end12

vaarg.end12:                                      ; preds = %vaarg.in_mem8, %vaarg.in_reg6
  %vaarg.addr13 = phi ptr [ %15, %vaarg.in_reg6 ], [ %overflow_arg_area10, %vaarg.in_mem8 ]
  %17 = load i32, ptr %vaarg.addr13, align 4
  %conv14 = trunc i32 %17 to i8
  %18 = load ptr, ptr %ap, align 8
  %a15 = getelementptr inbounds %struct.argument, ptr %18, i32 0, i32 1
  store i8 %conv14, ptr %a15, align 16
  br label %sw.epilog

sw.bb16:                                          ; preds = %for.body
  %19 = load ptr, ptr %args.addr, align 8
  %gp_offset_p17 = getelementptr inbounds %struct.__va_list_tag, ptr %19, i32 0, i32 0
  %gp_offset18 = load i32, ptr %gp_offset_p17, align 8
  %fits_in_gp19 = icmp ule i32 %gp_offset18, 40
  br i1 %fits_in_gp19, label %vaarg.in_reg20, label %vaarg.in_mem22

vaarg.in_reg20:                                   ; preds = %sw.bb16
  %20 = getelementptr inbounds %struct.__va_list_tag, ptr %19, i32 0, i32 3
  %reg_save_area21 = load ptr, ptr %20, align 8
  %21 = getelementptr i8, ptr %reg_save_area21, i32 %gp_offset18
  %22 = add i32 %gp_offset18, 8
  store i32 %22, ptr %gp_offset_p17, align 8
  br label %vaarg.end26

vaarg.in_mem22:                                   ; preds = %sw.bb16
  %overflow_arg_area_p23 = getelementptr inbounds %struct.__va_list_tag, ptr %19, i32 0, i32 2
  %overflow_arg_area24 = load ptr, ptr %overflow_arg_area_p23, align 8
  %overflow_arg_area.next25 = getelementptr i8, ptr %overflow_arg_area24, i32 8
  store ptr %overflow_arg_area.next25, ptr %overflow_arg_area_p23, align 8
  br label %vaarg.end26

vaarg.end26:                                      ; preds = %vaarg.in_mem22, %vaarg.in_reg20
  %vaarg.addr27 = phi ptr [ %21, %vaarg.in_reg20 ], [ %overflow_arg_area24, %vaarg.in_mem22 ]
  %23 = load i32, ptr %vaarg.addr27, align 4
  %conv28 = trunc i32 %23 to i16
  %24 = load ptr, ptr %ap, align 8
  %a29 = getelementptr inbounds %struct.argument, ptr %24, i32 0, i32 1
  store i16 %conv28, ptr %a29, align 16
  br label %sw.epilog

sw.bb30:                                          ; preds = %for.body
  %25 = load ptr, ptr %args.addr, align 8
  %gp_offset_p31 = getelementptr inbounds %struct.__va_list_tag, ptr %25, i32 0, i32 0
  %gp_offset32 = load i32, ptr %gp_offset_p31, align 8
  %fits_in_gp33 = icmp ule i32 %gp_offset32, 40
  br i1 %fits_in_gp33, label %vaarg.in_reg34, label %vaarg.in_mem36

vaarg.in_reg34:                                   ; preds = %sw.bb30
  %26 = getelementptr inbounds %struct.__va_list_tag, ptr %25, i32 0, i32 3
  %reg_save_area35 = load ptr, ptr %26, align 8
  %27 = getelementptr i8, ptr %reg_save_area35, i32 %gp_offset32
  %28 = add i32 %gp_offset32, 8
  store i32 %28, ptr %gp_offset_p31, align 8
  br label %vaarg.end40

vaarg.in_mem36:                                   ; preds = %sw.bb30
  %overflow_arg_area_p37 = getelementptr inbounds %struct.__va_list_tag, ptr %25, i32 0, i32 2
  %overflow_arg_area38 = load ptr, ptr %overflow_arg_area_p37, align 8
  %overflow_arg_area.next39 = getelementptr i8, ptr %overflow_arg_area38, i32 8
  store ptr %overflow_arg_area.next39, ptr %overflow_arg_area_p37, align 8
  br label %vaarg.end40

vaarg.end40:                                      ; preds = %vaarg.in_mem36, %vaarg.in_reg34
  %vaarg.addr41 = phi ptr [ %27, %vaarg.in_reg34 ], [ %overflow_arg_area38, %vaarg.in_mem36 ]
  %29 = load i32, ptr %vaarg.addr41, align 4
  %conv42 = trunc i32 %29 to i16
  %30 = load ptr, ptr %ap, align 8
  %a43 = getelementptr inbounds %struct.argument, ptr %30, i32 0, i32 1
  store i16 %conv42, ptr %a43, align 16
  br label %sw.epilog

sw.bb44:                                          ; preds = %for.body
  %31 = load ptr, ptr %args.addr, align 8
  %gp_offset_p45 = getelementptr inbounds %struct.__va_list_tag, ptr %31, i32 0, i32 0
  %gp_offset46 = load i32, ptr %gp_offset_p45, align 8
  %fits_in_gp47 = icmp ule i32 %gp_offset46, 40
  br i1 %fits_in_gp47, label %vaarg.in_reg48, label %vaarg.in_mem50

vaarg.in_reg48:                                   ; preds = %sw.bb44
  %32 = getelementptr inbounds %struct.__va_list_tag, ptr %31, i32 0, i32 3
  %reg_save_area49 = load ptr, ptr %32, align 8
  %33 = getelementptr i8, ptr %reg_save_area49, i32 %gp_offset46
  %34 = add i32 %gp_offset46, 8
  store i32 %34, ptr %gp_offset_p45, align 8
  br label %vaarg.end54

vaarg.in_mem50:                                   ; preds = %sw.bb44
  %overflow_arg_area_p51 = getelementptr inbounds %struct.__va_list_tag, ptr %31, i32 0, i32 2
  %overflow_arg_area52 = load ptr, ptr %overflow_arg_area_p51, align 8
  %overflow_arg_area.next53 = getelementptr i8, ptr %overflow_arg_area52, i32 8
  store ptr %overflow_arg_area.next53, ptr %overflow_arg_area_p51, align 8
  br label %vaarg.end54

vaarg.end54:                                      ; preds = %vaarg.in_mem50, %vaarg.in_reg48
  %vaarg.addr55 = phi ptr [ %33, %vaarg.in_reg48 ], [ %overflow_arg_area52, %vaarg.in_mem50 ]
  %35 = load i32, ptr %vaarg.addr55, align 4
  %36 = load ptr, ptr %ap, align 8
  %a56 = getelementptr inbounds %struct.argument, ptr %36, i32 0, i32 1
  store i32 %35, ptr %a56, align 16
  br label %sw.epilog

sw.bb57:                                          ; preds = %for.body
  %37 = load ptr, ptr %args.addr, align 8
  %gp_offset_p58 = getelementptr inbounds %struct.__va_list_tag, ptr %37, i32 0, i32 0
  %gp_offset59 = load i32, ptr %gp_offset_p58, align 8
  %fits_in_gp60 = icmp ule i32 %gp_offset59, 40
  br i1 %fits_in_gp60, label %vaarg.in_reg61, label %vaarg.in_mem63

vaarg.in_reg61:                                   ; preds = %sw.bb57
  %38 = getelementptr inbounds %struct.__va_list_tag, ptr %37, i32 0, i32 3
  %reg_save_area62 = load ptr, ptr %38, align 8
  %39 = getelementptr i8, ptr %reg_save_area62, i32 %gp_offset59
  %40 = add i32 %gp_offset59, 8
  store i32 %40, ptr %gp_offset_p58, align 8
  br label %vaarg.end67

vaarg.in_mem63:                                   ; preds = %sw.bb57
  %overflow_arg_area_p64 = getelementptr inbounds %struct.__va_list_tag, ptr %37, i32 0, i32 2
  %overflow_arg_area65 = load ptr, ptr %overflow_arg_area_p64, align 8
  %overflow_arg_area.next66 = getelementptr i8, ptr %overflow_arg_area65, i32 8
  store ptr %overflow_arg_area.next66, ptr %overflow_arg_area_p64, align 8
  br label %vaarg.end67

vaarg.end67:                                      ; preds = %vaarg.in_mem63, %vaarg.in_reg61
  %vaarg.addr68 = phi ptr [ %39, %vaarg.in_reg61 ], [ %overflow_arg_area65, %vaarg.in_mem63 ]
  %41 = load i32, ptr %vaarg.addr68, align 4
  %42 = load ptr, ptr %ap, align 8
  %a69 = getelementptr inbounds %struct.argument, ptr %42, i32 0, i32 1
  store i32 %41, ptr %a69, align 16
  br label %sw.epilog

sw.bb70:                                          ; preds = %for.body
  %43 = load ptr, ptr %args.addr, align 8
  %gp_offset_p71 = getelementptr inbounds %struct.__va_list_tag, ptr %43, i32 0, i32 0
  %gp_offset72 = load i32, ptr %gp_offset_p71, align 8
  %fits_in_gp73 = icmp ule i32 %gp_offset72, 40
  br i1 %fits_in_gp73, label %vaarg.in_reg74, label %vaarg.in_mem76

vaarg.in_reg74:                                   ; preds = %sw.bb70
  %44 = getelementptr inbounds %struct.__va_list_tag, ptr %43, i32 0, i32 3
  %reg_save_area75 = load ptr, ptr %44, align 8
  %45 = getelementptr i8, ptr %reg_save_area75, i32 %gp_offset72
  %46 = add i32 %gp_offset72, 8
  store i32 %46, ptr %gp_offset_p71, align 8
  br label %vaarg.end80

vaarg.in_mem76:                                   ; preds = %sw.bb70
  %overflow_arg_area_p77 = getelementptr inbounds %struct.__va_list_tag, ptr %43, i32 0, i32 2
  %overflow_arg_area78 = load ptr, ptr %overflow_arg_area_p77, align 8
  %overflow_arg_area.next79 = getelementptr i8, ptr %overflow_arg_area78, i32 8
  store ptr %overflow_arg_area.next79, ptr %overflow_arg_area_p77, align 8
  br label %vaarg.end80

vaarg.end80:                                      ; preds = %vaarg.in_mem76, %vaarg.in_reg74
  %vaarg.addr81 = phi ptr [ %45, %vaarg.in_reg74 ], [ %overflow_arg_area78, %vaarg.in_mem76 ]
  %47 = load i64, ptr %vaarg.addr81, align 8
  %48 = load ptr, ptr %ap, align 8
  %a82 = getelementptr inbounds %struct.argument, ptr %48, i32 0, i32 1
  store i64 %47, ptr %a82, align 16
  br label %sw.epilog

sw.bb83:                                          ; preds = %for.body
  %49 = load ptr, ptr %args.addr, align 8
  %gp_offset_p84 = getelementptr inbounds %struct.__va_list_tag, ptr %49, i32 0, i32 0
  %gp_offset85 = load i32, ptr %gp_offset_p84, align 8
  %fits_in_gp86 = icmp ule i32 %gp_offset85, 40
  br i1 %fits_in_gp86, label %vaarg.in_reg87, label %vaarg.in_mem89

vaarg.in_reg87:                                   ; preds = %sw.bb83
  %50 = getelementptr inbounds %struct.__va_list_tag, ptr %49, i32 0, i32 3
  %reg_save_area88 = load ptr, ptr %50, align 8
  %51 = getelementptr i8, ptr %reg_save_area88, i32 %gp_offset85
  %52 = add i32 %gp_offset85, 8
  store i32 %52, ptr %gp_offset_p84, align 8
  br label %vaarg.end93

vaarg.in_mem89:                                   ; preds = %sw.bb83
  %overflow_arg_area_p90 = getelementptr inbounds %struct.__va_list_tag, ptr %49, i32 0, i32 2
  %overflow_arg_area91 = load ptr, ptr %overflow_arg_area_p90, align 8
  %overflow_arg_area.next92 = getelementptr i8, ptr %overflow_arg_area91, i32 8
  store ptr %overflow_arg_area.next92, ptr %overflow_arg_area_p90, align 8
  br label %vaarg.end93

vaarg.end93:                                      ; preds = %vaarg.in_mem89, %vaarg.in_reg87
  %vaarg.addr94 = phi ptr [ %51, %vaarg.in_reg87 ], [ %overflow_arg_area91, %vaarg.in_mem89 ]
  %53 = load i64, ptr %vaarg.addr94, align 8
  %54 = load ptr, ptr %ap, align 8
  %a95 = getelementptr inbounds %struct.argument, ptr %54, i32 0, i32 1
  store i64 %53, ptr %a95, align 16
  br label %sw.epilog

sw.bb96:                                          ; preds = %for.body
  %55 = load ptr, ptr %args.addr, align 8
  %gp_offset_p97 = getelementptr inbounds %struct.__va_list_tag, ptr %55, i32 0, i32 0
  %gp_offset98 = load i32, ptr %gp_offset_p97, align 8
  %fits_in_gp99 = icmp ule i32 %gp_offset98, 40
  br i1 %fits_in_gp99, label %vaarg.in_reg100, label %vaarg.in_mem102

vaarg.in_reg100:                                  ; preds = %sw.bb96
  %56 = getelementptr inbounds %struct.__va_list_tag, ptr %55, i32 0, i32 3
  %reg_save_area101 = load ptr, ptr %56, align 8
  %57 = getelementptr i8, ptr %reg_save_area101, i32 %gp_offset98
  %58 = add i32 %gp_offset98, 8
  store i32 %58, ptr %gp_offset_p97, align 8
  br label %vaarg.end106

vaarg.in_mem102:                                  ; preds = %sw.bb96
  %overflow_arg_area_p103 = getelementptr inbounds %struct.__va_list_tag, ptr %55, i32 0, i32 2
  %overflow_arg_area104 = load ptr, ptr %overflow_arg_area_p103, align 8
  %overflow_arg_area.next105 = getelementptr i8, ptr %overflow_arg_area104, i32 8
  store ptr %overflow_arg_area.next105, ptr %overflow_arg_area_p103, align 8
  br label %vaarg.end106

vaarg.end106:                                     ; preds = %vaarg.in_mem102, %vaarg.in_reg100
  %vaarg.addr107 = phi ptr [ %57, %vaarg.in_reg100 ], [ %overflow_arg_area104, %vaarg.in_mem102 ]
  %59 = load i64, ptr %vaarg.addr107, align 8
  %60 = load ptr, ptr %ap, align 8
  %a108 = getelementptr inbounds %struct.argument, ptr %60, i32 0, i32 1
  store i64 %59, ptr %a108, align 16
  br label %sw.epilog

sw.bb109:                                         ; preds = %for.body
  %61 = load ptr, ptr %args.addr, align 8
  %gp_offset_p110 = getelementptr inbounds %struct.__va_list_tag, ptr %61, i32 0, i32 0
  %gp_offset111 = load i32, ptr %gp_offset_p110, align 8
  %fits_in_gp112 = icmp ule i32 %gp_offset111, 40
  br i1 %fits_in_gp112, label %vaarg.in_reg113, label %vaarg.in_mem115

vaarg.in_reg113:                                  ; preds = %sw.bb109
  %62 = getelementptr inbounds %struct.__va_list_tag, ptr %61, i32 0, i32 3
  %reg_save_area114 = load ptr, ptr %62, align 8
  %63 = getelementptr i8, ptr %reg_save_area114, i32 %gp_offset111
  %64 = add i32 %gp_offset111, 8
  store i32 %64, ptr %gp_offset_p110, align 8
  br label %vaarg.end119

vaarg.in_mem115:                                  ; preds = %sw.bb109
  %overflow_arg_area_p116 = getelementptr inbounds %struct.__va_list_tag, ptr %61, i32 0, i32 2
  %overflow_arg_area117 = load ptr, ptr %overflow_arg_area_p116, align 8
  %overflow_arg_area.next118 = getelementptr i8, ptr %overflow_arg_area117, i32 8
  store ptr %overflow_arg_area.next118, ptr %overflow_arg_area_p116, align 8
  br label %vaarg.end119

vaarg.end119:                                     ; preds = %vaarg.in_mem115, %vaarg.in_reg113
  %vaarg.addr120 = phi ptr [ %63, %vaarg.in_reg113 ], [ %overflow_arg_area117, %vaarg.in_mem115 ]
  %65 = load i64, ptr %vaarg.addr120, align 8
  %66 = load ptr, ptr %ap, align 8
  %a121 = getelementptr inbounds %struct.argument, ptr %66, i32 0, i32 1
  store i64 %65, ptr %a121, align 16
  br label %sw.epilog

sw.bb122:                                         ; preds = %for.body
  %67 = load ptr, ptr %args.addr, align 8
  %gp_offset_p123 = getelementptr inbounds %struct.__va_list_tag, ptr %67, i32 0, i32 0
  %gp_offset124 = load i32, ptr %gp_offset_p123, align 8
  %fits_in_gp125 = icmp ule i32 %gp_offset124, 40
  br i1 %fits_in_gp125, label %vaarg.in_reg126, label %vaarg.in_mem128

vaarg.in_reg126:                                  ; preds = %sw.bb122
  %68 = getelementptr inbounds %struct.__va_list_tag, ptr %67, i32 0, i32 3
  %reg_save_area127 = load ptr, ptr %68, align 8
  %69 = getelementptr i8, ptr %reg_save_area127, i32 %gp_offset124
  %70 = add i32 %gp_offset124, 8
  store i32 %70, ptr %gp_offset_p123, align 8
  br label %vaarg.end132

vaarg.in_mem128:                                  ; preds = %sw.bb122
  %overflow_arg_area_p129 = getelementptr inbounds %struct.__va_list_tag, ptr %67, i32 0, i32 2
  %overflow_arg_area130 = load ptr, ptr %overflow_arg_area_p129, align 8
  %overflow_arg_area.next131 = getelementptr i8, ptr %overflow_arg_area130, i32 8
  store ptr %overflow_arg_area.next131, ptr %overflow_arg_area_p129, align 8
  br label %vaarg.end132

vaarg.end132:                                     ; preds = %vaarg.in_mem128, %vaarg.in_reg126
  %vaarg.addr133 = phi ptr [ %69, %vaarg.in_reg126 ], [ %overflow_arg_area130, %vaarg.in_mem128 ]
  %71 = load i32, ptr %vaarg.addr133, align 4
  %conv134 = trunc i32 %71 to i8
  %72 = load ptr, ptr %ap, align 8
  %a135 = getelementptr inbounds %struct.argument, ptr %72, i32 0, i32 1
  store i8 %conv134, ptr %a135, align 16
  br label %sw.epilog

sw.bb136:                                         ; preds = %for.body
  %73 = load ptr, ptr %args.addr, align 8
  %gp_offset_p137 = getelementptr inbounds %struct.__va_list_tag, ptr %73, i32 0, i32 0
  %gp_offset138 = load i32, ptr %gp_offset_p137, align 8
  %fits_in_gp139 = icmp ule i32 %gp_offset138, 40
  br i1 %fits_in_gp139, label %vaarg.in_reg140, label %vaarg.in_mem142

vaarg.in_reg140:                                  ; preds = %sw.bb136
  %74 = getelementptr inbounds %struct.__va_list_tag, ptr %73, i32 0, i32 3
  %reg_save_area141 = load ptr, ptr %74, align 8
  %75 = getelementptr i8, ptr %reg_save_area141, i32 %gp_offset138
  %76 = add i32 %gp_offset138, 8
  store i32 %76, ptr %gp_offset_p137, align 8
  br label %vaarg.end146

vaarg.in_mem142:                                  ; preds = %sw.bb136
  %overflow_arg_area_p143 = getelementptr inbounds %struct.__va_list_tag, ptr %73, i32 0, i32 2
  %overflow_arg_area144 = load ptr, ptr %overflow_arg_area_p143, align 8
  %overflow_arg_area.next145 = getelementptr i8, ptr %overflow_arg_area144, i32 8
  store ptr %overflow_arg_area.next145, ptr %overflow_arg_area_p143, align 8
  br label %vaarg.end146

vaarg.end146:                                     ; preds = %vaarg.in_mem142, %vaarg.in_reg140
  %vaarg.addr147 = phi ptr [ %75, %vaarg.in_reg140 ], [ %overflow_arg_area144, %vaarg.in_mem142 ]
  %77 = load i32, ptr %vaarg.addr147, align 4
  %conv148 = trunc i32 %77 to i8
  %78 = load ptr, ptr %ap, align 8
  %a149 = getelementptr inbounds %struct.argument, ptr %78, i32 0, i32 1
  store i8 %conv148, ptr %a149, align 16
  br label %sw.epilog

sw.bb150:                                         ; preds = %for.body
  %79 = load ptr, ptr %args.addr, align 8
  %gp_offset_p151 = getelementptr inbounds %struct.__va_list_tag, ptr %79, i32 0, i32 0
  %gp_offset152 = load i32, ptr %gp_offset_p151, align 8
  %fits_in_gp153 = icmp ule i32 %gp_offset152, 40
  br i1 %fits_in_gp153, label %vaarg.in_reg154, label %vaarg.in_mem156

vaarg.in_reg154:                                  ; preds = %sw.bb150
  %80 = getelementptr inbounds %struct.__va_list_tag, ptr %79, i32 0, i32 3
  %reg_save_area155 = load ptr, ptr %80, align 8
  %81 = getelementptr i8, ptr %reg_save_area155, i32 %gp_offset152
  %82 = add i32 %gp_offset152, 8
  store i32 %82, ptr %gp_offset_p151, align 8
  br label %vaarg.end160

vaarg.in_mem156:                                  ; preds = %sw.bb150
  %overflow_arg_area_p157 = getelementptr inbounds %struct.__va_list_tag, ptr %79, i32 0, i32 2
  %overflow_arg_area158 = load ptr, ptr %overflow_arg_area_p157, align 8
  %overflow_arg_area.next159 = getelementptr i8, ptr %overflow_arg_area158, i32 8
  store ptr %overflow_arg_area.next159, ptr %overflow_arg_area_p157, align 8
  br label %vaarg.end160

vaarg.end160:                                     ; preds = %vaarg.in_mem156, %vaarg.in_reg154
  %vaarg.addr161 = phi ptr [ %81, %vaarg.in_reg154 ], [ %overflow_arg_area158, %vaarg.in_mem156 ]
  %83 = load i32, ptr %vaarg.addr161, align 4
  %conv162 = trunc i32 %83 to i16
  %84 = load ptr, ptr %ap, align 8
  %a163 = getelementptr inbounds %struct.argument, ptr %84, i32 0, i32 1
  store i16 %conv162, ptr %a163, align 16
  br label %sw.epilog

sw.bb164:                                         ; preds = %for.body
  %85 = load ptr, ptr %args.addr, align 8
  %gp_offset_p165 = getelementptr inbounds %struct.__va_list_tag, ptr %85, i32 0, i32 0
  %gp_offset166 = load i32, ptr %gp_offset_p165, align 8
  %fits_in_gp167 = icmp ule i32 %gp_offset166, 40
  br i1 %fits_in_gp167, label %vaarg.in_reg168, label %vaarg.in_mem170

vaarg.in_reg168:                                  ; preds = %sw.bb164
  %86 = getelementptr inbounds %struct.__va_list_tag, ptr %85, i32 0, i32 3
  %reg_save_area169 = load ptr, ptr %86, align 8
  %87 = getelementptr i8, ptr %reg_save_area169, i32 %gp_offset166
  %88 = add i32 %gp_offset166, 8
  store i32 %88, ptr %gp_offset_p165, align 8
  br label %vaarg.end174

vaarg.in_mem170:                                  ; preds = %sw.bb164
  %overflow_arg_area_p171 = getelementptr inbounds %struct.__va_list_tag, ptr %85, i32 0, i32 2
  %overflow_arg_area172 = load ptr, ptr %overflow_arg_area_p171, align 8
  %overflow_arg_area.next173 = getelementptr i8, ptr %overflow_arg_area172, i32 8
  store ptr %overflow_arg_area.next173, ptr %overflow_arg_area_p171, align 8
  br label %vaarg.end174

vaarg.end174:                                     ; preds = %vaarg.in_mem170, %vaarg.in_reg168
  %vaarg.addr175 = phi ptr [ %87, %vaarg.in_reg168 ], [ %overflow_arg_area172, %vaarg.in_mem170 ]
  %89 = load i32, ptr %vaarg.addr175, align 4
  %conv176 = trunc i32 %89 to i16
  %90 = load ptr, ptr %ap, align 8
  %a177 = getelementptr inbounds %struct.argument, ptr %90, i32 0, i32 1
  store i16 %conv176, ptr %a177, align 16
  br label %sw.epilog

sw.bb178:                                         ; preds = %for.body
  %91 = load ptr, ptr %args.addr, align 8
  %gp_offset_p179 = getelementptr inbounds %struct.__va_list_tag, ptr %91, i32 0, i32 0
  %gp_offset180 = load i32, ptr %gp_offset_p179, align 8
  %fits_in_gp181 = icmp ule i32 %gp_offset180, 40
  br i1 %fits_in_gp181, label %vaarg.in_reg182, label %vaarg.in_mem184

vaarg.in_reg182:                                  ; preds = %sw.bb178
  %92 = getelementptr inbounds %struct.__va_list_tag, ptr %91, i32 0, i32 3
  %reg_save_area183 = load ptr, ptr %92, align 8
  %93 = getelementptr i8, ptr %reg_save_area183, i32 %gp_offset180
  %94 = add i32 %gp_offset180, 8
  store i32 %94, ptr %gp_offset_p179, align 8
  br label %vaarg.end188

vaarg.in_mem184:                                  ; preds = %sw.bb178
  %overflow_arg_area_p185 = getelementptr inbounds %struct.__va_list_tag, ptr %91, i32 0, i32 2
  %overflow_arg_area186 = load ptr, ptr %overflow_arg_area_p185, align 8
  %overflow_arg_area.next187 = getelementptr i8, ptr %overflow_arg_area186, i32 8
  store ptr %overflow_arg_area.next187, ptr %overflow_arg_area_p185, align 8
  br label %vaarg.end188

vaarg.end188:                                     ; preds = %vaarg.in_mem184, %vaarg.in_reg182
  %vaarg.addr189 = phi ptr [ %93, %vaarg.in_reg182 ], [ %overflow_arg_area186, %vaarg.in_mem184 ]
  %95 = load i32, ptr %vaarg.addr189, align 4
  %96 = load ptr, ptr %ap, align 8
  %a190 = getelementptr inbounds %struct.argument, ptr %96, i32 0, i32 1
  store i32 %95, ptr %a190, align 16
  br label %sw.epilog

sw.bb191:                                         ; preds = %for.body
  %97 = load ptr, ptr %args.addr, align 8
  %gp_offset_p192 = getelementptr inbounds %struct.__va_list_tag, ptr %97, i32 0, i32 0
  %gp_offset193 = load i32, ptr %gp_offset_p192, align 8
  %fits_in_gp194 = icmp ule i32 %gp_offset193, 40
  br i1 %fits_in_gp194, label %vaarg.in_reg195, label %vaarg.in_mem197

vaarg.in_reg195:                                  ; preds = %sw.bb191
  %98 = getelementptr inbounds %struct.__va_list_tag, ptr %97, i32 0, i32 3
  %reg_save_area196 = load ptr, ptr %98, align 8
  %99 = getelementptr i8, ptr %reg_save_area196, i32 %gp_offset193
  %100 = add i32 %gp_offset193, 8
  store i32 %100, ptr %gp_offset_p192, align 8
  br label %vaarg.end201

vaarg.in_mem197:                                  ; preds = %sw.bb191
  %overflow_arg_area_p198 = getelementptr inbounds %struct.__va_list_tag, ptr %97, i32 0, i32 2
  %overflow_arg_area199 = load ptr, ptr %overflow_arg_area_p198, align 8
  %overflow_arg_area.next200 = getelementptr i8, ptr %overflow_arg_area199, i32 8
  store ptr %overflow_arg_area.next200, ptr %overflow_arg_area_p198, align 8
  br label %vaarg.end201

vaarg.end201:                                     ; preds = %vaarg.in_mem197, %vaarg.in_reg195
  %vaarg.addr202 = phi ptr [ %99, %vaarg.in_reg195 ], [ %overflow_arg_area199, %vaarg.in_mem197 ]
  %101 = load i32, ptr %vaarg.addr202, align 4
  %102 = load ptr, ptr %ap, align 8
  %a203 = getelementptr inbounds %struct.argument, ptr %102, i32 0, i32 1
  store i32 %101, ptr %a203, align 16
  br label %sw.epilog

sw.bb204:                                         ; preds = %for.body
  %103 = load ptr, ptr %args.addr, align 8
  %gp_offset_p205 = getelementptr inbounds %struct.__va_list_tag, ptr %103, i32 0, i32 0
  %gp_offset206 = load i32, ptr %gp_offset_p205, align 8
  %fits_in_gp207 = icmp ule i32 %gp_offset206, 40
  br i1 %fits_in_gp207, label %vaarg.in_reg208, label %vaarg.in_mem210

vaarg.in_reg208:                                  ; preds = %sw.bb204
  %104 = getelementptr inbounds %struct.__va_list_tag, ptr %103, i32 0, i32 3
  %reg_save_area209 = load ptr, ptr %104, align 8
  %105 = getelementptr i8, ptr %reg_save_area209, i32 %gp_offset206
  %106 = add i32 %gp_offset206, 8
  store i32 %106, ptr %gp_offset_p205, align 8
  br label %vaarg.end214

vaarg.in_mem210:                                  ; preds = %sw.bb204
  %overflow_arg_area_p211 = getelementptr inbounds %struct.__va_list_tag, ptr %103, i32 0, i32 2
  %overflow_arg_area212 = load ptr, ptr %overflow_arg_area_p211, align 8
  %overflow_arg_area.next213 = getelementptr i8, ptr %overflow_arg_area212, i32 8
  store ptr %overflow_arg_area.next213, ptr %overflow_arg_area_p211, align 8
  br label %vaarg.end214

vaarg.end214:                                     ; preds = %vaarg.in_mem210, %vaarg.in_reg208
  %vaarg.addr215 = phi ptr [ %105, %vaarg.in_reg208 ], [ %overflow_arg_area212, %vaarg.in_mem210 ]
  %107 = load i64, ptr %vaarg.addr215, align 8
  %108 = load ptr, ptr %ap, align 8
  %a216 = getelementptr inbounds %struct.argument, ptr %108, i32 0, i32 1
  store i64 %107, ptr %a216, align 16
  br label %sw.epilog

sw.bb217:                                         ; preds = %for.body
  %109 = load ptr, ptr %args.addr, align 8
  %gp_offset_p218 = getelementptr inbounds %struct.__va_list_tag, ptr %109, i32 0, i32 0
  %gp_offset219 = load i32, ptr %gp_offset_p218, align 8
  %fits_in_gp220 = icmp ule i32 %gp_offset219, 40
  br i1 %fits_in_gp220, label %vaarg.in_reg221, label %vaarg.in_mem223

vaarg.in_reg221:                                  ; preds = %sw.bb217
  %110 = getelementptr inbounds %struct.__va_list_tag, ptr %109, i32 0, i32 3
  %reg_save_area222 = load ptr, ptr %110, align 8
  %111 = getelementptr i8, ptr %reg_save_area222, i32 %gp_offset219
  %112 = add i32 %gp_offset219, 8
  store i32 %112, ptr %gp_offset_p218, align 8
  br label %vaarg.end227

vaarg.in_mem223:                                  ; preds = %sw.bb217
  %overflow_arg_area_p224 = getelementptr inbounds %struct.__va_list_tag, ptr %109, i32 0, i32 2
  %overflow_arg_area225 = load ptr, ptr %overflow_arg_area_p224, align 8
  %overflow_arg_area.next226 = getelementptr i8, ptr %overflow_arg_area225, i32 8
  store ptr %overflow_arg_area.next226, ptr %overflow_arg_area_p224, align 8
  br label %vaarg.end227

vaarg.end227:                                     ; preds = %vaarg.in_mem223, %vaarg.in_reg221
  %vaarg.addr228 = phi ptr [ %111, %vaarg.in_reg221 ], [ %overflow_arg_area225, %vaarg.in_mem223 ]
  %113 = load i64, ptr %vaarg.addr228, align 8
  %114 = load ptr, ptr %ap, align 8
  %a229 = getelementptr inbounds %struct.argument, ptr %114, i32 0, i32 1
  store i64 %113, ptr %a229, align 16
  br label %sw.epilog

sw.bb230:                                         ; preds = %for.body
  %115 = load ptr, ptr %args.addr, align 8
  %gp_offset_p231 = getelementptr inbounds %struct.__va_list_tag, ptr %115, i32 0, i32 0
  %gp_offset232 = load i32, ptr %gp_offset_p231, align 8
  %fits_in_gp233 = icmp ule i32 %gp_offset232, 40
  br i1 %fits_in_gp233, label %vaarg.in_reg234, label %vaarg.in_mem236

vaarg.in_reg234:                                  ; preds = %sw.bb230
  %116 = getelementptr inbounds %struct.__va_list_tag, ptr %115, i32 0, i32 3
  %reg_save_area235 = load ptr, ptr %116, align 8
  %117 = getelementptr i8, ptr %reg_save_area235, i32 %gp_offset232
  %118 = add i32 %gp_offset232, 8
  store i32 %118, ptr %gp_offset_p231, align 8
  br label %vaarg.end240

vaarg.in_mem236:                                  ; preds = %sw.bb230
  %overflow_arg_area_p237 = getelementptr inbounds %struct.__va_list_tag, ptr %115, i32 0, i32 2
  %overflow_arg_area238 = load ptr, ptr %overflow_arg_area_p237, align 8
  %overflow_arg_area.next239 = getelementptr i8, ptr %overflow_arg_area238, i32 8
  store ptr %overflow_arg_area.next239, ptr %overflow_arg_area_p237, align 8
  br label %vaarg.end240

vaarg.end240:                                     ; preds = %vaarg.in_mem236, %vaarg.in_reg234
  %vaarg.addr241 = phi ptr [ %117, %vaarg.in_reg234 ], [ %overflow_arg_area238, %vaarg.in_mem236 ]
  %119 = load i32, ptr %vaarg.addr241, align 4
  %conv242 = trunc i32 %119 to i8
  %120 = load ptr, ptr %ap, align 8
  %a243 = getelementptr inbounds %struct.argument, ptr %120, i32 0, i32 1
  store i8 %conv242, ptr %a243, align 16
  br label %sw.epilog

sw.bb244:                                         ; preds = %for.body
  %121 = load ptr, ptr %args.addr, align 8
  %gp_offset_p245 = getelementptr inbounds %struct.__va_list_tag, ptr %121, i32 0, i32 0
  %gp_offset246 = load i32, ptr %gp_offset_p245, align 8
  %fits_in_gp247 = icmp ule i32 %gp_offset246, 40
  br i1 %fits_in_gp247, label %vaarg.in_reg248, label %vaarg.in_mem250

vaarg.in_reg248:                                  ; preds = %sw.bb244
  %122 = getelementptr inbounds %struct.__va_list_tag, ptr %121, i32 0, i32 3
  %reg_save_area249 = load ptr, ptr %122, align 8
  %123 = getelementptr i8, ptr %reg_save_area249, i32 %gp_offset246
  %124 = add i32 %gp_offset246, 8
  store i32 %124, ptr %gp_offset_p245, align 8
  br label %vaarg.end254

vaarg.in_mem250:                                  ; preds = %sw.bb244
  %overflow_arg_area_p251 = getelementptr inbounds %struct.__va_list_tag, ptr %121, i32 0, i32 2
  %overflow_arg_area252 = load ptr, ptr %overflow_arg_area_p251, align 8
  %overflow_arg_area.next253 = getelementptr i8, ptr %overflow_arg_area252, i32 8
  store ptr %overflow_arg_area.next253, ptr %overflow_arg_area_p251, align 8
  br label %vaarg.end254

vaarg.end254:                                     ; preds = %vaarg.in_mem250, %vaarg.in_reg248
  %vaarg.addr255 = phi ptr [ %123, %vaarg.in_reg248 ], [ %overflow_arg_area252, %vaarg.in_mem250 ]
  %125 = load i32, ptr %vaarg.addr255, align 4
  %conv256 = trunc i32 %125 to i8
  %126 = load ptr, ptr %ap, align 8
  %a257 = getelementptr inbounds %struct.argument, ptr %126, i32 0, i32 1
  store i8 %conv256, ptr %a257, align 16
  br label %sw.epilog

sw.bb258:                                         ; preds = %for.body
  %127 = load ptr, ptr %args.addr, align 8
  %gp_offset_p259 = getelementptr inbounds %struct.__va_list_tag, ptr %127, i32 0, i32 0
  %gp_offset260 = load i32, ptr %gp_offset_p259, align 8
  %fits_in_gp261 = icmp ule i32 %gp_offset260, 40
  br i1 %fits_in_gp261, label %vaarg.in_reg262, label %vaarg.in_mem264

vaarg.in_reg262:                                  ; preds = %sw.bb258
  %128 = getelementptr inbounds %struct.__va_list_tag, ptr %127, i32 0, i32 3
  %reg_save_area263 = load ptr, ptr %128, align 8
  %129 = getelementptr i8, ptr %reg_save_area263, i32 %gp_offset260
  %130 = add i32 %gp_offset260, 8
  store i32 %130, ptr %gp_offset_p259, align 8
  br label %vaarg.end268

vaarg.in_mem264:                                  ; preds = %sw.bb258
  %overflow_arg_area_p265 = getelementptr inbounds %struct.__va_list_tag, ptr %127, i32 0, i32 2
  %overflow_arg_area266 = load ptr, ptr %overflow_arg_area_p265, align 8
  %overflow_arg_area.next267 = getelementptr i8, ptr %overflow_arg_area266, i32 8
  store ptr %overflow_arg_area.next267, ptr %overflow_arg_area_p265, align 8
  br label %vaarg.end268

vaarg.end268:                                     ; preds = %vaarg.in_mem264, %vaarg.in_reg262
  %vaarg.addr269 = phi ptr [ %129, %vaarg.in_reg262 ], [ %overflow_arg_area266, %vaarg.in_mem264 ]
  %131 = load i64, ptr %vaarg.addr269, align 8
  %132 = load ptr, ptr %ap, align 8
  %a270 = getelementptr inbounds %struct.argument, ptr %132, i32 0, i32 1
  store i64 %131, ptr %a270, align 16
  br label %sw.epilog

sw.bb271:                                         ; preds = %for.body
  %133 = load ptr, ptr %args.addr, align 8
  %gp_offset_p272 = getelementptr inbounds %struct.__va_list_tag, ptr %133, i32 0, i32 0
  %gp_offset273 = load i32, ptr %gp_offset_p272, align 8
  %fits_in_gp274 = icmp ule i32 %gp_offset273, 40
  br i1 %fits_in_gp274, label %vaarg.in_reg275, label %vaarg.in_mem277

vaarg.in_reg275:                                  ; preds = %sw.bb271
  %134 = getelementptr inbounds %struct.__va_list_tag, ptr %133, i32 0, i32 3
  %reg_save_area276 = load ptr, ptr %134, align 8
  %135 = getelementptr i8, ptr %reg_save_area276, i32 %gp_offset273
  %136 = add i32 %gp_offset273, 8
  store i32 %136, ptr %gp_offset_p272, align 8
  br label %vaarg.end281

vaarg.in_mem277:                                  ; preds = %sw.bb271
  %overflow_arg_area_p278 = getelementptr inbounds %struct.__va_list_tag, ptr %133, i32 0, i32 2
  %overflow_arg_area279 = load ptr, ptr %overflow_arg_area_p278, align 8
  %overflow_arg_area.next280 = getelementptr i8, ptr %overflow_arg_area279, i32 8
  store ptr %overflow_arg_area.next280, ptr %overflow_arg_area_p278, align 8
  br label %vaarg.end281

vaarg.end281:                                     ; preds = %vaarg.in_mem277, %vaarg.in_reg275
  %vaarg.addr282 = phi ptr [ %135, %vaarg.in_reg275 ], [ %overflow_arg_area279, %vaarg.in_mem277 ]
  %137 = load i64, ptr %vaarg.addr282, align 8
  %138 = load ptr, ptr %ap, align 8
  %a283 = getelementptr inbounds %struct.argument, ptr %138, i32 0, i32 1
  store i64 %137, ptr %a283, align 16
  br label %sw.epilog

sw.bb284:                                         ; preds = %for.body
  %139 = load ptr, ptr %args.addr, align 8
  %gp_offset_p285 = getelementptr inbounds %struct.__va_list_tag, ptr %139, i32 0, i32 0
  %gp_offset286 = load i32, ptr %gp_offset_p285, align 8
  %fits_in_gp287 = icmp ule i32 %gp_offset286, 40
  br i1 %fits_in_gp287, label %vaarg.in_reg288, label %vaarg.in_mem290

vaarg.in_reg288:                                  ; preds = %sw.bb284
  %140 = getelementptr inbounds %struct.__va_list_tag, ptr %139, i32 0, i32 3
  %reg_save_area289 = load ptr, ptr %140, align 8
  %141 = getelementptr i8, ptr %reg_save_area289, i32 %gp_offset286
  %142 = add i32 %gp_offset286, 8
  store i32 %142, ptr %gp_offset_p285, align 8
  br label %vaarg.end294

vaarg.in_mem290:                                  ; preds = %sw.bb284
  %overflow_arg_area_p291 = getelementptr inbounds %struct.__va_list_tag, ptr %139, i32 0, i32 2
  %overflow_arg_area292 = load ptr, ptr %overflow_arg_area_p291, align 8
  %overflow_arg_area.next293 = getelementptr i8, ptr %overflow_arg_area292, i32 8
  store ptr %overflow_arg_area.next293, ptr %overflow_arg_area_p291, align 8
  br label %vaarg.end294

vaarg.end294:                                     ; preds = %vaarg.in_mem290, %vaarg.in_reg288
  %vaarg.addr295 = phi ptr [ %141, %vaarg.in_reg288 ], [ %overflow_arg_area292, %vaarg.in_mem290 ]
  %143 = load i64, ptr %vaarg.addr295, align 8
  %144 = load ptr, ptr %ap, align 8
  %a296 = getelementptr inbounds %struct.argument, ptr %144, i32 0, i32 1
  store i64 %143, ptr %a296, align 16
  br label %sw.epilog

sw.bb297:                                         ; preds = %for.body
  %145 = load ptr, ptr %args.addr, align 8
  %gp_offset_p298 = getelementptr inbounds %struct.__va_list_tag, ptr %145, i32 0, i32 0
  %gp_offset299 = load i32, ptr %gp_offset_p298, align 8
  %fits_in_gp300 = icmp ule i32 %gp_offset299, 40
  br i1 %fits_in_gp300, label %vaarg.in_reg301, label %vaarg.in_mem303

vaarg.in_reg301:                                  ; preds = %sw.bb297
  %146 = getelementptr inbounds %struct.__va_list_tag, ptr %145, i32 0, i32 3
  %reg_save_area302 = load ptr, ptr %146, align 8
  %147 = getelementptr i8, ptr %reg_save_area302, i32 %gp_offset299
  %148 = add i32 %gp_offset299, 8
  store i32 %148, ptr %gp_offset_p298, align 8
  br label %vaarg.end307

vaarg.in_mem303:                                  ; preds = %sw.bb297
  %overflow_arg_area_p304 = getelementptr inbounds %struct.__va_list_tag, ptr %145, i32 0, i32 2
  %overflow_arg_area305 = load ptr, ptr %overflow_arg_area_p304, align 8
  %overflow_arg_area.next306 = getelementptr i8, ptr %overflow_arg_area305, i32 8
  store ptr %overflow_arg_area.next306, ptr %overflow_arg_area_p304, align 8
  br label %vaarg.end307

vaarg.end307:                                     ; preds = %vaarg.in_mem303, %vaarg.in_reg301
  %vaarg.addr308 = phi ptr [ %147, %vaarg.in_reg301 ], [ %overflow_arg_area305, %vaarg.in_mem303 ]
  %149 = load i64, ptr %vaarg.addr308, align 8
  %150 = load ptr, ptr %ap, align 8
  %a309 = getelementptr inbounds %struct.argument, ptr %150, i32 0, i32 1
  store i64 %149, ptr %a309, align 16
  br label %sw.epilog

sw.bb310:                                         ; preds = %for.body
  %151 = load ptr, ptr %args.addr, align 8
  %gp_offset_p311 = getelementptr inbounds %struct.__va_list_tag, ptr %151, i32 0, i32 0
  %gp_offset312 = load i32, ptr %gp_offset_p311, align 8
  %fits_in_gp313 = icmp ule i32 %gp_offset312, 40
  br i1 %fits_in_gp313, label %vaarg.in_reg314, label %vaarg.in_mem316

vaarg.in_reg314:                                  ; preds = %sw.bb310
  %152 = getelementptr inbounds %struct.__va_list_tag, ptr %151, i32 0, i32 3
  %reg_save_area315 = load ptr, ptr %152, align 8
  %153 = getelementptr i8, ptr %reg_save_area315, i32 %gp_offset312
  %154 = add i32 %gp_offset312, 8
  store i32 %154, ptr %gp_offset_p311, align 8
  br label %vaarg.end320

vaarg.in_mem316:                                  ; preds = %sw.bb310
  %overflow_arg_area_p317 = getelementptr inbounds %struct.__va_list_tag, ptr %151, i32 0, i32 2
  %overflow_arg_area318 = load ptr, ptr %overflow_arg_area_p317, align 8
  %overflow_arg_area.next319 = getelementptr i8, ptr %overflow_arg_area318, i32 8
  store ptr %overflow_arg_area.next319, ptr %overflow_arg_area_p317, align 8
  br label %vaarg.end320

vaarg.end320:                                     ; preds = %vaarg.in_mem316, %vaarg.in_reg314
  %vaarg.addr321 = phi ptr [ %153, %vaarg.in_reg314 ], [ %overflow_arg_area318, %vaarg.in_mem316 ]
  %155 = load i64, ptr %vaarg.addr321, align 8
  %156 = load ptr, ptr %ap, align 8
  %a322 = getelementptr inbounds %struct.argument, ptr %156, i32 0, i32 1
  store i64 %155, ptr %a322, align 16
  br label %sw.epilog

sw.bb323:                                         ; preds = %for.body
  %157 = load ptr, ptr %args.addr, align 8
  %gp_offset_p324 = getelementptr inbounds %struct.__va_list_tag, ptr %157, i32 0, i32 0
  %gp_offset325 = load i32, ptr %gp_offset_p324, align 8
  %fits_in_gp326 = icmp ule i32 %gp_offset325, 40
  br i1 %fits_in_gp326, label %vaarg.in_reg327, label %vaarg.in_mem329

vaarg.in_reg327:                                  ; preds = %sw.bb323
  %158 = getelementptr inbounds %struct.__va_list_tag, ptr %157, i32 0, i32 3
  %reg_save_area328 = load ptr, ptr %158, align 8
  %159 = getelementptr i8, ptr %reg_save_area328, i32 %gp_offset325
  %160 = add i32 %gp_offset325, 8
  store i32 %160, ptr %gp_offset_p324, align 8
  br label %vaarg.end333

vaarg.in_mem329:                                  ; preds = %sw.bb323
  %overflow_arg_area_p330 = getelementptr inbounds %struct.__va_list_tag, ptr %157, i32 0, i32 2
  %overflow_arg_area331 = load ptr, ptr %overflow_arg_area_p330, align 8
  %overflow_arg_area.next332 = getelementptr i8, ptr %overflow_arg_area331, i32 8
  store ptr %overflow_arg_area.next332, ptr %overflow_arg_area_p330, align 8
  br label %vaarg.end333

vaarg.end333:                                     ; preds = %vaarg.in_mem329, %vaarg.in_reg327
  %vaarg.addr334 = phi ptr [ %159, %vaarg.in_reg327 ], [ %overflow_arg_area331, %vaarg.in_mem329 ]
  %161 = load i64, ptr %vaarg.addr334, align 8
  %162 = load ptr, ptr %ap, align 8
  %a335 = getelementptr inbounds %struct.argument, ptr %162, i32 0, i32 1
  store i64 %161, ptr %a335, align 16
  br label %sw.epilog

sw.bb336:                                         ; preds = %for.body
  %163 = load ptr, ptr %args.addr, align 8
  %fp_offset_p = getelementptr inbounds %struct.__va_list_tag, ptr %163, i32 0, i32 1
  %fp_offset = load i32, ptr %fp_offset_p, align 4
  %fits_in_fp = icmp ule i32 %fp_offset, 160
  br i1 %fits_in_fp, label %vaarg.in_reg337, label %vaarg.in_mem339

vaarg.in_reg337:                                  ; preds = %sw.bb336
  %164 = getelementptr inbounds %struct.__va_list_tag, ptr %163, i32 0, i32 3
  %reg_save_area338 = load ptr, ptr %164, align 8
  %165 = getelementptr i8, ptr %reg_save_area338, i32 %fp_offset
  %166 = add i32 %fp_offset, 16
  store i32 %166, ptr %fp_offset_p, align 4
  br label %vaarg.end343

vaarg.in_mem339:                                  ; preds = %sw.bb336
  %overflow_arg_area_p340 = getelementptr inbounds %struct.__va_list_tag, ptr %163, i32 0, i32 2
  %overflow_arg_area341 = load ptr, ptr %overflow_arg_area_p340, align 8
  %overflow_arg_area.next342 = getelementptr i8, ptr %overflow_arg_area341, i32 8
  store ptr %overflow_arg_area.next342, ptr %overflow_arg_area_p340, align 8
  br label %vaarg.end343

vaarg.end343:                                     ; preds = %vaarg.in_mem339, %vaarg.in_reg337
  %vaarg.addr344 = phi ptr [ %165, %vaarg.in_reg337 ], [ %overflow_arg_area341, %vaarg.in_mem339 ]
  %167 = load double, ptr %vaarg.addr344, align 8
  %168 = load ptr, ptr %ap, align 8
  %a345 = getelementptr inbounds %struct.argument, ptr %168, i32 0, i32 1
  store double %167, ptr %a345, align 16
  br label %sw.epilog

sw.bb346:                                         ; preds = %for.body
  %169 = load ptr, ptr %args.addr, align 8
  %overflow_arg_area_p347 = getelementptr inbounds %struct.__va_list_tag, ptr %169, i32 0, i32 2
  %overflow_arg_area348 = load ptr, ptr %overflow_arg_area_p347, align 8
  %170 = getelementptr inbounds i8, ptr %overflow_arg_area348, i32 15
  %overflow_arg_area348.aligned = call ptr @llvm.ptrmask.p0.i64(ptr %170, i64 -16)
  %overflow_arg_area.next349 = getelementptr i8, ptr %overflow_arg_area348.aligned, i32 16
  store ptr %overflow_arg_area.next349, ptr %overflow_arg_area_p347, align 8
  %171 = load x86_fp80, ptr %overflow_arg_area348.aligned, align 16
  %172 = load ptr, ptr %ap, align 8
  %a350 = getelementptr inbounds %struct.argument, ptr %172, i32 0, i32 1
  store x86_fp80 %171, ptr %a350, align 16
  br label %sw.epilog

sw.bb351:                                         ; preds = %for.body
  %173 = load ptr, ptr %args.addr, align 8
  %gp_offset_p352 = getelementptr inbounds %struct.__va_list_tag, ptr %173, i32 0, i32 0
  %gp_offset353 = load i32, ptr %gp_offset_p352, align 8
  %fits_in_gp354 = icmp ule i32 %gp_offset353, 40
  br i1 %fits_in_gp354, label %vaarg.in_reg355, label %vaarg.in_mem357

vaarg.in_reg355:                                  ; preds = %sw.bb351
  %174 = getelementptr inbounds %struct.__va_list_tag, ptr %173, i32 0, i32 3
  %reg_save_area356 = load ptr, ptr %174, align 8
  %175 = getelementptr i8, ptr %reg_save_area356, i32 %gp_offset353
  %176 = add i32 %gp_offset353, 8
  store i32 %176, ptr %gp_offset_p352, align 8
  br label %vaarg.end361

vaarg.in_mem357:                                  ; preds = %sw.bb351
  %overflow_arg_area_p358 = getelementptr inbounds %struct.__va_list_tag, ptr %173, i32 0, i32 2
  %overflow_arg_area359 = load ptr, ptr %overflow_arg_area_p358, align 8
  %overflow_arg_area.next360 = getelementptr i8, ptr %overflow_arg_area359, i32 8
  store ptr %overflow_arg_area.next360, ptr %overflow_arg_area_p358, align 8
  br label %vaarg.end361

vaarg.end361:                                     ; preds = %vaarg.in_mem357, %vaarg.in_reg355
  %vaarg.addr362 = phi ptr [ %175, %vaarg.in_reg355 ], [ %overflow_arg_area359, %vaarg.in_mem357 ]
  %177 = load i32, ptr %vaarg.addr362, align 4
  %178 = load ptr, ptr %ap, align 8
  %a363 = getelementptr inbounds %struct.argument, ptr %178, i32 0, i32 1
  store i32 %177, ptr %a363, align 16
  br label %sw.epilog

sw.bb364:                                         ; preds = %for.body
  %179 = load ptr, ptr %args.addr, align 8
  %gp_offset_p365 = getelementptr inbounds %struct.__va_list_tag, ptr %179, i32 0, i32 0
  %gp_offset366 = load i32, ptr %gp_offset_p365, align 8
  %fits_in_gp367 = icmp ule i32 %gp_offset366, 40
  br i1 %fits_in_gp367, label %vaarg.in_reg368, label %vaarg.in_mem370

vaarg.in_reg368:                                  ; preds = %sw.bb364
  %180 = getelementptr inbounds %struct.__va_list_tag, ptr %179, i32 0, i32 3
  %reg_save_area369 = load ptr, ptr %180, align 8
  %181 = getelementptr i8, ptr %reg_save_area369, i32 %gp_offset366
  %182 = add i32 %gp_offset366, 8
  store i32 %182, ptr %gp_offset_p365, align 8
  br label %vaarg.end374

vaarg.in_mem370:                                  ; preds = %sw.bb364
  %overflow_arg_area_p371 = getelementptr inbounds %struct.__va_list_tag, ptr %179, i32 0, i32 2
  %overflow_arg_area372 = load ptr, ptr %overflow_arg_area_p371, align 8
  %overflow_arg_area.next373 = getelementptr i8, ptr %overflow_arg_area372, i32 8
  store ptr %overflow_arg_area.next373, ptr %overflow_arg_area_p371, align 8
  br label %vaarg.end374

vaarg.end374:                                     ; preds = %vaarg.in_mem370, %vaarg.in_reg368
  %vaarg.addr375 = phi ptr [ %181, %vaarg.in_reg368 ], [ %overflow_arg_area372, %vaarg.in_mem370 ]
  %183 = load i32, ptr %vaarg.addr375, align 4
  %184 = load ptr, ptr %ap, align 8
  %a376 = getelementptr inbounds %struct.argument, ptr %184, i32 0, i32 1
  store i32 %183, ptr %a376, align 16
  br label %sw.epilog

sw.bb377:                                         ; preds = %for.body
  %185 = load ptr, ptr %args.addr, align 8
  %gp_offset_p378 = getelementptr inbounds %struct.__va_list_tag, ptr %185, i32 0, i32 0
  %gp_offset379 = load i32, ptr %gp_offset_p378, align 8
  %fits_in_gp380 = icmp ule i32 %gp_offset379, 40
  br i1 %fits_in_gp380, label %vaarg.in_reg381, label %vaarg.in_mem383

vaarg.in_reg381:                                  ; preds = %sw.bb377
  %186 = getelementptr inbounds %struct.__va_list_tag, ptr %185, i32 0, i32 3
  %reg_save_area382 = load ptr, ptr %186, align 8
  %187 = getelementptr i8, ptr %reg_save_area382, i32 %gp_offset379
  %188 = add i32 %gp_offset379, 8
  store i32 %188, ptr %gp_offset_p378, align 8
  br label %vaarg.end387

vaarg.in_mem383:                                  ; preds = %sw.bb377
  %overflow_arg_area_p384 = getelementptr inbounds %struct.__va_list_tag, ptr %185, i32 0, i32 2
  %overflow_arg_area385 = load ptr, ptr %overflow_arg_area_p384, align 8
  %overflow_arg_area.next386 = getelementptr i8, ptr %overflow_arg_area385, i32 8
  store ptr %overflow_arg_area.next386, ptr %overflow_arg_area_p384, align 8
  br label %vaarg.end387

vaarg.end387:                                     ; preds = %vaarg.in_mem383, %vaarg.in_reg381
  %vaarg.addr388 = phi ptr [ %187, %vaarg.in_reg381 ], [ %overflow_arg_area385, %vaarg.in_mem383 ]
  %189 = load ptr, ptr %vaarg.addr388, align 8
  %190 = load ptr, ptr %ap, align 8
  %a389 = getelementptr inbounds %struct.argument, ptr %190, i32 0, i32 1
  store ptr %189, ptr %a389, align 16
  %191 = load ptr, ptr %ap, align 8
  %a390 = getelementptr inbounds %struct.argument, ptr %191, i32 0, i32 1
  %192 = load ptr, ptr %a390, align 16
  %cmp391 = icmp eq ptr %192, null
  br i1 %cmp391, label %if.then, label %if.end

if.then:                                          ; preds = %vaarg.end387
  %193 = load ptr, ptr %ap, align 8
  %a393 = getelementptr inbounds %struct.argument, ptr %193, i32 0, i32 1
  store ptr @.str.395, ptr %a393, align 16
  br label %if.end

if.end:                                           ; preds = %if.then, %vaarg.end387
  br label %sw.epilog

sw.bb394:                                         ; preds = %for.body
  %194 = load ptr, ptr %args.addr, align 8
  %gp_offset_p395 = getelementptr inbounds %struct.__va_list_tag, ptr %194, i32 0, i32 0
  %gp_offset396 = load i32, ptr %gp_offset_p395, align 8
  %fits_in_gp397 = icmp ule i32 %gp_offset396, 40
  br i1 %fits_in_gp397, label %vaarg.in_reg398, label %vaarg.in_mem400

vaarg.in_reg398:                                  ; preds = %sw.bb394
  %195 = getelementptr inbounds %struct.__va_list_tag, ptr %194, i32 0, i32 3
  %reg_save_area399 = load ptr, ptr %195, align 8
  %196 = getelementptr i8, ptr %reg_save_area399, i32 %gp_offset396
  %197 = add i32 %gp_offset396, 8
  store i32 %197, ptr %gp_offset_p395, align 8
  br label %vaarg.end404

vaarg.in_mem400:                                  ; preds = %sw.bb394
  %overflow_arg_area_p401 = getelementptr inbounds %struct.__va_list_tag, ptr %194, i32 0, i32 2
  %overflow_arg_area402 = load ptr, ptr %overflow_arg_area_p401, align 8
  %overflow_arg_area.next403 = getelementptr i8, ptr %overflow_arg_area402, i32 8
  store ptr %overflow_arg_area.next403, ptr %overflow_arg_area_p401, align 8
  br label %vaarg.end404

vaarg.end404:                                     ; preds = %vaarg.in_mem400, %vaarg.in_reg398
  %vaarg.addr405 = phi ptr [ %196, %vaarg.in_reg398 ], [ %overflow_arg_area402, %vaarg.in_mem400 ]
  %198 = load ptr, ptr %vaarg.addr405, align 8
  %199 = load ptr, ptr %ap, align 8
  %a406 = getelementptr inbounds %struct.argument, ptr %199, i32 0, i32 1
  store ptr %198, ptr %a406, align 16
  %200 = load ptr, ptr %ap, align 8
  %a407 = getelementptr inbounds %struct.argument, ptr %200, i32 0, i32 1
  %201 = load ptr, ptr %a407, align 16
  %cmp408 = icmp eq ptr %201, null
  br i1 %cmp408, label %if.then410, label %if.end412

if.then410:                                       ; preds = %vaarg.end404
  %202 = load ptr, ptr %ap, align 8
  %a411 = getelementptr inbounds %struct.argument, ptr %202, i32 0, i32 1
  store ptr @printf_fetchargs.wide_null_string, ptr %a411, align 16
  br label %if.end412

if.end412:                                        ; preds = %if.then410, %vaarg.end404
  br label %sw.epilog

sw.bb413:                                         ; preds = %for.body
  %203 = load ptr, ptr %args.addr, align 8
  %gp_offset_p414 = getelementptr inbounds %struct.__va_list_tag, ptr %203, i32 0, i32 0
  %gp_offset415 = load i32, ptr %gp_offset_p414, align 8
  %fits_in_gp416 = icmp ule i32 %gp_offset415, 40
  br i1 %fits_in_gp416, label %vaarg.in_reg417, label %vaarg.in_mem419

vaarg.in_reg417:                                  ; preds = %sw.bb413
  %204 = getelementptr inbounds %struct.__va_list_tag, ptr %203, i32 0, i32 3
  %reg_save_area418 = load ptr, ptr %204, align 8
  %205 = getelementptr i8, ptr %reg_save_area418, i32 %gp_offset415
  %206 = add i32 %gp_offset415, 8
  store i32 %206, ptr %gp_offset_p414, align 8
  br label %vaarg.end423

vaarg.in_mem419:                                  ; preds = %sw.bb413
  %overflow_arg_area_p420 = getelementptr inbounds %struct.__va_list_tag, ptr %203, i32 0, i32 2
  %overflow_arg_area421 = load ptr, ptr %overflow_arg_area_p420, align 8
  %overflow_arg_area.next422 = getelementptr i8, ptr %overflow_arg_area421, i32 8
  store ptr %overflow_arg_area.next422, ptr %overflow_arg_area_p420, align 8
  br label %vaarg.end423

vaarg.end423:                                     ; preds = %vaarg.in_mem419, %vaarg.in_reg417
  %vaarg.addr424 = phi ptr [ %205, %vaarg.in_reg417 ], [ %overflow_arg_area421, %vaarg.in_mem419 ]
  %207 = load ptr, ptr %vaarg.addr424, align 8
  %208 = load ptr, ptr %ap, align 8
  %a425 = getelementptr inbounds %struct.argument, ptr %208, i32 0, i32 1
  store ptr %207, ptr %a425, align 16
  br label %sw.epilog

sw.bb426:                                         ; preds = %for.body
  %209 = load ptr, ptr %args.addr, align 8
  %gp_offset_p427 = getelementptr inbounds %struct.__va_list_tag, ptr %209, i32 0, i32 0
  %gp_offset428 = load i32, ptr %gp_offset_p427, align 8
  %fits_in_gp429 = icmp ule i32 %gp_offset428, 40
  br i1 %fits_in_gp429, label %vaarg.in_reg430, label %vaarg.in_mem432

vaarg.in_reg430:                                  ; preds = %sw.bb426
  %210 = getelementptr inbounds %struct.__va_list_tag, ptr %209, i32 0, i32 3
  %reg_save_area431 = load ptr, ptr %210, align 8
  %211 = getelementptr i8, ptr %reg_save_area431, i32 %gp_offset428
  %212 = add i32 %gp_offset428, 8
  store i32 %212, ptr %gp_offset_p427, align 8
  br label %vaarg.end436

vaarg.in_mem432:                                  ; preds = %sw.bb426
  %overflow_arg_area_p433 = getelementptr inbounds %struct.__va_list_tag, ptr %209, i32 0, i32 2
  %overflow_arg_area434 = load ptr, ptr %overflow_arg_area_p433, align 8
  %overflow_arg_area.next435 = getelementptr i8, ptr %overflow_arg_area434, i32 8
  store ptr %overflow_arg_area.next435, ptr %overflow_arg_area_p433, align 8
  br label %vaarg.end436

vaarg.end436:                                     ; preds = %vaarg.in_mem432, %vaarg.in_reg430
  %vaarg.addr437 = phi ptr [ %211, %vaarg.in_reg430 ], [ %overflow_arg_area434, %vaarg.in_mem432 ]
  %213 = load ptr, ptr %vaarg.addr437, align 8
  %214 = load ptr, ptr %ap, align 8
  %a438 = getelementptr inbounds %struct.argument, ptr %214, i32 0, i32 1
  store ptr %213, ptr %a438, align 16
  br label %sw.epilog

sw.bb439:                                         ; preds = %for.body
  %215 = load ptr, ptr %args.addr, align 8
  %gp_offset_p440 = getelementptr inbounds %struct.__va_list_tag, ptr %215, i32 0, i32 0
  %gp_offset441 = load i32, ptr %gp_offset_p440, align 8
  %fits_in_gp442 = icmp ule i32 %gp_offset441, 40
  br i1 %fits_in_gp442, label %vaarg.in_reg443, label %vaarg.in_mem445

vaarg.in_reg443:                                  ; preds = %sw.bb439
  %216 = getelementptr inbounds %struct.__va_list_tag, ptr %215, i32 0, i32 3
  %reg_save_area444 = load ptr, ptr %216, align 8
  %217 = getelementptr i8, ptr %reg_save_area444, i32 %gp_offset441
  %218 = add i32 %gp_offset441, 8
  store i32 %218, ptr %gp_offset_p440, align 8
  br label %vaarg.end449

vaarg.in_mem445:                                  ; preds = %sw.bb439
  %overflow_arg_area_p446 = getelementptr inbounds %struct.__va_list_tag, ptr %215, i32 0, i32 2
  %overflow_arg_area447 = load ptr, ptr %overflow_arg_area_p446, align 8
  %overflow_arg_area.next448 = getelementptr i8, ptr %overflow_arg_area447, i32 8
  store ptr %overflow_arg_area.next448, ptr %overflow_arg_area_p446, align 8
  br label %vaarg.end449

vaarg.end449:                                     ; preds = %vaarg.in_mem445, %vaarg.in_reg443
  %vaarg.addr450 = phi ptr [ %217, %vaarg.in_reg443 ], [ %overflow_arg_area447, %vaarg.in_mem445 ]
  %219 = load ptr, ptr %vaarg.addr450, align 8
  %220 = load ptr, ptr %ap, align 8
  %a451 = getelementptr inbounds %struct.argument, ptr %220, i32 0, i32 1
  store ptr %219, ptr %a451, align 16
  br label %sw.epilog

sw.bb452:                                         ; preds = %for.body
  %221 = load ptr, ptr %args.addr, align 8
  %gp_offset_p453 = getelementptr inbounds %struct.__va_list_tag, ptr %221, i32 0, i32 0
  %gp_offset454 = load i32, ptr %gp_offset_p453, align 8
  %fits_in_gp455 = icmp ule i32 %gp_offset454, 40
  br i1 %fits_in_gp455, label %vaarg.in_reg456, label %vaarg.in_mem458

vaarg.in_reg456:                                  ; preds = %sw.bb452
  %222 = getelementptr inbounds %struct.__va_list_tag, ptr %221, i32 0, i32 3
  %reg_save_area457 = load ptr, ptr %222, align 8
  %223 = getelementptr i8, ptr %reg_save_area457, i32 %gp_offset454
  %224 = add i32 %gp_offset454, 8
  store i32 %224, ptr %gp_offset_p453, align 8
  br label %vaarg.end462

vaarg.in_mem458:                                  ; preds = %sw.bb452
  %overflow_arg_area_p459 = getelementptr inbounds %struct.__va_list_tag, ptr %221, i32 0, i32 2
  %overflow_arg_area460 = load ptr, ptr %overflow_arg_area_p459, align 8
  %overflow_arg_area.next461 = getelementptr i8, ptr %overflow_arg_area460, i32 8
  store ptr %overflow_arg_area.next461, ptr %overflow_arg_area_p459, align 8
  br label %vaarg.end462

vaarg.end462:                                     ; preds = %vaarg.in_mem458, %vaarg.in_reg456
  %vaarg.addr463 = phi ptr [ %223, %vaarg.in_reg456 ], [ %overflow_arg_area460, %vaarg.in_mem458 ]
  %225 = load ptr, ptr %vaarg.addr463, align 8
  %226 = load ptr, ptr %ap, align 8
  %a464 = getelementptr inbounds %struct.argument, ptr %226, i32 0, i32 1
  store ptr %225, ptr %a464, align 16
  br label %sw.epilog

sw.bb465:                                         ; preds = %for.body
  %227 = load ptr, ptr %args.addr, align 8
  %gp_offset_p466 = getelementptr inbounds %struct.__va_list_tag, ptr %227, i32 0, i32 0
  %gp_offset467 = load i32, ptr %gp_offset_p466, align 8
  %fits_in_gp468 = icmp ule i32 %gp_offset467, 40
  br i1 %fits_in_gp468, label %vaarg.in_reg469, label %vaarg.in_mem471

vaarg.in_reg469:                                  ; preds = %sw.bb465
  %228 = getelementptr inbounds %struct.__va_list_tag, ptr %227, i32 0, i32 3
  %reg_save_area470 = load ptr, ptr %228, align 8
  %229 = getelementptr i8, ptr %reg_save_area470, i32 %gp_offset467
  %230 = add i32 %gp_offset467, 8
  store i32 %230, ptr %gp_offset_p466, align 8
  br label %vaarg.end475

vaarg.in_mem471:                                  ; preds = %sw.bb465
  %overflow_arg_area_p472 = getelementptr inbounds %struct.__va_list_tag, ptr %227, i32 0, i32 2
  %overflow_arg_area473 = load ptr, ptr %overflow_arg_area_p472, align 8
  %overflow_arg_area.next474 = getelementptr i8, ptr %overflow_arg_area473, i32 8
  store ptr %overflow_arg_area.next474, ptr %overflow_arg_area_p472, align 8
  br label %vaarg.end475

vaarg.end475:                                     ; preds = %vaarg.in_mem471, %vaarg.in_reg469
  %vaarg.addr476 = phi ptr [ %229, %vaarg.in_reg469 ], [ %overflow_arg_area473, %vaarg.in_mem471 ]
  %231 = load ptr, ptr %vaarg.addr476, align 8
  %232 = load ptr, ptr %ap, align 8
  %a477 = getelementptr inbounds %struct.argument, ptr %232, i32 0, i32 1
  store ptr %231, ptr %a477, align 16
  br label %sw.epilog

sw.bb478:                                         ; preds = %for.body
  %233 = load ptr, ptr %args.addr, align 8
  %gp_offset_p479 = getelementptr inbounds %struct.__va_list_tag, ptr %233, i32 0, i32 0
  %gp_offset480 = load i32, ptr %gp_offset_p479, align 8
  %fits_in_gp481 = icmp ule i32 %gp_offset480, 40
  br i1 %fits_in_gp481, label %vaarg.in_reg482, label %vaarg.in_mem484

vaarg.in_reg482:                                  ; preds = %sw.bb478
  %234 = getelementptr inbounds %struct.__va_list_tag, ptr %233, i32 0, i32 3
  %reg_save_area483 = load ptr, ptr %234, align 8
  %235 = getelementptr i8, ptr %reg_save_area483, i32 %gp_offset480
  %236 = add i32 %gp_offset480, 8
  store i32 %236, ptr %gp_offset_p479, align 8
  br label %vaarg.end488

vaarg.in_mem484:                                  ; preds = %sw.bb478
  %overflow_arg_area_p485 = getelementptr inbounds %struct.__va_list_tag, ptr %233, i32 0, i32 2
  %overflow_arg_area486 = load ptr, ptr %overflow_arg_area_p485, align 8
  %overflow_arg_area.next487 = getelementptr i8, ptr %overflow_arg_area486, i32 8
  store ptr %overflow_arg_area.next487, ptr %overflow_arg_area_p485, align 8
  br label %vaarg.end488

vaarg.end488:                                     ; preds = %vaarg.in_mem484, %vaarg.in_reg482
  %vaarg.addr489 = phi ptr [ %235, %vaarg.in_reg482 ], [ %overflow_arg_area486, %vaarg.in_mem484 ]
  %237 = load ptr, ptr %vaarg.addr489, align 8
  %238 = load ptr, ptr %ap, align 8
  %a490 = getelementptr inbounds %struct.argument, ptr %238, i32 0, i32 1
  store ptr %237, ptr %a490, align 16
  br label %sw.epilog

sw.bb491:                                         ; preds = %for.body
  %239 = load ptr, ptr %args.addr, align 8
  %gp_offset_p492 = getelementptr inbounds %struct.__va_list_tag, ptr %239, i32 0, i32 0
  %gp_offset493 = load i32, ptr %gp_offset_p492, align 8
  %fits_in_gp494 = icmp ule i32 %gp_offset493, 40
  br i1 %fits_in_gp494, label %vaarg.in_reg495, label %vaarg.in_mem497

vaarg.in_reg495:                                  ; preds = %sw.bb491
  %240 = getelementptr inbounds %struct.__va_list_tag, ptr %239, i32 0, i32 3
  %reg_save_area496 = load ptr, ptr %240, align 8
  %241 = getelementptr i8, ptr %reg_save_area496, i32 %gp_offset493
  %242 = add i32 %gp_offset493, 8
  store i32 %242, ptr %gp_offset_p492, align 8
  br label %vaarg.end501

vaarg.in_mem497:                                  ; preds = %sw.bb491
  %overflow_arg_area_p498 = getelementptr inbounds %struct.__va_list_tag, ptr %239, i32 0, i32 2
  %overflow_arg_area499 = load ptr, ptr %overflow_arg_area_p498, align 8
  %overflow_arg_area.next500 = getelementptr i8, ptr %overflow_arg_area499, i32 8
  store ptr %overflow_arg_area.next500, ptr %overflow_arg_area_p498, align 8
  br label %vaarg.end501

vaarg.end501:                                     ; preds = %vaarg.in_mem497, %vaarg.in_reg495
  %vaarg.addr502 = phi ptr [ %241, %vaarg.in_reg495 ], [ %overflow_arg_area499, %vaarg.in_mem497 ]
  %243 = load ptr, ptr %vaarg.addr502, align 8
  %244 = load ptr, ptr %ap, align 8
  %a503 = getelementptr inbounds %struct.argument, ptr %244, i32 0, i32 1
  store ptr %243, ptr %a503, align 16
  br label %sw.epilog

sw.bb504:                                         ; preds = %for.body
  %245 = load ptr, ptr %args.addr, align 8
  %gp_offset_p505 = getelementptr inbounds %struct.__va_list_tag, ptr %245, i32 0, i32 0
  %gp_offset506 = load i32, ptr %gp_offset_p505, align 8
  %fits_in_gp507 = icmp ule i32 %gp_offset506, 40
  br i1 %fits_in_gp507, label %vaarg.in_reg508, label %vaarg.in_mem510

vaarg.in_reg508:                                  ; preds = %sw.bb504
  %246 = getelementptr inbounds %struct.__va_list_tag, ptr %245, i32 0, i32 3
  %reg_save_area509 = load ptr, ptr %246, align 8
  %247 = getelementptr i8, ptr %reg_save_area509, i32 %gp_offset506
  %248 = add i32 %gp_offset506, 8
  store i32 %248, ptr %gp_offset_p505, align 8
  br label %vaarg.end514

vaarg.in_mem510:                                  ; preds = %sw.bb504
  %overflow_arg_area_p511 = getelementptr inbounds %struct.__va_list_tag, ptr %245, i32 0, i32 2
  %overflow_arg_area512 = load ptr, ptr %overflow_arg_area_p511, align 8
  %overflow_arg_area.next513 = getelementptr i8, ptr %overflow_arg_area512, i32 8
  store ptr %overflow_arg_area.next513, ptr %overflow_arg_area_p511, align 8
  br label %vaarg.end514

vaarg.end514:                                     ; preds = %vaarg.in_mem510, %vaarg.in_reg508
  %vaarg.addr515 = phi ptr [ %247, %vaarg.in_reg508 ], [ %overflow_arg_area512, %vaarg.in_mem510 ]
  %249 = load ptr, ptr %vaarg.addr515, align 8
  %250 = load ptr, ptr %ap, align 8
  %a516 = getelementptr inbounds %struct.argument, ptr %250, i32 0, i32 1
  store ptr %249, ptr %a516, align 16
  br label %sw.epilog

sw.bb517:                                         ; preds = %for.body
  %251 = load ptr, ptr %args.addr, align 8
  %gp_offset_p518 = getelementptr inbounds %struct.__va_list_tag, ptr %251, i32 0, i32 0
  %gp_offset519 = load i32, ptr %gp_offset_p518, align 8
  %fits_in_gp520 = icmp ule i32 %gp_offset519, 40
  br i1 %fits_in_gp520, label %vaarg.in_reg521, label %vaarg.in_mem523

vaarg.in_reg521:                                  ; preds = %sw.bb517
  %252 = getelementptr inbounds %struct.__va_list_tag, ptr %251, i32 0, i32 3
  %reg_save_area522 = load ptr, ptr %252, align 8
  %253 = getelementptr i8, ptr %reg_save_area522, i32 %gp_offset519
  %254 = add i32 %gp_offset519, 8
  store i32 %254, ptr %gp_offset_p518, align 8
  br label %vaarg.end527

vaarg.in_mem523:                                  ; preds = %sw.bb517
  %overflow_arg_area_p524 = getelementptr inbounds %struct.__va_list_tag, ptr %251, i32 0, i32 2
  %overflow_arg_area525 = load ptr, ptr %overflow_arg_area_p524, align 8
  %overflow_arg_area.next526 = getelementptr i8, ptr %overflow_arg_area525, i32 8
  store ptr %overflow_arg_area.next526, ptr %overflow_arg_area_p524, align 8
  br label %vaarg.end527

vaarg.end527:                                     ; preds = %vaarg.in_mem523, %vaarg.in_reg521
  %vaarg.addr528 = phi ptr [ %253, %vaarg.in_reg521 ], [ %overflow_arg_area525, %vaarg.in_mem523 ]
  %255 = load ptr, ptr %vaarg.addr528, align 8
  %256 = load ptr, ptr %ap, align 8
  %a529 = getelementptr inbounds %struct.argument, ptr %256, i32 0, i32 1
  store ptr %255, ptr %a529, align 16
  br label %sw.epilog

sw.bb530:                                         ; preds = %for.body
  %257 = load ptr, ptr %args.addr, align 8
  %gp_offset_p531 = getelementptr inbounds %struct.__va_list_tag, ptr %257, i32 0, i32 0
  %gp_offset532 = load i32, ptr %gp_offset_p531, align 8
  %fits_in_gp533 = icmp ule i32 %gp_offset532, 40
  br i1 %fits_in_gp533, label %vaarg.in_reg534, label %vaarg.in_mem536

vaarg.in_reg534:                                  ; preds = %sw.bb530
  %258 = getelementptr inbounds %struct.__va_list_tag, ptr %257, i32 0, i32 3
  %reg_save_area535 = load ptr, ptr %258, align 8
  %259 = getelementptr i8, ptr %reg_save_area535, i32 %gp_offset532
  %260 = add i32 %gp_offset532, 8
  store i32 %260, ptr %gp_offset_p531, align 8
  br label %vaarg.end540

vaarg.in_mem536:                                  ; preds = %sw.bb530
  %overflow_arg_area_p537 = getelementptr inbounds %struct.__va_list_tag, ptr %257, i32 0, i32 2
  %overflow_arg_area538 = load ptr, ptr %overflow_arg_area_p537, align 8
  %overflow_arg_area.next539 = getelementptr i8, ptr %overflow_arg_area538, i32 8
  store ptr %overflow_arg_area.next539, ptr %overflow_arg_area_p537, align 8
  br label %vaarg.end540

vaarg.end540:                                     ; preds = %vaarg.in_mem536, %vaarg.in_reg534
  %vaarg.addr541 = phi ptr [ %259, %vaarg.in_reg534 ], [ %overflow_arg_area538, %vaarg.in_mem536 ]
  %261 = load ptr, ptr %vaarg.addr541, align 8
  %262 = load ptr, ptr %ap, align 8
  %a542 = getelementptr inbounds %struct.argument, ptr %262, i32 0, i32 1
  store ptr %261, ptr %a542, align 16
  br label %sw.epilog

sw.bb543:                                         ; preds = %for.body
  %263 = load ptr, ptr %args.addr, align 8
  %gp_offset_p544 = getelementptr inbounds %struct.__va_list_tag, ptr %263, i32 0, i32 0
  %gp_offset545 = load i32, ptr %gp_offset_p544, align 8
  %fits_in_gp546 = icmp ule i32 %gp_offset545, 40
  br i1 %fits_in_gp546, label %vaarg.in_reg547, label %vaarg.in_mem549

vaarg.in_reg547:                                  ; preds = %sw.bb543
  %264 = getelementptr inbounds %struct.__va_list_tag, ptr %263, i32 0, i32 3
  %reg_save_area548 = load ptr, ptr %264, align 8
  %265 = getelementptr i8, ptr %reg_save_area548, i32 %gp_offset545
  %266 = add i32 %gp_offset545, 8
  store i32 %266, ptr %gp_offset_p544, align 8
  br label %vaarg.end553

vaarg.in_mem549:                                  ; preds = %sw.bb543
  %overflow_arg_area_p550 = getelementptr inbounds %struct.__va_list_tag, ptr %263, i32 0, i32 2
  %overflow_arg_area551 = load ptr, ptr %overflow_arg_area_p550, align 8
  %overflow_arg_area.next552 = getelementptr i8, ptr %overflow_arg_area551, i32 8
  store ptr %overflow_arg_area.next552, ptr %overflow_arg_area_p550, align 8
  br label %vaarg.end553

vaarg.end553:                                     ; preds = %vaarg.in_mem549, %vaarg.in_reg547
  %vaarg.addr554 = phi ptr [ %265, %vaarg.in_reg547 ], [ %overflow_arg_area551, %vaarg.in_mem549 ]
  %267 = load ptr, ptr %vaarg.addr554, align 8
  %268 = load ptr, ptr %ap, align 8
  %a555 = getelementptr inbounds %struct.argument, ptr %268, i32 0, i32 1
  store ptr %267, ptr %a555, align 16
  br label %sw.epilog

sw.bb556:                                         ; preds = %for.body
  %269 = load ptr, ptr %args.addr, align 8
  %gp_offset_p557 = getelementptr inbounds %struct.__va_list_tag, ptr %269, i32 0, i32 0
  %gp_offset558 = load i32, ptr %gp_offset_p557, align 8
  %fits_in_gp559 = icmp ule i32 %gp_offset558, 40
  br i1 %fits_in_gp559, label %vaarg.in_reg560, label %vaarg.in_mem562

vaarg.in_reg560:                                  ; preds = %sw.bb556
  %270 = getelementptr inbounds %struct.__va_list_tag, ptr %269, i32 0, i32 3
  %reg_save_area561 = load ptr, ptr %270, align 8
  %271 = getelementptr i8, ptr %reg_save_area561, i32 %gp_offset558
  %272 = add i32 %gp_offset558, 8
  store i32 %272, ptr %gp_offset_p557, align 8
  br label %vaarg.end566

vaarg.in_mem562:                                  ; preds = %sw.bb556
  %overflow_arg_area_p563 = getelementptr inbounds %struct.__va_list_tag, ptr %269, i32 0, i32 2
  %overflow_arg_area564 = load ptr, ptr %overflow_arg_area_p563, align 8
  %overflow_arg_area.next565 = getelementptr i8, ptr %overflow_arg_area564, i32 8
  store ptr %overflow_arg_area.next565, ptr %overflow_arg_area_p563, align 8
  br label %vaarg.end566

vaarg.end566:                                     ; preds = %vaarg.in_mem562, %vaarg.in_reg560
  %vaarg.addr567 = phi ptr [ %271, %vaarg.in_reg560 ], [ %overflow_arg_area564, %vaarg.in_mem562 ]
  %273 = load ptr, ptr %vaarg.addr567, align 8
  %274 = load ptr, ptr %ap, align 8
  %a568 = getelementptr inbounds %struct.argument, ptr %274, i32 0, i32 1
  store ptr %273, ptr %a568, align 16
  br label %sw.epilog

sw.bb569:                                         ; preds = %for.body
  %275 = load ptr, ptr %args.addr, align 8
  %gp_offset_p570 = getelementptr inbounds %struct.__va_list_tag, ptr %275, i32 0, i32 0
  %gp_offset571 = load i32, ptr %gp_offset_p570, align 8
  %fits_in_gp572 = icmp ule i32 %gp_offset571, 40
  br i1 %fits_in_gp572, label %vaarg.in_reg573, label %vaarg.in_mem575

vaarg.in_reg573:                                  ; preds = %sw.bb569
  %276 = getelementptr inbounds %struct.__va_list_tag, ptr %275, i32 0, i32 3
  %reg_save_area574 = load ptr, ptr %276, align 8
  %277 = getelementptr i8, ptr %reg_save_area574, i32 %gp_offset571
  %278 = add i32 %gp_offset571, 8
  store i32 %278, ptr %gp_offset_p570, align 8
  br label %vaarg.end579

vaarg.in_mem575:                                  ; preds = %sw.bb569
  %overflow_arg_area_p576 = getelementptr inbounds %struct.__va_list_tag, ptr %275, i32 0, i32 2
  %overflow_arg_area577 = load ptr, ptr %overflow_arg_area_p576, align 8
  %overflow_arg_area.next578 = getelementptr i8, ptr %overflow_arg_area577, i32 8
  store ptr %overflow_arg_area.next578, ptr %overflow_arg_area_p576, align 8
  br label %vaarg.end579

vaarg.end579:                                     ; preds = %vaarg.in_mem575, %vaarg.in_reg573
  %vaarg.addr580 = phi ptr [ %277, %vaarg.in_reg573 ], [ %overflow_arg_area577, %vaarg.in_mem575 ]
  %279 = load ptr, ptr %vaarg.addr580, align 8
  %280 = load ptr, ptr %ap, align 8
  %a581 = getelementptr inbounds %struct.argument, ptr %280, i32 0, i32 1
  store ptr %279, ptr %a581, align 16
  br label %sw.epilog

sw.bb582:                                         ; preds = %for.body
  %281 = load ptr, ptr %args.addr, align 8
  %gp_offset_p583 = getelementptr inbounds %struct.__va_list_tag, ptr %281, i32 0, i32 0
  %gp_offset584 = load i32, ptr %gp_offset_p583, align 8
  %fits_in_gp585 = icmp ule i32 %gp_offset584, 40
  br i1 %fits_in_gp585, label %vaarg.in_reg586, label %vaarg.in_mem588

vaarg.in_reg586:                                  ; preds = %sw.bb582
  %282 = getelementptr inbounds %struct.__va_list_tag, ptr %281, i32 0, i32 3
  %reg_save_area587 = load ptr, ptr %282, align 8
  %283 = getelementptr i8, ptr %reg_save_area587, i32 %gp_offset584
  %284 = add i32 %gp_offset584, 8
  store i32 %284, ptr %gp_offset_p583, align 8
  br label %vaarg.end592

vaarg.in_mem588:                                  ; preds = %sw.bb582
  %overflow_arg_area_p589 = getelementptr inbounds %struct.__va_list_tag, ptr %281, i32 0, i32 2
  %overflow_arg_area590 = load ptr, ptr %overflow_arg_area_p589, align 8
  %overflow_arg_area.next591 = getelementptr i8, ptr %overflow_arg_area590, i32 8
  store ptr %overflow_arg_area.next591, ptr %overflow_arg_area_p589, align 8
  br label %vaarg.end592

vaarg.end592:                                     ; preds = %vaarg.in_mem588, %vaarg.in_reg586
  %vaarg.addr593 = phi ptr [ %283, %vaarg.in_reg586 ], [ %overflow_arg_area590, %vaarg.in_mem588 ]
  %285 = load ptr, ptr %vaarg.addr593, align 8
  %286 = load ptr, ptr %ap, align 8
  %a594 = getelementptr inbounds %struct.argument, ptr %286, i32 0, i32 1
  store ptr %285, ptr %a594, align 16
  br label %sw.epilog

sw.bb595:                                         ; preds = %for.body
  store i32 -1, ptr %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.body
  call void @abort() #22
  unreachable

sw.epilog:                                        ; preds = %vaarg.end592, %vaarg.end579, %vaarg.end566, %vaarg.end553, %vaarg.end540, %vaarg.end527, %vaarg.end514, %vaarg.end501, %vaarg.end488, %vaarg.end475, %vaarg.end462, %vaarg.end449, %vaarg.end436, %vaarg.end423, %if.end412, %if.end, %vaarg.end374, %vaarg.end361, %sw.bb346, %vaarg.end343, %vaarg.end333, %vaarg.end320, %vaarg.end307, %vaarg.end294, %vaarg.end281, %vaarg.end268, %vaarg.end254, %vaarg.end240, %vaarg.end227, %vaarg.end214, %vaarg.end201, %vaarg.end188, %vaarg.end174, %vaarg.end160, %vaarg.end146, %vaarg.end132, %vaarg.end119, %vaarg.end106, %vaarg.end93, %vaarg.end80, %vaarg.end67, %vaarg.end54, %vaarg.end40, %vaarg.end26, %vaarg.end12, %vaarg.end
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %287 = load i64, ptr %i, align 8
  %inc = add i64 %287, 1
  store i64 %inc, ptr %i, align 8
  %288 = load ptr, ptr %ap, align 8
  %incdec.ptr = getelementptr inbounds %struct.argument, ptr %288, i32 1
  store ptr %incdec.ptr, ptr %ap, align 8
  br label %for.cond, !llvm.loop !34

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %sw.bb595
  %289 = load i32, ptr %retval, align 4
  ret i32 %289
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr @llvm.ptrmask.p0.i64(ptr, i64) #9

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @printf_parse(ptr noundef %format, ptr noundef %d, ptr noundef %a) #3 {
entry:
  %retval = alloca i32, align 4
  %format.addr = alloca ptr, align 8
  %d.addr = alloca ptr, align 8
  %a.addr = alloca ptr, align 8
  %cp = alloca ptr, align 8
  %arg_posn = alloca i64, align 8
  %d_allocated = alloca i64, align 8
  %a_allocated = alloca i64, align 8
  %max_width_length = alloca i64, align 8
  %max_precision_length = alloca i64, align 8
  %c = alloca i8, align 1
  %arg_index = alloca i64, align 8
  %dp = alloca ptr, align 8
  %np = alloca ptr, align 8
  %n = alloca i64, align 8
  %np138 = alloca ptr, align 8
  %n156 = alloca i64, align 8
  %n205 = alloca i64, align 8
  %memory_size = alloca i64, align 8
  %memory = alloca ptr, align 8
  %width_length = alloca i64, align 8
  %np345 = alloca ptr, align 8
  %n363 = alloca i64, align 8
  %n413 = alloca i64, align 8
  %memory_size418 = alloca i64, align 8
  %memory419 = alloca ptr, align 8
  %precision_length = alloca i64, align 8
  %type528 = alloca i32, align 4
  %signed_type = alloca i32, align 4
  %unsigned_type = alloca i32, align 4
  %pointer_type = alloca i32, align 4
  %floatingpoint_type = alloca i32, align 4
  %n736 = alloca i64, align 8
  %memory_size741 = alloca i64, align 8
  %memory742 = alloca ptr, align 8
  %memory_size830 = alloca i64, align 8
  %memory831 = alloca ptr, align 8
  store ptr %format, ptr %format.addr, align 8
  store ptr %d, ptr %d.addr, align 8
  store ptr %a, ptr %a.addr, align 8
  %0 = load ptr, ptr %format.addr, align 8
  store ptr %0, ptr %cp, align 8
  store i64 0, ptr %arg_posn, align 8
  store i64 0, ptr %max_width_length, align 8
  store i64 0, ptr %max_precision_length, align 8
  %1 = load ptr, ptr %d.addr, align 8
  %count = getelementptr inbounds %struct.char_directives, ptr %1, i32 0, i32 0
  store i64 0, ptr %count, align 8
  store i64 7, ptr %d_allocated, align 8
  %2 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir = getelementptr inbounds %struct.char_directives, ptr %2, i32 0, i32 4
  %arraydecay = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir, i64 0, i64 0
  %3 = load ptr, ptr %d.addr, align 8
  %dir = getelementptr inbounds %struct.char_directives, ptr %3, i32 0, i32 1
  store ptr %arraydecay, ptr %dir, align 8
  %4 = load ptr, ptr %a.addr, align 8
  %count1 = getelementptr inbounds %struct.arguments, ptr %4, i32 0, i32 0
  store i64 0, ptr %count1, align 16
  store i64 7, ptr %a_allocated, align 8
  %5 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg = getelementptr inbounds %struct.arguments, ptr %5, i32 0, i32 2
  %arraydecay2 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg, i64 0, i64 0
  %6 = load ptr, ptr %a.addr, align 8
  %arg = getelementptr inbounds %struct.arguments, ptr %6, i32 0, i32 1
  store ptr %arraydecay2, ptr %arg, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end878, %entry
  %7 = load ptr, ptr %cp, align 8
  %8 = load i8, ptr %7, align 1
  %conv = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end879

while.body:                                       ; preds = %while.cond
  %9 = load ptr, ptr %cp, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %9, i32 1
  store ptr %incdec.ptr, ptr %cp, align 8
  %10 = load i8, ptr %9, align 1
  store i8 %10, ptr %c, align 1
  %11 = load i8, ptr %c, align 1
  %conv4 = sext i8 %11 to i32
  %cmp5 = icmp eq i32 %conv4, 37
  br i1 %cmp5, label %if.then, label %if.end878

if.then:                                          ; preds = %while.body
  store i64 -1, ptr %arg_index, align 8
  %12 = load ptr, ptr %d.addr, align 8
  %dir7 = getelementptr inbounds %struct.char_directives, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %dir7, align 8
  %14 = load ptr, ptr %d.addr, align 8
  %count8 = getelementptr inbounds %struct.char_directives, ptr %14, i32 0, i32 0
  %15 = load i64, ptr %count8, align 8
  %arrayidx = getelementptr inbounds %struct.char_directive, ptr %13, i64 %15
  store ptr %arrayidx, ptr %dp, align 8
  %16 = load ptr, ptr %cp, align 8
  %add.ptr = getelementptr inbounds i8, ptr %16, i64 -1
  %17 = load ptr, ptr %dp, align 8
  %dir_start = getelementptr inbounds %struct.char_directive, ptr %17, i32 0, i32 0
  store ptr %add.ptr, ptr %dir_start, align 8
  %18 = load ptr, ptr %dp, align 8
  %flags = getelementptr inbounds %struct.char_directive, ptr %18, i32 0, i32 2
  store i32 0, ptr %flags, align 8
  %19 = load ptr, ptr %dp, align 8
  %width_start = getelementptr inbounds %struct.char_directive, ptr %19, i32 0, i32 3
  store ptr null, ptr %width_start, align 8
  %20 = load ptr, ptr %dp, align 8
  %width_end = getelementptr inbounds %struct.char_directive, ptr %20, i32 0, i32 4
  store ptr null, ptr %width_end, align 8
  %21 = load ptr, ptr %dp, align 8
  %width_arg_index = getelementptr inbounds %struct.char_directive, ptr %21, i32 0, i32 5
  store i64 -1, ptr %width_arg_index, align 8
  %22 = load ptr, ptr %dp, align 8
  %precision_start = getelementptr inbounds %struct.char_directive, ptr %22, i32 0, i32 6
  store ptr null, ptr %precision_start, align 8
  %23 = load ptr, ptr %dp, align 8
  %precision_end = getelementptr inbounds %struct.char_directive, ptr %23, i32 0, i32 7
  store ptr null, ptr %precision_end, align 8
  %24 = load ptr, ptr %dp, align 8
  %precision_arg_index = getelementptr inbounds %struct.char_directive, ptr %24, i32 0, i32 8
  store i64 -1, ptr %precision_arg_index, align 8
  %25 = load ptr, ptr %dp, align 8
  %arg_index9 = getelementptr inbounds %struct.char_directive, ptr %25, i32 0, i32 10
  store i64 -1, ptr %arg_index9, align 8
  %26 = load ptr, ptr %cp, align 8
  %27 = load i8, ptr %26, align 1
  %conv10 = sext i8 %27 to i32
  %cmp11 = icmp sge i32 %conv10, 48
  br i1 %cmp11, label %land.lhs.true, label %if.end55

land.lhs.true:                                    ; preds = %if.then
  %28 = load ptr, ptr %cp, align 8
  %29 = load i8, ptr %28, align 1
  %conv13 = sext i8 %29 to i32
  %cmp14 = icmp sle i32 %conv13, 57
  br i1 %cmp14, label %if.then16, label %if.end55

if.then16:                                        ; preds = %land.lhs.true
  %30 = load ptr, ptr %cp, align 8
  store ptr %30, ptr %np, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then16
  %31 = load ptr, ptr %np, align 8
  %32 = load i8, ptr %31, align 1
  %conv17 = sext i8 %32 to i32
  %cmp18 = icmp sge i32 %conv17, 48
  br i1 %cmp18, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %33 = load ptr, ptr %np, align 8
  %34 = load i8, ptr %33, align 1
  %conv20 = sext i8 %34 to i32
  %cmp21 = icmp sle i32 %conv20, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %35 = phi i1 [ false, %for.cond ], [ %cmp21, %land.rhs ]
  br i1 %35, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %36 = load ptr, ptr %np, align 8
  %incdec.ptr23 = getelementptr inbounds i8, ptr %36, i32 1
  store ptr %incdec.ptr23, ptr %np, align 8
  br label %for.cond, !llvm.loop !35

for.end:                                          ; preds = %land.end
  %37 = load ptr, ptr %np, align 8
  %38 = load i8, ptr %37, align 1
  %conv24 = sext i8 %38 to i32
  %cmp25 = icmp eq i32 %conv24, 36
  br i1 %cmp25, label %if.then27, label %if.end54

if.then27:                                        ; preds = %for.end
  store i64 0, ptr %n, align 8
  %39 = load ptr, ptr %cp, align 8
  store ptr %39, ptr %np, align 8
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc42, %if.then27
  %40 = load ptr, ptr %np, align 8
  %41 = load i8, ptr %40, align 1
  %conv29 = sext i8 %41 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.rhs32, label %land.end36

land.rhs32:                                       ; preds = %for.cond28
  %42 = load ptr, ptr %np, align 8
  %43 = load i8, ptr %42, align 1
  %conv33 = sext i8 %43 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br label %land.end36

land.end36:                                       ; preds = %land.rhs32, %for.cond28
  %44 = phi i1 [ false, %for.cond28 ], [ %cmp34, %land.rhs32 ]
  br i1 %44, label %for.body37, label %for.end44

for.body37:                                       ; preds = %land.end36
  %45 = load i64, ptr %n, align 8
  %cmp38 = icmp ule i64 %45, 1844674407370955161
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body37
  %46 = load i64, ptr %n, align 8
  %mul = mul i64 %46, 10
  br label %cond.end

cond.false:                                       ; preds = %for.body37
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %mul, %cond.true ], [ -1, %cond.false ]
  %47 = load ptr, ptr %np, align 8
  %48 = load i8, ptr %47, align 1
  %conv40 = sext i8 %48 to i32
  %sub = sub nsw i32 %conv40, 48
  %conv41 = sext i32 %sub to i64
  %call = call i64 @xsum(i64 noundef %cond, i64 noundef %conv41) #23
  store i64 %call, ptr %n, align 8
  br label %for.inc42

for.inc42:                                        ; preds = %cond.end
  %49 = load ptr, ptr %np, align 8
  %incdec.ptr43 = getelementptr inbounds i8, ptr %49, i32 1
  store ptr %incdec.ptr43, ptr %np, align 8
  br label %for.cond28, !llvm.loop !36

for.end44:                                        ; preds = %land.end36
  %50 = load i64, ptr %n, align 8
  %cmp45 = icmp eq i64 %50, 0
  br i1 %cmp45, label %if.then47, label %if.end

if.then47:                                        ; preds = %for.end44
  br label %error

if.end:                                           ; preds = %for.end44
  %51 = load i64, ptr %n, align 8
  %cmp48 = icmp eq i64 %51, -1
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.end
  br label %error

if.end51:                                         ; preds = %if.end
  %52 = load i64, ptr %n, align 8
  %sub52 = sub i64 %52, 1
  store i64 %sub52, ptr %arg_index, align 8
  %53 = load ptr, ptr %np, align 8
  %add.ptr53 = getelementptr inbounds i8, ptr %53, i64 1
  store ptr %add.ptr53, ptr %cp, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.end51, %for.end
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %land.lhs.true, %if.then
  br label %for.cond56

for.cond56:                                       ; preds = %if.end117, %if.end55
  %54 = load ptr, ptr %cp, align 8
  %55 = load i8, ptr %54, align 1
  %conv57 = sext i8 %55 to i32
  %cmp58 = icmp eq i32 %conv57, 39
  br i1 %cmp58, label %if.then60, label %if.else

if.then60:                                        ; preds = %for.cond56
  %56 = load ptr, ptr %dp, align 8
  %flags61 = getelementptr inbounds %struct.char_directive, ptr %56, i32 0, i32 2
  %57 = load i32, ptr %flags61, align 8
  %or = or i32 %57, 1
  store i32 %or, ptr %flags61, align 8
  %58 = load ptr, ptr %cp, align 8
  %incdec.ptr62 = getelementptr inbounds i8, ptr %58, i32 1
  store ptr %incdec.ptr62, ptr %cp, align 8
  br label %if.end117

if.else:                                          ; preds = %for.cond56
  %59 = load ptr, ptr %cp, align 8
  %60 = load i8, ptr %59, align 1
  %conv63 = sext i8 %60 to i32
  %cmp64 = icmp eq i32 %conv63, 45
  br i1 %cmp64, label %if.then66, label %if.else70

if.then66:                                        ; preds = %if.else
  %61 = load ptr, ptr %dp, align 8
  %flags67 = getelementptr inbounds %struct.char_directive, ptr %61, i32 0, i32 2
  %62 = load i32, ptr %flags67, align 8
  %or68 = or i32 %62, 2
  store i32 %or68, ptr %flags67, align 8
  %63 = load ptr, ptr %cp, align 8
  %incdec.ptr69 = getelementptr inbounds i8, ptr %63, i32 1
  store ptr %incdec.ptr69, ptr %cp, align 8
  br label %if.end116

if.else70:                                        ; preds = %if.else
  %64 = load ptr, ptr %cp, align 8
  %65 = load i8, ptr %64, align 1
  %conv71 = sext i8 %65 to i32
  %cmp72 = icmp eq i32 %conv71, 43
  br i1 %cmp72, label %if.then74, label %if.else78

if.then74:                                        ; preds = %if.else70
  %66 = load ptr, ptr %dp, align 8
  %flags75 = getelementptr inbounds %struct.char_directive, ptr %66, i32 0, i32 2
  %67 = load i32, ptr %flags75, align 8
  %or76 = or i32 %67, 4
  store i32 %or76, ptr %flags75, align 8
  %68 = load ptr, ptr %cp, align 8
  %incdec.ptr77 = getelementptr inbounds i8, ptr %68, i32 1
  store ptr %incdec.ptr77, ptr %cp, align 8
  br label %if.end115

if.else78:                                        ; preds = %if.else70
  %69 = load ptr, ptr %cp, align 8
  %70 = load i8, ptr %69, align 1
  %conv79 = sext i8 %70 to i32
  %cmp80 = icmp eq i32 %conv79, 32
  br i1 %cmp80, label %if.then82, label %if.else86

if.then82:                                        ; preds = %if.else78
  %71 = load ptr, ptr %dp, align 8
  %flags83 = getelementptr inbounds %struct.char_directive, ptr %71, i32 0, i32 2
  %72 = load i32, ptr %flags83, align 8
  %or84 = or i32 %72, 8
  store i32 %or84, ptr %flags83, align 8
  %73 = load ptr, ptr %cp, align 8
  %incdec.ptr85 = getelementptr inbounds i8, ptr %73, i32 1
  store ptr %incdec.ptr85, ptr %cp, align 8
  br label %if.end114

if.else86:                                        ; preds = %if.else78
  %74 = load ptr, ptr %cp, align 8
  %75 = load i8, ptr %74, align 1
  %conv87 = sext i8 %75 to i32
  %cmp88 = icmp eq i32 %conv87, 35
  br i1 %cmp88, label %if.then90, label %if.else94

if.then90:                                        ; preds = %if.else86
  %76 = load ptr, ptr %dp, align 8
  %flags91 = getelementptr inbounds %struct.char_directive, ptr %76, i32 0, i32 2
  %77 = load i32, ptr %flags91, align 8
  %or92 = or i32 %77, 16
  store i32 %or92, ptr %flags91, align 8
  %78 = load ptr, ptr %cp, align 8
  %incdec.ptr93 = getelementptr inbounds i8, ptr %78, i32 1
  store ptr %incdec.ptr93, ptr %cp, align 8
  br label %if.end113

if.else94:                                        ; preds = %if.else86
  %79 = load ptr, ptr %cp, align 8
  %80 = load i8, ptr %79, align 1
  %conv95 = sext i8 %80 to i32
  %cmp96 = icmp eq i32 %conv95, 48
  br i1 %cmp96, label %if.then98, label %if.else102

if.then98:                                        ; preds = %if.else94
  %81 = load ptr, ptr %dp, align 8
  %flags99 = getelementptr inbounds %struct.char_directive, ptr %81, i32 0, i32 2
  %82 = load i32, ptr %flags99, align 8
  %or100 = or i32 %82, 32
  store i32 %or100, ptr %flags99, align 8
  %83 = load ptr, ptr %cp, align 8
  %incdec.ptr101 = getelementptr inbounds i8, ptr %83, i32 1
  store ptr %incdec.ptr101, ptr %cp, align 8
  br label %if.end112

if.else102:                                       ; preds = %if.else94
  %84 = load ptr, ptr %cp, align 8
  %85 = load i8, ptr %84, align 1
  %conv103 = sext i8 %85 to i32
  %cmp104 = icmp eq i32 %conv103, 73
  br i1 %cmp104, label %if.then106, label %if.else110

if.then106:                                       ; preds = %if.else102
  %86 = load ptr, ptr %dp, align 8
  %flags107 = getelementptr inbounds %struct.char_directive, ptr %86, i32 0, i32 2
  %87 = load i32, ptr %flags107, align 8
  %or108 = or i32 %87, 64
  store i32 %or108, ptr %flags107, align 8
  %88 = load ptr, ptr %cp, align 8
  %incdec.ptr109 = getelementptr inbounds i8, ptr %88, i32 1
  store ptr %incdec.ptr109, ptr %cp, align 8
  br label %if.end111

if.else110:                                       ; preds = %if.else102
  br label %for.end118

if.end111:                                        ; preds = %if.then106
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %if.then98
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.then90
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then82
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.then74
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.then66
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.then60
  br label %for.cond56

for.end118:                                       ; preds = %if.else110
  %89 = load ptr, ptr %cp, align 8
  %90 = load i8, ptr %89, align 1
  %conv119 = sext i8 %90 to i32
  %cmp120 = icmp eq i32 %conv119, 42
  br i1 %cmp120, label %if.then122, label %if.else288

if.then122:                                       ; preds = %for.end118
  %91 = load ptr, ptr %cp, align 8
  %92 = load ptr, ptr %dp, align 8
  %width_start123 = getelementptr inbounds %struct.char_directive, ptr %92, i32 0, i32 3
  store ptr %91, ptr %width_start123, align 8
  %93 = load ptr, ptr %cp, align 8
  %incdec.ptr124 = getelementptr inbounds i8, ptr %93, i32 1
  store ptr %incdec.ptr124, ptr %cp, align 8
  %94 = load ptr, ptr %cp, align 8
  %95 = load ptr, ptr %dp, align 8
  %width_end125 = getelementptr inbounds %struct.char_directive, ptr %95, i32 0, i32 4
  store ptr %94, ptr %width_end125, align 8
  %96 = load i64, ptr %max_width_length, align 8
  %cmp126 = icmp ult i64 %96, 1
  br i1 %cmp126, label %if.then128, label %if.end129

if.then128:                                       ; preds = %if.then122
  store i64 1, ptr %max_width_length, align 8
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %if.then122
  %97 = load ptr, ptr %cp, align 8
  %98 = load i8, ptr %97, align 1
  %conv130 = sext i8 %98 to i32
  %cmp131 = icmp sge i32 %conv130, 48
  br i1 %cmp131, label %land.lhs.true133, label %if.end193

land.lhs.true133:                                 ; preds = %if.end129
  %99 = load ptr, ptr %cp, align 8
  %100 = load i8, ptr %99, align 1
  %conv134 = sext i8 %100 to i32
  %cmp135 = icmp sle i32 %conv134, 57
  br i1 %cmp135, label %if.then137, label %if.end193

if.then137:                                       ; preds = %land.lhs.true133
  %101 = load ptr, ptr %cp, align 8
  store ptr %101, ptr %np138, align 8
  br label %for.cond139

for.cond139:                                      ; preds = %for.inc149, %if.then137
  %102 = load ptr, ptr %np138, align 8
  %103 = load i8, ptr %102, align 1
  %conv140 = sext i8 %103 to i32
  %cmp141 = icmp sge i32 %conv140, 48
  br i1 %cmp141, label %land.rhs143, label %land.end147

land.rhs143:                                      ; preds = %for.cond139
  %104 = load ptr, ptr %np138, align 8
  %105 = load i8, ptr %104, align 1
  %conv144 = sext i8 %105 to i32
  %cmp145 = icmp sle i32 %conv144, 57
  br label %land.end147

land.end147:                                      ; preds = %land.rhs143, %for.cond139
  %106 = phi i1 [ false, %for.cond139 ], [ %cmp145, %land.rhs143 ]
  br i1 %106, label %for.body148, label %for.end151

for.body148:                                      ; preds = %land.end147
  br label %for.inc149

for.inc149:                                       ; preds = %for.body148
  %107 = load ptr, ptr %np138, align 8
  %incdec.ptr150 = getelementptr inbounds i8, ptr %107, i32 1
  store ptr %incdec.ptr150, ptr %np138, align 8
  br label %for.cond139, !llvm.loop !37

for.end151:                                       ; preds = %land.end147
  %108 = load ptr, ptr %np138, align 8
  %109 = load i8, ptr %108, align 1
  %conv152 = sext i8 %109 to i32
  %cmp153 = icmp eq i32 %conv152, 36
  br i1 %cmp153, label %if.then155, label %if.end192

if.then155:                                       ; preds = %for.end151
  store i64 0, ptr %n156, align 8
  %110 = load ptr, ptr %cp, align 8
  store ptr %110, ptr %np138, align 8
  br label %for.cond157

for.cond157:                                      ; preds = %for.inc178, %if.then155
  %111 = load ptr, ptr %np138, align 8
  %112 = load i8, ptr %111, align 1
  %conv158 = sext i8 %112 to i32
  %cmp159 = icmp sge i32 %conv158, 48
  br i1 %cmp159, label %land.rhs161, label %land.end165

land.rhs161:                                      ; preds = %for.cond157
  %113 = load ptr, ptr %np138, align 8
  %114 = load i8, ptr %113, align 1
  %conv162 = sext i8 %114 to i32
  %cmp163 = icmp sle i32 %conv162, 57
  br label %land.end165

land.end165:                                      ; preds = %land.rhs161, %for.cond157
  %115 = phi i1 [ false, %for.cond157 ], [ %cmp163, %land.rhs161 ]
  br i1 %115, label %for.body166, label %for.end180

for.body166:                                      ; preds = %land.end165
  %116 = load i64, ptr %n156, align 8
  %cmp167 = icmp ule i64 %116, 1844674407370955161
  br i1 %cmp167, label %cond.true169, label %cond.false171

cond.true169:                                     ; preds = %for.body166
  %117 = load i64, ptr %n156, align 8
  %mul170 = mul i64 %117, 10
  br label %cond.end172

cond.false171:                                    ; preds = %for.body166
  br label %cond.end172

cond.end172:                                      ; preds = %cond.false171, %cond.true169
  %cond173 = phi i64 [ %mul170, %cond.true169 ], [ -1, %cond.false171 ]
  %118 = load ptr, ptr %np138, align 8
  %119 = load i8, ptr %118, align 1
  %conv174 = sext i8 %119 to i32
  %sub175 = sub nsw i32 %conv174, 48
  %conv176 = sext i32 %sub175 to i64
  %call177 = call i64 @xsum(i64 noundef %cond173, i64 noundef %conv176) #23
  store i64 %call177, ptr %n156, align 8
  br label %for.inc178

for.inc178:                                       ; preds = %cond.end172
  %120 = load ptr, ptr %np138, align 8
  %incdec.ptr179 = getelementptr inbounds i8, ptr %120, i32 1
  store ptr %incdec.ptr179, ptr %np138, align 8
  br label %for.cond157, !llvm.loop !38

for.end180:                                       ; preds = %land.end165
  %121 = load i64, ptr %n156, align 8
  %cmp181 = icmp eq i64 %121, 0
  br i1 %cmp181, label %if.then183, label %if.end184

if.then183:                                       ; preds = %for.end180
  br label %error

if.end184:                                        ; preds = %for.end180
  %122 = load i64, ptr %n156, align 8
  %cmp185 = icmp eq i64 %122, -1
  br i1 %cmp185, label %if.then187, label %if.end188

if.then187:                                       ; preds = %if.end184
  br label %error

if.end188:                                        ; preds = %if.end184
  %123 = load i64, ptr %n156, align 8
  %sub189 = sub i64 %123, 1
  %124 = load ptr, ptr %dp, align 8
  %width_arg_index190 = getelementptr inbounds %struct.char_directive, ptr %124, i32 0, i32 5
  store i64 %sub189, ptr %width_arg_index190, align 8
  %125 = load ptr, ptr %np138, align 8
  %add.ptr191 = getelementptr inbounds i8, ptr %125, i64 1
  store ptr %add.ptr191, ptr %cp, align 8
  br label %if.end192

if.end192:                                        ; preds = %if.end188, %for.end151
  br label %if.end193

if.end193:                                        ; preds = %if.end192, %land.lhs.true133, %if.end129
  %126 = load ptr, ptr %dp, align 8
  %width_arg_index194 = getelementptr inbounds %struct.char_directive, ptr %126, i32 0, i32 5
  %127 = load i64, ptr %width_arg_index194, align 8
  %cmp195 = icmp eq i64 %127, -1
  br i1 %cmp195, label %if.then197, label %if.end204

if.then197:                                       ; preds = %if.end193
  %128 = load i64, ptr %arg_posn, align 8
  %inc = add i64 %128, 1
  store i64 %inc, ptr %arg_posn, align 8
  %129 = load ptr, ptr %dp, align 8
  %width_arg_index198 = getelementptr inbounds %struct.char_directive, ptr %129, i32 0, i32 5
  store i64 %128, ptr %width_arg_index198, align 8
  %130 = load ptr, ptr %dp, align 8
  %width_arg_index199 = getelementptr inbounds %struct.char_directive, ptr %130, i32 0, i32 5
  %131 = load i64, ptr %width_arg_index199, align 8
  %cmp200 = icmp eq i64 %131, -1
  br i1 %cmp200, label %if.then202, label %if.end203

if.then202:                                       ; preds = %if.then197
  br label %error

if.end203:                                        ; preds = %if.then197
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %if.end193
  %132 = load ptr, ptr %dp, align 8
  %width_arg_index206 = getelementptr inbounds %struct.char_directive, ptr %132, i32 0, i32 5
  %133 = load i64, ptr %width_arg_index206, align 8
  store i64 %133, ptr %n205, align 8
  %134 = load i64, ptr %n205, align 8
  %135 = load i64, ptr %a_allocated, align 8
  %cmp207 = icmp uge i64 %134, %135
  br i1 %cmp207, label %if.then209, label %if.end260

if.then209:                                       ; preds = %if.end204
  %136 = load i64, ptr %a_allocated, align 8
  %cmp210 = icmp ule i64 %136, 9223372036854775807
  br i1 %cmp210, label %cond.true212, label %cond.false214

cond.true212:                                     ; preds = %if.then209
  %137 = load i64, ptr %a_allocated, align 8
  %mul213 = mul i64 %137, 2
  br label %cond.end215

cond.false214:                                    ; preds = %if.then209
  br label %cond.end215

cond.end215:                                      ; preds = %cond.false214, %cond.true212
  %cond216 = phi i64 [ %mul213, %cond.true212 ], [ -1, %cond.false214 ]
  store i64 %cond216, ptr %a_allocated, align 8
  %138 = load i64, ptr %a_allocated, align 8
  %139 = load i64, ptr %n205, align 8
  %cmp217 = icmp ule i64 %138, %139
  br i1 %cmp217, label %if.then219, label %if.end221

if.then219:                                       ; preds = %cond.end215
  %140 = load i64, ptr %n205, align 8
  %call220 = call i64 @xsum(i64 noundef %140, i64 noundef 1) #23
  store i64 %call220, ptr %a_allocated, align 8
  br label %if.end221

if.end221:                                        ; preds = %if.then219, %cond.end215
  %141 = load i64, ptr %a_allocated, align 8
  %cmp222 = icmp ule i64 %141, 576460752303423487
  br i1 %cmp222, label %cond.true224, label %cond.false226

cond.true224:                                     ; preds = %if.end221
  %142 = load i64, ptr %a_allocated, align 8
  %mul225 = mul i64 %142, 32
  br label %cond.end227

cond.false226:                                    ; preds = %if.end221
  br label %cond.end227

cond.end227:                                      ; preds = %cond.false226, %cond.true224
  %cond228 = phi i64 [ %mul225, %cond.true224 ], [ -1, %cond.false226 ]
  store i64 %cond228, ptr %memory_size, align 8
  %143 = load i64, ptr %memory_size, align 8
  %cmp229 = icmp eq i64 %143, -1
  br i1 %cmp229, label %if.then231, label %if.end232

if.then231:                                       ; preds = %cond.end227
  br label %out_of_memory

if.end232:                                        ; preds = %cond.end227
  %144 = load ptr, ptr %a.addr, align 8
  %arg233 = getelementptr inbounds %struct.arguments, ptr %144, i32 0, i32 1
  %145 = load ptr, ptr %arg233, align 8
  %146 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg234 = getelementptr inbounds %struct.arguments, ptr %146, i32 0, i32 2
  %arraydecay235 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg234, i64 0, i64 0
  %cmp236 = icmp ne ptr %145, %arraydecay235
  br i1 %cmp236, label %cond.true238, label %cond.false241

cond.true238:                                     ; preds = %if.end232
  %147 = load ptr, ptr %a.addr, align 8
  %arg239 = getelementptr inbounds %struct.arguments, ptr %147, i32 0, i32 1
  %148 = load ptr, ptr %arg239, align 8
  %149 = load i64, ptr %memory_size, align 8
  %call240 = call ptr @rpl_realloc(ptr noundef %148, i64 noundef %149)
  br label %cond.end243

cond.false241:                                    ; preds = %if.end232
  %150 = load i64, ptr %memory_size, align 8
  %call242 = call noalias ptr @malloc(i64 noundef %150) #29
  br label %cond.end243

cond.end243:                                      ; preds = %cond.false241, %cond.true238
  %cond244 = phi ptr [ %call240, %cond.true238 ], [ %call242, %cond.false241 ]
  store ptr %cond244, ptr %memory, align 8
  %151 = load ptr, ptr %memory, align 8
  %cmp245 = icmp eq ptr %151, null
  br i1 %cmp245, label %if.then247, label %if.end248

if.then247:                                       ; preds = %cond.end243
  br label %out_of_memory

if.end248:                                        ; preds = %cond.end243
  %152 = load ptr, ptr %a.addr, align 8
  %arg249 = getelementptr inbounds %struct.arguments, ptr %152, i32 0, i32 1
  %153 = load ptr, ptr %arg249, align 8
  %154 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg250 = getelementptr inbounds %struct.arguments, ptr %154, i32 0, i32 2
  %arraydecay251 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg250, i64 0, i64 0
  %cmp252 = icmp eq ptr %153, %arraydecay251
  br i1 %cmp252, label %if.then254, label %if.end258

if.then254:                                       ; preds = %if.end248
  %155 = load ptr, ptr %memory, align 8
  %156 = load ptr, ptr %a.addr, align 8
  %arg255 = getelementptr inbounds %struct.arguments, ptr %156, i32 0, i32 1
  %157 = load ptr, ptr %arg255, align 8
  %158 = load ptr, ptr %a.addr, align 8
  %count256 = getelementptr inbounds %struct.arguments, ptr %158, i32 0, i32 0
  %159 = load i64, ptr %count256, align 16
  %mul257 = mul i64 %159, 32
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %155, ptr align 16 %157, i64 %mul257, i1 false)
  br label %if.end258

if.end258:                                        ; preds = %if.then254, %if.end248
  %160 = load ptr, ptr %memory, align 8
  %161 = load ptr, ptr %a.addr, align 8
  %arg259 = getelementptr inbounds %struct.arguments, ptr %161, i32 0, i32 1
  store ptr %160, ptr %arg259, align 8
  br label %if.end260

if.end260:                                        ; preds = %if.end258, %if.end204
  br label %while.cond261

while.cond261:                                    ; preds = %while.body265, %if.end260
  %162 = load ptr, ptr %a.addr, align 8
  %count262 = getelementptr inbounds %struct.arguments, ptr %162, i32 0, i32 0
  %163 = load i64, ptr %count262, align 16
  %164 = load i64, ptr %n205, align 8
  %cmp263 = icmp ule i64 %163, %164
  br i1 %cmp263, label %while.body265, label %while.end

while.body265:                                    ; preds = %while.cond261
  %165 = load ptr, ptr %a.addr, align 8
  %arg266 = getelementptr inbounds %struct.arguments, ptr %165, i32 0, i32 1
  %166 = load ptr, ptr %arg266, align 8
  %167 = load ptr, ptr %a.addr, align 8
  %count267 = getelementptr inbounds %struct.arguments, ptr %167, i32 0, i32 0
  %168 = load i64, ptr %count267, align 16
  %inc268 = add i64 %168, 1
  store i64 %inc268, ptr %count267, align 16
  %arrayidx269 = getelementptr inbounds %struct.argument, ptr %166, i64 %168
  %type = getelementptr inbounds %struct.argument, ptr %arrayidx269, i32 0, i32 0
  store i32 0, ptr %type, align 16
  br label %while.cond261, !llvm.loop !39

while.end:                                        ; preds = %while.cond261
  %169 = load ptr, ptr %a.addr, align 8
  %arg270 = getelementptr inbounds %struct.arguments, ptr %169, i32 0, i32 1
  %170 = load ptr, ptr %arg270, align 8
  %171 = load i64, ptr %n205, align 8
  %arrayidx271 = getelementptr inbounds %struct.argument, ptr %170, i64 %171
  %type272 = getelementptr inbounds %struct.argument, ptr %arrayidx271, i32 0, i32 0
  %172 = load i32, ptr %type272, align 16
  %cmp273 = icmp eq i32 %172, 0
  br i1 %cmp273, label %if.then275, label %if.else279

if.then275:                                       ; preds = %while.end
  %173 = load ptr, ptr %a.addr, align 8
  %arg276 = getelementptr inbounds %struct.arguments, ptr %173, i32 0, i32 1
  %174 = load ptr, ptr %arg276, align 8
  %175 = load i64, ptr %n205, align 8
  %arrayidx277 = getelementptr inbounds %struct.argument, ptr %174, i64 %175
  %type278 = getelementptr inbounds %struct.argument, ptr %arrayidx277, i32 0, i32 0
  store i32 5, ptr %type278, align 16
  br label %if.end287

if.else279:                                       ; preds = %while.end
  %176 = load ptr, ptr %a.addr, align 8
  %arg280 = getelementptr inbounds %struct.arguments, ptr %176, i32 0, i32 1
  %177 = load ptr, ptr %arg280, align 8
  %178 = load i64, ptr %n205, align 8
  %arrayidx281 = getelementptr inbounds %struct.argument, ptr %177, i64 %178
  %type282 = getelementptr inbounds %struct.argument, ptr %arrayidx281, i32 0, i32 0
  %179 = load i32, ptr %type282, align 16
  %cmp283 = icmp ne i32 %179, 5
  br i1 %cmp283, label %if.then285, label %if.end286

if.then285:                                       ; preds = %if.else279
  br label %error

if.end286:                                        ; preds = %if.else279
  br label %if.end287

if.end287:                                        ; preds = %if.end286, %if.then275
  br label %if.end319

if.else288:                                       ; preds = %for.end118
  %180 = load ptr, ptr %cp, align 8
  %181 = load i8, ptr %180, align 1
  %conv289 = sext i8 %181 to i32
  %cmp290 = icmp sge i32 %conv289, 48
  br i1 %cmp290, label %land.lhs.true292, label %if.end318

land.lhs.true292:                                 ; preds = %if.else288
  %182 = load ptr, ptr %cp, align 8
  %183 = load i8, ptr %182, align 1
  %conv293 = sext i8 %183 to i32
  %cmp294 = icmp sle i32 %conv293, 57
  br i1 %cmp294, label %if.then296, label %if.end318

if.then296:                                       ; preds = %land.lhs.true292
  %184 = load ptr, ptr %cp, align 8
  %185 = load ptr, ptr %dp, align 8
  %width_start297 = getelementptr inbounds %struct.char_directive, ptr %185, i32 0, i32 3
  store ptr %184, ptr %width_start297, align 8
  br label %for.cond298

for.cond298:                                      ; preds = %for.inc308, %if.then296
  %186 = load ptr, ptr %cp, align 8
  %187 = load i8, ptr %186, align 1
  %conv299 = sext i8 %187 to i32
  %cmp300 = icmp sge i32 %conv299, 48
  br i1 %cmp300, label %land.rhs302, label %land.end306

land.rhs302:                                      ; preds = %for.cond298
  %188 = load ptr, ptr %cp, align 8
  %189 = load i8, ptr %188, align 1
  %conv303 = sext i8 %189 to i32
  %cmp304 = icmp sle i32 %conv303, 57
  br label %land.end306

land.end306:                                      ; preds = %land.rhs302, %for.cond298
  %190 = phi i1 [ false, %for.cond298 ], [ %cmp304, %land.rhs302 ]
  br i1 %190, label %for.body307, label %for.end310

for.body307:                                      ; preds = %land.end306
  br label %for.inc308

for.inc308:                                       ; preds = %for.body307
  %191 = load ptr, ptr %cp, align 8
  %incdec.ptr309 = getelementptr inbounds i8, ptr %191, i32 1
  store ptr %incdec.ptr309, ptr %cp, align 8
  br label %for.cond298, !llvm.loop !40

for.end310:                                       ; preds = %land.end306
  %192 = load ptr, ptr %cp, align 8
  %193 = load ptr, ptr %dp, align 8
  %width_end311 = getelementptr inbounds %struct.char_directive, ptr %193, i32 0, i32 4
  store ptr %192, ptr %width_end311, align 8
  %194 = load ptr, ptr %dp, align 8
  %width_end312 = getelementptr inbounds %struct.char_directive, ptr %194, i32 0, i32 4
  %195 = load ptr, ptr %width_end312, align 8
  %196 = load ptr, ptr %dp, align 8
  %width_start313 = getelementptr inbounds %struct.char_directive, ptr %196, i32 0, i32 3
  %197 = load ptr, ptr %width_start313, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %195 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %197 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, ptr %width_length, align 8
  %198 = load i64, ptr %max_width_length, align 8
  %199 = load i64, ptr %width_length, align 8
  %cmp314 = icmp ult i64 %198, %199
  br i1 %cmp314, label %if.then316, label %if.end317

if.then316:                                       ; preds = %for.end310
  %200 = load i64, ptr %width_length, align 8
  store i64 %200, ptr %max_width_length, align 8
  br label %if.end317

if.end317:                                        ; preds = %if.then316, %for.end310
  br label %if.end318

if.end318:                                        ; preds = %if.end317, %land.lhs.true292, %if.else288
  br label %if.end319

if.end319:                                        ; preds = %if.end318, %if.end287
  %201 = load ptr, ptr %cp, align 8
  %202 = load i8, ptr %201, align 1
  %conv320 = sext i8 %202 to i32
  %cmp321 = icmp eq i32 %conv320, 46
  br i1 %cmp321, label %if.then323, label %if.end527

if.then323:                                       ; preds = %if.end319
  %203 = load ptr, ptr %cp, align 8
  %incdec.ptr324 = getelementptr inbounds i8, ptr %203, i32 1
  store ptr %incdec.ptr324, ptr %cp, align 8
  %204 = load ptr, ptr %cp, align 8
  %205 = load i8, ptr %204, align 1
  %conv325 = sext i8 %205 to i32
  %cmp326 = icmp eq i32 %conv325, 42
  br i1 %cmp326, label %if.then328, label %if.else500

if.then328:                                       ; preds = %if.then323
  %206 = load ptr, ptr %cp, align 8
  %add.ptr329 = getelementptr inbounds i8, ptr %206, i64 -1
  %207 = load ptr, ptr %dp, align 8
  %precision_start330 = getelementptr inbounds %struct.char_directive, ptr %207, i32 0, i32 6
  store ptr %add.ptr329, ptr %precision_start330, align 8
  %208 = load ptr, ptr %cp, align 8
  %incdec.ptr331 = getelementptr inbounds i8, ptr %208, i32 1
  store ptr %incdec.ptr331, ptr %cp, align 8
  %209 = load ptr, ptr %cp, align 8
  %210 = load ptr, ptr %dp, align 8
  %precision_end332 = getelementptr inbounds %struct.char_directive, ptr %210, i32 0, i32 7
  store ptr %209, ptr %precision_end332, align 8
  %211 = load i64, ptr %max_precision_length, align 8
  %cmp333 = icmp ult i64 %211, 2
  br i1 %cmp333, label %if.then335, label %if.end336

if.then335:                                       ; preds = %if.then328
  store i64 2, ptr %max_precision_length, align 8
  br label %if.end336

if.end336:                                        ; preds = %if.then335, %if.then328
  %212 = load ptr, ptr %cp, align 8
  %213 = load i8, ptr %212, align 1
  %conv337 = sext i8 %213 to i32
  %cmp338 = icmp sge i32 %conv337, 48
  br i1 %cmp338, label %land.lhs.true340, label %if.end400

land.lhs.true340:                                 ; preds = %if.end336
  %214 = load ptr, ptr %cp, align 8
  %215 = load i8, ptr %214, align 1
  %conv341 = sext i8 %215 to i32
  %cmp342 = icmp sle i32 %conv341, 57
  br i1 %cmp342, label %if.then344, label %if.end400

if.then344:                                       ; preds = %land.lhs.true340
  %216 = load ptr, ptr %cp, align 8
  store ptr %216, ptr %np345, align 8
  br label %for.cond346

for.cond346:                                      ; preds = %for.inc356, %if.then344
  %217 = load ptr, ptr %np345, align 8
  %218 = load i8, ptr %217, align 1
  %conv347 = sext i8 %218 to i32
  %cmp348 = icmp sge i32 %conv347, 48
  br i1 %cmp348, label %land.rhs350, label %land.end354

land.rhs350:                                      ; preds = %for.cond346
  %219 = load ptr, ptr %np345, align 8
  %220 = load i8, ptr %219, align 1
  %conv351 = sext i8 %220 to i32
  %cmp352 = icmp sle i32 %conv351, 57
  br label %land.end354

land.end354:                                      ; preds = %land.rhs350, %for.cond346
  %221 = phi i1 [ false, %for.cond346 ], [ %cmp352, %land.rhs350 ]
  br i1 %221, label %for.body355, label %for.end358

for.body355:                                      ; preds = %land.end354
  br label %for.inc356

for.inc356:                                       ; preds = %for.body355
  %222 = load ptr, ptr %np345, align 8
  %incdec.ptr357 = getelementptr inbounds i8, ptr %222, i32 1
  store ptr %incdec.ptr357, ptr %np345, align 8
  br label %for.cond346, !llvm.loop !41

for.end358:                                       ; preds = %land.end354
  %223 = load ptr, ptr %np345, align 8
  %224 = load i8, ptr %223, align 1
  %conv359 = sext i8 %224 to i32
  %cmp360 = icmp eq i32 %conv359, 36
  br i1 %cmp360, label %if.then362, label %if.end399

if.then362:                                       ; preds = %for.end358
  store i64 0, ptr %n363, align 8
  %225 = load ptr, ptr %cp, align 8
  store ptr %225, ptr %np345, align 8
  br label %for.cond364

for.cond364:                                      ; preds = %for.inc385, %if.then362
  %226 = load ptr, ptr %np345, align 8
  %227 = load i8, ptr %226, align 1
  %conv365 = sext i8 %227 to i32
  %cmp366 = icmp sge i32 %conv365, 48
  br i1 %cmp366, label %land.rhs368, label %land.end372

land.rhs368:                                      ; preds = %for.cond364
  %228 = load ptr, ptr %np345, align 8
  %229 = load i8, ptr %228, align 1
  %conv369 = sext i8 %229 to i32
  %cmp370 = icmp sle i32 %conv369, 57
  br label %land.end372

land.end372:                                      ; preds = %land.rhs368, %for.cond364
  %230 = phi i1 [ false, %for.cond364 ], [ %cmp370, %land.rhs368 ]
  br i1 %230, label %for.body373, label %for.end387

for.body373:                                      ; preds = %land.end372
  %231 = load i64, ptr %n363, align 8
  %cmp374 = icmp ule i64 %231, 1844674407370955161
  br i1 %cmp374, label %cond.true376, label %cond.false378

cond.true376:                                     ; preds = %for.body373
  %232 = load i64, ptr %n363, align 8
  %mul377 = mul i64 %232, 10
  br label %cond.end379

cond.false378:                                    ; preds = %for.body373
  br label %cond.end379

cond.end379:                                      ; preds = %cond.false378, %cond.true376
  %cond380 = phi i64 [ %mul377, %cond.true376 ], [ -1, %cond.false378 ]
  %233 = load ptr, ptr %np345, align 8
  %234 = load i8, ptr %233, align 1
  %conv381 = sext i8 %234 to i32
  %sub382 = sub nsw i32 %conv381, 48
  %conv383 = sext i32 %sub382 to i64
  %call384 = call i64 @xsum(i64 noundef %cond380, i64 noundef %conv383) #23
  store i64 %call384, ptr %n363, align 8
  br label %for.inc385

for.inc385:                                       ; preds = %cond.end379
  %235 = load ptr, ptr %np345, align 8
  %incdec.ptr386 = getelementptr inbounds i8, ptr %235, i32 1
  store ptr %incdec.ptr386, ptr %np345, align 8
  br label %for.cond364, !llvm.loop !42

for.end387:                                       ; preds = %land.end372
  %236 = load i64, ptr %n363, align 8
  %cmp388 = icmp eq i64 %236, 0
  br i1 %cmp388, label %if.then390, label %if.end391

if.then390:                                       ; preds = %for.end387
  br label %error

if.end391:                                        ; preds = %for.end387
  %237 = load i64, ptr %n363, align 8
  %cmp392 = icmp eq i64 %237, -1
  br i1 %cmp392, label %if.then394, label %if.end395

if.then394:                                       ; preds = %if.end391
  br label %error

if.end395:                                        ; preds = %if.end391
  %238 = load i64, ptr %n363, align 8
  %sub396 = sub i64 %238, 1
  %239 = load ptr, ptr %dp, align 8
  %precision_arg_index397 = getelementptr inbounds %struct.char_directive, ptr %239, i32 0, i32 8
  store i64 %sub396, ptr %precision_arg_index397, align 8
  %240 = load ptr, ptr %np345, align 8
  %add.ptr398 = getelementptr inbounds i8, ptr %240, i64 1
  store ptr %add.ptr398, ptr %cp, align 8
  br label %if.end399

if.end399:                                        ; preds = %if.end395, %for.end358
  br label %if.end400

if.end400:                                        ; preds = %if.end399, %land.lhs.true340, %if.end336
  %241 = load ptr, ptr %dp, align 8
  %precision_arg_index401 = getelementptr inbounds %struct.char_directive, ptr %241, i32 0, i32 8
  %242 = load i64, ptr %precision_arg_index401, align 8
  %cmp402 = icmp eq i64 %242, -1
  br i1 %cmp402, label %if.then404, label %if.end412

if.then404:                                       ; preds = %if.end400
  %243 = load i64, ptr %arg_posn, align 8
  %inc405 = add i64 %243, 1
  store i64 %inc405, ptr %arg_posn, align 8
  %244 = load ptr, ptr %dp, align 8
  %precision_arg_index406 = getelementptr inbounds %struct.char_directive, ptr %244, i32 0, i32 8
  store i64 %243, ptr %precision_arg_index406, align 8
  %245 = load ptr, ptr %dp, align 8
  %precision_arg_index407 = getelementptr inbounds %struct.char_directive, ptr %245, i32 0, i32 8
  %246 = load i64, ptr %precision_arg_index407, align 8
  %cmp408 = icmp eq i64 %246, -1
  br i1 %cmp408, label %if.then410, label %if.end411

if.then410:                                       ; preds = %if.then404
  br label %error

if.end411:                                        ; preds = %if.then404
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %if.end400
  %247 = load ptr, ptr %dp, align 8
  %precision_arg_index414 = getelementptr inbounds %struct.char_directive, ptr %247, i32 0, i32 8
  %248 = load i64, ptr %precision_arg_index414, align 8
  store i64 %248, ptr %n413, align 8
  %249 = load i64, ptr %n413, align 8
  %250 = load i64, ptr %a_allocated, align 8
  %cmp415 = icmp uge i64 %249, %250
  br i1 %cmp415, label %if.then417, label %if.end470

if.then417:                                       ; preds = %if.end412
  %251 = load i64, ptr %a_allocated, align 8
  %cmp420 = icmp ule i64 %251, 9223372036854775807
  br i1 %cmp420, label %cond.true422, label %cond.false424

cond.true422:                                     ; preds = %if.then417
  %252 = load i64, ptr %a_allocated, align 8
  %mul423 = mul i64 %252, 2
  br label %cond.end425

cond.false424:                                    ; preds = %if.then417
  br label %cond.end425

cond.end425:                                      ; preds = %cond.false424, %cond.true422
  %cond426 = phi i64 [ %mul423, %cond.true422 ], [ -1, %cond.false424 ]
  store i64 %cond426, ptr %a_allocated, align 8
  %253 = load i64, ptr %a_allocated, align 8
  %254 = load i64, ptr %n413, align 8
  %cmp427 = icmp ule i64 %253, %254
  br i1 %cmp427, label %if.then429, label %if.end431

if.then429:                                       ; preds = %cond.end425
  %255 = load i64, ptr %n413, align 8
  %call430 = call i64 @xsum(i64 noundef %255, i64 noundef 1) #23
  store i64 %call430, ptr %a_allocated, align 8
  br label %if.end431

if.end431:                                        ; preds = %if.then429, %cond.end425
  %256 = load i64, ptr %a_allocated, align 8
  %cmp432 = icmp ule i64 %256, 576460752303423487
  br i1 %cmp432, label %cond.true434, label %cond.false436

cond.true434:                                     ; preds = %if.end431
  %257 = load i64, ptr %a_allocated, align 8
  %mul435 = mul i64 %257, 32
  br label %cond.end437

cond.false436:                                    ; preds = %if.end431
  br label %cond.end437

cond.end437:                                      ; preds = %cond.false436, %cond.true434
  %cond438 = phi i64 [ %mul435, %cond.true434 ], [ -1, %cond.false436 ]
  store i64 %cond438, ptr %memory_size418, align 8
  %258 = load i64, ptr %memory_size418, align 8
  %cmp439 = icmp eq i64 %258, -1
  br i1 %cmp439, label %if.then441, label %if.end442

if.then441:                                       ; preds = %cond.end437
  br label %out_of_memory

if.end442:                                        ; preds = %cond.end437
  %259 = load ptr, ptr %a.addr, align 8
  %arg443 = getelementptr inbounds %struct.arguments, ptr %259, i32 0, i32 1
  %260 = load ptr, ptr %arg443, align 8
  %261 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg444 = getelementptr inbounds %struct.arguments, ptr %261, i32 0, i32 2
  %arraydecay445 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg444, i64 0, i64 0
  %cmp446 = icmp ne ptr %260, %arraydecay445
  br i1 %cmp446, label %cond.true448, label %cond.false451

cond.true448:                                     ; preds = %if.end442
  %262 = load ptr, ptr %a.addr, align 8
  %arg449 = getelementptr inbounds %struct.arguments, ptr %262, i32 0, i32 1
  %263 = load ptr, ptr %arg449, align 8
  %264 = load i64, ptr %memory_size418, align 8
  %call450 = call ptr @rpl_realloc(ptr noundef %263, i64 noundef %264)
  br label %cond.end453

cond.false451:                                    ; preds = %if.end442
  %265 = load i64, ptr %memory_size418, align 8
  %call452 = call noalias ptr @malloc(i64 noundef %265) #29
  br label %cond.end453

cond.end453:                                      ; preds = %cond.false451, %cond.true448
  %cond454 = phi ptr [ %call450, %cond.true448 ], [ %call452, %cond.false451 ]
  store ptr %cond454, ptr %memory419, align 8
  %266 = load ptr, ptr %memory419, align 8
  %cmp455 = icmp eq ptr %266, null
  br i1 %cmp455, label %if.then457, label %if.end458

if.then457:                                       ; preds = %cond.end453
  br label %out_of_memory

if.end458:                                        ; preds = %cond.end453
  %267 = load ptr, ptr %a.addr, align 8
  %arg459 = getelementptr inbounds %struct.arguments, ptr %267, i32 0, i32 1
  %268 = load ptr, ptr %arg459, align 8
  %269 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg460 = getelementptr inbounds %struct.arguments, ptr %269, i32 0, i32 2
  %arraydecay461 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg460, i64 0, i64 0
  %cmp462 = icmp eq ptr %268, %arraydecay461
  br i1 %cmp462, label %if.then464, label %if.end468

if.then464:                                       ; preds = %if.end458
  %270 = load ptr, ptr %memory419, align 8
  %271 = load ptr, ptr %a.addr, align 8
  %arg465 = getelementptr inbounds %struct.arguments, ptr %271, i32 0, i32 1
  %272 = load ptr, ptr %arg465, align 8
  %273 = load ptr, ptr %a.addr, align 8
  %count466 = getelementptr inbounds %struct.arguments, ptr %273, i32 0, i32 0
  %274 = load i64, ptr %count466, align 16
  %mul467 = mul i64 %274, 32
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %270, ptr align 16 %272, i64 %mul467, i1 false)
  br label %if.end468

if.end468:                                        ; preds = %if.then464, %if.end458
  %275 = load ptr, ptr %memory419, align 8
  %276 = load ptr, ptr %a.addr, align 8
  %arg469 = getelementptr inbounds %struct.arguments, ptr %276, i32 0, i32 1
  store ptr %275, ptr %arg469, align 8
  br label %if.end470

if.end470:                                        ; preds = %if.end468, %if.end412
  br label %while.cond471

while.cond471:                                    ; preds = %while.body475, %if.end470
  %277 = load ptr, ptr %a.addr, align 8
  %count472 = getelementptr inbounds %struct.arguments, ptr %277, i32 0, i32 0
  %278 = load i64, ptr %count472, align 16
  %279 = load i64, ptr %n413, align 8
  %cmp473 = icmp ule i64 %278, %279
  br i1 %cmp473, label %while.body475, label %while.end481

while.body475:                                    ; preds = %while.cond471
  %280 = load ptr, ptr %a.addr, align 8
  %arg476 = getelementptr inbounds %struct.arguments, ptr %280, i32 0, i32 1
  %281 = load ptr, ptr %arg476, align 8
  %282 = load ptr, ptr %a.addr, align 8
  %count477 = getelementptr inbounds %struct.arguments, ptr %282, i32 0, i32 0
  %283 = load i64, ptr %count477, align 16
  %inc478 = add i64 %283, 1
  store i64 %inc478, ptr %count477, align 16
  %arrayidx479 = getelementptr inbounds %struct.argument, ptr %281, i64 %283
  %type480 = getelementptr inbounds %struct.argument, ptr %arrayidx479, i32 0, i32 0
  store i32 0, ptr %type480, align 16
  br label %while.cond471, !llvm.loop !43

while.end481:                                     ; preds = %while.cond471
  %284 = load ptr, ptr %a.addr, align 8
  %arg482 = getelementptr inbounds %struct.arguments, ptr %284, i32 0, i32 1
  %285 = load ptr, ptr %arg482, align 8
  %286 = load i64, ptr %n413, align 8
  %arrayidx483 = getelementptr inbounds %struct.argument, ptr %285, i64 %286
  %type484 = getelementptr inbounds %struct.argument, ptr %arrayidx483, i32 0, i32 0
  %287 = load i32, ptr %type484, align 16
  %cmp485 = icmp eq i32 %287, 0
  br i1 %cmp485, label %if.then487, label %if.else491

if.then487:                                       ; preds = %while.end481
  %288 = load ptr, ptr %a.addr, align 8
  %arg488 = getelementptr inbounds %struct.arguments, ptr %288, i32 0, i32 1
  %289 = load ptr, ptr %arg488, align 8
  %290 = load i64, ptr %n413, align 8
  %arrayidx489 = getelementptr inbounds %struct.argument, ptr %289, i64 %290
  %type490 = getelementptr inbounds %struct.argument, ptr %arrayidx489, i32 0, i32 0
  store i32 5, ptr %type490, align 16
  br label %if.end499

if.else491:                                       ; preds = %while.end481
  %291 = load ptr, ptr %a.addr, align 8
  %arg492 = getelementptr inbounds %struct.arguments, ptr %291, i32 0, i32 1
  %292 = load ptr, ptr %arg492, align 8
  %293 = load i64, ptr %n413, align 8
  %arrayidx493 = getelementptr inbounds %struct.argument, ptr %292, i64 %293
  %type494 = getelementptr inbounds %struct.argument, ptr %arrayidx493, i32 0, i32 0
  %294 = load i32, ptr %type494, align 16
  %cmp495 = icmp ne i32 %294, 5
  br i1 %cmp495, label %if.then497, label %if.end498

if.then497:                                       ; preds = %if.else491
  br label %error

if.end498:                                        ; preds = %if.else491
  br label %if.end499

if.end499:                                        ; preds = %if.end498, %if.then487
  br label %if.end526

if.else500:                                       ; preds = %if.then323
  %295 = load ptr, ptr %cp, align 8
  %add.ptr501 = getelementptr inbounds i8, ptr %295, i64 -1
  %296 = load ptr, ptr %dp, align 8
  %precision_start502 = getelementptr inbounds %struct.char_directive, ptr %296, i32 0, i32 6
  store ptr %add.ptr501, ptr %precision_start502, align 8
  br label %for.cond503

for.cond503:                                      ; preds = %for.inc513, %if.else500
  %297 = load ptr, ptr %cp, align 8
  %298 = load i8, ptr %297, align 1
  %conv504 = sext i8 %298 to i32
  %cmp505 = icmp sge i32 %conv504, 48
  br i1 %cmp505, label %land.rhs507, label %land.end511

land.rhs507:                                      ; preds = %for.cond503
  %299 = load ptr, ptr %cp, align 8
  %300 = load i8, ptr %299, align 1
  %conv508 = sext i8 %300 to i32
  %cmp509 = icmp sle i32 %conv508, 57
  br label %land.end511

land.end511:                                      ; preds = %land.rhs507, %for.cond503
  %301 = phi i1 [ false, %for.cond503 ], [ %cmp509, %land.rhs507 ]
  br i1 %301, label %for.body512, label %for.end515

for.body512:                                      ; preds = %land.end511
  br label %for.inc513

for.inc513:                                       ; preds = %for.body512
  %302 = load ptr, ptr %cp, align 8
  %incdec.ptr514 = getelementptr inbounds i8, ptr %302, i32 1
  store ptr %incdec.ptr514, ptr %cp, align 8
  br label %for.cond503, !llvm.loop !44

for.end515:                                       ; preds = %land.end511
  %303 = load ptr, ptr %cp, align 8
  %304 = load ptr, ptr %dp, align 8
  %precision_end516 = getelementptr inbounds %struct.char_directive, ptr %304, i32 0, i32 7
  store ptr %303, ptr %precision_end516, align 8
  %305 = load ptr, ptr %dp, align 8
  %precision_end517 = getelementptr inbounds %struct.char_directive, ptr %305, i32 0, i32 7
  %306 = load ptr, ptr %precision_end517, align 8
  %307 = load ptr, ptr %dp, align 8
  %precision_start518 = getelementptr inbounds %struct.char_directive, ptr %307, i32 0, i32 6
  %308 = load ptr, ptr %precision_start518, align 8
  %sub.ptr.lhs.cast519 = ptrtoint ptr %306 to i64
  %sub.ptr.rhs.cast520 = ptrtoint ptr %308 to i64
  %sub.ptr.sub521 = sub i64 %sub.ptr.lhs.cast519, %sub.ptr.rhs.cast520
  store i64 %sub.ptr.sub521, ptr %precision_length, align 8
  %309 = load i64, ptr %max_precision_length, align 8
  %310 = load i64, ptr %precision_length, align 8
  %cmp522 = icmp ult i64 %309, %310
  br i1 %cmp522, label %if.then524, label %if.end525

if.then524:                                       ; preds = %for.end515
  %311 = load i64, ptr %precision_length, align 8
  store i64 %311, ptr %max_precision_length, align 8
  br label %if.end525

if.end525:                                        ; preds = %if.then524, %for.end515
  br label %if.end526

if.end526:                                        ; preds = %if.end525, %if.end499
  br label %if.end527

if.end527:                                        ; preds = %if.end526, %if.end319
  store i32 5, ptr %signed_type, align 4
  store i32 6, ptr %unsigned_type, align 4
  store i32 36, ptr %pointer_type, align 4
  store i32 27, ptr %floatingpoint_type, align 4
  %312 = load ptr, ptr %cp, align 8
  %313 = load i8, ptr %312, align 1
  %conv529 = sext i8 %313 to i32
  %cmp530 = icmp eq i32 %conv529, 104
  br i1 %cmp530, label %if.then532, label %if.else542

if.then532:                                       ; preds = %if.end527
  %314 = load ptr, ptr %cp, align 8
  %arrayidx533 = getelementptr inbounds i8, ptr %314, i64 1
  %315 = load i8, ptr %arrayidx533, align 1
  %conv534 = sext i8 %315 to i32
  %cmp535 = icmp eq i32 %conv534, 104
  br i1 %cmp535, label %if.then537, label %if.else539

if.then537:                                       ; preds = %if.then532
  store i32 1, ptr %signed_type, align 4
  store i32 2, ptr %unsigned_type, align 4
  store i32 34, ptr %pointer_type, align 4
  %316 = load ptr, ptr %cp, align 8
  %add.ptr538 = getelementptr inbounds i8, ptr %316, i64 2
  store ptr %add.ptr538, ptr %cp, align 8
  br label %if.end541

if.else539:                                       ; preds = %if.then532
  store i32 3, ptr %signed_type, align 4
  store i32 4, ptr %unsigned_type, align 4
  store i32 35, ptr %pointer_type, align 4
  %317 = load ptr, ptr %cp, align 8
  %incdec.ptr540 = getelementptr inbounds i8, ptr %317, i32 1
  store ptr %incdec.ptr540, ptr %cp, align 8
  br label %if.end541

if.end541:                                        ; preds = %if.else539, %if.then537
  br label %if.end693

if.else542:                                       ; preds = %if.end527
  %318 = load ptr, ptr %cp, align 8
  %319 = load i8, ptr %318, align 1
  %conv543 = sext i8 %319 to i32
  %cmp544 = icmp eq i32 %conv543, 108
  br i1 %cmp544, label %if.then546, label %if.else556

if.then546:                                       ; preds = %if.else542
  %320 = load ptr, ptr %cp, align 8
  %arrayidx547 = getelementptr inbounds i8, ptr %320, i64 1
  %321 = load i8, ptr %arrayidx547, align 1
  %conv548 = sext i8 %321 to i32
  %cmp549 = icmp eq i32 %conv548, 108
  br i1 %cmp549, label %if.then551, label %if.else553

if.then551:                                       ; preds = %if.then546
  store i32 9, ptr %signed_type, align 4
  store i32 10, ptr %unsigned_type, align 4
  store i32 38, ptr %pointer_type, align 4
  store i32 28, ptr %floatingpoint_type, align 4
  %322 = load ptr, ptr %cp, align 8
  %add.ptr552 = getelementptr inbounds i8, ptr %322, i64 2
  store ptr %add.ptr552, ptr %cp, align 8
  br label %if.end555

if.else553:                                       ; preds = %if.then546
  store i32 7, ptr %signed_type, align 4
  store i32 8, ptr %unsigned_type, align 4
  store i32 37, ptr %pointer_type, align 4
  %323 = load ptr, ptr %cp, align 8
  %incdec.ptr554 = getelementptr inbounds i8, ptr %323, i32 1
  store ptr %incdec.ptr554, ptr %cp, align 8
  br label %if.end555

if.end555:                                        ; preds = %if.else553, %if.then551
  br label %if.end692

if.else556:                                       ; preds = %if.else542
  %324 = load ptr, ptr %cp, align 8
  %325 = load i8, ptr %324, align 1
  %conv557 = sext i8 %325 to i32
  %cmp558 = icmp eq i32 %conv557, 106
  br i1 %cmp558, label %if.then560, label %if.else562

if.then560:                                       ; preds = %if.else556
  store i32 7, ptr %signed_type, align 4
  store i32 8, ptr %unsigned_type, align 4
  store i32 37, ptr %pointer_type, align 4
  %326 = load ptr, ptr %cp, align 8
  %incdec.ptr561 = getelementptr inbounds i8, ptr %326, i32 1
  store ptr %incdec.ptr561, ptr %cp, align 8
  br label %if.end691

if.else562:                                       ; preds = %if.else556
  %327 = load ptr, ptr %cp, align 8
  %328 = load i8, ptr %327, align 1
  %conv563 = sext i8 %328 to i32
  %cmp564 = icmp eq i32 %conv563, 122
  br i1 %cmp564, label %if.then569, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else562
  %329 = load ptr, ptr %cp, align 8
  %330 = load i8, ptr %329, align 1
  %conv566 = sext i8 %330 to i32
  %cmp567 = icmp eq i32 %conv566, 90
  br i1 %cmp567, label %if.then569, label %if.else571

if.then569:                                       ; preds = %lor.lhs.false, %if.else562
  store i32 7, ptr %signed_type, align 4
  store i32 8, ptr %unsigned_type, align 4
  store i32 37, ptr %pointer_type, align 4
  %331 = load ptr, ptr %cp, align 8
  %incdec.ptr570 = getelementptr inbounds i8, ptr %331, i32 1
  store ptr %incdec.ptr570, ptr %cp, align 8
  br label %if.end690

if.else571:                                       ; preds = %lor.lhs.false
  %332 = load ptr, ptr %cp, align 8
  %333 = load i8, ptr %332, align 1
  %conv572 = sext i8 %333 to i32
  %cmp573 = icmp eq i32 %conv572, 116
  br i1 %cmp573, label %if.then575, label %if.else577

if.then575:                                       ; preds = %if.else571
  store i32 7, ptr %signed_type, align 4
  store i32 8, ptr %unsigned_type, align 4
  store i32 37, ptr %pointer_type, align 4
  %334 = load ptr, ptr %cp, align 8
  %incdec.ptr576 = getelementptr inbounds i8, ptr %334, i32 1
  store ptr %incdec.ptr576, ptr %cp, align 8
  br label %if.end689

if.else577:                                       ; preds = %if.else571
  %335 = load ptr, ptr %cp, align 8
  %336 = load i8, ptr %335, align 1
  %conv578 = sext i8 %336 to i32
  %cmp579 = icmp eq i32 %conv578, 119
  br i1 %cmp579, label %if.then581, label %if.else681

if.then581:                                       ; preds = %if.else577
  %337 = load ptr, ptr %cp, align 8
  %arrayidx582 = getelementptr inbounds i8, ptr %337, i64 1
  %338 = load i8, ptr %arrayidx582, align 1
  %conv583 = sext i8 %338 to i32
  %cmp584 = icmp eq i32 %conv583, 102
  br i1 %cmp584, label %if.then586, label %if.else633

if.then586:                                       ; preds = %if.then581
  %339 = load ptr, ptr %cp, align 8
  %arrayidx587 = getelementptr inbounds i8, ptr %339, i64 2
  %340 = load i8, ptr %arrayidx587, align 1
  %conv588 = sext i8 %340 to i32
  %cmp589 = icmp eq i32 %conv588, 56
  br i1 %cmp589, label %if.then591, label %if.else593

if.then591:                                       ; preds = %if.then586
  store i32 19, ptr %signed_type, align 4
  store i32 20, ptr %unsigned_type, align 4
  store i32 43, ptr %pointer_type, align 4
  %341 = load ptr, ptr %cp, align 8
  %add.ptr592 = getelementptr inbounds i8, ptr %341, i64 3
  store ptr %add.ptr592, ptr %cp, align 8
  br label %if.end632

if.else593:                                       ; preds = %if.then586
  %342 = load ptr, ptr %cp, align 8
  %arrayidx594 = getelementptr inbounds i8, ptr %342, i64 2
  %343 = load i8, ptr %arrayidx594, align 1
  %conv595 = sext i8 %343 to i32
  %cmp596 = icmp eq i32 %conv595, 49
  br i1 %cmp596, label %land.lhs.true598, label %if.else605

land.lhs.true598:                                 ; preds = %if.else593
  %344 = load ptr, ptr %cp, align 8
  %arrayidx599 = getelementptr inbounds i8, ptr %344, i64 3
  %345 = load i8, ptr %arrayidx599, align 1
  %conv600 = sext i8 %345 to i32
  %cmp601 = icmp eq i32 %conv600, 54
  br i1 %cmp601, label %if.then603, label %if.else605

if.then603:                                       ; preds = %land.lhs.true598
  store i32 21, ptr %signed_type, align 4
  store i32 22, ptr %unsigned_type, align 4
  store i32 44, ptr %pointer_type, align 4
  %346 = load ptr, ptr %cp, align 8
  %add.ptr604 = getelementptr inbounds i8, ptr %346, i64 4
  store ptr %add.ptr604, ptr %cp, align 8
  br label %if.end631

if.else605:                                       ; preds = %land.lhs.true598, %if.else593
  %347 = load ptr, ptr %cp, align 8
  %arrayidx606 = getelementptr inbounds i8, ptr %347, i64 2
  %348 = load i8, ptr %arrayidx606, align 1
  %conv607 = sext i8 %348 to i32
  %cmp608 = icmp eq i32 %conv607, 51
  br i1 %cmp608, label %land.lhs.true610, label %if.else617

land.lhs.true610:                                 ; preds = %if.else605
  %349 = load ptr, ptr %cp, align 8
  %arrayidx611 = getelementptr inbounds i8, ptr %349, i64 3
  %350 = load i8, ptr %arrayidx611, align 1
  %conv612 = sext i8 %350 to i32
  %cmp613 = icmp eq i32 %conv612, 50
  br i1 %cmp613, label %if.then615, label %if.else617

if.then615:                                       ; preds = %land.lhs.true610
  store i32 23, ptr %signed_type, align 4
  store i32 24, ptr %unsigned_type, align 4
  store i32 45, ptr %pointer_type, align 4
  %351 = load ptr, ptr %cp, align 8
  %add.ptr616 = getelementptr inbounds i8, ptr %351, i64 4
  store ptr %add.ptr616, ptr %cp, align 8
  br label %if.end630

if.else617:                                       ; preds = %land.lhs.true610, %if.else605
  %352 = load ptr, ptr %cp, align 8
  %arrayidx618 = getelementptr inbounds i8, ptr %352, i64 2
  %353 = load i8, ptr %arrayidx618, align 1
  %conv619 = sext i8 %353 to i32
  %cmp620 = icmp eq i32 %conv619, 54
  br i1 %cmp620, label %land.lhs.true622, label %if.end629

land.lhs.true622:                                 ; preds = %if.else617
  %354 = load ptr, ptr %cp, align 8
  %arrayidx623 = getelementptr inbounds i8, ptr %354, i64 3
  %355 = load i8, ptr %arrayidx623, align 1
  %conv624 = sext i8 %355 to i32
  %cmp625 = icmp eq i32 %conv624, 52
  br i1 %cmp625, label %if.then627, label %if.end629

if.then627:                                       ; preds = %land.lhs.true622
  store i32 25, ptr %signed_type, align 4
  store i32 26, ptr %unsigned_type, align 4
  store i32 46, ptr %pointer_type, align 4
  %356 = load ptr, ptr %cp, align 8
  %add.ptr628 = getelementptr inbounds i8, ptr %356, i64 4
  store ptr %add.ptr628, ptr %cp, align 8
  br label %if.end629

if.end629:                                        ; preds = %if.then627, %land.lhs.true622, %if.else617
  br label %if.end630

if.end630:                                        ; preds = %if.end629, %if.then615
  br label %if.end631

if.end631:                                        ; preds = %if.end630, %if.then603
  br label %if.end632

if.end632:                                        ; preds = %if.end631, %if.then591
  br label %if.end680

if.else633:                                       ; preds = %if.then581
  %357 = load ptr, ptr %cp, align 8
  %arrayidx634 = getelementptr inbounds i8, ptr %357, i64 1
  %358 = load i8, ptr %arrayidx634, align 1
  %conv635 = sext i8 %358 to i32
  %cmp636 = icmp eq i32 %conv635, 56
  br i1 %cmp636, label %if.then638, label %if.else640

if.then638:                                       ; preds = %if.else633
  store i32 11, ptr %signed_type, align 4
  store i32 12, ptr %unsigned_type, align 4
  store i32 39, ptr %pointer_type, align 4
  %359 = load ptr, ptr %cp, align 8
  %add.ptr639 = getelementptr inbounds i8, ptr %359, i64 2
  store ptr %add.ptr639, ptr %cp, align 8
  br label %if.end679

if.else640:                                       ; preds = %if.else633
  %360 = load ptr, ptr %cp, align 8
  %arrayidx641 = getelementptr inbounds i8, ptr %360, i64 1
  %361 = load i8, ptr %arrayidx641, align 1
  %conv642 = sext i8 %361 to i32
  %cmp643 = icmp eq i32 %conv642, 49
  br i1 %cmp643, label %land.lhs.true645, label %if.else652

land.lhs.true645:                                 ; preds = %if.else640
  %362 = load ptr, ptr %cp, align 8
  %arrayidx646 = getelementptr inbounds i8, ptr %362, i64 2
  %363 = load i8, ptr %arrayidx646, align 1
  %conv647 = sext i8 %363 to i32
  %cmp648 = icmp eq i32 %conv647, 54
  br i1 %cmp648, label %if.then650, label %if.else652

if.then650:                                       ; preds = %land.lhs.true645
  store i32 13, ptr %signed_type, align 4
  store i32 14, ptr %unsigned_type, align 4
  store i32 40, ptr %pointer_type, align 4
  %364 = load ptr, ptr %cp, align 8
  %add.ptr651 = getelementptr inbounds i8, ptr %364, i64 3
  store ptr %add.ptr651, ptr %cp, align 8
  br label %if.end678

if.else652:                                       ; preds = %land.lhs.true645, %if.else640
  %365 = load ptr, ptr %cp, align 8
  %arrayidx653 = getelementptr inbounds i8, ptr %365, i64 1
  %366 = load i8, ptr %arrayidx653, align 1
  %conv654 = sext i8 %366 to i32
  %cmp655 = icmp eq i32 %conv654, 51
  br i1 %cmp655, label %land.lhs.true657, label %if.else664

land.lhs.true657:                                 ; preds = %if.else652
  %367 = load ptr, ptr %cp, align 8
  %arrayidx658 = getelementptr inbounds i8, ptr %367, i64 2
  %368 = load i8, ptr %arrayidx658, align 1
  %conv659 = sext i8 %368 to i32
  %cmp660 = icmp eq i32 %conv659, 50
  br i1 %cmp660, label %if.then662, label %if.else664

if.then662:                                       ; preds = %land.lhs.true657
  store i32 15, ptr %signed_type, align 4
  store i32 16, ptr %unsigned_type, align 4
  store i32 41, ptr %pointer_type, align 4
  %369 = load ptr, ptr %cp, align 8
  %add.ptr663 = getelementptr inbounds i8, ptr %369, i64 3
  store ptr %add.ptr663, ptr %cp, align 8
  br label %if.end677

if.else664:                                       ; preds = %land.lhs.true657, %if.else652
  %370 = load ptr, ptr %cp, align 8
  %arrayidx665 = getelementptr inbounds i8, ptr %370, i64 1
  %371 = load i8, ptr %arrayidx665, align 1
  %conv666 = sext i8 %371 to i32
  %cmp667 = icmp eq i32 %conv666, 54
  br i1 %cmp667, label %land.lhs.true669, label %if.end676

land.lhs.true669:                                 ; preds = %if.else664
  %372 = load ptr, ptr %cp, align 8
  %arrayidx670 = getelementptr inbounds i8, ptr %372, i64 2
  %373 = load i8, ptr %arrayidx670, align 1
  %conv671 = sext i8 %373 to i32
  %cmp672 = icmp eq i32 %conv671, 52
  br i1 %cmp672, label %if.then674, label %if.end676

if.then674:                                       ; preds = %land.lhs.true669
  store i32 17, ptr %signed_type, align 4
  store i32 18, ptr %unsigned_type, align 4
  store i32 42, ptr %pointer_type, align 4
  %374 = load ptr, ptr %cp, align 8
  %add.ptr675 = getelementptr inbounds i8, ptr %374, i64 3
  store ptr %add.ptr675, ptr %cp, align 8
  br label %if.end676

if.end676:                                        ; preds = %if.then674, %land.lhs.true669, %if.else664
  br label %if.end677

if.end677:                                        ; preds = %if.end676, %if.then662
  br label %if.end678

if.end678:                                        ; preds = %if.end677, %if.then650
  br label %if.end679

if.end679:                                        ; preds = %if.end678, %if.then638
  br label %if.end680

if.end680:                                        ; preds = %if.end679, %if.end632
  br label %if.end688

if.else681:                                       ; preds = %if.else577
  %375 = load ptr, ptr %cp, align 8
  %376 = load i8, ptr %375, align 1
  %conv682 = sext i8 %376 to i32
  %cmp683 = icmp eq i32 %conv682, 76
  br i1 %cmp683, label %if.then685, label %if.end687

if.then685:                                       ; preds = %if.else681
  store i32 9, ptr %signed_type, align 4
  store i32 10, ptr %unsigned_type, align 4
  store i32 38, ptr %pointer_type, align 4
  store i32 28, ptr %floatingpoint_type, align 4
  %377 = load ptr, ptr %cp, align 8
  %incdec.ptr686 = getelementptr inbounds i8, ptr %377, i32 1
  store ptr %incdec.ptr686, ptr %cp, align 8
  br label %if.end687

if.end687:                                        ; preds = %if.then685, %if.else681
  br label %if.end688

if.end688:                                        ; preds = %if.end687, %if.end680
  br label %if.end689

if.end689:                                        ; preds = %if.end688, %if.then575
  br label %if.end690

if.end690:                                        ; preds = %if.end689, %if.then569
  br label %if.end691

if.end691:                                        ; preds = %if.end690, %if.then560
  br label %if.end692

if.end692:                                        ; preds = %if.end691, %if.end555
  br label %if.end693

if.end693:                                        ; preds = %if.end692, %if.end541
  %378 = load i32, ptr %pointer_type, align 4
  %379 = load ptr, ptr %cp, align 8
  %incdec.ptr694 = getelementptr inbounds i8, ptr %379, i32 1
  store ptr %incdec.ptr694, ptr %cp, align 8
  %380 = load i8, ptr %379, align 1
  store i8 %380, ptr %c, align 1
  %381 = load i8, ptr %c, align 1
  %conv695 = sext i8 %381 to i32
  switch i32 %conv695, label %sw.default [
    i32 100, label %sw.bb
    i32 105, label %sw.bb
    i32 98, label %sw.bb696
    i32 111, label %sw.bb696
    i32 117, label %sw.bb696
    i32 120, label %sw.bb696
    i32 88, label %sw.bb696
    i32 66, label %sw.bb696
    i32 102, label %sw.bb697
    i32 70, label %sw.bb697
    i32 101, label %sw.bb697
    i32 69, label %sw.bb697
    i32 103, label %sw.bb697
    i32 71, label %sw.bb697
    i32 97, label %sw.bb697
    i32 65, label %sw.bb697
    i32 99, label %sw.bb698
    i32 67, label %sw.bb707
    i32 115, label %sw.bb708
    i32 83, label %sw.bb717
    i32 112, label %sw.bb718
    i32 37, label %sw.bb719
  ]

sw.bb:                                            ; preds = %if.end693, %if.end693
  %382 = load i32, ptr %signed_type, align 4
  store i32 %382, ptr %type528, align 4
  br label %sw.epilog

sw.bb696:                                         ; preds = %if.end693, %if.end693, %if.end693, %if.end693, %if.end693, %if.end693
  %383 = load i32, ptr %unsigned_type, align 4
  store i32 %383, ptr %type528, align 4
  br label %sw.epilog

sw.bb697:                                         ; preds = %if.end693, %if.end693, %if.end693, %if.end693, %if.end693, %if.end693, %if.end693, %if.end693
  %384 = load i32, ptr %floatingpoint_type, align 4
  store i32 %384, ptr %type528, align 4
  br label %sw.epilog

sw.bb698:                                         ; preds = %if.end693
  %385 = load i32, ptr %signed_type, align 4
  %cmp699 = icmp eq i32 %385, 7
  br i1 %cmp699, label %if.then704, label %lor.lhs.false701

lor.lhs.false701:                                 ; preds = %sw.bb698
  %386 = load i32, ptr %signed_type, align 4
  %cmp702 = icmp eq i32 %386, 9
  br i1 %cmp702, label %if.then704, label %if.else705

if.then704:                                       ; preds = %lor.lhs.false701, %sw.bb698
  store i32 30, ptr %type528, align 4
  br label %if.end706

if.else705:                                       ; preds = %lor.lhs.false701
  store i32 29, ptr %type528, align 4
  br label %if.end706

if.end706:                                        ; preds = %if.else705, %if.then704
  br label %sw.epilog

sw.bb707:                                         ; preds = %if.end693
  store i32 30, ptr %type528, align 4
  store i8 99, ptr %c, align 1
  br label %sw.epilog

sw.bb708:                                         ; preds = %if.end693
  %387 = load i32, ptr %signed_type, align 4
  %cmp709 = icmp eq i32 %387, 7
  br i1 %cmp709, label %if.then714, label %lor.lhs.false711

lor.lhs.false711:                                 ; preds = %sw.bb708
  %388 = load i32, ptr %signed_type, align 4
  %cmp712 = icmp eq i32 %388, 9
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %lor.lhs.false711, %sw.bb708
  store i32 32, ptr %type528, align 4
  br label %if.end716

if.else715:                                       ; preds = %lor.lhs.false711
  store i32 31, ptr %type528, align 4
  br label %if.end716

if.end716:                                        ; preds = %if.else715, %if.then714
  br label %sw.epilog

sw.bb717:                                         ; preds = %if.end693
  store i32 32, ptr %type528, align 4
  store i8 115, ptr %c, align 1
  br label %sw.epilog

sw.bb718:                                         ; preds = %if.end693
  store i32 33, ptr %type528, align 4
  br label %sw.epilog

sw.bb719:                                         ; preds = %if.end693
  store i32 0, ptr %type528, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end693
  br label %error

sw.epilog:                                        ; preds = %sw.bb719, %sw.bb718, %sw.bb717, %if.end716, %sw.bb707, %if.end706, %sw.bb697, %sw.bb696, %sw.bb
  %389 = load i32, ptr %type528, align 4
  %cmp720 = icmp ne i32 %389, 0
  br i1 %cmp720, label %if.then722, label %if.end823

if.then722:                                       ; preds = %sw.epilog
  %390 = load i64, ptr %arg_index, align 8
  %391 = load ptr, ptr %dp, align 8
  %arg_index723 = getelementptr inbounds %struct.char_directive, ptr %391, i32 0, i32 10
  store i64 %390, ptr %arg_index723, align 8
  %392 = load ptr, ptr %dp, align 8
  %arg_index724 = getelementptr inbounds %struct.char_directive, ptr %392, i32 0, i32 10
  %393 = load i64, ptr %arg_index724, align 8
  %cmp725 = icmp eq i64 %393, -1
  br i1 %cmp725, label %if.then727, label %if.end735

if.then727:                                       ; preds = %if.then722
  %394 = load i64, ptr %arg_posn, align 8
  %inc728 = add i64 %394, 1
  store i64 %inc728, ptr %arg_posn, align 8
  %395 = load ptr, ptr %dp, align 8
  %arg_index729 = getelementptr inbounds %struct.char_directive, ptr %395, i32 0, i32 10
  store i64 %394, ptr %arg_index729, align 8
  %396 = load ptr, ptr %dp, align 8
  %arg_index730 = getelementptr inbounds %struct.char_directive, ptr %396, i32 0, i32 10
  %397 = load i64, ptr %arg_index730, align 8
  %cmp731 = icmp eq i64 %397, -1
  br i1 %cmp731, label %if.then733, label %if.end734

if.then733:                                       ; preds = %if.then727
  br label %error

if.end734:                                        ; preds = %if.then727
  br label %if.end735

if.end735:                                        ; preds = %if.end734, %if.then722
  %398 = load ptr, ptr %dp, align 8
  %arg_index737 = getelementptr inbounds %struct.char_directive, ptr %398, i32 0, i32 10
  %399 = load i64, ptr %arg_index737, align 8
  store i64 %399, ptr %n736, align 8
  %400 = load i64, ptr %n736, align 8
  %401 = load i64, ptr %a_allocated, align 8
  %cmp738 = icmp uge i64 %400, %401
  br i1 %cmp738, label %if.then740, label %if.end793

if.then740:                                       ; preds = %if.end735
  %402 = load i64, ptr %a_allocated, align 8
  %cmp743 = icmp ule i64 %402, 9223372036854775807
  br i1 %cmp743, label %cond.true745, label %cond.false747

cond.true745:                                     ; preds = %if.then740
  %403 = load i64, ptr %a_allocated, align 8
  %mul746 = mul i64 %403, 2
  br label %cond.end748

cond.false747:                                    ; preds = %if.then740
  br label %cond.end748

cond.end748:                                      ; preds = %cond.false747, %cond.true745
  %cond749 = phi i64 [ %mul746, %cond.true745 ], [ -1, %cond.false747 ]
  store i64 %cond749, ptr %a_allocated, align 8
  %404 = load i64, ptr %a_allocated, align 8
  %405 = load i64, ptr %n736, align 8
  %cmp750 = icmp ule i64 %404, %405
  br i1 %cmp750, label %if.then752, label %if.end754

if.then752:                                       ; preds = %cond.end748
  %406 = load i64, ptr %n736, align 8
  %call753 = call i64 @xsum(i64 noundef %406, i64 noundef 1) #23
  store i64 %call753, ptr %a_allocated, align 8
  br label %if.end754

if.end754:                                        ; preds = %if.then752, %cond.end748
  %407 = load i64, ptr %a_allocated, align 8
  %cmp755 = icmp ule i64 %407, 576460752303423487
  br i1 %cmp755, label %cond.true757, label %cond.false759

cond.true757:                                     ; preds = %if.end754
  %408 = load i64, ptr %a_allocated, align 8
  %mul758 = mul i64 %408, 32
  br label %cond.end760

cond.false759:                                    ; preds = %if.end754
  br label %cond.end760

cond.end760:                                      ; preds = %cond.false759, %cond.true757
  %cond761 = phi i64 [ %mul758, %cond.true757 ], [ -1, %cond.false759 ]
  store i64 %cond761, ptr %memory_size741, align 8
  %409 = load i64, ptr %memory_size741, align 8
  %cmp762 = icmp eq i64 %409, -1
  br i1 %cmp762, label %if.then764, label %if.end765

if.then764:                                       ; preds = %cond.end760
  br label %out_of_memory

if.end765:                                        ; preds = %cond.end760
  %410 = load ptr, ptr %a.addr, align 8
  %arg766 = getelementptr inbounds %struct.arguments, ptr %410, i32 0, i32 1
  %411 = load ptr, ptr %arg766, align 8
  %412 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg767 = getelementptr inbounds %struct.arguments, ptr %412, i32 0, i32 2
  %arraydecay768 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg767, i64 0, i64 0
  %cmp769 = icmp ne ptr %411, %arraydecay768
  br i1 %cmp769, label %cond.true771, label %cond.false774

cond.true771:                                     ; preds = %if.end765
  %413 = load ptr, ptr %a.addr, align 8
  %arg772 = getelementptr inbounds %struct.arguments, ptr %413, i32 0, i32 1
  %414 = load ptr, ptr %arg772, align 8
  %415 = load i64, ptr %memory_size741, align 8
  %call773 = call ptr @rpl_realloc(ptr noundef %414, i64 noundef %415)
  br label %cond.end776

cond.false774:                                    ; preds = %if.end765
  %416 = load i64, ptr %memory_size741, align 8
  %call775 = call noalias ptr @malloc(i64 noundef %416) #29
  br label %cond.end776

cond.end776:                                      ; preds = %cond.false774, %cond.true771
  %cond777 = phi ptr [ %call773, %cond.true771 ], [ %call775, %cond.false774 ]
  store ptr %cond777, ptr %memory742, align 8
  %417 = load ptr, ptr %memory742, align 8
  %cmp778 = icmp eq ptr %417, null
  br i1 %cmp778, label %if.then780, label %if.end781

if.then780:                                       ; preds = %cond.end776
  br label %out_of_memory

if.end781:                                        ; preds = %cond.end776
  %418 = load ptr, ptr %a.addr, align 8
  %arg782 = getelementptr inbounds %struct.arguments, ptr %418, i32 0, i32 1
  %419 = load ptr, ptr %arg782, align 8
  %420 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg783 = getelementptr inbounds %struct.arguments, ptr %420, i32 0, i32 2
  %arraydecay784 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg783, i64 0, i64 0
  %cmp785 = icmp eq ptr %419, %arraydecay784
  br i1 %cmp785, label %if.then787, label %if.end791

if.then787:                                       ; preds = %if.end781
  %421 = load ptr, ptr %memory742, align 8
  %422 = load ptr, ptr %a.addr, align 8
  %arg788 = getelementptr inbounds %struct.arguments, ptr %422, i32 0, i32 1
  %423 = load ptr, ptr %arg788, align 8
  %424 = load ptr, ptr %a.addr, align 8
  %count789 = getelementptr inbounds %struct.arguments, ptr %424, i32 0, i32 0
  %425 = load i64, ptr %count789, align 16
  %mul790 = mul i64 %425, 32
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %421, ptr align 16 %423, i64 %mul790, i1 false)
  br label %if.end791

if.end791:                                        ; preds = %if.then787, %if.end781
  %426 = load ptr, ptr %memory742, align 8
  %427 = load ptr, ptr %a.addr, align 8
  %arg792 = getelementptr inbounds %struct.arguments, ptr %427, i32 0, i32 1
  store ptr %426, ptr %arg792, align 8
  br label %if.end793

if.end793:                                        ; preds = %if.end791, %if.end735
  br label %while.cond794

while.cond794:                                    ; preds = %while.body798, %if.end793
  %428 = load ptr, ptr %a.addr, align 8
  %count795 = getelementptr inbounds %struct.arguments, ptr %428, i32 0, i32 0
  %429 = load i64, ptr %count795, align 16
  %430 = load i64, ptr %n736, align 8
  %cmp796 = icmp ule i64 %429, %430
  br i1 %cmp796, label %while.body798, label %while.end804

while.body798:                                    ; preds = %while.cond794
  %431 = load ptr, ptr %a.addr, align 8
  %arg799 = getelementptr inbounds %struct.arguments, ptr %431, i32 0, i32 1
  %432 = load ptr, ptr %arg799, align 8
  %433 = load ptr, ptr %a.addr, align 8
  %count800 = getelementptr inbounds %struct.arguments, ptr %433, i32 0, i32 0
  %434 = load i64, ptr %count800, align 16
  %inc801 = add i64 %434, 1
  store i64 %inc801, ptr %count800, align 16
  %arrayidx802 = getelementptr inbounds %struct.argument, ptr %432, i64 %434
  %type803 = getelementptr inbounds %struct.argument, ptr %arrayidx802, i32 0, i32 0
  store i32 0, ptr %type803, align 16
  br label %while.cond794, !llvm.loop !45

while.end804:                                     ; preds = %while.cond794
  %435 = load ptr, ptr %a.addr, align 8
  %arg805 = getelementptr inbounds %struct.arguments, ptr %435, i32 0, i32 1
  %436 = load ptr, ptr %arg805, align 8
  %437 = load i64, ptr %n736, align 8
  %arrayidx806 = getelementptr inbounds %struct.argument, ptr %436, i64 %437
  %type807 = getelementptr inbounds %struct.argument, ptr %arrayidx806, i32 0, i32 0
  %438 = load i32, ptr %type807, align 16
  %cmp808 = icmp eq i32 %438, 0
  br i1 %cmp808, label %if.then810, label %if.else814

if.then810:                                       ; preds = %while.end804
  %439 = load i32, ptr %type528, align 4
  %440 = load ptr, ptr %a.addr, align 8
  %arg811 = getelementptr inbounds %struct.arguments, ptr %440, i32 0, i32 1
  %441 = load ptr, ptr %arg811, align 8
  %442 = load i64, ptr %n736, align 8
  %arrayidx812 = getelementptr inbounds %struct.argument, ptr %441, i64 %442
  %type813 = getelementptr inbounds %struct.argument, ptr %arrayidx812, i32 0, i32 0
  store i32 %439, ptr %type813, align 16
  br label %if.end822

if.else814:                                       ; preds = %while.end804
  %443 = load ptr, ptr %a.addr, align 8
  %arg815 = getelementptr inbounds %struct.arguments, ptr %443, i32 0, i32 1
  %444 = load ptr, ptr %arg815, align 8
  %445 = load i64, ptr %n736, align 8
  %arrayidx816 = getelementptr inbounds %struct.argument, ptr %444, i64 %445
  %type817 = getelementptr inbounds %struct.argument, ptr %arrayidx816, i32 0, i32 0
  %446 = load i32, ptr %type817, align 16
  %447 = load i32, ptr %type528, align 4
  %cmp818 = icmp ne i32 %446, %447
  br i1 %cmp818, label %if.then820, label %if.end821

if.then820:                                       ; preds = %if.else814
  br label %error

if.end821:                                        ; preds = %if.else814
  br label %if.end822

if.end822:                                        ; preds = %if.end821, %if.then810
  br label %if.end823

if.end823:                                        ; preds = %if.end822, %sw.epilog
  %448 = load i8, ptr %c, align 1
  %449 = load ptr, ptr %dp, align 8
  %conversion = getelementptr inbounds %struct.char_directive, ptr %449, i32 0, i32 9
  store i8 %448, ptr %conversion, align 8
  %450 = load ptr, ptr %cp, align 8
  %451 = load ptr, ptr %dp, align 8
  %dir_end = getelementptr inbounds %struct.char_directive, ptr %451, i32 0, i32 1
  store ptr %450, ptr %dir_end, align 8
  %452 = load ptr, ptr %d.addr, align 8
  %count824 = getelementptr inbounds %struct.char_directives, ptr %452, i32 0, i32 0
  %453 = load i64, ptr %count824, align 8
  %inc825 = add i64 %453, 1
  store i64 %inc825, ptr %count824, align 8
  %454 = load ptr, ptr %d.addr, align 8
  %count826 = getelementptr inbounds %struct.char_directives, ptr %454, i32 0, i32 0
  %455 = load i64, ptr %count826, align 8
  %456 = load i64, ptr %d_allocated, align 8
  %cmp827 = icmp uge i64 %455, %456
  br i1 %cmp827, label %if.then829, label %if.end877

if.then829:                                       ; preds = %if.end823
  %457 = load i64, ptr %d_allocated, align 8
  %cmp832 = icmp ule i64 %457, 9223372036854775807
  br i1 %cmp832, label %cond.true834, label %cond.false836

cond.true834:                                     ; preds = %if.then829
  %458 = load i64, ptr %d_allocated, align 8
  %mul835 = mul i64 %458, 2
  br label %cond.end837

cond.false836:                                    ; preds = %if.then829
  br label %cond.end837

cond.end837:                                      ; preds = %cond.false836, %cond.true834
  %cond838 = phi i64 [ %mul835, %cond.true834 ], [ -1, %cond.false836 ]
  store i64 %cond838, ptr %d_allocated, align 8
  %459 = load i64, ptr %d_allocated, align 8
  %cmp839 = icmp ule i64 %459, 209622091746699450
  br i1 %cmp839, label %cond.true841, label %cond.false843

cond.true841:                                     ; preds = %cond.end837
  %460 = load i64, ptr %d_allocated, align 8
  %mul842 = mul i64 %460, 88
  br label %cond.end844

cond.false843:                                    ; preds = %cond.end837
  br label %cond.end844

cond.end844:                                      ; preds = %cond.false843, %cond.true841
  %cond845 = phi i64 [ %mul842, %cond.true841 ], [ -1, %cond.false843 ]
  store i64 %cond845, ptr %memory_size830, align 8
  %461 = load i64, ptr %memory_size830, align 8
  %cmp846 = icmp eq i64 %461, -1
  br i1 %cmp846, label %if.then848, label %if.end849

if.then848:                                       ; preds = %cond.end844
  br label %out_of_memory

if.end849:                                        ; preds = %cond.end844
  %462 = load ptr, ptr %d.addr, align 8
  %dir850 = getelementptr inbounds %struct.char_directives, ptr %462, i32 0, i32 1
  %463 = load ptr, ptr %dir850, align 8
  %464 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir851 = getelementptr inbounds %struct.char_directives, ptr %464, i32 0, i32 4
  %arraydecay852 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir851, i64 0, i64 0
  %cmp853 = icmp ne ptr %463, %arraydecay852
  br i1 %cmp853, label %cond.true855, label %cond.false858

cond.true855:                                     ; preds = %if.end849
  %465 = load ptr, ptr %d.addr, align 8
  %dir856 = getelementptr inbounds %struct.char_directives, ptr %465, i32 0, i32 1
  %466 = load ptr, ptr %dir856, align 8
  %467 = load i64, ptr %memory_size830, align 8
  %call857 = call ptr @rpl_realloc(ptr noundef %466, i64 noundef %467)
  br label %cond.end860

cond.false858:                                    ; preds = %if.end849
  %468 = load i64, ptr %memory_size830, align 8
  %call859 = call noalias ptr @malloc(i64 noundef %468) #29
  br label %cond.end860

cond.end860:                                      ; preds = %cond.false858, %cond.true855
  %cond861 = phi ptr [ %call857, %cond.true855 ], [ %call859, %cond.false858 ]
  store ptr %cond861, ptr %memory831, align 8
  %469 = load ptr, ptr %memory831, align 8
  %cmp862 = icmp eq ptr %469, null
  br i1 %cmp862, label %if.then864, label %if.end865

if.then864:                                       ; preds = %cond.end860
  br label %out_of_memory

if.end865:                                        ; preds = %cond.end860
  %470 = load ptr, ptr %d.addr, align 8
  %dir866 = getelementptr inbounds %struct.char_directives, ptr %470, i32 0, i32 1
  %471 = load ptr, ptr %dir866, align 8
  %472 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir867 = getelementptr inbounds %struct.char_directives, ptr %472, i32 0, i32 4
  %arraydecay868 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir867, i64 0, i64 0
  %cmp869 = icmp eq ptr %471, %arraydecay868
  br i1 %cmp869, label %if.then871, label %if.end875

if.then871:                                       ; preds = %if.end865
  %473 = load ptr, ptr %memory831, align 8
  %474 = load ptr, ptr %d.addr, align 8
  %dir872 = getelementptr inbounds %struct.char_directives, ptr %474, i32 0, i32 1
  %475 = load ptr, ptr %dir872, align 8
  %476 = load ptr, ptr %d.addr, align 8
  %count873 = getelementptr inbounds %struct.char_directives, ptr %476, i32 0, i32 0
  %477 = load i64, ptr %count873, align 8
  %mul874 = mul i64 %477, 88
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %473, ptr align 8 %475, i64 %mul874, i1 false)
  br label %if.end875

if.end875:                                        ; preds = %if.then871, %if.end865
  %478 = load ptr, ptr %memory831, align 8
  %479 = load ptr, ptr %d.addr, align 8
  %dir876 = getelementptr inbounds %struct.char_directives, ptr %479, i32 0, i32 1
  store ptr %478, ptr %dir876, align 8
  br label %if.end877

if.end877:                                        ; preds = %if.end875, %if.end823
  br label %if.end878

if.end878:                                        ; preds = %if.end877, %while.body
  br label %while.cond, !llvm.loop !46

while.end879:                                     ; preds = %while.cond
  %480 = load ptr, ptr %cp, align 8
  %481 = load ptr, ptr %d.addr, align 8
  %dir880 = getelementptr inbounds %struct.char_directives, ptr %481, i32 0, i32 1
  %482 = load ptr, ptr %dir880, align 8
  %483 = load ptr, ptr %d.addr, align 8
  %count881 = getelementptr inbounds %struct.char_directives, ptr %483, i32 0, i32 0
  %484 = load i64, ptr %count881, align 8
  %arrayidx882 = getelementptr inbounds %struct.char_directive, ptr %482, i64 %484
  %dir_start883 = getelementptr inbounds %struct.char_directive, ptr %arrayidx882, i32 0, i32 0
  store ptr %480, ptr %dir_start883, align 8
  %485 = load i64, ptr %max_width_length, align 8
  %486 = load ptr, ptr %d.addr, align 8
  %max_width_length884 = getelementptr inbounds %struct.char_directives, ptr %486, i32 0, i32 2
  store i64 %485, ptr %max_width_length884, align 8
  %487 = load i64, ptr %max_precision_length, align 8
  %488 = load ptr, ptr %d.addr, align 8
  %max_precision_length885 = getelementptr inbounds %struct.char_directives, ptr %488, i32 0, i32 3
  store i64 %487, ptr %max_precision_length885, align 8
  store i32 0, ptr %retval, align 4
  br label %return

error:                                            ; preds = %if.then820, %if.then733, %sw.default, %if.then497, %if.then410, %if.then394, %if.then390, %if.then285, %if.then202, %if.then187, %if.then183, %if.then50, %if.then47
  %489 = load ptr, ptr %a.addr, align 8
  %arg886 = getelementptr inbounds %struct.arguments, ptr %489, i32 0, i32 1
  %490 = load ptr, ptr %arg886, align 8
  %491 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg887 = getelementptr inbounds %struct.arguments, ptr %491, i32 0, i32 2
  %arraydecay888 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg887, i64 0, i64 0
  %cmp889 = icmp ne ptr %490, %arraydecay888
  br i1 %cmp889, label %if.then891, label %if.end893

if.then891:                                       ; preds = %error
  %492 = load ptr, ptr %a.addr, align 8
  %arg892 = getelementptr inbounds %struct.arguments, ptr %492, i32 0, i32 1
  %493 = load ptr, ptr %arg892, align 8
  call void @free(ptr noundef %493) #21
  br label %if.end893

if.end893:                                        ; preds = %if.then891, %error
  %494 = load ptr, ptr %d.addr, align 8
  %dir894 = getelementptr inbounds %struct.char_directives, ptr %494, i32 0, i32 1
  %495 = load ptr, ptr %dir894, align 8
  %496 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir895 = getelementptr inbounds %struct.char_directives, ptr %496, i32 0, i32 4
  %arraydecay896 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir895, i64 0, i64 0
  %cmp897 = icmp ne ptr %495, %arraydecay896
  br i1 %cmp897, label %if.then899, label %if.end901

if.then899:                                       ; preds = %if.end893
  %497 = load ptr, ptr %d.addr, align 8
  %dir900 = getelementptr inbounds %struct.char_directives, ptr %497, i32 0, i32 1
  %498 = load ptr, ptr %dir900, align 8
  call void @free(ptr noundef %498) #21
  br label %if.end901

if.end901:                                        ; preds = %if.then899, %if.end893
  %call902 = call ptr @__errno_location() #26
  store i32 22, ptr %call902, align 4
  store i32 -1, ptr %retval, align 4
  br label %return

out_of_memory:                                    ; preds = %if.then864, %if.then848, %if.then780, %if.then764, %if.then457, %if.then441, %if.then247, %if.then231
  %499 = load ptr, ptr %a.addr, align 8
  %arg903 = getelementptr inbounds %struct.arguments, ptr %499, i32 0, i32 1
  %500 = load ptr, ptr %arg903, align 8
  %501 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg904 = getelementptr inbounds %struct.arguments, ptr %501, i32 0, i32 2
  %arraydecay905 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg904, i64 0, i64 0
  %cmp906 = icmp ne ptr %500, %arraydecay905
  br i1 %cmp906, label %if.then908, label %if.end910

if.then908:                                       ; preds = %out_of_memory
  %502 = load ptr, ptr %a.addr, align 8
  %arg909 = getelementptr inbounds %struct.arguments, ptr %502, i32 0, i32 1
  %503 = load ptr, ptr %arg909, align 8
  call void @free(ptr noundef %503) #21
  br label %if.end910

if.end910:                                        ; preds = %if.then908, %out_of_memory
  %504 = load ptr, ptr %d.addr, align 8
  %dir911 = getelementptr inbounds %struct.char_directives, ptr %504, i32 0, i32 1
  %505 = load ptr, ptr %dir911, align 8
  %506 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir912 = getelementptr inbounds %struct.char_directives, ptr %506, i32 0, i32 4
  %arraydecay913 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir912, i64 0, i64 0
  %cmp914 = icmp ne ptr %505, %arraydecay913
  br i1 %cmp914, label %if.then916, label %if.end918

if.then916:                                       ; preds = %if.end910
  %507 = load ptr, ptr %d.addr, align 8
  %dir917 = getelementptr inbounds %struct.char_directives, ptr %507, i32 0, i32 1
  %508 = load ptr, ptr %dir917, align 8
  call void @free(ptr noundef %508) #21
  br label %if.end918

if.end918:                                        ; preds = %if.then916, %if.end910
  %call919 = call ptr @__errno_location() #26
  store i32 12, ptr %call919, align 4
  store i32 -1, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end918, %if.end901, %while.end879
  %509 = load i32, ptr %retval, align 4
  ret i32 %509
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @xsum(i64 noundef, i64 noundef) #6

declare ptr @rpl_realloc(ptr noundef, i64 noundef) #2

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #14

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @proper_name_lite(ptr noundef %name_ascii, ptr noundef %name_utf8) #3 {
entry:
  %name_ascii.addr = alloca ptr, align 8
  %name_utf8.addr = alloca ptr, align 8
  %translation = alloca ptr, align 8
  store ptr %name_ascii, ptr %name_ascii.addr, align 8
  store ptr %name_utf8, ptr %name_utf8.addr, align 8
  %0 = load ptr, ptr %name_ascii.addr, align 8
  %call = call ptr @gettext(ptr noundef %0) #21
  store ptr %call, ptr %translation, align 8
  %1 = load ptr, ptr %translation, align 8
  %2 = load ptr, ptr %name_ascii.addr, align 8
  %cmp = icmp ne ptr %1, %2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load ptr, ptr %translation, align 8
  br label %cond.end6

cond.false:                                       ; preds = %entry
  %call1 = call ptr @locale_charset()
  %call2 = call i32 @c_strcasecmp(ptr noundef %call1, ptr noundef @.str.398) #23
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %cond.false
  %4 = load ptr, ptr %name_utf8.addr, align 8
  br label %cond.end

cond.false5:                                      ; preds = %cond.false
  %5 = load ptr, ptr %name_ascii.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond = phi ptr [ %4, %cond.true4 ], [ %5, %cond.false5 ]
  br label %cond.end6

cond.end6:                                        ; preds = %cond.end, %cond.true
  %cond7 = phi ptr [ %3, %cond.true ], [ %cond, %cond.end ]
  ret ptr %cond7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fclose(ptr noundef nonnull %fp) #3 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca ptr, align 8
  %saved_errno = alloca i32, align 4
  %fd = alloca i32, align 4
  %result = alloca i32, align 4
  store ptr %fp, ptr %fp.addr, align 8
  store i32 0, ptr %saved_errno, align 4
  store i32 0, ptr %result, align 4
  %0 = load ptr, ptr %fp.addr, align 8
  %call = call i32 @fileno(ptr noundef %0) #21
  store i32 %call, ptr %fd, align 4
  %1 = load i32, ptr %fd, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %fp.addr, align 8
  %call1 = call i32 @fclose(ptr noundef %2)
  store i32 %call1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load ptr, ptr %fp.addr, align 8
  %call2 = call i32 @__freading(ptr noundef %3) #21
  %cmp3 = icmp ne i32 %call2, 0
  br i1 %cmp3, label %lor.lhs.false, label %land.lhs.true

lor.lhs.false:                                    ; preds = %if.end
  %4 = load ptr, ptr %fp.addr, align 8
  %call4 = call i32 @fileno(ptr noundef %4) #21
  %call5 = call i64 @lseek(i32 noundef %call4, i64 noundef 0, i32 noundef 1) #21
  %cmp6 = icmp ne i64 %call5, -1
  br i1 %cmp6, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %5 = load ptr, ptr %fp.addr, align 8
  %call7 = call i32 @rpl_fflush(ptr noundef %5)
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.then8, label %if.end10

if.then8:                                         ; preds = %land.lhs.true
  %call9 = call ptr @__errno_location() #26
  %6 = load i32, ptr %call9, align 4
  store i32 %6, ptr %saved_errno, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %land.lhs.true, %lor.lhs.false
  %7 = load ptr, ptr %fp.addr, align 8
  %call11 = call i32 @fclose(ptr noundef %7)
  store i32 %call11, ptr %result, align 4
  %8 = load i32, ptr %saved_errno, align 4
  %cmp12 = icmp ne i32 %8, 0
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end10
  %9 = load i32, ptr %saved_errno, align 4
  %call14 = call ptr @__errno_location() #26
  store i32 %9, ptr %call14, align 4
  store i32 -1, ptr %result, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end10
  %10 = load i32, ptr %result, align 4
  store i32 %10, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end15, %if.then
  %11 = load i32, ptr %retval, align 4
  ret i32 %11
}

; Function Attrs: nounwind
declare i32 @fileno(ptr noundef) #1

declare i32 @fclose(ptr noundef) #2

; Function Attrs: nounwind
declare i32 @__freading(ptr noundef) #1

; Function Attrs: nounwind
declare i64 @lseek(i32 noundef, i64 noundef, i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fcntl(i32 noundef %fd, i32 noundef %action, ...) #3 {
entry:
  %fd.addr = alloca i32, align 4
  %action.addr = alloca i32, align 4
  %arg = alloca [1 x %struct.__va_list_tag], align 16
  %result = alloca i32, align 4
  %target = alloca i32, align 4
  %target3 = alloca i32, align 4
  %x = alloca i32, align 4
  %p = alloca ptr, align 8
  store i32 %fd, ptr %fd.addr, align 4
  store i32 %action, ptr %action.addr, align 4
  store i32 -1, ptr %result, align 4
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load i32, ptr %action.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1030, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay1, i32 0, i32 0
  %gp_offset = load i32, ptr %gp_offset_p, align 16
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb
  %1 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay1, i32 0, i32 3
  %reg_save_area = load ptr, ptr %1, align 16
  %2 = getelementptr i8, ptr %reg_save_area, i32 %gp_offset
  %3 = add i32 %gp_offset, 8
  store i32 %3, ptr %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay1, i32 0, i32 2
  %overflow_arg_area = load ptr, ptr %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8, ptr %overflow_arg_area, i32 8
  store ptr %overflow_arg_area.next, ptr %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi ptr [ %2, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %4 = load i32, ptr %vaarg.addr, align 4
  store i32 %4, ptr %target, align 4
  %5 = load i32, ptr %fd.addr, align 4
  %6 = load i32, ptr %target, align 4
  %call = call i32 @rpl_fcntl_DUPFD(i32 noundef %5, i32 noundef %6)
  store i32 %call, ptr %result, align 4
  br label %sw.epilog47

sw.bb2:                                           ; preds = %entry
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  %gp_offset_p5 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay4, i32 0, i32 0
  %gp_offset6 = load i32, ptr %gp_offset_p5, align 16
  %fits_in_gp7 = icmp ule i32 %gp_offset6, 40
  br i1 %fits_in_gp7, label %vaarg.in_reg8, label %vaarg.in_mem10

vaarg.in_reg8:                                    ; preds = %sw.bb2
  %7 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay4, i32 0, i32 3
  %reg_save_area9 = load ptr, ptr %7, align 16
  %8 = getelementptr i8, ptr %reg_save_area9, i32 %gp_offset6
  %9 = add i32 %gp_offset6, 8
  store i32 %9, ptr %gp_offset_p5, align 16
  br label %vaarg.end14

vaarg.in_mem10:                                   ; preds = %sw.bb2
  %overflow_arg_area_p11 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay4, i32 0, i32 2
  %overflow_arg_area12 = load ptr, ptr %overflow_arg_area_p11, align 8
  %overflow_arg_area.next13 = getelementptr i8, ptr %overflow_arg_area12, i32 8
  store ptr %overflow_arg_area.next13, ptr %overflow_arg_area_p11, align 8
  br label %vaarg.end14

vaarg.end14:                                      ; preds = %vaarg.in_mem10, %vaarg.in_reg8
  %vaarg.addr15 = phi ptr [ %8, %vaarg.in_reg8 ], [ %overflow_arg_area12, %vaarg.in_mem10 ]
  %10 = load i32, ptr %vaarg.addr15, align 4
  store i32 %10, ptr %target3, align 4
  %11 = load i32, ptr %fd.addr, align 4
  %12 = load i32, ptr %target3, align 4
  %call16 = call i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 noundef %11, i32 noundef %12)
  store i32 %call16, ptr %result, align 4
  br label %sw.epilog47

sw.default:                                       ; preds = %entry
  %13 = load i32, ptr %action.addr, align 4
  switch i32 %13, label %sw.default33 [
    i32 1, label %sw.bb17
    i32 3, label %sw.bb17
    i32 1025, label %sw.bb17
    i32 9, label %sw.bb17
    i32 1032, label %sw.bb17
    i32 1034, label %sw.bb17
    i32 11, label %sw.bb17
    i32 1033, label %sw.bb19
    i32 0, label %sw.bb19
    i32 1030, label %sw.bb19
    i32 1026, label %sw.bb19
    i32 2, label %sw.bb19
    i32 4, label %sw.bb19
    i32 1024, label %sw.bb19
    i32 8, label %sw.bb19
    i32 1031, label %sw.bb19
    i32 10, label %sw.bb19
  ]

sw.bb17:                                          ; preds = %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default
  %14 = load i32, ptr %fd.addr, align 4
  %15 = load i32, ptr %action.addr, align 4
  %call18 = call i32 (i32, i32, ...) @fcntl(i32 noundef %14, i32 noundef %15)
  store i32 %call18, ptr %result, align 4
  br label %sw.epilog

sw.bb19:                                          ; preds = %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default
  %arraydecay20 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  %gp_offset_p21 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay20, i32 0, i32 0
  %gp_offset22 = load i32, ptr %gp_offset_p21, align 16
  %fits_in_gp23 = icmp ule i32 %gp_offset22, 40
  br i1 %fits_in_gp23, label %vaarg.in_reg24, label %vaarg.in_mem26

vaarg.in_reg24:                                   ; preds = %sw.bb19
  %16 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay20, i32 0, i32 3
  %reg_save_area25 = load ptr, ptr %16, align 16
  %17 = getelementptr i8, ptr %reg_save_area25, i32 %gp_offset22
  %18 = add i32 %gp_offset22, 8
  store i32 %18, ptr %gp_offset_p21, align 16
  br label %vaarg.end30

vaarg.in_mem26:                                   ; preds = %sw.bb19
  %overflow_arg_area_p27 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay20, i32 0, i32 2
  %overflow_arg_area28 = load ptr, ptr %overflow_arg_area_p27, align 8
  %overflow_arg_area.next29 = getelementptr i8, ptr %overflow_arg_area28, i32 8
  store ptr %overflow_arg_area.next29, ptr %overflow_arg_area_p27, align 8
  br label %vaarg.end30

vaarg.end30:                                      ; preds = %vaarg.in_mem26, %vaarg.in_reg24
  %vaarg.addr31 = phi ptr [ %17, %vaarg.in_reg24 ], [ %overflow_arg_area28, %vaarg.in_mem26 ]
  %19 = load i32, ptr %vaarg.addr31, align 4
  store i32 %19, ptr %x, align 4
  %20 = load i32, ptr %fd.addr, align 4
  %21 = load i32, ptr %action.addr, align 4
  %22 = load i32, ptr %x, align 4
  %call32 = call i32 (i32, i32, ...) @fcntl(i32 noundef %20, i32 noundef %21, i32 noundef %22)
  store i32 %call32, ptr %result, align 4
  br label %sw.epilog

sw.default33:                                     ; preds = %sw.default
  %arraydecay34 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  %gp_offset_p35 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay34, i32 0, i32 0
  %gp_offset36 = load i32, ptr %gp_offset_p35, align 16
  %fits_in_gp37 = icmp ule i32 %gp_offset36, 40
  br i1 %fits_in_gp37, label %vaarg.in_reg38, label %vaarg.in_mem40

vaarg.in_reg38:                                   ; preds = %sw.default33
  %23 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay34, i32 0, i32 3
  %reg_save_area39 = load ptr, ptr %23, align 16
  %24 = getelementptr i8, ptr %reg_save_area39, i32 %gp_offset36
  %25 = add i32 %gp_offset36, 8
  store i32 %25, ptr %gp_offset_p35, align 16
  br label %vaarg.end44

vaarg.in_mem40:                                   ; preds = %sw.default33
  %overflow_arg_area_p41 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay34, i32 0, i32 2
  %overflow_arg_area42 = load ptr, ptr %overflow_arg_area_p41, align 8
  %overflow_arg_area.next43 = getelementptr i8, ptr %overflow_arg_area42, i32 8
  store ptr %overflow_arg_area.next43, ptr %overflow_arg_area_p41, align 8
  br label %vaarg.end44

vaarg.end44:                                      ; preds = %vaarg.in_mem40, %vaarg.in_reg38
  %vaarg.addr45 = phi ptr [ %24, %vaarg.in_reg38 ], [ %overflow_arg_area42, %vaarg.in_mem40 ]
  %26 = load ptr, ptr %vaarg.addr45, align 8
  store ptr %26, ptr %p, align 8
  %27 = load i32, ptr %fd.addr, align 4
  %28 = load i32, ptr %action.addr, align 4
  %29 = load ptr, ptr %p, align 8
  %call46 = call i32 (i32, i32, ...) @fcntl(i32 noundef %27, i32 noundef %28, ptr noundef %29)
  store i32 %call46, ptr %result, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %vaarg.end44, %vaarg.end30, %sw.bb17
  br label %sw.epilog47

sw.epilog47:                                      ; preds = %sw.epilog, %vaarg.end14, %vaarg.end
  %arraydecay48 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay48)
  %30 = load i32, ptr %result, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fcntl_DUPFD(i32 noundef %fd, i32 noundef %target) #3 {
entry:
  %fd.addr = alloca i32, align 4
  %target.addr = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  store i32 %target, ptr %target.addr, align 4
  %0 = load i32, ptr %fd.addr, align 4
  %1 = load i32, ptr %target.addr, align 4
  %call = call i32 (i32, i32, ...) @fcntl(i32 noundef %0, i32 noundef 0, i32 noundef %1)
  store i32 %call, ptr %result, align 4
  %2 = load i32, ptr %result, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 noundef %fd, i32 noundef %target) #3 {
entry:
  %fd.addr = alloca i32, align 4
  %target.addr = alloca i32, align 4
  %result = alloca i32, align 4
  %flags = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  store i32 %target, ptr %target.addr, align 4
  %0 = load i32, ptr @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %if.then, label %if.else9

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %fd.addr, align 4
  %2 = load i32, ptr %target.addr, align 4
  %call = call i32 (i32, i32, ...) @fcntl(i32 noundef %1, i32 noundef 1030, i32 noundef %2)
  store i32 %call, ptr %result, align 4
  %3 = load i32, ptr %result, align 4
  %cmp1 = icmp sle i32 0, %3
  br i1 %cmp1, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %call2 = call ptr @__errno_location() #26
  %4 = load i32, ptr %call2, align 4
  %cmp3 = icmp ne i32 %4, 22
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %lor.lhs.false, %if.then
  store i32 1, ptr @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  br label %if.end8

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, ptr %fd.addr, align 4
  %6 = load i32, ptr %target.addr, align 4
  %call5 = call i32 @rpl_fcntl_DUPFD(i32 noundef %5, i32 noundef %6)
  store i32 %call5, ptr %result, align 4
  %7 = load i32, ptr %result, align 4
  %cmp6 = icmp sge i32 %7, 0
  br i1 %cmp6, label %if.then7, label %if.end

if.then7:                                         ; preds = %if.else
  store i32 -1, ptr @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  br label %if.end

if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then4
  br label %if.end11

if.else9:                                         ; preds = %entry
  %8 = load i32, ptr %fd.addr, align 4
  %9 = load i32, ptr %target.addr, align 4
  %call10 = call i32 @rpl_fcntl_DUPFD(i32 noundef %8, i32 noundef %9)
  store i32 %call10, ptr %result, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else9, %if.end8
  %10 = load i32, ptr %result, align 4
  %cmp12 = icmp sle i32 0, %10
  br i1 %cmp12, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %if.end11
  %11 = load i32, ptr @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  %cmp13 = icmp eq i32 %11, -1
  br i1 %cmp13, label %if.then14, label %if.end25

if.then14:                                        ; preds = %land.lhs.true
  %12 = load i32, ptr %result, align 4
  %call15 = call i32 (i32, i32, ...) @fcntl(i32 noundef %12, i32 noundef 1)
  store i32 %call15, ptr %flags, align 4
  %13 = load i32, ptr %flags, align 4
  %cmp16 = icmp slt i32 %13, 0
  br i1 %cmp16, label %if.then20, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.then14
  %14 = load i32, ptr %result, align 4
  %15 = load i32, ptr %flags, align 4
  %or = or i32 %15, 1
  %call18 = call i32 (i32, i32, ...) @fcntl(i32 noundef %14, i32 noundef 2, i32 noundef %or)
  %cmp19 = icmp eq i32 %call18, -1
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %lor.lhs.false17, %if.then14
  %call21 = call ptr @__errno_location() #26
  %16 = load i32, ptr %call21, align 4
  store i32 %16, ptr %saved_errno, align 4
  %17 = load i32, ptr %result, align 4
  %call22 = call i32 @close(i32 noundef %17)
  %18 = load i32, ptr %saved_errno, align 4
  %call23 = call ptr @__errno_location() #26
  store i32 %18, ptr %call23, align 4
  store i32 -1, ptr %result, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then20, %lor.lhs.false17
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %land.lhs.true, %if.end11
  %19 = load i32, ptr %result, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fflush(ptr noundef %stream) #3 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca ptr, align 8
  store ptr %stream, ptr %stream.addr, align 8
  %0 = load ptr, ptr %stream.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load ptr, ptr %stream.addr, align 8
  %call = call i32 @__freading(ptr noundef %1) #21
  %cmp1 = icmp ne i32 %call, 0
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load ptr, ptr %stream.addr, align 8
  %call2 = call i32 @fflush(ptr noundef %2)
  store i32 %call2, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load ptr, ptr %stream.addr, align 8
  call void @clear_ungetc_buffer_preserving_position(ptr noundef %3)
  %4 = load ptr, ptr %stream.addr, align 8
  %call3 = call i32 @fflush(ptr noundef %4)
  store i32 %call3, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, ptr %retval, align 4
  ret i32 %5
}

declare i32 @fflush(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(ptr noundef %fp) #3 {
entry:
  %fp.addr = alloca ptr, align 8
  store ptr %fp, ptr %fp.addr, align 8
  %0 = load ptr, ptr %fp.addr, align 8
  %_flags = getelementptr inbounds %struct._IO_FILE, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %_flags, align 8
  %and = and i32 %1, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %fp.addr, align 8
  %call = call i32 @rpl_fseeko(ptr noundef %2, i64 noundef 0, i32 noundef 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fseeko(ptr noundef nonnull %fp, i64 noundef %offset, i32 noundef %whence) #3 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca ptr, align 8
  %offset.addr = alloca i64, align 8
  %whence.addr = alloca i32, align 4
  %pos = alloca i64, align 8
  store ptr %fp, ptr %fp.addr, align 8
  store i64 %offset, ptr %offset.addr, align 8
  store i32 %whence, ptr %whence.addr, align 4
  %0 = load ptr, ptr %fp.addr, align 8
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, ptr %0, i32 0, i32 2
  %1 = load ptr, ptr %_IO_read_end, align 8
  %2 = load ptr, ptr %fp.addr, align 8
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %_IO_read_ptr, align 8
  %cmp = icmp eq ptr %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %entry
  %4 = load ptr, ptr %fp.addr, align 8
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %_IO_write_ptr, align 8
  %6 = load ptr, ptr %fp.addr, align 8
  %_IO_write_base = getelementptr inbounds %struct._IO_FILE, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %_IO_write_base, align 8
  %cmp1 = icmp eq ptr %5, %7
  br i1 %cmp1, label %land.lhs.true2, label %if.end7

land.lhs.true2:                                   ; preds = %land.lhs.true
  %8 = load ptr, ptr %fp.addr, align 8
  %_IO_save_base = getelementptr inbounds %struct._IO_FILE, ptr %8, i32 0, i32 9
  %9 = load ptr, ptr %_IO_save_base, align 8
  %cmp3 = icmp eq ptr %9, null
  br i1 %cmp3, label %if.then, label %if.end7

if.then:                                          ; preds = %land.lhs.true2
  %10 = load ptr, ptr %fp.addr, align 8
  %call = call i32 @fileno(ptr noundef %10) #21
  %11 = load i64, ptr %offset.addr, align 8
  %12 = load i32, ptr %whence.addr, align 4
  %call4 = call i64 @lseek(i32 noundef %call, i64 noundef %11, i32 noundef %12) #21
  store i64 %call4, ptr %pos, align 8
  %13 = load i64, ptr %pos, align 8
  %cmp5 = icmp eq i64 %13, -1
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then
  store i32 -1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %14 = load ptr, ptr %fp.addr, align 8
  %_flags = getelementptr inbounds %struct._IO_FILE, ptr %14, i32 0, i32 0
  %15 = load i32, ptr %_flags, align 8
  %and = and i32 %15, -17
  store i32 %and, ptr %_flags, align 8
  %16 = load i64, ptr %pos, align 8
  %17 = load ptr, ptr %fp.addr, align 8
  %_offset = getelementptr inbounds %struct._IO_FILE, ptr %17, i32 0, i32 21
  store i64 %16, ptr %_offset, align 8
  store i32 0, ptr %retval, align 4
  br label %return

if.end7:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %18 = load ptr, ptr %fp.addr, align 8
  %19 = load i64, ptr %offset.addr, align 8
  %20 = load i32, ptr %whence.addr, align 4
  %call8 = call i32 @fseeko(ptr noundef %18, i64 noundef %19, i32 noundef %20)
  store i32 %call8, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end7, %if.end, %if.then6
  %21 = load i32, ptr %retval, align 4
  ret i32 %21
}

declare i32 @fseeko(ptr noundef, i64 noundef, i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rpl_mbrtoc32(ptr noundef %pwc, ptr noundef %s, i64 noundef %n, ptr noundef %ps) #3 {
entry:
  %retval = alloca i64, align 8
  %pwc.addr = alloca ptr, align 8
  %s.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %ps.addr = alloca ptr, align 8
  %ret = alloca i64, align 8
  store ptr %pwc, ptr %pwc.addr, align 8
  store ptr %s, ptr %s.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store ptr %ps, ptr %ps.addr, align 8
  %0 = load ptr, ptr %s.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr null, ptr %pwc.addr, align 8
  store ptr @.str.409, ptr %s.addr, align 8
  store i64 1, ptr %n.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %ps.addr, align 8
  %cmp1 = icmp eq ptr %1, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store ptr @internal_state, ptr %ps.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = load ptr, ptr %pwc.addr, align 8
  %3 = load ptr, ptr %s.addr, align 8
  %4 = load i64, ptr %n.addr, align 8
  %5 = load ptr, ptr %ps.addr, align 8
  %call = call i64 @mbrtoc32(ptr noundef %2, ptr noundef %3, i64 noundef %4, ptr noundef %5) #21
  store i64 %call, ptr %ret, align 8
  %6 = load i64, ptr %ret, align 8
  %cmp4 = icmp ult i64 %6, -3
  br i1 %cmp4, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %if.end3
  %7 = load ptr, ptr %ps.addr, align 8
  %call5 = call i32 @mbsinit(ptr noundef %7) #23
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end7, label %if.then6

if.then6:                                         ; preds = %land.lhs.true
  %8 = load ptr, ptr %ps.addr, align 8
  call void @mbszero(ptr noundef %8)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %land.lhs.true, %if.end3
  %9 = load i64, ptr %ret, align 8
  %cmp8 = icmp eq i64 %9, -3
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  call void @abort() #22
  unreachable

if.end10:                                         ; preds = %if.end7
  %10 = load i64, ptr %ret, align 8
  %cmp11 = icmp ule i64 -2, %10
  br i1 %cmp11, label %land.lhs.true12, label %if.end20

land.lhs.true12:                                  ; preds = %if.end10
  %11 = load i64, ptr %n.addr, align 8
  %cmp13 = icmp ne i64 %11, 0
  br i1 %cmp13, label %land.lhs.true14, label %if.end20

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %call15 = call zeroext i1 @hard_locale(i32 noundef 0)
  br i1 %call15, label %if.end20, label %if.then16

if.then16:                                        ; preds = %land.lhs.true14
  %12 = load ptr, ptr %pwc.addr, align 8
  %cmp17 = icmp ne ptr %12, null
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.then16
  %13 = load ptr, ptr %s.addr, align 8
  %14 = load i8, ptr %13, align 1
  %conv = zext i8 %14 to i32
  %15 = load ptr, ptr %pwc.addr, align 8
  store i32 %conv, ptr %15, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.then16
  store i64 1, ptr %retval, align 8
  br label %return

if.end20:                                         ; preds = %land.lhs.true14, %land.lhs.true12, %if.end10
  %16 = load i64, ptr %ret, align 8
  store i64 %16, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end20, %if.end19
  %17 = load i64, ptr %retval, align 8
  ret i64 %17
}

; Function Attrs: nounwind
declare i64 @mbrtoc32(ptr noundef, ptr noundef, i64 noundef, ptr noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare i32 @mbsinit(ptr noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_program_name(ptr noundef %argv0) #3 {
entry:
  %argv0.addr = alloca ptr, align 8
  %slash = alloca ptr, align 8
  %base = alloca ptr, align 8
  store ptr %argv0, ptr %argv0.addr, align 8
  %0 = load ptr, ptr %argv0.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stderr, align 8
  %call = call i32 @fputs(ptr noundef @.str.414, ptr noundef %1)
  call void @abort() #22
  unreachable

if.end:                                           ; preds = %entry
  %2 = load ptr, ptr %argv0.addr, align 8
  %call1 = call ptr @strrchr(ptr noundef %2, i32 noundef 47) #23
  store ptr %call1, ptr %slash, align 8
  %3 = load ptr, ptr %slash, align 8
  %cmp2 = icmp ne ptr %3, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load ptr, ptr %slash, align 8
  %add.ptr = getelementptr inbounds i8, ptr %4, i64 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %5 = load ptr, ptr %argv0.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %add.ptr, %cond.true ], [ %5, %cond.false ]
  store ptr %cond, ptr %base, align 8
  %6 = load ptr, ptr %base, align 8
  %7 = load ptr, ptr %argv0.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %6 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp sge i64 %sub.ptr.sub, 7
  br i1 %cmp3, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %cond.end
  %8 = load ptr, ptr %base, align 8
  %add.ptr4 = getelementptr inbounds i8, ptr %8, i64 -7
  %call5 = call i32 @strncmp(ptr noundef %add.ptr4, ptr noundef @.str.1.415, i64 noundef 7) #23
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true
  %9 = load ptr, ptr %base, align 8
  store ptr %9, ptr %argv0.addr, align 8
  %10 = load ptr, ptr %base, align 8
  %call8 = call i32 @strncmp(ptr noundef %10, ptr noundef @.str.2.416, i64 noundef 3) #23
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.then7
  %11 = load ptr, ptr %base, align 8
  %add.ptr11 = getelementptr inbounds i8, ptr %11, i64 3
  store ptr %add.ptr11, ptr %base, align 8
  %12 = load ptr, ptr %base, align 8
  store ptr %12, ptr %argv0.addr, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.then7
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %land.lhs.true, %cond.end
  %13 = load ptr, ptr %argv0.addr, align 8
  store ptr %13, ptr @program_name, align 8
  %14 = load ptr, ptr %argv0.addr, align 8
  store ptr %14, ptr @program_invocation_name, align 8
  %15 = load ptr, ptr %base, align 8
  store ptr %15, ptr @program_invocation_short_name, align 8
  ret void
}

declare i32 @fputs(ptr noundef, ptr noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare ptr @strrchr(ptr noundef, i32 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setlocale_null_r(i32 noundef %category, ptr noundef nonnull %buf, i64 noundef %bufsize) #3 {
entry:
  %category.addr = alloca i32, align 4
  %buf.addr = alloca ptr, align 8
  %bufsize.addr = alloca i64, align 8
  store i32 %category, ptr %category.addr, align 4
  store ptr %buf, ptr %buf.addr, align 8
  store i64 %bufsize, ptr %bufsize.addr, align 8
  %0 = load i32, ptr %category.addr, align 4
  %1 = load ptr, ptr %buf.addr, align 8
  %2 = load i64, ptr %bufsize.addr, align 8
  %call = call i32 @setlocale_null_r_unlocked(i32 noundef %0, ptr noundef %1, i64 noundef %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @setlocale_null(i32 noundef %category) #3 {
entry:
  %category.addr = alloca i32, align 4
  store i32 %category, ptr %category.addr, align 4
  %0 = load i32, ptr %category.addr, align 4
  %call = call ptr @setlocale_null_unlocked(i32 noundef %0)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @setlocale_null_unlocked(i32 noundef %category) #3 {
entry:
  %category.addr = alloca i32, align 4
  %result = alloca ptr, align 8
  store i32 %category, ptr %category.addr, align 4
  %0 = load i32, ptr %category.addr, align 4
  %call = call ptr @setlocale(i32 noundef %0, ptr noundef null) #21
  store ptr %call, ptr %result, align 8
  %1 = load ptr, ptr %result, align 8
  ret ptr %1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setlocale_null_r_unlocked(i32 noundef %category, ptr noundef nonnull %buf, i64 noundef %bufsize) #3 {
entry:
  %retval = alloca i32, align 4
  %category.addr = alloca i32, align 4
  %buf.addr = alloca ptr, align 8
  %bufsize.addr = alloca i64, align 8
  %result = alloca ptr, align 8
  %length = alloca i64, align 8
  store i32 %category, ptr %category.addr, align 4
  store ptr %buf, ptr %buf.addr, align 8
  store i64 %bufsize, ptr %bufsize.addr, align 8
  %0 = load i32, ptr %category.addr, align 4
  %call = call ptr @setlocale_null_unlocked(i32 noundef %0)
  store ptr %call, ptr %result, align 8
  %1 = load ptr, ptr %result, align 8
  %cmp = icmp eq ptr %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, ptr %bufsize.addr, align 8
  %cmp1 = icmp ugt i64 %2, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %3 = load ptr, ptr %buf.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 0
  store i8 0, ptr %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i32 22, ptr %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %4 = load ptr, ptr %result, align 8
  %call3 = call i64 @strlen(ptr noundef %4) #23
  store i64 %call3, ptr %length, align 8
  %5 = load i64, ptr %length, align 8
  %6 = load i64, ptr %bufsize.addr, align 8
  %cmp4 = icmp ult i64 %5, %6
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else
  %7 = load ptr, ptr %buf.addr, align 8
  %8 = load ptr, ptr %result, align 8
  %9 = load i64, ptr %length, align 8
  %add = add i64 %9, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %7, ptr align 1 %8, i64 %add, i1 false)
  store i32 0, ptr %retval, align 4
  br label %return

if.else6:                                         ; preds = %if.else
  %10 = load i64, ptr %bufsize.addr, align 8
  %cmp7 = icmp ugt i64 %10, 0
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.else6
  %11 = load ptr, ptr %buf.addr, align 8
  %12 = load ptr, ptr %result, align 8
  %13 = load i64, ptr %bufsize.addr, align 8
  %sub = sub i64 %13, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %11, ptr align 1 %12, i64 %sub, i1 false)
  %14 = load ptr, ptr %buf.addr, align 8
  %15 = load i64, ptr %bufsize.addr, align 8
  %sub9 = sub i64 %15, 1
  %arrayidx10 = getelementptr inbounds i8, ptr %14, i64 %sub9
  store i8 0, ptr %arrayidx10, align 1
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.else6
  store i32 34, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end11, %if.then5, %if.end
  %16 = load i32, ptr %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @vasnprintf(ptr noundef %resultbuf, ptr noundef %lengthp, ptr noundef %format, ptr noundef %args) #3 {
entry:
  %retval = alloca ptr, align 8
  %resultbuf.addr = alloca ptr, align 8
  %lengthp.addr = alloca ptr, align 8
  %format.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  %d = alloca %struct.char_directives, align 8
  %a = alloca %struct.arguments, align 16
  %buf_neededlength = alloca i64, align 8
  %buf = alloca ptr, align 8
  %buf_malloced = alloca ptr, align 8
  %cp = alloca ptr, align 8
  %i = alloca i64, align 8
  %dp = alloca ptr, align 8
  %result = alloca ptr, align 8
  %allocated = alloca i64, align 8
  %length = alloca i64, align 8
  %buf_memsize = alloca i64, align 8
  %n = alloca i64, align 8
  %augmented_length = alloca i64, align 8
  %memory_size = alloca i64, align 8
  %memory = alloca ptr, align 8
  %augmented_length73 = alloca i64, align 8
  %memory_size82 = alloca i64, align 8
  %memory83 = alloca ptr, align 8
  %flags = alloca i32, align 4
  %has_width = alloca i32, align 4
  %width = alloca i64, align 8
  %has_precision = alloca i32, align 4
  %precision = alloca i64, align 8
  %arg161 = alloca i32, align 4
  %digitp = alloca ptr, align 8
  %arg207 = alloca i32, align 4
  %digitp226 = alloca ptr, align 8
  %arg246 = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %w = alloca i64, align 8
  %total = alloca i64, align 8
  %memory_size271 = alloca i64, align 8
  %memory272 = alloca ptr, align 8
  %n327 = alloca i64, align 8
  %n340 = alloca i64, align 8
  %flags358 = alloca i32, align 4
  %has_width360 = alloca i32, align 4
  %width361 = alloca i64, align 8
  %has_precision362 = alloca i32, align 4
  %precision363 = alloca i64, align 8
  %arg373 = alloca i32, align 4
  %digitp394 = alloca ptr, align 8
  %arg429 = alloca i32, align 4
  %digitp448 = alloca ptr, align 8
  %arg471 = alloca ptr, align 8
  %arg_end = alloca ptr, align 8
  %bytes476 = alloca i64, align 8
  %w477 = alloca i64, align 8
  %state = alloca %struct.__mbstate_t, align 4
  %cbuf = alloca [64 x i8], align 16
  %count484 = alloca i32, align 4
  %state509 = alloca %struct.__mbstate_t, align 4
  %cbuf511 = alloca [64 x i8], align 16
  %count512 = alloca i32, align 4
  %n542 = alloca i64, align 8
  %memory_size548 = alloca i64, align 8
  %memory549 = alloca ptr, align 8
  %remaining = alloca i64, align 8
  %state605 = alloca %struct.__mbstate_t, align 4
  %memory_size610 = alloca i64, align 8
  %memory611 = alloca ptr, align 8
  %cbuf664 = alloca [64 x i8], align 16
  %count665 = alloca i32, align 4
  %state691 = alloca %struct.__mbstate_t, align 4
  %cbuf696 = alloca [64 x i8], align 16
  %count697 = alloca i32, align 4
  %memory_size714 = alloca i64, align 8
  %memory715 = alloca ptr, align 8
  %n781 = alloca i64, align 8
  %memory_size787 = alloca i64, align 8
  %memory788 = alloca ptr, align 8
  %type842 = alloca i32, align 4
  %flags847 = alloca i32, align 4
  %fbp = alloca ptr, align 8
  %prefix_count = alloca i32, align 4
  %prefixes = alloca [2 x i32], align 4
  %orig_errno = alloca i32, align 4
  %n890 = alloca i64, align 8
  %width896 = alloca i64, align 8
  %arg901 = alloca i32, align 4
  %digitp921 = alloca ptr, align 8
  %n955 = alloca i64, align 8
  %memory_size1014 = alloca i64, align 8
  %memory1015 = alloca ptr, align 8
  %count1068 = alloca i32, align 4
  %retcount = alloca i32, align 4
  %maxlen = alloca i64, align 8
  %arg1077 = alloca i32, align 4
  %arg1098 = alloca i32, align 4
  %arg1119 = alloca i32, align 4
  %arg1140 = alloca i32, align 4
  %arg1161 = alloca i32, align 4
  %arg1181 = alloca i32, align 4
  %arg1201 = alloca i64, align 8
  %arg1221 = alloca i64, align 8
  %arg1241 = alloca i64, align 8
  %arg1261 = alloca i64, align 8
  %arg1281 = alloca i8, align 1
  %arg1304 = alloca i8, align 1
  %arg1327 = alloca i16, align 2
  %arg1350 = alloca i16, align 2
  %arg1373 = alloca i32, align 4
  %arg1393 = alloca i32, align 4
  %arg1413 = alloca i64, align 8
  %arg1433 = alloca i64, align 8
  %arg1453 = alloca i8, align 1
  %arg1476 = alloca i8, align 1
  %arg1499 = alloca i64, align 8
  %arg1519 = alloca i64, align 8
  %arg1539 = alloca i64, align 8
  %arg1559 = alloca i64, align 8
  %arg1579 = alloca i64, align 8
  %arg1599 = alloca i64, align 8
  %arg1619 = alloca double, align 8
  %arg1639 = alloca x86_fp80, align 16
  %arg1659 = alloca i32, align 4
  %arg1679 = alloca i32, align 4
  %arg1699 = alloca ptr, align 8
  %arg1719 = alloca ptr, align 8
  %arg1739 = alloca ptr, align 8
  %n1826 = alloca i64, align 8
  %memory_size1843 = alloca i64, align 8
  %memory1844 = alloca ptr, align 8
  %memory_size1908 = alloca i64, align 8
  %memory1909 = alloca ptr, align 8
  %memory1967 = alloca ptr, align 8
  store ptr %resultbuf, ptr %resultbuf.addr, align 8
  store ptr %lengthp, ptr %lengthp.addr, align 8
  store ptr %format, ptr %format.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  %0 = load ptr, ptr %format.addr, align 8
  %call = call i32 @printf_parse(ptr noundef %0, ptr noundef %d, ptr noundef %a)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %args.addr, align 8
  %call1 = call i32 @printf_fetchargs(ptr noundef %1, ptr noundef %a)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %fail_1_with_EINVAL

if.end4:                                          ; preds = %if.end
  %max_width_length = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 2
  %2 = load i64, ptr %max_width_length, align 8
  %max_precision_length = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 3
  %3 = load i64, ptr %max_precision_length, align 8
  %call5 = call i64 @xsum4(i64 noundef 7, i64 noundef %2, i64 noundef %3, i64 noundef 6) #23
  store i64 %call5, ptr %buf_neededlength, align 8
  %4 = load i64, ptr %buf_neededlength, align 8
  %cmp6 = icmp ult i64 %4, 4000
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end4
  %5 = load i64, ptr %buf_neededlength, align 8
  %mul = mul i64 %5, 1
  %6 = alloca i8, i64 %mul, align 16
  store ptr %6, ptr %buf, align 8
  store ptr null, ptr %buf_malloced, align 8
  br label %if.end17

if.else:                                          ; preds = %if.end4
  %7 = load i64, ptr %buf_neededlength, align 8
  %cmp8 = icmp ule i64 %7, -1
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i64, ptr %buf_neededlength, align 8
  %mul9 = mul i64 %8, 1
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %mul9, %cond.true ], [ -1, %cond.false ]
  store i64 %cond, ptr %buf_memsize, align 8
  %9 = load i64, ptr %buf_memsize, align 8
  %cmp10 = icmp eq i64 %9, -1
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %cond.end
  br label %out_of_memory_1

if.end12:                                         ; preds = %cond.end
  %10 = load i64, ptr %buf_memsize, align 8
  %call13 = call noalias ptr @malloc(i64 noundef %10) #29
  store ptr %call13, ptr %buf, align 8
  %11 = load ptr, ptr %buf, align 8
  %cmp14 = icmp eq ptr %11, null
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end12
  br label %out_of_memory_1

if.end16:                                         ; preds = %if.end12
  %12 = load ptr, ptr %buf, align 8
  store ptr %12, ptr %buf_malloced, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then7
  %13 = load ptr, ptr %resultbuf.addr, align 8
  store ptr %13, ptr %result, align 8
  %14 = load ptr, ptr %resultbuf.addr, align 8
  %cmp18 = icmp ne ptr %14, null
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %if.end17
  %15 = load ptr, ptr %lengthp.addr, align 8
  %16 = load i64, ptr %15, align 8
  br label %cond.end21

cond.false20:                                     ; preds = %if.end17
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i64 [ %16, %cond.true19 ], [ 0, %cond.false20 ]
  store i64 %cond22, ptr %allocated, align 8
  store i64 0, ptr %length, align 8
  %17 = load ptr, ptr %format.addr, align 8
  store ptr %17, ptr %cp, align 8
  store i64 0, ptr %i, align 8
  %dir = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %18 = load ptr, ptr %dir, align 8
  %arrayidx = getelementptr inbounds %struct.char_directive, ptr %18, i64 0
  store ptr %arrayidx, ptr %dp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end21
  %19 = load ptr, ptr %cp, align 8
  %20 = load ptr, ptr %dp, align 8
  %dir_start = getelementptr inbounds %struct.char_directive, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %dir_start, align 8
  %cmp23 = icmp ne ptr %19, %21
  br i1 %cmp23, label %if.then24, label %if.end66

if.then24:                                        ; preds = %for.cond
  %22 = load ptr, ptr %dp, align 8
  %dir_start25 = getelementptr inbounds %struct.char_directive, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %dir_start25, align 8
  %24 = load ptr, ptr %cp, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %23 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, ptr %n, align 8
  %25 = load i64, ptr %length, align 8
  %26 = load i64, ptr %n, align 8
  %call26 = call i64 @xsum(i64 noundef %25, i64 noundef %26) #23
  store i64 %call26, ptr %augmented_length, align 8
  %27 = load i64, ptr %augmented_length, align 8
  %28 = load i64, ptr %allocated, align 8
  %cmp27 = icmp ugt i64 %27, %28
  br i1 %cmp27, label %if.then28, label %if.end65

if.then28:                                        ; preds = %if.then24
  %29 = load i64, ptr %allocated, align 8
  %cmp29 = icmp ugt i64 %29, 0
  br i1 %cmp29, label %cond.true30, label %cond.false37

cond.true30:                                      ; preds = %if.then28
  %30 = load i64, ptr %allocated, align 8
  %cmp31 = icmp ule i64 %30, 9223372036854775807
  br i1 %cmp31, label %cond.true32, label %cond.false34

cond.true32:                                      ; preds = %cond.true30
  %31 = load i64, ptr %allocated, align 8
  %mul33 = mul i64 %31, 2
  br label %cond.end35

cond.false34:                                     ; preds = %cond.true30
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi i64 [ %mul33, %cond.true32 ], [ -1, %cond.false34 ]
  br label %cond.end38

cond.false37:                                     ; preds = %if.then28
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false37, %cond.end35
  %cond39 = phi i64 [ %cond36, %cond.end35 ], [ 12, %cond.false37 ]
  store i64 %cond39, ptr %allocated, align 8
  %32 = load i64, ptr %augmented_length, align 8
  %33 = load i64, ptr %allocated, align 8
  %cmp40 = icmp ugt i64 %32, %33
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %cond.end38
  %34 = load i64, ptr %augmented_length, align 8
  store i64 %34, ptr %allocated, align 8
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %cond.end38
  %35 = load i64, ptr %allocated, align 8
  %cmp43 = icmp ule i64 %35, -1
  br i1 %cmp43, label %cond.true44, label %cond.false46

cond.true44:                                      ; preds = %if.end42
  %36 = load i64, ptr %allocated, align 8
  %mul45 = mul i64 %36, 1
  br label %cond.end47

cond.false46:                                     ; preds = %if.end42
  br label %cond.end47

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi i64 [ %mul45, %cond.true44 ], [ -1, %cond.false46 ]
  store i64 %cond48, ptr %memory_size, align 8
  %37 = load i64, ptr %memory_size, align 8
  %cmp49 = icmp eq i64 %37, -1
  br i1 %cmp49, label %if.then50, label %if.end51

if.then50:                                        ; preds = %cond.end47
  br label %out_of_memory

if.end51:                                         ; preds = %cond.end47
  %38 = load ptr, ptr %result, align 8
  %39 = load ptr, ptr %resultbuf.addr, align 8
  %cmp52 = icmp eq ptr %38, %39
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %if.end51
  %40 = load i64, ptr %memory_size, align 8
  %call54 = call noalias ptr @malloc(i64 noundef %40) #29
  store ptr %call54, ptr %memory, align 8
  br label %if.end57

if.else55:                                        ; preds = %if.end51
  %41 = load ptr, ptr %result, align 8
  %42 = load i64, ptr %memory_size, align 8
  %call56 = call ptr @rpl_realloc(ptr noundef %41, i64 noundef %42)
  store ptr %call56, ptr %memory, align 8
  br label %if.end57

if.end57:                                         ; preds = %if.else55, %if.then53
  %43 = load ptr, ptr %memory, align 8
  %cmp58 = icmp eq ptr %43, null
  br i1 %cmp58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.end57
  br label %out_of_memory

if.end60:                                         ; preds = %if.end57
  %44 = load ptr, ptr %result, align 8
  %45 = load ptr, ptr %resultbuf.addr, align 8
  %cmp61 = icmp eq ptr %44, %45
  br i1 %cmp61, label %land.lhs.true, label %if.end64

land.lhs.true:                                    ; preds = %if.end60
  %46 = load i64, ptr %length, align 8
  %cmp62 = icmp ugt i64 %46, 0
  br i1 %cmp62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %land.lhs.true
  %47 = load ptr, ptr %memory, align 8
  %48 = load ptr, ptr %result, align 8
  %49 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %47, ptr align 1 %48, i64 %49, i1 false)
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true, %if.end60
  %50 = load ptr, ptr %memory, align 8
  store ptr %50, ptr %result, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then24
  %51 = load ptr, ptr %result, align 8
  %52 = load i64, ptr %length, align 8
  %add.ptr = getelementptr inbounds i8, ptr %51, i64 %52
  %53 = load ptr, ptr %cp, align 8
  %54 = load i64, ptr %n, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %add.ptr, ptr align 1 %53, i64 %54, i1 false)
  %55 = load i64, ptr %augmented_length, align 8
  store i64 %55, ptr %length, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %for.cond
  %56 = load i64, ptr %i, align 8
  %count = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 0
  %57 = load i64, ptr %count, align 8
  %cmp67 = icmp eq i64 %56, %57
  br i1 %cmp67, label %if.then68, label %if.end69

if.then68:                                        ; preds = %if.end66
  br label %for.end1903

if.end69:                                         ; preds = %if.end66
  %58 = load ptr, ptr %dp, align 8
  %conversion = getelementptr inbounds %struct.char_directive, ptr %58, i32 0, i32 9
  %59 = load i8, ptr %conversion, align 8
  %conv = sext i8 %59 to i32
  %cmp70 = icmp eq i32 %conv, 37
  br i1 %cmp70, label %if.then72, label %if.else132

if.then72:                                        ; preds = %if.end69
  %60 = load ptr, ptr %dp, align 8
  %arg_index = getelementptr inbounds %struct.char_directive, ptr %60, i32 0, i32 10
  %61 = load i64, ptr %arg_index, align 8
  %cmp74 = icmp eq i64 %61, -1
  br i1 %cmp74, label %if.end77, label %if.then76

if.then76:                                        ; preds = %if.then72
  call void @abort() #22
  unreachable

if.end77:                                         ; preds = %if.then72
  %62 = load i64, ptr %length, align 8
  %call78 = call i64 @xsum(i64 noundef %62, i64 noundef 1) #23
  store i64 %call78, ptr %augmented_length73, align 8
  %63 = load i64, ptr %augmented_length73, align 8
  %64 = load i64, ptr %allocated, align 8
  %cmp79 = icmp ugt i64 %63, %64
  br i1 %cmp79, label %if.then81, label %if.end130

if.then81:                                        ; preds = %if.end77
  %65 = load i64, ptr %allocated, align 8
  %cmp84 = icmp ugt i64 %65, 0
  br i1 %cmp84, label %cond.true86, label %cond.false94

cond.true86:                                      ; preds = %if.then81
  %66 = load i64, ptr %allocated, align 8
  %cmp87 = icmp ule i64 %66, 9223372036854775807
  br i1 %cmp87, label %cond.true89, label %cond.false91

cond.true89:                                      ; preds = %cond.true86
  %67 = load i64, ptr %allocated, align 8
  %mul90 = mul i64 %67, 2
  br label %cond.end92

cond.false91:                                     ; preds = %cond.true86
  br label %cond.end92

cond.end92:                                       ; preds = %cond.false91, %cond.true89
  %cond93 = phi i64 [ %mul90, %cond.true89 ], [ -1, %cond.false91 ]
  br label %cond.end95

cond.false94:                                     ; preds = %if.then81
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false94, %cond.end92
  %cond96 = phi i64 [ %cond93, %cond.end92 ], [ 12, %cond.false94 ]
  store i64 %cond96, ptr %allocated, align 8
  %68 = load i64, ptr %augmented_length73, align 8
  %69 = load i64, ptr %allocated, align 8
  %cmp97 = icmp ugt i64 %68, %69
  br i1 %cmp97, label %if.then99, label %if.end100

if.then99:                                        ; preds = %cond.end95
  %70 = load i64, ptr %augmented_length73, align 8
  store i64 %70, ptr %allocated, align 8
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %cond.end95
  %71 = load i64, ptr %allocated, align 8
  %cmp101 = icmp ule i64 %71, -1
  br i1 %cmp101, label %cond.true103, label %cond.false105

cond.true103:                                     ; preds = %if.end100
  %72 = load i64, ptr %allocated, align 8
  %mul104 = mul i64 %72, 1
  br label %cond.end106

cond.false105:                                    ; preds = %if.end100
  br label %cond.end106

cond.end106:                                      ; preds = %cond.false105, %cond.true103
  %cond107 = phi i64 [ %mul104, %cond.true103 ], [ -1, %cond.false105 ]
  store i64 %cond107, ptr %memory_size82, align 8
  %73 = load i64, ptr %memory_size82, align 8
  %cmp108 = icmp eq i64 %73, -1
  br i1 %cmp108, label %if.then110, label %if.end111

if.then110:                                       ; preds = %cond.end106
  br label %out_of_memory

if.end111:                                        ; preds = %cond.end106
  %74 = load ptr, ptr %result, align 8
  %75 = load ptr, ptr %resultbuf.addr, align 8
  %cmp112 = icmp eq ptr %74, %75
  br i1 %cmp112, label %if.then114, label %if.else116

if.then114:                                       ; preds = %if.end111
  %76 = load i64, ptr %memory_size82, align 8
  %call115 = call noalias ptr @malloc(i64 noundef %76) #29
  store ptr %call115, ptr %memory83, align 8
  br label %if.end118

if.else116:                                       ; preds = %if.end111
  %77 = load ptr, ptr %result, align 8
  %78 = load i64, ptr %memory_size82, align 8
  %call117 = call ptr @rpl_realloc(ptr noundef %77, i64 noundef %78)
  store ptr %call117, ptr %memory83, align 8
  br label %if.end118

if.end118:                                        ; preds = %if.else116, %if.then114
  %79 = load ptr, ptr %memory83, align 8
  %cmp119 = icmp eq ptr %79, null
  br i1 %cmp119, label %if.then121, label %if.end122

if.then121:                                       ; preds = %if.end118
  br label %out_of_memory

if.end122:                                        ; preds = %if.end118
  %80 = load ptr, ptr %result, align 8
  %81 = load ptr, ptr %resultbuf.addr, align 8
  %cmp123 = icmp eq ptr %80, %81
  br i1 %cmp123, label %land.lhs.true125, label %if.end129

land.lhs.true125:                                 ; preds = %if.end122
  %82 = load i64, ptr %length, align 8
  %cmp126 = icmp ugt i64 %82, 0
  br i1 %cmp126, label %if.then128, label %if.end129

if.then128:                                       ; preds = %land.lhs.true125
  %83 = load ptr, ptr %memory83, align 8
  %84 = load ptr, ptr %result, align 8
  %85 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %83, ptr align 1 %84, i64 %85, i1 false)
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %land.lhs.true125, %if.end122
  %86 = load ptr, ptr %memory83, align 8
  store ptr %86, ptr %result, align 8
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end77
  %87 = load ptr, ptr %result, align 8
  %88 = load i64, ptr %length, align 8
  %arrayidx131 = getelementptr inbounds i8, ptr %87, i64 %88
  store i8 37, ptr %arrayidx131, align 1
  %89 = load i64, ptr %augmented_length73, align 8
  store i64 %89, ptr %length, align 8
  br label %if.end1900

if.else132:                                       ; preds = %if.end69
  %90 = load ptr, ptr %dp, align 8
  %arg_index133 = getelementptr inbounds %struct.char_directive, ptr %90, i32 0, i32 10
  %91 = load i64, ptr %arg_index133, align 8
  %cmp134 = icmp ne i64 %91, -1
  br i1 %cmp134, label %if.end137, label %if.then136

if.then136:                                       ; preds = %if.else132
  call void @abort() #22
  unreachable

if.end137:                                        ; preds = %if.else132
  %92 = load ptr, ptr %dp, align 8
  %conversion138 = getelementptr inbounds %struct.char_directive, ptr %92, i32 0, i32 9
  %93 = load i8, ptr %conversion138, align 8
  %conv139 = sext i8 %93 to i32
  %cmp140 = icmp eq i32 %conv139, 110
  br i1 %cmp140, label %if.then142, label %if.else143

if.then142:                                       ; preds = %if.end137
  call void @abort() #22
  unreachable

if.else143:                                       ; preds = %if.end137
  %94 = load ptr, ptr %dp, align 8
  %conversion144 = getelementptr inbounds %struct.char_directive, ptr %94, i32 0, i32 9
  %95 = load i8, ptr %conversion144, align 8
  %conv145 = sext i8 %95 to i32
  %cmp146 = icmp eq i32 %conv145, 115
  br i1 %cmp146, label %land.lhs.true148, label %if.else345

land.lhs.true148:                                 ; preds = %if.else143
  %arg = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %96 = load ptr, ptr %arg, align 8
  %97 = load ptr, ptr %dp, align 8
  %arg_index149 = getelementptr inbounds %struct.char_directive, ptr %97, i32 0, i32 10
  %98 = load i64, ptr %arg_index149, align 8
  %arrayidx150 = getelementptr inbounds %struct.argument, ptr %96, i64 %98
  %type = getelementptr inbounds %struct.argument, ptr %arrayidx150, i32 0, i32 0
  %99 = load i32, ptr %type, align 16
  %cmp151 = icmp ne i32 %99, 32
  br i1 %cmp151, label %if.then153, label %if.else345

if.then153:                                       ; preds = %land.lhs.true148
  %100 = load ptr, ptr %dp, align 8
  %flags154 = getelementptr inbounds %struct.char_directive, ptr %100, i32 0, i32 2
  %101 = load i32, ptr %flags154, align 8
  store i32 %101, ptr %flags, align 4
  store i32 0, ptr %has_width, align 4
  store i64 0, ptr %width, align 8
  %102 = load ptr, ptr %dp, align 8
  %width_start = getelementptr inbounds %struct.char_directive, ptr %102, i32 0, i32 3
  %103 = load ptr, ptr %width_start, align 8
  %104 = load ptr, ptr %dp, align 8
  %width_end = getelementptr inbounds %struct.char_directive, ptr %104, i32 0, i32 4
  %105 = load ptr, ptr %width_end, align 8
  %cmp155 = icmp ne ptr %103, %105
  br i1 %cmp155, label %if.then157, label %if.end200

if.then157:                                       ; preds = %if.then153
  %106 = load ptr, ptr %dp, align 8
  %width_arg_index = getelementptr inbounds %struct.char_directive, ptr %106, i32 0, i32 5
  %107 = load i64, ptr %width_arg_index, align 8
  %cmp158 = icmp ne i64 %107, -1
  br i1 %cmp158, label %if.then160, label %if.else179

if.then160:                                       ; preds = %if.then157
  %arg162 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %108 = load ptr, ptr %arg162, align 8
  %109 = load ptr, ptr %dp, align 8
  %width_arg_index163 = getelementptr inbounds %struct.char_directive, ptr %109, i32 0, i32 5
  %110 = load i64, ptr %width_arg_index163, align 8
  %arrayidx164 = getelementptr inbounds %struct.argument, ptr %108, i64 %110
  %type165 = getelementptr inbounds %struct.argument, ptr %arrayidx164, i32 0, i32 0
  %111 = load i32, ptr %type165, align 16
  %cmp166 = icmp eq i32 %111, 5
  br i1 %cmp166, label %if.end169, label %if.then168

if.then168:                                       ; preds = %if.then160
  call void @abort() #22
  unreachable

if.end169:                                        ; preds = %if.then160
  %arg170 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %112 = load ptr, ptr %arg170, align 8
  %113 = load ptr, ptr %dp, align 8
  %width_arg_index171 = getelementptr inbounds %struct.char_directive, ptr %113, i32 0, i32 5
  %114 = load i64, ptr %width_arg_index171, align 8
  %arrayidx172 = getelementptr inbounds %struct.argument, ptr %112, i64 %114
  %a173 = getelementptr inbounds %struct.argument, ptr %arrayidx172, i32 0, i32 1
  %115 = load i32, ptr %a173, align 16
  store i32 %115, ptr %arg161, align 4
  %116 = load i32, ptr %arg161, align 4
  %conv174 = sext i32 %116 to i64
  store i64 %conv174, ptr %width, align 8
  %117 = load i32, ptr %arg161, align 4
  %cmp175 = icmp slt i32 %117, 0
  br i1 %cmp175, label %if.then177, label %if.end178

if.then177:                                       ; preds = %if.end169
  %118 = load i32, ptr %flags, align 4
  %or = or i32 %118, 2
  store i32 %or, ptr %flags, align 4
  %119 = load i64, ptr %width, align 8
  %sub = sub i64 0, %119
  store i64 %sub, ptr %width, align 8
  br label %if.end178

if.end178:                                        ; preds = %if.then177, %if.end169
  br label %if.end195

if.else179:                                       ; preds = %if.then157
  %120 = load ptr, ptr %dp, align 8
  %width_start180 = getelementptr inbounds %struct.char_directive, ptr %120, i32 0, i32 3
  %121 = load ptr, ptr %width_start180, align 8
  store ptr %121, ptr %digitp, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.else179
  %122 = load i64, ptr %width, align 8
  %cmp181 = icmp ule i64 %122, 1844674407370955161
  br i1 %cmp181, label %cond.true183, label %cond.false185

cond.true183:                                     ; preds = %do.body
  %123 = load i64, ptr %width, align 8
  %mul184 = mul i64 %123, 10
  br label %cond.end186

cond.false185:                                    ; preds = %do.body
  br label %cond.end186

cond.end186:                                      ; preds = %cond.false185, %cond.true183
  %cond187 = phi i64 [ %mul184, %cond.true183 ], [ -1, %cond.false185 ]
  %124 = load ptr, ptr %digitp, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %124, i32 1
  store ptr %incdec.ptr, ptr %digitp, align 8
  %125 = load i8, ptr %124, align 1
  %conv188 = sext i8 %125 to i32
  %sub189 = sub nsw i32 %conv188, 48
  %conv190 = sext i32 %sub189 to i64
  %call191 = call i64 @xsum(i64 noundef %cond187, i64 noundef %conv190) #23
  store i64 %call191, ptr %width, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end186
  %126 = load ptr, ptr %digitp, align 8
  %127 = load ptr, ptr %dp, align 8
  %width_end192 = getelementptr inbounds %struct.char_directive, ptr %127, i32 0, i32 4
  %128 = load ptr, ptr %width_end192, align 8
  %cmp193 = icmp ne ptr %126, %128
  br i1 %cmp193, label %do.body, label %do.end, !llvm.loop !47

do.end:                                           ; preds = %do.cond
  br label %if.end195

if.end195:                                        ; preds = %do.end, %if.end178
  %129 = load i64, ptr %width, align 8
  %cmp196 = icmp ugt i64 %129, 2147483647
  br i1 %cmp196, label %if.then198, label %if.end199

if.then198:                                       ; preds = %if.end195
  br label %overflow

if.end199:                                        ; preds = %if.end195
  store i32 1, ptr %has_width, align 4
  br label %if.end200

if.end200:                                        ; preds = %if.end199, %if.then153
  store i32 0, ptr %has_precision, align 4
  store i64 6, ptr %precision, align 8
  %130 = load ptr, ptr %dp, align 8
  %precision_start = getelementptr inbounds %struct.char_directive, ptr %130, i32 0, i32 6
  %131 = load ptr, ptr %precision_start, align 8
  %132 = load ptr, ptr %dp, align 8
  %precision_end = getelementptr inbounds %struct.char_directive, ptr %132, i32 0, i32 7
  %133 = load ptr, ptr %precision_end, align 8
  %cmp201 = icmp ne ptr %131, %133
  br i1 %cmp201, label %if.then203, label %if.end245

if.then203:                                       ; preds = %if.end200
  %134 = load ptr, ptr %dp, align 8
  %precision_arg_index = getelementptr inbounds %struct.char_directive, ptr %134, i32 0, i32 8
  %135 = load i64, ptr %precision_arg_index, align 8
  %cmp204 = icmp ne i64 %135, -1
  br i1 %cmp204, label %if.then206, label %if.else225

if.then206:                                       ; preds = %if.then203
  %arg208 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %136 = load ptr, ptr %arg208, align 8
  %137 = load ptr, ptr %dp, align 8
  %precision_arg_index209 = getelementptr inbounds %struct.char_directive, ptr %137, i32 0, i32 8
  %138 = load i64, ptr %precision_arg_index209, align 8
  %arrayidx210 = getelementptr inbounds %struct.argument, ptr %136, i64 %138
  %type211 = getelementptr inbounds %struct.argument, ptr %arrayidx210, i32 0, i32 0
  %139 = load i32, ptr %type211, align 16
  %cmp212 = icmp eq i32 %139, 5
  br i1 %cmp212, label %if.end215, label %if.then214

if.then214:                                       ; preds = %if.then206
  call void @abort() #22
  unreachable

if.end215:                                        ; preds = %if.then206
  %arg216 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %140 = load ptr, ptr %arg216, align 8
  %141 = load ptr, ptr %dp, align 8
  %precision_arg_index217 = getelementptr inbounds %struct.char_directive, ptr %141, i32 0, i32 8
  %142 = load i64, ptr %precision_arg_index217, align 8
  %arrayidx218 = getelementptr inbounds %struct.argument, ptr %140, i64 %142
  %a219 = getelementptr inbounds %struct.argument, ptr %arrayidx218, i32 0, i32 1
  %143 = load i32, ptr %a219, align 16
  store i32 %143, ptr %arg207, align 4
  %144 = load i32, ptr %arg207, align 4
  %cmp220 = icmp sge i32 %144, 0
  br i1 %cmp220, label %if.then222, label %if.end224

if.then222:                                       ; preds = %if.end215
  %145 = load i32, ptr %arg207, align 4
  %conv223 = sext i32 %145 to i64
  store i64 %conv223, ptr %precision, align 8
  store i32 1, ptr %has_precision, align 4
  br label %if.end224

if.end224:                                        ; preds = %if.then222, %if.end215
  br label %if.end244

if.else225:                                       ; preds = %if.then203
  %146 = load ptr, ptr %dp, align 8
  %precision_start227 = getelementptr inbounds %struct.char_directive, ptr %146, i32 0, i32 6
  %147 = load ptr, ptr %precision_start227, align 8
  %add.ptr228 = getelementptr inbounds i8, ptr %147, i64 1
  store ptr %add.ptr228, ptr %digitp226, align 8
  store i64 0, ptr %precision, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end237, %if.else225
  %148 = load ptr, ptr %digitp226, align 8
  %149 = load ptr, ptr %dp, align 8
  %precision_end229 = getelementptr inbounds %struct.char_directive, ptr %149, i32 0, i32 7
  %150 = load ptr, ptr %precision_end229, align 8
  %cmp230 = icmp ne ptr %148, %150
  br i1 %cmp230, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %151 = load i64, ptr %precision, align 8
  %cmp232 = icmp ule i64 %151, 1844674407370955161
  br i1 %cmp232, label %cond.true234, label %cond.false236

cond.true234:                                     ; preds = %while.body
  %152 = load i64, ptr %precision, align 8
  %mul235 = mul i64 %152, 10
  br label %cond.end237

cond.false236:                                    ; preds = %while.body
  br label %cond.end237

cond.end237:                                      ; preds = %cond.false236, %cond.true234
  %cond238 = phi i64 [ %mul235, %cond.true234 ], [ -1, %cond.false236 ]
  %153 = load ptr, ptr %digitp226, align 8
  %incdec.ptr239 = getelementptr inbounds i8, ptr %153, i32 1
  store ptr %incdec.ptr239, ptr %digitp226, align 8
  %154 = load i8, ptr %153, align 1
  %conv240 = sext i8 %154 to i32
  %sub241 = sub nsw i32 %conv240, 48
  %conv242 = sext i32 %sub241 to i64
  %call243 = call i64 @xsum(i64 noundef %cond238, i64 noundef %conv242) #23
  store i64 %call243, ptr %precision, align 8
  br label %while.cond, !llvm.loop !48

while.end:                                        ; preds = %while.cond
  store i32 1, ptr %has_precision, align 4
  br label %if.end244

if.end244:                                        ; preds = %while.end, %if.end224
  br label %if.end245

if.end245:                                        ; preds = %if.end244, %if.end200
  %arg247 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %155 = load ptr, ptr %arg247, align 8
  %156 = load ptr, ptr %dp, align 8
  %arg_index248 = getelementptr inbounds %struct.char_directive, ptr %156, i32 0, i32 10
  %157 = load i64, ptr %arg_index248, align 8
  %arrayidx249 = getelementptr inbounds %struct.argument, ptr %155, i64 %157
  %a250 = getelementptr inbounds %struct.argument, ptr %arrayidx249, i32 0, i32 1
  %158 = load ptr, ptr %a250, align 16
  store ptr %158, ptr %arg246, align 8
  %159 = load i32, ptr %has_precision, align 4
  %tobool = icmp ne i32 %159, 0
  br i1 %tobool, label %if.then251, label %if.else253

if.then251:                                       ; preds = %if.end245
  %160 = load ptr, ptr %arg246, align 8
  %161 = load i64, ptr %precision, align 8
  %call252 = call i64 @strnlen(ptr noundef %160, i64 noundef %161) #23
  store i64 %call252, ptr %bytes, align 8
  br label %if.end255

if.else253:                                       ; preds = %if.end245
  %162 = load ptr, ptr %arg246, align 8
  %call254 = call i64 @strlen(ptr noundef %162) #23
  store i64 %call254, ptr %bytes, align 8
  br label %if.end255

if.end255:                                        ; preds = %if.else253, %if.then251
  %163 = load i32, ptr %has_width, align 4
  %tobool256 = icmp ne i32 %163, 0
  br i1 %tobool256, label %if.then257, label %if.else258

if.then257:                                       ; preds = %if.end255
  %164 = load i64, ptr %bytes, align 8
  store i64 %164, ptr %w, align 8
  br label %if.end259

if.else258:                                       ; preds = %if.end255
  store i64 0, ptr %w, align 8
  br label %if.end259

if.end259:                                        ; preds = %if.else258, %if.then257
  %165 = load i64, ptr %bytes, align 8
  %166 = load i64, ptr %w, align 8
  %167 = load i64, ptr %width, align 8
  %cmp260 = icmp ult i64 %166, %167
  br i1 %cmp260, label %cond.true262, label %cond.false264

cond.true262:                                     ; preds = %if.end259
  %168 = load i64, ptr %width, align 8
  %169 = load i64, ptr %w, align 8
  %sub263 = sub i64 %168, %169
  br label %cond.end265

cond.false264:                                    ; preds = %if.end259
  br label %cond.end265

cond.end265:                                      ; preds = %cond.false264, %cond.true262
  %cond266 = phi i64 [ %sub263, %cond.true262 ], [ 0, %cond.false264 ]
  %add = add i64 %165, %cond266
  store i64 %add, ptr %total, align 8
  %170 = load i64, ptr %length, align 8
  %171 = load i64, ptr %total, align 8
  %call267 = call i64 @xsum(i64 noundef %170, i64 noundef %171) #23
  %172 = load i64, ptr %allocated, align 8
  %cmp268 = icmp ugt i64 %call267, %172
  br i1 %cmp268, label %if.then270, label %if.end321

if.then270:                                       ; preds = %cond.end265
  %173 = load i64, ptr %allocated, align 8
  %cmp273 = icmp ugt i64 %173, 0
  br i1 %cmp273, label %cond.true275, label %cond.false283

cond.true275:                                     ; preds = %if.then270
  %174 = load i64, ptr %allocated, align 8
  %cmp276 = icmp ule i64 %174, 9223372036854775807
  br i1 %cmp276, label %cond.true278, label %cond.false280

cond.true278:                                     ; preds = %cond.true275
  %175 = load i64, ptr %allocated, align 8
  %mul279 = mul i64 %175, 2
  br label %cond.end281

cond.false280:                                    ; preds = %cond.true275
  br label %cond.end281

cond.end281:                                      ; preds = %cond.false280, %cond.true278
  %cond282 = phi i64 [ %mul279, %cond.true278 ], [ -1, %cond.false280 ]
  br label %cond.end284

cond.false283:                                    ; preds = %if.then270
  br label %cond.end284

cond.end284:                                      ; preds = %cond.false283, %cond.end281
  %cond285 = phi i64 [ %cond282, %cond.end281 ], [ 12, %cond.false283 ]
  store i64 %cond285, ptr %allocated, align 8
  %176 = load i64, ptr %length, align 8
  %177 = load i64, ptr %total, align 8
  %call286 = call i64 @xsum(i64 noundef %176, i64 noundef %177) #23
  %178 = load i64, ptr %allocated, align 8
  %cmp287 = icmp ugt i64 %call286, %178
  br i1 %cmp287, label %if.then289, label %if.end291

if.then289:                                       ; preds = %cond.end284
  %179 = load i64, ptr %length, align 8
  %180 = load i64, ptr %total, align 8
  %call290 = call i64 @xsum(i64 noundef %179, i64 noundef %180) #23
  store i64 %call290, ptr %allocated, align 8
  br label %if.end291

if.end291:                                        ; preds = %if.then289, %cond.end284
  %181 = load i64, ptr %allocated, align 8
  %cmp292 = icmp ule i64 %181, -1
  br i1 %cmp292, label %cond.true294, label %cond.false296

cond.true294:                                     ; preds = %if.end291
  %182 = load i64, ptr %allocated, align 8
  %mul295 = mul i64 %182, 1
  br label %cond.end297

cond.false296:                                    ; preds = %if.end291
  br label %cond.end297

cond.end297:                                      ; preds = %cond.false296, %cond.true294
  %cond298 = phi i64 [ %mul295, %cond.true294 ], [ -1, %cond.false296 ]
  store i64 %cond298, ptr %memory_size271, align 8
  %183 = load i64, ptr %memory_size271, align 8
  %cmp299 = icmp eq i64 %183, -1
  br i1 %cmp299, label %if.then301, label %if.end302

if.then301:                                       ; preds = %cond.end297
  br label %out_of_memory

if.end302:                                        ; preds = %cond.end297
  %184 = load ptr, ptr %result, align 8
  %185 = load ptr, ptr %resultbuf.addr, align 8
  %cmp303 = icmp eq ptr %184, %185
  br i1 %cmp303, label %if.then305, label %if.else307

if.then305:                                       ; preds = %if.end302
  %186 = load i64, ptr %memory_size271, align 8
  %call306 = call noalias ptr @malloc(i64 noundef %186) #29
  store ptr %call306, ptr %memory272, align 8
  br label %if.end309

if.else307:                                       ; preds = %if.end302
  %187 = load ptr, ptr %result, align 8
  %188 = load i64, ptr %memory_size271, align 8
  %call308 = call ptr @rpl_realloc(ptr noundef %187, i64 noundef %188)
  store ptr %call308, ptr %memory272, align 8
  br label %if.end309

if.end309:                                        ; preds = %if.else307, %if.then305
  %189 = load ptr, ptr %memory272, align 8
  %cmp310 = icmp eq ptr %189, null
  br i1 %cmp310, label %if.then312, label %if.end313

if.then312:                                       ; preds = %if.end309
  br label %out_of_memory

if.end313:                                        ; preds = %if.end309
  %190 = load ptr, ptr %result, align 8
  %191 = load ptr, ptr %resultbuf.addr, align 8
  %cmp314 = icmp eq ptr %190, %191
  br i1 %cmp314, label %land.lhs.true316, label %if.end320

land.lhs.true316:                                 ; preds = %if.end313
  %192 = load i64, ptr %length, align 8
  %cmp317 = icmp ugt i64 %192, 0
  br i1 %cmp317, label %if.then319, label %if.end320

if.then319:                                       ; preds = %land.lhs.true316
  %193 = load ptr, ptr %memory272, align 8
  %194 = load ptr, ptr %result, align 8
  %195 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %193, ptr align 1 %194, i64 %195, i1 false)
  br label %if.end320

if.end320:                                        ; preds = %if.then319, %land.lhs.true316, %if.end313
  %196 = load ptr, ptr %memory272, align 8
  store ptr %196, ptr %result, align 8
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %cond.end265
  %197 = load i64, ptr %w, align 8
  %198 = load i64, ptr %width, align 8
  %cmp322 = icmp ult i64 %197, %198
  br i1 %cmp322, label %land.lhs.true324, label %if.end331

land.lhs.true324:                                 ; preds = %if.end321
  %199 = load i32, ptr %flags, align 4
  %and = and i32 %199, 2
  %tobool325 = icmp ne i32 %and, 0
  br i1 %tobool325, label %if.end331, label %if.then326

if.then326:                                       ; preds = %land.lhs.true324
  %200 = load i64, ptr %width, align 8
  %201 = load i64, ptr %w, align 8
  %sub328 = sub i64 %200, %201
  store i64 %sub328, ptr %n327, align 8
  %202 = load ptr, ptr %result, align 8
  %203 = load i64, ptr %length, align 8
  %add.ptr329 = getelementptr inbounds i8, ptr %202, i64 %203
  %204 = load i64, ptr %n327, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %add.ptr329, i8 32, i64 %204, i1 false)
  %205 = load i64, ptr %n327, align 8
  %206 = load i64, ptr %length, align 8
  %add330 = add i64 %206, %205
  store i64 %add330, ptr %length, align 8
  br label %if.end331

if.end331:                                        ; preds = %if.then326, %land.lhs.true324, %if.end321
  %207 = load ptr, ptr %result, align 8
  %208 = load i64, ptr %length, align 8
  %add.ptr332 = getelementptr inbounds i8, ptr %207, i64 %208
  %209 = load ptr, ptr %arg246, align 8
  %210 = load i64, ptr %bytes, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %add.ptr332, ptr align 1 %209, i64 %210, i1 false)
  %211 = load i64, ptr %bytes, align 8
  %212 = load i64, ptr %length, align 8
  %add333 = add i64 %212, %211
  store i64 %add333, ptr %length, align 8
  %213 = load i64, ptr %w, align 8
  %214 = load i64, ptr %width, align 8
  %cmp334 = icmp ult i64 %213, %214
  br i1 %cmp334, label %land.lhs.true336, label %if.end344

land.lhs.true336:                                 ; preds = %if.end331
  %215 = load i32, ptr %flags, align 4
  %and337 = and i32 %215, 2
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %if.then339, label %if.end344

if.then339:                                       ; preds = %land.lhs.true336
  %216 = load i64, ptr %width, align 8
  %217 = load i64, ptr %w, align 8
  %sub341 = sub i64 %216, %217
  store i64 %sub341, ptr %n340, align 8
  %218 = load ptr, ptr %result, align 8
  %219 = load i64, ptr %length, align 8
  %add.ptr342 = getelementptr inbounds i8, ptr %218, i64 %219
  %220 = load i64, ptr %n340, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %add.ptr342, i8 32, i64 %220, i1 false)
  %221 = load i64, ptr %n340, align 8
  %222 = load i64, ptr %length, align 8
  %add343 = add i64 %222, %221
  store i64 %add343, ptr %length, align 8
  br label %if.end344

if.end344:                                        ; preds = %if.then339, %land.lhs.true336, %if.end331
  br label %if.end1898

if.else345:                                       ; preds = %land.lhs.true148, %if.else143
  %223 = load ptr, ptr %dp, align 8
  %conversion346 = getelementptr inbounds %struct.char_directive, ptr %223, i32 0, i32 9
  %224 = load i8, ptr %conversion346, align 8
  %conv347 = sext i8 %224 to i32
  %cmp348 = icmp eq i32 %conv347, 115
  br i1 %cmp348, label %land.lhs.true350, label %if.else841

land.lhs.true350:                                 ; preds = %if.else345
  %arg351 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %225 = load ptr, ptr %arg351, align 8
  %226 = load ptr, ptr %dp, align 8
  %arg_index352 = getelementptr inbounds %struct.char_directive, ptr %226, i32 0, i32 10
  %227 = load i64, ptr %arg_index352, align 8
  %arrayidx353 = getelementptr inbounds %struct.argument, ptr %225, i64 %227
  %type354 = getelementptr inbounds %struct.argument, ptr %arrayidx353, i32 0, i32 0
  %228 = load i32, ptr %type354, align 16
  %cmp355 = icmp eq i32 %228, 32
  br i1 %cmp355, label %if.then357, label %if.else841

if.then357:                                       ; preds = %land.lhs.true350
  %229 = load ptr, ptr %dp, align 8
  %flags359 = getelementptr inbounds %struct.char_directive, ptr %229, i32 0, i32 2
  %230 = load i32, ptr %flags359, align 8
  store i32 %230, ptr %flags358, align 4
  store i32 0, ptr %has_width360, align 4
  store i64 0, ptr %width361, align 8
  %231 = load ptr, ptr %dp, align 8
  %width_start364 = getelementptr inbounds %struct.char_directive, ptr %231, i32 0, i32 3
  %232 = load ptr, ptr %width_start364, align 8
  %233 = load ptr, ptr %dp, align 8
  %width_end365 = getelementptr inbounds %struct.char_directive, ptr %233, i32 0, i32 4
  %234 = load ptr, ptr %width_end365, align 8
  %cmp366 = icmp ne ptr %232, %234
  br i1 %cmp366, label %if.then368, label %if.end419

if.then368:                                       ; preds = %if.then357
  %235 = load ptr, ptr %dp, align 8
  %width_arg_index369 = getelementptr inbounds %struct.char_directive, ptr %235, i32 0, i32 5
  %236 = load i64, ptr %width_arg_index369, align 8
  %cmp370 = icmp ne i64 %236, -1
  br i1 %cmp370, label %if.then372, label %if.else393

if.then372:                                       ; preds = %if.then368
  %arg374 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %237 = load ptr, ptr %arg374, align 8
  %238 = load ptr, ptr %dp, align 8
  %width_arg_index375 = getelementptr inbounds %struct.char_directive, ptr %238, i32 0, i32 5
  %239 = load i64, ptr %width_arg_index375, align 8
  %arrayidx376 = getelementptr inbounds %struct.argument, ptr %237, i64 %239
  %type377 = getelementptr inbounds %struct.argument, ptr %arrayidx376, i32 0, i32 0
  %240 = load i32, ptr %type377, align 16
  %cmp378 = icmp eq i32 %240, 5
  br i1 %cmp378, label %if.end381, label %if.then380

if.then380:                                       ; preds = %if.then372
  call void @abort() #22
  unreachable

if.end381:                                        ; preds = %if.then372
  %arg382 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %241 = load ptr, ptr %arg382, align 8
  %242 = load ptr, ptr %dp, align 8
  %width_arg_index383 = getelementptr inbounds %struct.char_directive, ptr %242, i32 0, i32 5
  %243 = load i64, ptr %width_arg_index383, align 8
  %arrayidx384 = getelementptr inbounds %struct.argument, ptr %241, i64 %243
  %a385 = getelementptr inbounds %struct.argument, ptr %arrayidx384, i32 0, i32 1
  %244 = load i32, ptr %a385, align 16
  store i32 %244, ptr %arg373, align 4
  %245 = load i32, ptr %arg373, align 4
  %conv386 = sext i32 %245 to i64
  store i64 %conv386, ptr %width361, align 8
  %246 = load i32, ptr %arg373, align 4
  %cmp387 = icmp slt i32 %246, 0
  br i1 %cmp387, label %if.then389, label %if.end392

if.then389:                                       ; preds = %if.end381
  %247 = load i32, ptr %flags358, align 4
  %or390 = or i32 %247, 2
  store i32 %or390, ptr %flags358, align 4
  %248 = load i64, ptr %width361, align 8
  %sub391 = sub i64 0, %248
  store i64 %sub391, ptr %width361, align 8
  br label %if.end392

if.end392:                                        ; preds = %if.then389, %if.end381
  br label %if.end414

if.else393:                                       ; preds = %if.then368
  %249 = load ptr, ptr %dp, align 8
  %width_start395 = getelementptr inbounds %struct.char_directive, ptr %249, i32 0, i32 3
  %250 = load ptr, ptr %width_start395, align 8
  store ptr %250, ptr %digitp394, align 8
  br label %do.body396

do.body396:                                       ; preds = %do.cond409, %if.else393
  %251 = load i64, ptr %width361, align 8
  %cmp397 = icmp ule i64 %251, 1844674407370955161
  br i1 %cmp397, label %cond.true399, label %cond.false401

cond.true399:                                     ; preds = %do.body396
  %252 = load i64, ptr %width361, align 8
  %mul400 = mul i64 %252, 10
  br label %cond.end402

cond.false401:                                    ; preds = %do.body396
  br label %cond.end402

cond.end402:                                      ; preds = %cond.false401, %cond.true399
  %cond403 = phi i64 [ %mul400, %cond.true399 ], [ -1, %cond.false401 ]
  %253 = load ptr, ptr %digitp394, align 8
  %incdec.ptr404 = getelementptr inbounds i8, ptr %253, i32 1
  store ptr %incdec.ptr404, ptr %digitp394, align 8
  %254 = load i8, ptr %253, align 1
  %conv405 = sext i8 %254 to i32
  %sub406 = sub nsw i32 %conv405, 48
  %conv407 = sext i32 %sub406 to i64
  %call408 = call i64 @xsum(i64 noundef %cond403, i64 noundef %conv407) #23
  store i64 %call408, ptr %width361, align 8
  br label %do.cond409

do.cond409:                                       ; preds = %cond.end402
  %255 = load ptr, ptr %digitp394, align 8
  %256 = load ptr, ptr %dp, align 8
  %width_end410 = getelementptr inbounds %struct.char_directive, ptr %256, i32 0, i32 4
  %257 = load ptr, ptr %width_end410, align 8
  %cmp411 = icmp ne ptr %255, %257
  br i1 %cmp411, label %do.body396, label %do.end413, !llvm.loop !49

do.end413:                                        ; preds = %do.cond409
  br label %if.end414

if.end414:                                        ; preds = %do.end413, %if.end392
  %258 = load i64, ptr %width361, align 8
  %cmp415 = icmp ugt i64 %258, 2147483647
  br i1 %cmp415, label %if.then417, label %if.end418

if.then417:                                       ; preds = %if.end414
  br label %overflow

if.end418:                                        ; preds = %if.end414
  store i32 1, ptr %has_width360, align 4
  br label %if.end419

if.end419:                                        ; preds = %if.end418, %if.then357
  store i32 0, ptr %has_precision362, align 4
  store i64 6, ptr %precision363, align 8
  %259 = load ptr, ptr %dp, align 8
  %precision_start420 = getelementptr inbounds %struct.char_directive, ptr %259, i32 0, i32 6
  %260 = load ptr, ptr %precision_start420, align 8
  %261 = load ptr, ptr %dp, align 8
  %precision_end421 = getelementptr inbounds %struct.char_directive, ptr %261, i32 0, i32 7
  %262 = load ptr, ptr %precision_end421, align 8
  %cmp422 = icmp ne ptr %260, %262
  br i1 %cmp422, label %if.then424, label %if.end470

if.then424:                                       ; preds = %if.end419
  %263 = load ptr, ptr %dp, align 8
  %precision_arg_index425 = getelementptr inbounds %struct.char_directive, ptr %263, i32 0, i32 8
  %264 = load i64, ptr %precision_arg_index425, align 8
  %cmp426 = icmp ne i64 %264, -1
  br i1 %cmp426, label %if.then428, label %if.else447

if.then428:                                       ; preds = %if.then424
  %arg430 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %265 = load ptr, ptr %arg430, align 8
  %266 = load ptr, ptr %dp, align 8
  %precision_arg_index431 = getelementptr inbounds %struct.char_directive, ptr %266, i32 0, i32 8
  %267 = load i64, ptr %precision_arg_index431, align 8
  %arrayidx432 = getelementptr inbounds %struct.argument, ptr %265, i64 %267
  %type433 = getelementptr inbounds %struct.argument, ptr %arrayidx432, i32 0, i32 0
  %268 = load i32, ptr %type433, align 16
  %cmp434 = icmp eq i32 %268, 5
  br i1 %cmp434, label %if.end437, label %if.then436

if.then436:                                       ; preds = %if.then428
  call void @abort() #22
  unreachable

if.end437:                                        ; preds = %if.then428
  %arg438 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %269 = load ptr, ptr %arg438, align 8
  %270 = load ptr, ptr %dp, align 8
  %precision_arg_index439 = getelementptr inbounds %struct.char_directive, ptr %270, i32 0, i32 8
  %271 = load i64, ptr %precision_arg_index439, align 8
  %arrayidx440 = getelementptr inbounds %struct.argument, ptr %269, i64 %271
  %a441 = getelementptr inbounds %struct.argument, ptr %arrayidx440, i32 0, i32 1
  %272 = load i32, ptr %a441, align 16
  store i32 %272, ptr %arg429, align 4
  %273 = load i32, ptr %arg429, align 4
  %cmp442 = icmp sge i32 %273, 0
  br i1 %cmp442, label %if.then444, label %if.end446

if.then444:                                       ; preds = %if.end437
  %274 = load i32, ptr %arg429, align 4
  %conv445 = sext i32 %274 to i64
  store i64 %conv445, ptr %precision363, align 8
  store i32 1, ptr %has_precision362, align 4
  br label %if.end446

if.end446:                                        ; preds = %if.then444, %if.end437
  br label %if.end469

if.else447:                                       ; preds = %if.then424
  %275 = load ptr, ptr %dp, align 8
  %precision_start449 = getelementptr inbounds %struct.char_directive, ptr %275, i32 0, i32 6
  %276 = load ptr, ptr %precision_start449, align 8
  %add.ptr450 = getelementptr inbounds i8, ptr %276, i64 1
  store ptr %add.ptr450, ptr %digitp448, align 8
  store i64 0, ptr %precision363, align 8
  br label %while.cond451

while.cond451:                                    ; preds = %cond.end461, %if.else447
  %277 = load ptr, ptr %digitp448, align 8
  %278 = load ptr, ptr %dp, align 8
  %precision_end452 = getelementptr inbounds %struct.char_directive, ptr %278, i32 0, i32 7
  %279 = load ptr, ptr %precision_end452, align 8
  %cmp453 = icmp ne ptr %277, %279
  br i1 %cmp453, label %while.body455, label %while.end468

while.body455:                                    ; preds = %while.cond451
  %280 = load i64, ptr %precision363, align 8
  %cmp456 = icmp ule i64 %280, 1844674407370955161
  br i1 %cmp456, label %cond.true458, label %cond.false460

cond.true458:                                     ; preds = %while.body455
  %281 = load i64, ptr %precision363, align 8
  %mul459 = mul i64 %281, 10
  br label %cond.end461

cond.false460:                                    ; preds = %while.body455
  br label %cond.end461

cond.end461:                                      ; preds = %cond.false460, %cond.true458
  %cond462 = phi i64 [ %mul459, %cond.true458 ], [ -1, %cond.false460 ]
  %282 = load ptr, ptr %digitp448, align 8
  %incdec.ptr463 = getelementptr inbounds i8, ptr %282, i32 1
  store ptr %incdec.ptr463, ptr %digitp448, align 8
  %283 = load i8, ptr %282, align 1
  %conv464 = sext i8 %283 to i32
  %sub465 = sub nsw i32 %conv464, 48
  %conv466 = sext i32 %sub465 to i64
  %call467 = call i64 @xsum(i64 noundef %cond462, i64 noundef %conv466) #23
  store i64 %call467, ptr %precision363, align 8
  br label %while.cond451, !llvm.loop !50

while.end468:                                     ; preds = %while.cond451
  store i32 1, ptr %has_precision362, align 4
  br label %if.end469

if.end469:                                        ; preds = %while.end468, %if.end446
  br label %if.end470

if.end470:                                        ; preds = %if.end469, %if.end419
  %arg472 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %284 = load ptr, ptr %arg472, align 8
  %285 = load ptr, ptr %dp, align 8
  %arg_index473 = getelementptr inbounds %struct.char_directive, ptr %285, i32 0, i32 10
  %286 = load i64, ptr %arg_index473, align 8
  %arrayidx474 = getelementptr inbounds %struct.argument, ptr %284, i64 %286
  %a475 = getelementptr inbounds %struct.argument, ptr %arrayidx474, i32 0, i32 1
  %287 = load ptr, ptr %a475, align 16
  store ptr %287, ptr %arg471, align 8
  %288 = load i32, ptr %has_precision362, align 4
  %tobool478 = icmp ne i32 %288, 0
  br i1 %tobool478, label %if.then479, label %if.else506

if.then479:                                       ; preds = %if.end470
  call void @mbszero(ptr noundef %state)
  %289 = load ptr, ptr %arg471, align 8
  store ptr %289, ptr %arg_end, align 8
  store i64 0, ptr %bytes476, align 8
  br label %while.cond480

while.cond480:                                    ; preds = %if.end499, %if.then479
  %290 = load i64, ptr %precision363, align 8
  %cmp481 = icmp ugt i64 %290, 0
  br i1 %cmp481, label %while.body483, label %while.end505

while.body483:                                    ; preds = %while.cond480
  %291 = load ptr, ptr %arg_end, align 8
  %292 = load i32, ptr %291, align 4
  %cmp485 = icmp eq i32 %292, 0
  br i1 %cmp485, label %if.then487, label %if.end488

if.then487:                                       ; preds = %while.body483
  br label %while.end505

if.end488:                                        ; preds = %while.body483
  %arraydecay = getelementptr inbounds [64 x i8], ptr %cbuf, i64 0, i64 0
  %293 = load ptr, ptr %arg_end, align 8
  %294 = load i32, ptr %293, align 4
  %call489 = call i64 @wcrtomb(ptr noundef %arraydecay, i32 noundef %294, ptr noundef %state) #21
  %conv490 = trunc i64 %call489 to i32
  store i32 %conv490, ptr %count484, align 4
  %295 = load i32, ptr %count484, align 4
  %cmp491 = icmp slt i32 %295, 0
  br i1 %cmp491, label %if.then493, label %if.end494

if.then493:                                       ; preds = %if.end488
  br label %fail_with_EILSEQ

if.end494:                                        ; preds = %if.end488
  %296 = load i64, ptr %precision363, align 8
  %297 = load i32, ptr %count484, align 4
  %conv495 = zext i32 %297 to i64
  %cmp496 = icmp ult i64 %296, %conv495
  br i1 %cmp496, label %if.then498, label %if.end499

if.then498:                                       ; preds = %if.end494
  br label %while.end505

if.end499:                                        ; preds = %if.end494
  %298 = load ptr, ptr %arg_end, align 8
  %incdec.ptr500 = getelementptr inbounds i32, ptr %298, i32 1
  store ptr %incdec.ptr500, ptr %arg_end, align 8
  %299 = load i32, ptr %count484, align 4
  %conv501 = sext i32 %299 to i64
  %300 = load i64, ptr %bytes476, align 8
  %add502 = add i64 %300, %conv501
  store i64 %add502, ptr %bytes476, align 8
  %301 = load i32, ptr %count484, align 4
  %conv503 = sext i32 %301 to i64
  %302 = load i64, ptr %precision363, align 8
  %sub504 = sub i64 %302, %conv503
  store i64 %sub504, ptr %precision363, align 8
  br label %while.cond480, !llvm.loop !51

while.end505:                                     ; preds = %if.then498, %if.then487, %while.cond480
  br label %if.end531

if.else506:                                       ; preds = %if.end470
  %303 = load i32, ptr %has_width360, align 4
  %tobool507 = icmp ne i32 %303, 0
  br i1 %tobool507, label %if.then508, label %if.else527

if.then508:                                       ; preds = %if.else506
  call void @mbszero(ptr noundef %state509)
  %304 = load ptr, ptr %arg471, align 8
  store ptr %304, ptr %arg_end, align 8
  store i64 0, ptr %bytes476, align 8
  br label %for.cond510

for.cond510:                                      ; preds = %if.end523, %if.then508
  %305 = load ptr, ptr %arg_end, align 8
  %306 = load i32, ptr %305, align 4
  %cmp513 = icmp eq i32 %306, 0
  br i1 %cmp513, label %if.then515, label %if.end516

if.then515:                                       ; preds = %for.cond510
  br label %for.end

if.end516:                                        ; preds = %for.cond510
  %arraydecay517 = getelementptr inbounds [64 x i8], ptr %cbuf511, i64 0, i64 0
  %307 = load ptr, ptr %arg_end, align 8
  %308 = load i32, ptr %307, align 4
  %call518 = call i64 @wcrtomb(ptr noundef %arraydecay517, i32 noundef %308, ptr noundef %state509) #21
  %conv519 = trunc i64 %call518 to i32
  store i32 %conv519, ptr %count512, align 4
  %309 = load i32, ptr %count512, align 4
  %cmp520 = icmp slt i32 %309, 0
  br i1 %cmp520, label %if.then522, label %if.end523

if.then522:                                       ; preds = %if.end516
  br label %fail_with_EILSEQ

if.end523:                                        ; preds = %if.end516
  %310 = load ptr, ptr %arg_end, align 8
  %incdec.ptr524 = getelementptr inbounds i32, ptr %310, i32 1
  store ptr %incdec.ptr524, ptr %arg_end, align 8
  %311 = load i32, ptr %count512, align 4
  %conv525 = sext i32 %311 to i64
  %312 = load i64, ptr %bytes476, align 8
  %add526 = add i64 %312, %conv525
  store i64 %add526, ptr %bytes476, align 8
  br label %for.cond510

for.end:                                          ; preds = %if.then515
  br label %if.end530

if.else527:                                       ; preds = %if.else506
  %313 = load ptr, ptr %arg471, align 8
  %314 = load ptr, ptr %arg471, align 8
  %call528 = call i64 @wcslen(ptr noundef %314) #23
  %add.ptr529 = getelementptr inbounds i32, ptr %313, i64 %call528
  store ptr %add.ptr529, ptr %arg_end, align 8
  store i64 0, ptr %bytes476, align 8
  br label %if.end530

if.end530:                                        ; preds = %if.else527, %for.end
  br label %if.end531

if.end531:                                        ; preds = %if.end530, %while.end505
  %315 = load i32, ptr %has_width360, align 4
  %tobool532 = icmp ne i32 %315, 0
  br i1 %tobool532, label %if.then533, label %if.else534

if.then533:                                       ; preds = %if.end531
  %316 = load i64, ptr %bytes476, align 8
  store i64 %316, ptr %w477, align 8
  br label %if.end535

if.else534:                                       ; preds = %if.end531
  store i64 0, ptr %w477, align 8
  br label %if.end535

if.end535:                                        ; preds = %if.else534, %if.then533
  %317 = load i64, ptr %w477, align 8
  %318 = load i64, ptr %width361, align 8
  %cmp536 = icmp ult i64 %317, %318
  br i1 %cmp536, label %land.lhs.true538, label %if.end601

land.lhs.true538:                                 ; preds = %if.end535
  %319 = load i32, ptr %flags358, align 4
  %and539 = and i32 %319, 2
  %tobool540 = icmp ne i32 %and539, 0
  br i1 %tobool540, label %if.end601, label %if.then541

if.then541:                                       ; preds = %land.lhs.true538
  %320 = load i64, ptr %width361, align 8
  %321 = load i64, ptr %w477, align 8
  %sub543 = sub i64 %320, %321
  store i64 %sub543, ptr %n542, align 8
  %322 = load i64, ptr %length, align 8
  %323 = load i64, ptr %n542, align 8
  %call544 = call i64 @xsum(i64 noundef %322, i64 noundef %323) #23
  %324 = load i64, ptr %allocated, align 8
  %cmp545 = icmp ugt i64 %call544, %324
  br i1 %cmp545, label %if.then547, label %if.end598

if.then547:                                       ; preds = %if.then541
  %325 = load i64, ptr %allocated, align 8
  %cmp550 = icmp ugt i64 %325, 0
  br i1 %cmp550, label %cond.true552, label %cond.false560

cond.true552:                                     ; preds = %if.then547
  %326 = load i64, ptr %allocated, align 8
  %cmp553 = icmp ule i64 %326, 9223372036854775807
  br i1 %cmp553, label %cond.true555, label %cond.false557

cond.true555:                                     ; preds = %cond.true552
  %327 = load i64, ptr %allocated, align 8
  %mul556 = mul i64 %327, 2
  br label %cond.end558

cond.false557:                                    ; preds = %cond.true552
  br label %cond.end558

cond.end558:                                      ; preds = %cond.false557, %cond.true555
  %cond559 = phi i64 [ %mul556, %cond.true555 ], [ -1, %cond.false557 ]
  br label %cond.end561

cond.false560:                                    ; preds = %if.then547
  br label %cond.end561

cond.end561:                                      ; preds = %cond.false560, %cond.end558
  %cond562 = phi i64 [ %cond559, %cond.end558 ], [ 12, %cond.false560 ]
  store i64 %cond562, ptr %allocated, align 8
  %328 = load i64, ptr %length, align 8
  %329 = load i64, ptr %n542, align 8
  %call563 = call i64 @xsum(i64 noundef %328, i64 noundef %329) #23
  %330 = load i64, ptr %allocated, align 8
  %cmp564 = icmp ugt i64 %call563, %330
  br i1 %cmp564, label %if.then566, label %if.end568

if.then566:                                       ; preds = %cond.end561
  %331 = load i64, ptr %length, align 8
  %332 = load i64, ptr %n542, align 8
  %call567 = call i64 @xsum(i64 noundef %331, i64 noundef %332) #23
  store i64 %call567, ptr %allocated, align 8
  br label %if.end568

if.end568:                                        ; preds = %if.then566, %cond.end561
  %333 = load i64, ptr %allocated, align 8
  %cmp569 = icmp ule i64 %333, -1
  br i1 %cmp569, label %cond.true571, label %cond.false573

cond.true571:                                     ; preds = %if.end568
  %334 = load i64, ptr %allocated, align 8
  %mul572 = mul i64 %334, 1
  br label %cond.end574

cond.false573:                                    ; preds = %if.end568
  br label %cond.end574

cond.end574:                                      ; preds = %cond.false573, %cond.true571
  %cond575 = phi i64 [ %mul572, %cond.true571 ], [ -1, %cond.false573 ]
  store i64 %cond575, ptr %memory_size548, align 8
  %335 = load i64, ptr %memory_size548, align 8
  %cmp576 = icmp eq i64 %335, -1
  br i1 %cmp576, label %if.then578, label %if.end579

if.then578:                                       ; preds = %cond.end574
  br label %out_of_memory

if.end579:                                        ; preds = %cond.end574
  %336 = load ptr, ptr %result, align 8
  %337 = load ptr, ptr %resultbuf.addr, align 8
  %cmp580 = icmp eq ptr %336, %337
  br i1 %cmp580, label %if.then582, label %if.else584

if.then582:                                       ; preds = %if.end579
  %338 = load i64, ptr %memory_size548, align 8
  %call583 = call noalias ptr @malloc(i64 noundef %338) #29
  store ptr %call583, ptr %memory549, align 8
  br label %if.end586

if.else584:                                       ; preds = %if.end579
  %339 = load ptr, ptr %result, align 8
  %340 = load i64, ptr %memory_size548, align 8
  %call585 = call ptr @rpl_realloc(ptr noundef %339, i64 noundef %340)
  store ptr %call585, ptr %memory549, align 8
  br label %if.end586

if.end586:                                        ; preds = %if.else584, %if.then582
  %341 = load ptr, ptr %memory549, align 8
  %cmp587 = icmp eq ptr %341, null
  br i1 %cmp587, label %if.then589, label %if.end590

if.then589:                                       ; preds = %if.end586
  br label %out_of_memory

if.end590:                                        ; preds = %if.end586
  %342 = load ptr, ptr %result, align 8
  %343 = load ptr, ptr %resultbuf.addr, align 8
  %cmp591 = icmp eq ptr %342, %343
  br i1 %cmp591, label %land.lhs.true593, label %if.end597

land.lhs.true593:                                 ; preds = %if.end590
  %344 = load i64, ptr %length, align 8
  %cmp594 = icmp ugt i64 %344, 0
  br i1 %cmp594, label %if.then596, label %if.end597

if.then596:                                       ; preds = %land.lhs.true593
  %345 = load ptr, ptr %memory549, align 8
  %346 = load ptr, ptr %result, align 8
  %347 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %345, ptr align 1 %346, i64 %347, i1 false)
  br label %if.end597

if.end597:                                        ; preds = %if.then596, %land.lhs.true593, %if.end590
  %348 = load ptr, ptr %memory549, align 8
  store ptr %348, ptr %result, align 8
  br label %if.end598

if.end598:                                        ; preds = %if.end597, %if.then541
  %349 = load ptr, ptr %result, align 8
  %350 = load i64, ptr %length, align 8
  %add.ptr599 = getelementptr inbounds i8, ptr %349, i64 %350
  %351 = load i64, ptr %n542, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %add.ptr599, i8 32, i64 %351, i1 false)
  %352 = load i64, ptr %n542, align 8
  %353 = load i64, ptr %length, align 8
  %add600 = add i64 %353, %352
  store i64 %add600, ptr %length, align 8
  br label %if.end601

if.end601:                                        ; preds = %if.end598, %land.lhs.true538, %if.end535
  %354 = load i32, ptr %has_precision362, align 4
  %tobool602 = icmp ne i32 %354, 0
  br i1 %tobool602, label %if.then604, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end601
  %355 = load i32, ptr %has_width360, align 4
  %tobool603 = icmp ne i32 %355, 0
  br i1 %tobool603, label %if.then604, label %if.else690

if.then604:                                       ; preds = %lor.lhs.false, %if.end601
  call void @mbszero(ptr noundef %state605)
  %356 = load i64, ptr %length, align 8
  %357 = load i64, ptr %bytes476, align 8
  %call606 = call i64 @xsum(i64 noundef %356, i64 noundef %357) #23
  %358 = load i64, ptr %allocated, align 8
  %cmp607 = icmp ugt i64 %call606, %358
  br i1 %cmp607, label %if.then609, label %if.end660

if.then609:                                       ; preds = %if.then604
  %359 = load i64, ptr %allocated, align 8
  %cmp612 = icmp ugt i64 %359, 0
  br i1 %cmp612, label %cond.true614, label %cond.false622

cond.true614:                                     ; preds = %if.then609
  %360 = load i64, ptr %allocated, align 8
  %cmp615 = icmp ule i64 %360, 9223372036854775807
  br i1 %cmp615, label %cond.true617, label %cond.false619

cond.true617:                                     ; preds = %cond.true614
  %361 = load i64, ptr %allocated, align 8
  %mul618 = mul i64 %361, 2
  br label %cond.end620

cond.false619:                                    ; preds = %cond.true614
  br label %cond.end620

cond.end620:                                      ; preds = %cond.false619, %cond.true617
  %cond621 = phi i64 [ %mul618, %cond.true617 ], [ -1, %cond.false619 ]
  br label %cond.end623

cond.false622:                                    ; preds = %if.then609
  br label %cond.end623

cond.end623:                                      ; preds = %cond.false622, %cond.end620
  %cond624 = phi i64 [ %cond621, %cond.end620 ], [ 12, %cond.false622 ]
  store i64 %cond624, ptr %allocated, align 8
  %362 = load i64, ptr %length, align 8
  %363 = load i64, ptr %bytes476, align 8
  %call625 = call i64 @xsum(i64 noundef %362, i64 noundef %363) #23
  %364 = load i64, ptr %allocated, align 8
  %cmp626 = icmp ugt i64 %call625, %364
  br i1 %cmp626, label %if.then628, label %if.end630

if.then628:                                       ; preds = %cond.end623
  %365 = load i64, ptr %length, align 8
  %366 = load i64, ptr %bytes476, align 8
  %call629 = call i64 @xsum(i64 noundef %365, i64 noundef %366) #23
  store i64 %call629, ptr %allocated, align 8
  br label %if.end630

if.end630:                                        ; preds = %if.then628, %cond.end623
  %367 = load i64, ptr %allocated, align 8
  %cmp631 = icmp ule i64 %367, -1
  br i1 %cmp631, label %cond.true633, label %cond.false635

cond.true633:                                     ; preds = %if.end630
  %368 = load i64, ptr %allocated, align 8
  %mul634 = mul i64 %368, 1
  br label %cond.end636

cond.false635:                                    ; preds = %if.end630
  br label %cond.end636

cond.end636:                                      ; preds = %cond.false635, %cond.true633
  %cond637 = phi i64 [ %mul634, %cond.true633 ], [ -1, %cond.false635 ]
  store i64 %cond637, ptr %memory_size610, align 8
  %369 = load i64, ptr %memory_size610, align 8
  %cmp638 = icmp eq i64 %369, -1
  br i1 %cmp638, label %if.then640, label %if.end641

if.then640:                                       ; preds = %cond.end636
  br label %out_of_memory

if.end641:                                        ; preds = %cond.end636
  %370 = load ptr, ptr %result, align 8
  %371 = load ptr, ptr %resultbuf.addr, align 8
  %cmp642 = icmp eq ptr %370, %371
  br i1 %cmp642, label %if.then644, label %if.else646

if.then644:                                       ; preds = %if.end641
  %372 = load i64, ptr %memory_size610, align 8
  %call645 = call noalias ptr @malloc(i64 noundef %372) #29
  store ptr %call645, ptr %memory611, align 8
  br label %if.end648

if.else646:                                       ; preds = %if.end641
  %373 = load ptr, ptr %result, align 8
  %374 = load i64, ptr %memory_size610, align 8
  %call647 = call ptr @rpl_realloc(ptr noundef %373, i64 noundef %374)
  store ptr %call647, ptr %memory611, align 8
  br label %if.end648

if.end648:                                        ; preds = %if.else646, %if.then644
  %375 = load ptr, ptr %memory611, align 8
  %cmp649 = icmp eq ptr %375, null
  br i1 %cmp649, label %if.then651, label %if.end652

if.then651:                                       ; preds = %if.end648
  br label %out_of_memory

if.end652:                                        ; preds = %if.end648
  %376 = load ptr, ptr %result, align 8
  %377 = load ptr, ptr %resultbuf.addr, align 8
  %cmp653 = icmp eq ptr %376, %377
  br i1 %cmp653, label %land.lhs.true655, label %if.end659

land.lhs.true655:                                 ; preds = %if.end652
  %378 = load i64, ptr %length, align 8
  %cmp656 = icmp ugt i64 %378, 0
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %land.lhs.true655
  %379 = load ptr, ptr %memory611, align 8
  %380 = load ptr, ptr %result, align 8
  %381 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %379, ptr align 1 %380, i64 %381, i1 false)
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %land.lhs.true655, %if.end652
  %382 = load ptr, ptr %memory611, align 8
  store ptr %382, ptr %result, align 8
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then604
  %383 = load i64, ptr %bytes476, align 8
  store i64 %383, ptr %remaining, align 8
  br label %for.cond661

for.cond661:                                      ; preds = %if.end676, %if.end660
  %384 = load i64, ptr %remaining, align 8
  %cmp662 = icmp ugt i64 %384, 0
  br i1 %cmp662, label %for.body, label %for.end685

for.body:                                         ; preds = %for.cond661
  %385 = load ptr, ptr %arg471, align 8
  %386 = load i32, ptr %385, align 4
  %cmp666 = icmp eq i32 %386, 0
  br i1 %cmp666, label %if.then668, label %if.end669

if.then668:                                       ; preds = %for.body
  call void @abort() #22
  unreachable

if.end669:                                        ; preds = %for.body
  %arraydecay670 = getelementptr inbounds [64 x i8], ptr %cbuf664, i64 0, i64 0
  %387 = load ptr, ptr %arg471, align 8
  %388 = load i32, ptr %387, align 4
  %call671 = call i64 @wcrtomb(ptr noundef %arraydecay670, i32 noundef %388, ptr noundef %state605) #21
  %conv672 = trunc i64 %call671 to i32
  store i32 %conv672, ptr %count665, align 4
  %389 = load i32, ptr %count665, align 4
  %cmp673 = icmp sle i32 %389, 0
  br i1 %cmp673, label %if.then675, label %if.end676

if.then675:                                       ; preds = %if.end669
  call void @abort() #22
  unreachable

if.end676:                                        ; preds = %if.end669
  %390 = load ptr, ptr %result, align 8
  %391 = load i64, ptr %length, align 8
  %add.ptr677 = getelementptr inbounds i8, ptr %390, i64 %391
  %arraydecay678 = getelementptr inbounds [64 x i8], ptr %cbuf664, i64 0, i64 0
  %392 = load i32, ptr %count665, align 4
  %conv679 = sext i32 %392 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %add.ptr677, ptr align 16 %arraydecay678, i64 %conv679, i1 false)
  %393 = load i32, ptr %count665, align 4
  %conv680 = sext i32 %393 to i64
  %394 = load i64, ptr %length, align 8
  %add681 = add i64 %394, %conv680
  store i64 %add681, ptr %length, align 8
  %395 = load ptr, ptr %arg471, align 8
  %incdec.ptr682 = getelementptr inbounds i32, ptr %395, i32 1
  store ptr %incdec.ptr682, ptr %arg471, align 8
  %396 = load i32, ptr %count665, align 4
  %conv683 = sext i32 %396 to i64
  %397 = load i64, ptr %remaining, align 8
  %sub684 = sub i64 %397, %conv683
  store i64 %sub684, ptr %remaining, align 8
  br label %for.cond661, !llvm.loop !52

for.end685:                                       ; preds = %for.cond661
  %398 = load ptr, ptr %arg471, align 8
  %399 = load ptr, ptr %arg_end, align 8
  %cmp686 = icmp eq ptr %398, %399
  br i1 %cmp686, label %if.end689, label %if.then688

if.then688:                                       ; preds = %for.end685
  call void @abort() #22
  unreachable

if.end689:                                        ; preds = %for.end685
  br label %if.end774

if.else690:                                       ; preds = %lor.lhs.false
  call void @mbszero(ptr noundef %state691)
  br label %while.cond692

while.cond692:                                    ; preds = %if.end766, %if.else690
  %400 = load ptr, ptr %arg471, align 8
  %401 = load ptr, ptr %arg_end, align 8
  %cmp693 = icmp ult ptr %400, %401
  br i1 %cmp693, label %while.body695, label %while.end773

while.body695:                                    ; preds = %while.cond692
  %402 = load ptr, ptr %arg471, align 8
  %403 = load i32, ptr %402, align 4
  %cmp698 = icmp eq i32 %403, 0
  br i1 %cmp698, label %if.then700, label %if.end701

if.then700:                                       ; preds = %while.body695
  call void @abort() #22
  unreachable

if.end701:                                        ; preds = %while.body695
  %arraydecay702 = getelementptr inbounds [64 x i8], ptr %cbuf696, i64 0, i64 0
  %404 = load ptr, ptr %arg471, align 8
  %405 = load i32, ptr %404, align 4
  %call703 = call i64 @wcrtomb(ptr noundef %arraydecay702, i32 noundef %405, ptr noundef %state691) #21
  %conv704 = trunc i64 %call703 to i32
  store i32 %conv704, ptr %count697, align 4
  %406 = load i32, ptr %count697, align 4
  %cmp705 = icmp sle i32 %406, 0
  br i1 %cmp705, label %if.then707, label %if.end708

if.then707:                                       ; preds = %if.end701
  br label %fail_with_EILSEQ

if.end708:                                        ; preds = %if.end701
  %407 = load i64, ptr %length, align 8
  %408 = load i32, ptr %count697, align 4
  %conv709 = sext i32 %408 to i64
  %call710 = call i64 @xsum(i64 noundef %407, i64 noundef %conv709) #23
  %409 = load i64, ptr %allocated, align 8
  %cmp711 = icmp ugt i64 %call710, %409
  br i1 %cmp711, label %if.then713, label %if.end766

if.then713:                                       ; preds = %if.end708
  %410 = load i64, ptr %allocated, align 8
  %cmp716 = icmp ugt i64 %410, 0
  br i1 %cmp716, label %cond.true718, label %cond.false726

cond.true718:                                     ; preds = %if.then713
  %411 = load i64, ptr %allocated, align 8
  %cmp719 = icmp ule i64 %411, 9223372036854775807
  br i1 %cmp719, label %cond.true721, label %cond.false723

cond.true721:                                     ; preds = %cond.true718
  %412 = load i64, ptr %allocated, align 8
  %mul722 = mul i64 %412, 2
  br label %cond.end724

cond.false723:                                    ; preds = %cond.true718
  br label %cond.end724

cond.end724:                                      ; preds = %cond.false723, %cond.true721
  %cond725 = phi i64 [ %mul722, %cond.true721 ], [ -1, %cond.false723 ]
  br label %cond.end727

cond.false726:                                    ; preds = %if.then713
  br label %cond.end727

cond.end727:                                      ; preds = %cond.false726, %cond.end724
  %cond728 = phi i64 [ %cond725, %cond.end724 ], [ 12, %cond.false726 ]
  store i64 %cond728, ptr %allocated, align 8
  %413 = load i64, ptr %length, align 8
  %414 = load i32, ptr %count697, align 4
  %conv729 = sext i32 %414 to i64
  %call730 = call i64 @xsum(i64 noundef %413, i64 noundef %conv729) #23
  %415 = load i64, ptr %allocated, align 8
  %cmp731 = icmp ugt i64 %call730, %415
  br i1 %cmp731, label %if.then733, label %if.end736

if.then733:                                       ; preds = %cond.end727
  %416 = load i64, ptr %length, align 8
  %417 = load i32, ptr %count697, align 4
  %conv734 = sext i32 %417 to i64
  %call735 = call i64 @xsum(i64 noundef %416, i64 noundef %conv734) #23
  store i64 %call735, ptr %allocated, align 8
  br label %if.end736

if.end736:                                        ; preds = %if.then733, %cond.end727
  %418 = load i64, ptr %allocated, align 8
  %cmp737 = icmp ule i64 %418, -1
  br i1 %cmp737, label %cond.true739, label %cond.false741

cond.true739:                                     ; preds = %if.end736
  %419 = load i64, ptr %allocated, align 8
  %mul740 = mul i64 %419, 1
  br label %cond.end742

cond.false741:                                    ; preds = %if.end736
  br label %cond.end742

cond.end742:                                      ; preds = %cond.false741, %cond.true739
  %cond743 = phi i64 [ %mul740, %cond.true739 ], [ -1, %cond.false741 ]
  store i64 %cond743, ptr %memory_size714, align 8
  %420 = load i64, ptr %memory_size714, align 8
  %cmp744 = icmp eq i64 %420, -1
  br i1 %cmp744, label %if.then746, label %if.end747

if.then746:                                       ; preds = %cond.end742
  br label %out_of_memory

if.end747:                                        ; preds = %cond.end742
  %421 = load ptr, ptr %result, align 8
  %422 = load ptr, ptr %resultbuf.addr, align 8
  %cmp748 = icmp eq ptr %421, %422
  br i1 %cmp748, label %if.then750, label %if.else752

if.then750:                                       ; preds = %if.end747
  %423 = load i64, ptr %memory_size714, align 8
  %call751 = call noalias ptr @malloc(i64 noundef %423) #29
  store ptr %call751, ptr %memory715, align 8
  br label %if.end754

if.else752:                                       ; preds = %if.end747
  %424 = load ptr, ptr %result, align 8
  %425 = load i64, ptr %memory_size714, align 8
  %call753 = call ptr @rpl_realloc(ptr noundef %424, i64 noundef %425)
  store ptr %call753, ptr %memory715, align 8
  br label %if.end754

if.end754:                                        ; preds = %if.else752, %if.then750
  %426 = load ptr, ptr %memory715, align 8
  %cmp755 = icmp eq ptr %426, null
  br i1 %cmp755, label %if.then757, label %if.end758

if.then757:                                       ; preds = %if.end754
  br label %out_of_memory

if.end758:                                        ; preds = %if.end754
  %427 = load ptr, ptr %result, align 8
  %428 = load ptr, ptr %resultbuf.addr, align 8
  %cmp759 = icmp eq ptr %427, %428
  br i1 %cmp759, label %land.lhs.true761, label %if.end765

land.lhs.true761:                                 ; preds = %if.end758
  %429 = load i64, ptr %length, align 8
  %cmp762 = icmp ugt i64 %429, 0
  br i1 %cmp762, label %if.then764, label %if.end765

if.then764:                                       ; preds = %land.lhs.true761
  %430 = load ptr, ptr %memory715, align 8
  %431 = load ptr, ptr %result, align 8
  %432 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %430, ptr align 1 %431, i64 %432, i1 false)
  br label %if.end765

if.end765:                                        ; preds = %if.then764, %land.lhs.true761, %if.end758
  %433 = load ptr, ptr %memory715, align 8
  store ptr %433, ptr %result, align 8
  br label %if.end766

if.end766:                                        ; preds = %if.end765, %if.end708
  %434 = load ptr, ptr %result, align 8
  %435 = load i64, ptr %length, align 8
  %add.ptr767 = getelementptr inbounds i8, ptr %434, i64 %435
  %arraydecay768 = getelementptr inbounds [64 x i8], ptr %cbuf696, i64 0, i64 0
  %436 = load i32, ptr %count697, align 4
  %conv769 = sext i32 %436 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %add.ptr767, ptr align 16 %arraydecay768, i64 %conv769, i1 false)
  %437 = load i32, ptr %count697, align 4
  %conv770 = sext i32 %437 to i64
  %438 = load i64, ptr %length, align 8
  %add771 = add i64 %438, %conv770
  store i64 %add771, ptr %length, align 8
  %439 = load ptr, ptr %arg471, align 8
  %incdec.ptr772 = getelementptr inbounds i32, ptr %439, i32 1
  store ptr %incdec.ptr772, ptr %arg471, align 8
  br label %while.cond692, !llvm.loop !53

while.end773:                                     ; preds = %while.cond692
  br label %if.end774

if.end774:                                        ; preds = %while.end773, %if.end689
  %440 = load i64, ptr %w477, align 8
  %441 = load i64, ptr %width361, align 8
  %cmp775 = icmp ult i64 %440, %441
  br i1 %cmp775, label %land.lhs.true777, label %if.end840

land.lhs.true777:                                 ; preds = %if.end774
  %442 = load i32, ptr %flags358, align 4
  %and778 = and i32 %442, 2
  %tobool779 = icmp ne i32 %and778, 0
  br i1 %tobool779, label %if.then780, label %if.end840

if.then780:                                       ; preds = %land.lhs.true777
  %443 = load i64, ptr %width361, align 8
  %444 = load i64, ptr %w477, align 8
  %sub782 = sub i64 %443, %444
  store i64 %sub782, ptr %n781, align 8
  %445 = load i64, ptr %length, align 8
  %446 = load i64, ptr %n781, align 8
  %call783 = call i64 @xsum(i64 noundef %445, i64 noundef %446) #23
  %447 = load i64, ptr %allocated, align 8
  %cmp784 = icmp ugt i64 %call783, %447
  br i1 %cmp784, label %if.then786, label %if.end837

if.then786:                                       ; preds = %if.then780
  %448 = load i64, ptr %allocated, align 8
  %cmp789 = icmp ugt i64 %448, 0
  br i1 %cmp789, label %cond.true791, label %cond.false799

cond.true791:                                     ; preds = %if.then786
  %449 = load i64, ptr %allocated, align 8
  %cmp792 = icmp ule i64 %449, 9223372036854775807
  br i1 %cmp792, label %cond.true794, label %cond.false796

cond.true794:                                     ; preds = %cond.true791
  %450 = load i64, ptr %allocated, align 8
  %mul795 = mul i64 %450, 2
  br label %cond.end797

cond.false796:                                    ; preds = %cond.true791
  br label %cond.end797

cond.end797:                                      ; preds = %cond.false796, %cond.true794
  %cond798 = phi i64 [ %mul795, %cond.true794 ], [ -1, %cond.false796 ]
  br label %cond.end800

cond.false799:                                    ; preds = %if.then786
  br label %cond.end800

cond.end800:                                      ; preds = %cond.false799, %cond.end797
  %cond801 = phi i64 [ %cond798, %cond.end797 ], [ 12, %cond.false799 ]
  store i64 %cond801, ptr %allocated, align 8
  %451 = load i64, ptr %length, align 8
  %452 = load i64, ptr %n781, align 8
  %call802 = call i64 @xsum(i64 noundef %451, i64 noundef %452) #23
  %453 = load i64, ptr %allocated, align 8
  %cmp803 = icmp ugt i64 %call802, %453
  br i1 %cmp803, label %if.then805, label %if.end807

if.then805:                                       ; preds = %cond.end800
  %454 = load i64, ptr %length, align 8
  %455 = load i64, ptr %n781, align 8
  %call806 = call i64 @xsum(i64 noundef %454, i64 noundef %455) #23
  store i64 %call806, ptr %allocated, align 8
  br label %if.end807

if.end807:                                        ; preds = %if.then805, %cond.end800
  %456 = load i64, ptr %allocated, align 8
  %cmp808 = icmp ule i64 %456, -1
  br i1 %cmp808, label %cond.true810, label %cond.false812

cond.true810:                                     ; preds = %if.end807
  %457 = load i64, ptr %allocated, align 8
  %mul811 = mul i64 %457, 1
  br label %cond.end813

cond.false812:                                    ; preds = %if.end807
  br label %cond.end813

cond.end813:                                      ; preds = %cond.false812, %cond.true810
  %cond814 = phi i64 [ %mul811, %cond.true810 ], [ -1, %cond.false812 ]
  store i64 %cond814, ptr %memory_size787, align 8
  %458 = load i64, ptr %memory_size787, align 8
  %cmp815 = icmp eq i64 %458, -1
  br i1 %cmp815, label %if.then817, label %if.end818

if.then817:                                       ; preds = %cond.end813
  br label %out_of_memory

if.end818:                                        ; preds = %cond.end813
  %459 = load ptr, ptr %result, align 8
  %460 = load ptr, ptr %resultbuf.addr, align 8
  %cmp819 = icmp eq ptr %459, %460
  br i1 %cmp819, label %if.then821, label %if.else823

if.then821:                                       ; preds = %if.end818
  %461 = load i64, ptr %memory_size787, align 8
  %call822 = call noalias ptr @malloc(i64 noundef %461) #29
  store ptr %call822, ptr %memory788, align 8
  br label %if.end825

if.else823:                                       ; preds = %if.end818
  %462 = load ptr, ptr %result, align 8
  %463 = load i64, ptr %memory_size787, align 8
  %call824 = call ptr @rpl_realloc(ptr noundef %462, i64 noundef %463)
  store ptr %call824, ptr %memory788, align 8
  br label %if.end825

if.end825:                                        ; preds = %if.else823, %if.then821
  %464 = load ptr, ptr %memory788, align 8
  %cmp826 = icmp eq ptr %464, null
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.end825
  br label %out_of_memory

if.end829:                                        ; preds = %if.end825
  %465 = load ptr, ptr %result, align 8
  %466 = load ptr, ptr %resultbuf.addr, align 8
  %cmp830 = icmp eq ptr %465, %466
  br i1 %cmp830, label %land.lhs.true832, label %if.end836

land.lhs.true832:                                 ; preds = %if.end829
  %467 = load i64, ptr %length, align 8
  %cmp833 = icmp ugt i64 %467, 0
  br i1 %cmp833, label %if.then835, label %if.end836

if.then835:                                       ; preds = %land.lhs.true832
  %468 = load ptr, ptr %memory788, align 8
  %469 = load ptr, ptr %result, align 8
  %470 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %468, ptr align 1 %469, i64 %470, i1 false)
  br label %if.end836

if.end836:                                        ; preds = %if.then835, %land.lhs.true832, %if.end829
  %471 = load ptr, ptr %memory788, align 8
  store ptr %471, ptr %result, align 8
  br label %if.end837

if.end837:                                        ; preds = %if.end836, %if.then780
  %472 = load ptr, ptr %result, align 8
  %473 = load i64, ptr %length, align 8
  %add.ptr838 = getelementptr inbounds i8, ptr %472, i64 %473
  %474 = load i64, ptr %n781, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %add.ptr838, i8 32, i64 %474, i1 false)
  %475 = load i64, ptr %n781, align 8
  %476 = load i64, ptr %length, align 8
  %add839 = add i64 %476, %475
  store i64 %add839, ptr %length, align 8
  br label %if.end840

if.end840:                                        ; preds = %if.end837, %land.lhs.true777, %if.end774
  br label %if.end1897

if.else841:                                       ; preds = %land.lhs.true350, %if.else345
  %arg843 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %477 = load ptr, ptr %arg843, align 8
  %478 = load ptr, ptr %dp, align 8
  %arg_index844 = getelementptr inbounds %struct.char_directive, ptr %478, i32 0, i32 10
  %479 = load i64, ptr %arg_index844, align 8
  %arrayidx845 = getelementptr inbounds %struct.argument, ptr %477, i64 %479
  %type846 = getelementptr inbounds %struct.argument, ptr %arrayidx845, i32 0, i32 0
  %480 = load i32, ptr %type846, align 16
  store i32 %480, ptr %type842, align 4
  %481 = load ptr, ptr %dp, align 8
  %flags848 = getelementptr inbounds %struct.char_directive, ptr %481, i32 0, i32 2
  %482 = load i32, ptr %flags848, align 8
  store i32 %482, ptr %flags847, align 4
  %483 = load ptr, ptr %buf, align 8
  store ptr %483, ptr %fbp, align 8
  %484 = load ptr, ptr %fbp, align 8
  %incdec.ptr849 = getelementptr inbounds i8, ptr %484, i32 1
  store ptr %incdec.ptr849, ptr %fbp, align 8
  store i8 37, ptr %484, align 1
  %485 = load i32, ptr %flags847, align 4
  %and850 = and i32 %485, 1
  %tobool851 = icmp ne i32 %and850, 0
  br i1 %tobool851, label %if.then852, label %if.end854

if.then852:                                       ; preds = %if.else841
  %486 = load ptr, ptr %fbp, align 8
  %incdec.ptr853 = getelementptr inbounds i8, ptr %486, i32 1
  store ptr %incdec.ptr853, ptr %fbp, align 8
  store i8 39, ptr %486, align 1
  br label %if.end854

if.end854:                                        ; preds = %if.then852, %if.else841
  %487 = load i32, ptr %flags847, align 4
  %and855 = and i32 %487, 2
  %tobool856 = icmp ne i32 %and855, 0
  br i1 %tobool856, label %if.then857, label %if.end859

if.then857:                                       ; preds = %if.end854
  %488 = load ptr, ptr %fbp, align 8
  %incdec.ptr858 = getelementptr inbounds i8, ptr %488, i32 1
  store ptr %incdec.ptr858, ptr %fbp, align 8
  store i8 45, ptr %488, align 1
  br label %if.end859

if.end859:                                        ; preds = %if.then857, %if.end854
  %489 = load i32, ptr %flags847, align 4
  %and860 = and i32 %489, 4
  %tobool861 = icmp ne i32 %and860, 0
  br i1 %tobool861, label %if.then862, label %if.end864

if.then862:                                       ; preds = %if.end859
  %490 = load ptr, ptr %fbp, align 8
  %incdec.ptr863 = getelementptr inbounds i8, ptr %490, i32 1
  store ptr %incdec.ptr863, ptr %fbp, align 8
  store i8 43, ptr %490, align 1
  br label %if.end864

if.end864:                                        ; preds = %if.then862, %if.end859
  %491 = load i32, ptr %flags847, align 4
  %and865 = and i32 %491, 8
  %tobool866 = icmp ne i32 %and865, 0
  br i1 %tobool866, label %if.then867, label %if.end869

if.then867:                                       ; preds = %if.end864
  %492 = load ptr, ptr %fbp, align 8
  %incdec.ptr868 = getelementptr inbounds i8, ptr %492, i32 1
  store ptr %incdec.ptr868, ptr %fbp, align 8
  store i8 32, ptr %492, align 1
  br label %if.end869

if.end869:                                        ; preds = %if.then867, %if.end864
  %493 = load i32, ptr %flags847, align 4
  %and870 = and i32 %493, 16
  %tobool871 = icmp ne i32 %and870, 0
  br i1 %tobool871, label %if.then872, label %if.end874

if.then872:                                       ; preds = %if.end869
  %494 = load ptr, ptr %fbp, align 8
  %incdec.ptr873 = getelementptr inbounds i8, ptr %494, i32 1
  store ptr %incdec.ptr873, ptr %fbp, align 8
  store i8 35, ptr %494, align 1
  br label %if.end874

if.end874:                                        ; preds = %if.then872, %if.end869
  %495 = load i32, ptr %flags847, align 4
  %and875 = and i32 %495, 64
  %tobool876 = icmp ne i32 %and875, 0
  br i1 %tobool876, label %if.then877, label %if.end879

if.then877:                                       ; preds = %if.end874
  %496 = load ptr, ptr %fbp, align 8
  %incdec.ptr878 = getelementptr inbounds i8, ptr %496, i32 1
  store ptr %incdec.ptr878, ptr %fbp, align 8
  store i8 73, ptr %496, align 1
  br label %if.end879

if.end879:                                        ; preds = %if.then877, %if.end874
  %497 = load i32, ptr %flags847, align 4
  %and880 = and i32 %497, 32
  %tobool881 = icmp ne i32 %and880, 0
  br i1 %tobool881, label %if.then882, label %if.end884

if.then882:                                       ; preds = %if.end879
  %498 = load ptr, ptr %fbp, align 8
  %incdec.ptr883 = getelementptr inbounds i8, ptr %498, i32 1
  store ptr %incdec.ptr883, ptr %fbp, align 8
  store i8 48, ptr %498, align 1
  br label %if.end884

if.end884:                                        ; preds = %if.then882, %if.end879
  %499 = load ptr, ptr %dp, align 8
  %width_start885 = getelementptr inbounds %struct.char_directive, ptr %499, i32 0, i32 3
  %500 = load ptr, ptr %width_start885, align 8
  %501 = load ptr, ptr %dp, align 8
  %width_end886 = getelementptr inbounds %struct.char_directive, ptr %501, i32 0, i32 4
  %502 = load ptr, ptr %width_end886, align 8
  %cmp887 = icmp ne ptr %500, %502
  br i1 %cmp887, label %if.then889, label %if.end949

if.then889:                                       ; preds = %if.end884
  %503 = load ptr, ptr %dp, align 8
  %width_end891 = getelementptr inbounds %struct.char_directive, ptr %503, i32 0, i32 4
  %504 = load ptr, ptr %width_end891, align 8
  %505 = load ptr, ptr %dp, align 8
  %width_start892 = getelementptr inbounds %struct.char_directive, ptr %505, i32 0, i32 3
  %506 = load ptr, ptr %width_start892, align 8
  %sub.ptr.lhs.cast893 = ptrtoint ptr %504 to i64
  %sub.ptr.rhs.cast894 = ptrtoint ptr %506 to i64
  %sub.ptr.sub895 = sub i64 %sub.ptr.lhs.cast893, %sub.ptr.rhs.cast894
  store i64 %sub.ptr.sub895, ptr %n890, align 8
  %507 = load ptr, ptr %dp, align 8
  %width_arg_index897 = getelementptr inbounds %struct.char_directive, ptr %507, i32 0, i32 5
  %508 = load i64, ptr %width_arg_index897, align 8
  %cmp898 = icmp ne i64 %508, -1
  br i1 %cmp898, label %if.then900, label %if.else920

if.then900:                                       ; preds = %if.then889
  %arg902 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %509 = load ptr, ptr %arg902, align 8
  %510 = load ptr, ptr %dp, align 8
  %width_arg_index903 = getelementptr inbounds %struct.char_directive, ptr %510, i32 0, i32 5
  %511 = load i64, ptr %width_arg_index903, align 8
  %arrayidx904 = getelementptr inbounds %struct.argument, ptr %509, i64 %511
  %type905 = getelementptr inbounds %struct.argument, ptr %arrayidx904, i32 0, i32 0
  %512 = load i32, ptr %type905, align 16
  %cmp906 = icmp eq i32 %512, 5
  br i1 %cmp906, label %if.end909, label %if.then908

if.then908:                                       ; preds = %if.then900
  call void @abort() #22
  unreachable

if.end909:                                        ; preds = %if.then900
  %arg910 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %513 = load ptr, ptr %arg910, align 8
  %514 = load ptr, ptr %dp, align 8
  %width_arg_index911 = getelementptr inbounds %struct.char_directive, ptr %514, i32 0, i32 5
  %515 = load i64, ptr %width_arg_index911, align 8
  %arrayidx912 = getelementptr inbounds %struct.argument, ptr %513, i64 %515
  %a913 = getelementptr inbounds %struct.argument, ptr %arrayidx912, i32 0, i32 1
  %516 = load i32, ptr %a913, align 16
  store i32 %516, ptr %arg901, align 4
  %517 = load i32, ptr %arg901, align 4
  %conv914 = sext i32 %517 to i64
  store i64 %conv914, ptr %width896, align 8
  %518 = load i32, ptr %arg901, align 4
  %cmp915 = icmp slt i32 %518, 0
  br i1 %cmp915, label %if.then917, label %if.end919

if.then917:                                       ; preds = %if.end909
  %519 = load i64, ptr %width896, align 8
  %sub918 = sub i64 0, %519
  store i64 %sub918, ptr %width896, align 8
  br label %if.end919

if.end919:                                        ; preds = %if.then917, %if.end909
  br label %if.end941

if.else920:                                       ; preds = %if.then889
  %520 = load ptr, ptr %dp, align 8
  %width_start922 = getelementptr inbounds %struct.char_directive, ptr %520, i32 0, i32 3
  %521 = load ptr, ptr %width_start922, align 8
  store ptr %521, ptr %digitp921, align 8
  store i64 0, ptr %width896, align 8
  br label %do.body923

do.body923:                                       ; preds = %do.cond936, %if.else920
  %522 = load i64, ptr %width896, align 8
  %cmp924 = icmp ule i64 %522, 1844674407370955161
  br i1 %cmp924, label %cond.true926, label %cond.false928

cond.true926:                                     ; preds = %do.body923
  %523 = load i64, ptr %width896, align 8
  %mul927 = mul i64 %523, 10
  br label %cond.end929

cond.false928:                                    ; preds = %do.body923
  br label %cond.end929

cond.end929:                                      ; preds = %cond.false928, %cond.true926
  %cond930 = phi i64 [ %mul927, %cond.true926 ], [ -1, %cond.false928 ]
  %524 = load ptr, ptr %digitp921, align 8
  %incdec.ptr931 = getelementptr inbounds i8, ptr %524, i32 1
  store ptr %incdec.ptr931, ptr %digitp921, align 8
  %525 = load i8, ptr %524, align 1
  %conv932 = sext i8 %525 to i32
  %sub933 = sub nsw i32 %conv932, 48
  %conv934 = sext i32 %sub933 to i64
  %call935 = call i64 @xsum(i64 noundef %cond930, i64 noundef %conv934) #23
  store i64 %call935, ptr %width896, align 8
  br label %do.cond936

do.cond936:                                       ; preds = %cond.end929
  %526 = load ptr, ptr %digitp921, align 8
  %527 = load ptr, ptr %dp, align 8
  %width_end937 = getelementptr inbounds %struct.char_directive, ptr %527, i32 0, i32 4
  %528 = load ptr, ptr %width_end937, align 8
  %cmp938 = icmp ne ptr %526, %528
  br i1 %cmp938, label %do.body923, label %do.end940, !llvm.loop !54

do.end940:                                        ; preds = %do.cond936
  br label %if.end941

if.end941:                                        ; preds = %do.end940, %if.end919
  %529 = load i64, ptr %width896, align 8
  %cmp942 = icmp ugt i64 %529, 2147483647
  br i1 %cmp942, label %if.then944, label %if.end945

if.then944:                                       ; preds = %if.end941
  br label %overflow

if.end945:                                        ; preds = %if.end941
  %530 = load ptr, ptr %fbp, align 8
  %531 = load ptr, ptr %dp, align 8
  %width_start946 = getelementptr inbounds %struct.char_directive, ptr %531, i32 0, i32 3
  %532 = load ptr, ptr %width_start946, align 8
  %533 = load i64, ptr %n890, align 8
  %mul947 = mul i64 %533, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %530, ptr align 1 %532, i64 %mul947, i1 false)
  %534 = load i64, ptr %n890, align 8
  %535 = load ptr, ptr %fbp, align 8
  %add.ptr948 = getelementptr inbounds i8, ptr %535, i64 %534
  store ptr %add.ptr948, ptr %fbp, align 8
  br label %if.end949

if.end949:                                        ; preds = %if.end945, %if.end884
  %536 = load ptr, ptr %dp, align 8
  %precision_start950 = getelementptr inbounds %struct.char_directive, ptr %536, i32 0, i32 6
  %537 = load ptr, ptr %precision_start950, align 8
  %538 = load ptr, ptr %dp, align 8
  %precision_end951 = getelementptr inbounds %struct.char_directive, ptr %538, i32 0, i32 7
  %539 = load ptr, ptr %precision_end951, align 8
  %cmp952 = icmp ne ptr %537, %539
  br i1 %cmp952, label %if.then954, label %if.end964

if.then954:                                       ; preds = %if.end949
  %540 = load ptr, ptr %dp, align 8
  %precision_end956 = getelementptr inbounds %struct.char_directive, ptr %540, i32 0, i32 7
  %541 = load ptr, ptr %precision_end956, align 8
  %542 = load ptr, ptr %dp, align 8
  %precision_start957 = getelementptr inbounds %struct.char_directive, ptr %542, i32 0, i32 6
  %543 = load ptr, ptr %precision_start957, align 8
  %sub.ptr.lhs.cast958 = ptrtoint ptr %541 to i64
  %sub.ptr.rhs.cast959 = ptrtoint ptr %543 to i64
  %sub.ptr.sub960 = sub i64 %sub.ptr.lhs.cast958, %sub.ptr.rhs.cast959
  store i64 %sub.ptr.sub960, ptr %n955, align 8
  %544 = load ptr, ptr %fbp, align 8
  %545 = load ptr, ptr %dp, align 8
  %precision_start961 = getelementptr inbounds %struct.char_directive, ptr %545, i32 0, i32 6
  %546 = load ptr, ptr %precision_start961, align 8
  %547 = load i64, ptr %n955, align 8
  %mul962 = mul i64 %547, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %544, ptr align 1 %546, i64 %mul962, i1 false)
  %548 = load i64, ptr %n955, align 8
  %549 = load ptr, ptr %fbp, align 8
  %add.ptr963 = getelementptr inbounds i8, ptr %549, i64 %548
  store ptr %add.ptr963, ptr %fbp, align 8
  br label %if.end964

if.end964:                                        ; preds = %if.then954, %if.end949
  %550 = load i32, ptr %type842, align 4
  switch i32 %550, label %sw.default [
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 7, label %sw.bb966
    i32 8, label %sw.bb966
    i32 17, label %sw.bb966
    i32 18, label %sw.bb966
    i32 21, label %sw.bb966
    i32 22, label %sw.bb966
    i32 23, label %sw.bb966
    i32 24, label %sw.bb966
    i32 25, label %sw.bb966
    i32 26, label %sw.bb966
    i32 30, label %sw.bb966
    i32 32, label %sw.bb966
    i32 28, label %sw.bb968
  ]

sw.bb:                                            ; preds = %if.end964, %if.end964
  %551 = load ptr, ptr %fbp, align 8
  %incdec.ptr965 = getelementptr inbounds i8, ptr %551, i32 1
  store ptr %incdec.ptr965, ptr %fbp, align 8
  store i8 108, ptr %551, align 1
  br label %sw.bb966

sw.bb966:                                         ; preds = %sw.bb, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964
  %552 = load ptr, ptr %fbp, align 8
  %incdec.ptr967 = getelementptr inbounds i8, ptr %552, i32 1
  store ptr %incdec.ptr967, ptr %fbp, align 8
  store i8 108, ptr %552, align 1
  br label %sw.epilog

sw.bb968:                                         ; preds = %if.end964
  %553 = load ptr, ptr %fbp, align 8
  %incdec.ptr969 = getelementptr inbounds i8, ptr %553, i32 1
  store ptr %incdec.ptr969, ptr %fbp, align 8
  store i8 76, ptr %553, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %if.end964
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb968, %sw.bb966
  %554 = load ptr, ptr %dp, align 8
  %conversion970 = getelementptr inbounds %struct.char_directive, ptr %554, i32 0, i32 9
  %555 = load i8, ptr %conversion970, align 8
  %556 = load ptr, ptr %fbp, align 8
  store i8 %555, ptr %556, align 1
  %557 = load ptr, ptr %fbp, align 8
  %arrayidx971 = getelementptr inbounds i8, ptr %557, i64 1
  store i8 0, ptr %arrayidx971, align 1
  store i32 0, ptr %prefix_count, align 4
  %558 = load ptr, ptr %dp, align 8
  %width_arg_index972 = getelementptr inbounds %struct.char_directive, ptr %558, i32 0, i32 5
  %559 = load i64, ptr %width_arg_index972, align 8
  %cmp973 = icmp ne i64 %559, -1
  br i1 %cmp973, label %if.then975, label %if.end989

if.then975:                                       ; preds = %sw.epilog
  %arg976 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %560 = load ptr, ptr %arg976, align 8
  %561 = load ptr, ptr %dp, align 8
  %width_arg_index977 = getelementptr inbounds %struct.char_directive, ptr %561, i32 0, i32 5
  %562 = load i64, ptr %width_arg_index977, align 8
  %arrayidx978 = getelementptr inbounds %struct.argument, ptr %560, i64 %562
  %type979 = getelementptr inbounds %struct.argument, ptr %arrayidx978, i32 0, i32 0
  %563 = load i32, ptr %type979, align 16
  %cmp980 = icmp eq i32 %563, 5
  br i1 %cmp980, label %if.end983, label %if.then982

if.then982:                                       ; preds = %if.then975
  call void @abort() #22
  unreachable

if.end983:                                        ; preds = %if.then975
  %arg984 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %564 = load ptr, ptr %arg984, align 8
  %565 = load ptr, ptr %dp, align 8
  %width_arg_index985 = getelementptr inbounds %struct.char_directive, ptr %565, i32 0, i32 5
  %566 = load i64, ptr %width_arg_index985, align 8
  %arrayidx986 = getelementptr inbounds %struct.argument, ptr %564, i64 %566
  %a987 = getelementptr inbounds %struct.argument, ptr %arrayidx986, i32 0, i32 1
  %567 = load i32, ptr %a987, align 16
  %568 = load i32, ptr %prefix_count, align 4
  %inc = add i32 %568, 1
  store i32 %inc, ptr %prefix_count, align 4
  %idxprom = zext i32 %568 to i64
  %arrayidx988 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 %idxprom
  store i32 %567, ptr %arrayidx988, align 4
  br label %if.end989

if.end989:                                        ; preds = %if.end983, %sw.epilog
  %569 = load ptr, ptr %dp, align 8
  %precision_arg_index990 = getelementptr inbounds %struct.char_directive, ptr %569, i32 0, i32 8
  %570 = load i64, ptr %precision_arg_index990, align 8
  %cmp991 = icmp ne i64 %570, -1
  br i1 %cmp991, label %if.then993, label %if.end1009

if.then993:                                       ; preds = %if.end989
  %arg994 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %571 = load ptr, ptr %arg994, align 8
  %572 = load ptr, ptr %dp, align 8
  %precision_arg_index995 = getelementptr inbounds %struct.char_directive, ptr %572, i32 0, i32 8
  %573 = load i64, ptr %precision_arg_index995, align 8
  %arrayidx996 = getelementptr inbounds %struct.argument, ptr %571, i64 %573
  %type997 = getelementptr inbounds %struct.argument, ptr %arrayidx996, i32 0, i32 0
  %574 = load i32, ptr %type997, align 16
  %cmp998 = icmp eq i32 %574, 5
  br i1 %cmp998, label %if.end1001, label %if.then1000

if.then1000:                                      ; preds = %if.then993
  call void @abort() #22
  unreachable

if.end1001:                                       ; preds = %if.then993
  %arg1002 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %575 = load ptr, ptr %arg1002, align 8
  %576 = load ptr, ptr %dp, align 8
  %precision_arg_index1003 = getelementptr inbounds %struct.char_directive, ptr %576, i32 0, i32 8
  %577 = load i64, ptr %precision_arg_index1003, align 8
  %arrayidx1004 = getelementptr inbounds %struct.argument, ptr %575, i64 %577
  %a1005 = getelementptr inbounds %struct.argument, ptr %arrayidx1004, i32 0, i32 1
  %578 = load i32, ptr %a1005, align 16
  %579 = load i32, ptr %prefix_count, align 4
  %inc1006 = add i32 %579, 1
  store i32 %inc1006, ptr %prefix_count, align 4
  %idxprom1007 = zext i32 %579 to i64
  %arrayidx1008 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 %idxprom1007
  store i32 %578, ptr %arrayidx1008, align 4
  br label %if.end1009

if.end1009:                                       ; preds = %if.end1001, %if.end989
  %580 = load i64, ptr %length, align 8
  %call1010 = call i64 @xsum(i64 noundef %580, i64 noundef 2) #23
  %581 = load i64, ptr %allocated, align 8
  %cmp1011 = icmp ugt i64 %call1010, %581
  br i1 %cmp1011, label %if.then1013, label %if.end1064

if.then1013:                                      ; preds = %if.end1009
  %582 = load i64, ptr %allocated, align 8
  %cmp1016 = icmp ugt i64 %582, 0
  br i1 %cmp1016, label %cond.true1018, label %cond.false1026

cond.true1018:                                    ; preds = %if.then1013
  %583 = load i64, ptr %allocated, align 8
  %cmp1019 = icmp ule i64 %583, 9223372036854775807
  br i1 %cmp1019, label %cond.true1021, label %cond.false1023

cond.true1021:                                    ; preds = %cond.true1018
  %584 = load i64, ptr %allocated, align 8
  %mul1022 = mul i64 %584, 2
  br label %cond.end1024

cond.false1023:                                   ; preds = %cond.true1018
  br label %cond.end1024

cond.end1024:                                     ; preds = %cond.false1023, %cond.true1021
  %cond1025 = phi i64 [ %mul1022, %cond.true1021 ], [ -1, %cond.false1023 ]
  br label %cond.end1027

cond.false1026:                                   ; preds = %if.then1013
  br label %cond.end1027

cond.end1027:                                     ; preds = %cond.false1026, %cond.end1024
  %cond1028 = phi i64 [ %cond1025, %cond.end1024 ], [ 12, %cond.false1026 ]
  store i64 %cond1028, ptr %allocated, align 8
  %585 = load i64, ptr %length, align 8
  %call1029 = call i64 @xsum(i64 noundef %585, i64 noundef 2) #23
  %586 = load i64, ptr %allocated, align 8
  %cmp1030 = icmp ugt i64 %call1029, %586
  br i1 %cmp1030, label %if.then1032, label %if.end1034

if.then1032:                                      ; preds = %cond.end1027
  %587 = load i64, ptr %length, align 8
  %call1033 = call i64 @xsum(i64 noundef %587, i64 noundef 2) #23
  store i64 %call1033, ptr %allocated, align 8
  br label %if.end1034

if.end1034:                                       ; preds = %if.then1032, %cond.end1027
  %588 = load i64, ptr %allocated, align 8
  %cmp1035 = icmp ule i64 %588, -1
  br i1 %cmp1035, label %cond.true1037, label %cond.false1039

cond.true1037:                                    ; preds = %if.end1034
  %589 = load i64, ptr %allocated, align 8
  %mul1038 = mul i64 %589, 1
  br label %cond.end1040

cond.false1039:                                   ; preds = %if.end1034
  br label %cond.end1040

cond.end1040:                                     ; preds = %cond.false1039, %cond.true1037
  %cond1041 = phi i64 [ %mul1038, %cond.true1037 ], [ -1, %cond.false1039 ]
  store i64 %cond1041, ptr %memory_size1014, align 8
  %590 = load i64, ptr %memory_size1014, align 8
  %cmp1042 = icmp eq i64 %590, -1
  br i1 %cmp1042, label %if.then1044, label %if.end1045

if.then1044:                                      ; preds = %cond.end1040
  br label %out_of_memory

if.end1045:                                       ; preds = %cond.end1040
  %591 = load ptr, ptr %result, align 8
  %592 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1046 = icmp eq ptr %591, %592
  br i1 %cmp1046, label %if.then1048, label %if.else1050

if.then1048:                                      ; preds = %if.end1045
  %593 = load i64, ptr %memory_size1014, align 8
  %call1049 = call noalias ptr @malloc(i64 noundef %593) #29
  store ptr %call1049, ptr %memory1015, align 8
  br label %if.end1052

if.else1050:                                      ; preds = %if.end1045
  %594 = load ptr, ptr %result, align 8
  %595 = load i64, ptr %memory_size1014, align 8
  %call1051 = call ptr @rpl_realloc(ptr noundef %594, i64 noundef %595)
  store ptr %call1051, ptr %memory1015, align 8
  br label %if.end1052

if.end1052:                                       ; preds = %if.else1050, %if.then1048
  %596 = load ptr, ptr %memory1015, align 8
  %cmp1053 = icmp eq ptr %596, null
  br i1 %cmp1053, label %if.then1055, label %if.end1056

if.then1055:                                      ; preds = %if.end1052
  br label %out_of_memory

if.end1056:                                       ; preds = %if.end1052
  %597 = load ptr, ptr %result, align 8
  %598 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1057 = icmp eq ptr %597, %598
  br i1 %cmp1057, label %land.lhs.true1059, label %if.end1063

land.lhs.true1059:                                ; preds = %if.end1056
  %599 = load i64, ptr %length, align 8
  %cmp1060 = icmp ugt i64 %599, 0
  br i1 %cmp1060, label %if.then1062, label %if.end1063

if.then1062:                                      ; preds = %land.lhs.true1059
  %600 = load ptr, ptr %memory1015, align 8
  %601 = load ptr, ptr %result, align 8
  %602 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %600, ptr align 1 %601, i64 %602, i1 false)
  br label %if.end1063

if.end1063:                                       ; preds = %if.then1062, %land.lhs.true1059, %if.end1056
  %603 = load ptr, ptr %memory1015, align 8
  store ptr %603, ptr %result, align 8
  br label %if.end1064

if.end1064:                                       ; preds = %if.end1063, %if.end1009
  %604 = load ptr, ptr %result, align 8
  %605 = load i64, ptr %length, align 8
  %add.ptr1065 = getelementptr inbounds i8, ptr %604, i64 %605
  store i8 0, ptr %add.ptr1065, align 1
  %call1066 = call ptr @__errno_location() #26
  %606 = load i32, ptr %call1066, align 4
  store i32 %606, ptr %orig_errno, align 4
  br label %for.cond1067

for.cond1067:                                     ; preds = %if.end1891, %if.then1784, %if.end1064
  store i32 -1, ptr %count1068, align 4
  store i32 0, ptr %retcount, align 4
  %607 = load i64, ptr %allocated, align 8
  %608 = load i64, ptr %length, align 8
  %sub1069 = sub i64 %607, %608
  store i64 %sub1069, ptr %maxlen, align 8
  %609 = load i64, ptr %maxlen, align 8
  %cmp1070 = icmp ugt i64 %609, 2147483647
  br i1 %cmp1070, label %if.then1072, label %if.end1073

if.then1072:                                      ; preds = %for.cond1067
  store i64 2147483647, ptr %maxlen, align 8
  br label %if.end1073

if.end1073:                                       ; preds = %if.then1072, %for.cond1067
  %610 = load i64, ptr %maxlen, align 8
  %mul1074 = mul i64 %610, 1
  store i64 %mul1074, ptr %maxlen, align 8
  %call1075 = call ptr @__errno_location() #26
  store i32 0, ptr %call1075, align 4
  %611 = load i32, ptr %type842, align 4
  switch i32 %611, label %sw.default1758 [
    i32 1, label %sw.bb1076
    i32 2, label %sw.bb1097
    i32 3, label %sw.bb1118
    i32 4, label %sw.bb1139
    i32 5, label %sw.bb1160
    i32 6, label %sw.bb1180
    i32 7, label %sw.bb1200
    i32 8, label %sw.bb1220
    i32 9, label %sw.bb1240
    i32 10, label %sw.bb1260
    i32 11, label %sw.bb1280
    i32 12, label %sw.bb1303
    i32 13, label %sw.bb1326
    i32 14, label %sw.bb1349
    i32 15, label %sw.bb1372
    i32 16, label %sw.bb1392
    i32 17, label %sw.bb1412
    i32 18, label %sw.bb1432
    i32 19, label %sw.bb1452
    i32 20, label %sw.bb1475
    i32 21, label %sw.bb1498
    i32 22, label %sw.bb1518
    i32 23, label %sw.bb1538
    i32 24, label %sw.bb1558
    i32 25, label %sw.bb1578
    i32 26, label %sw.bb1598
    i32 27, label %sw.bb1618
    i32 28, label %sw.bb1638
    i32 29, label %sw.bb1658
    i32 30, label %sw.bb1678
    i32 31, label %sw.bb1698
    i32 32, label %sw.bb1718
    i32 33, label %sw.bb1738
  ]

sw.bb1076:                                        ; preds = %if.end1073
  %arg1078 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %612 = load ptr, ptr %arg1078, align 8
  %613 = load ptr, ptr %dp, align 8
  %arg_index1079 = getelementptr inbounds %struct.char_directive, ptr %613, i32 0, i32 10
  %614 = load i64, ptr %arg_index1079, align 8
  %arrayidx1080 = getelementptr inbounds %struct.argument, ptr %612, i64 %614
  %a1081 = getelementptr inbounds %struct.argument, ptr %arrayidx1080, i32 0, i32 1
  %615 = load i8, ptr %a1081, align 16
  %conv1082 = sext i8 %615 to i32
  store i32 %conv1082, ptr %arg1077, align 4
  %616 = load i32, ptr %prefix_count, align 4
  switch i32 %616, label %sw.default1095 [
    i32 0, label %sw.bb1083
    i32 1, label %sw.bb1086
    i32 2, label %sw.bb1090
  ]

sw.bb1083:                                        ; preds = %sw.bb1076
  %617 = load ptr, ptr %result, align 8
  %618 = load i64, ptr %length, align 8
  %add.ptr1084 = getelementptr inbounds i8, ptr %617, i64 %618
  %619 = load i64, ptr %maxlen, align 8
  %620 = load ptr, ptr %buf, align 8
  %621 = load i32, ptr %arg1077, align 4
  %call1085 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1084, i64 noundef %619, ptr noundef %620, i32 noundef %621, ptr noundef %count1068) #21
  store i32 %call1085, ptr %retcount, align 4
  br label %sw.epilog1096

sw.bb1086:                                        ; preds = %sw.bb1076
  %622 = load ptr, ptr %result, align 8
  %623 = load i64, ptr %length, align 8
  %add.ptr1087 = getelementptr inbounds i8, ptr %622, i64 %623
  %624 = load i64, ptr %maxlen, align 8
  %625 = load ptr, ptr %buf, align 8
  %arrayidx1088 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %626 = load i32, ptr %arrayidx1088, align 4
  %627 = load i32, ptr %arg1077, align 4
  %call1089 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1087, i64 noundef %624, ptr noundef %625, i32 noundef %626, i32 noundef %627, ptr noundef %count1068) #21
  store i32 %call1089, ptr %retcount, align 4
  br label %sw.epilog1096

sw.bb1090:                                        ; preds = %sw.bb1076
  %628 = load ptr, ptr %result, align 8
  %629 = load i64, ptr %length, align 8
  %add.ptr1091 = getelementptr inbounds i8, ptr %628, i64 %629
  %630 = load i64, ptr %maxlen, align 8
  %631 = load ptr, ptr %buf, align 8
  %arrayidx1092 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %632 = load i32, ptr %arrayidx1092, align 4
  %arrayidx1093 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %633 = load i32, ptr %arrayidx1093, align 4
  %634 = load i32, ptr %arg1077, align 4
  %call1094 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1091, i64 noundef %630, ptr noundef %631, i32 noundef %632, i32 noundef %633, i32 noundef %634, ptr noundef %count1068) #21
  store i32 %call1094, ptr %retcount, align 4
  br label %sw.epilog1096

sw.default1095:                                   ; preds = %sw.bb1076
  call void @abort() #22
  unreachable

sw.epilog1096:                                    ; preds = %sw.bb1090, %sw.bb1086, %sw.bb1083
  br label %sw.epilog1759

sw.bb1097:                                        ; preds = %if.end1073
  %arg1099 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %635 = load ptr, ptr %arg1099, align 8
  %636 = load ptr, ptr %dp, align 8
  %arg_index1100 = getelementptr inbounds %struct.char_directive, ptr %636, i32 0, i32 10
  %637 = load i64, ptr %arg_index1100, align 8
  %arrayidx1101 = getelementptr inbounds %struct.argument, ptr %635, i64 %637
  %a1102 = getelementptr inbounds %struct.argument, ptr %arrayidx1101, i32 0, i32 1
  %638 = load i8, ptr %a1102, align 16
  %conv1103 = zext i8 %638 to i32
  store i32 %conv1103, ptr %arg1098, align 4
  %639 = load i32, ptr %prefix_count, align 4
  switch i32 %639, label %sw.default1116 [
    i32 0, label %sw.bb1104
    i32 1, label %sw.bb1107
    i32 2, label %sw.bb1111
  ]

sw.bb1104:                                        ; preds = %sw.bb1097
  %640 = load ptr, ptr %result, align 8
  %641 = load i64, ptr %length, align 8
  %add.ptr1105 = getelementptr inbounds i8, ptr %640, i64 %641
  %642 = load i64, ptr %maxlen, align 8
  %643 = load ptr, ptr %buf, align 8
  %644 = load i32, ptr %arg1098, align 4
  %call1106 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1105, i64 noundef %642, ptr noundef %643, i32 noundef %644, ptr noundef %count1068) #21
  store i32 %call1106, ptr %retcount, align 4
  br label %sw.epilog1117

sw.bb1107:                                        ; preds = %sw.bb1097
  %645 = load ptr, ptr %result, align 8
  %646 = load i64, ptr %length, align 8
  %add.ptr1108 = getelementptr inbounds i8, ptr %645, i64 %646
  %647 = load i64, ptr %maxlen, align 8
  %648 = load ptr, ptr %buf, align 8
  %arrayidx1109 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %649 = load i32, ptr %arrayidx1109, align 4
  %650 = load i32, ptr %arg1098, align 4
  %call1110 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1108, i64 noundef %647, ptr noundef %648, i32 noundef %649, i32 noundef %650, ptr noundef %count1068) #21
  store i32 %call1110, ptr %retcount, align 4
  br label %sw.epilog1117

sw.bb1111:                                        ; preds = %sw.bb1097
  %651 = load ptr, ptr %result, align 8
  %652 = load i64, ptr %length, align 8
  %add.ptr1112 = getelementptr inbounds i8, ptr %651, i64 %652
  %653 = load i64, ptr %maxlen, align 8
  %654 = load ptr, ptr %buf, align 8
  %arrayidx1113 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %655 = load i32, ptr %arrayidx1113, align 4
  %arrayidx1114 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %656 = load i32, ptr %arrayidx1114, align 4
  %657 = load i32, ptr %arg1098, align 4
  %call1115 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1112, i64 noundef %653, ptr noundef %654, i32 noundef %655, i32 noundef %656, i32 noundef %657, ptr noundef %count1068) #21
  store i32 %call1115, ptr %retcount, align 4
  br label %sw.epilog1117

sw.default1116:                                   ; preds = %sw.bb1097
  call void @abort() #22
  unreachable

sw.epilog1117:                                    ; preds = %sw.bb1111, %sw.bb1107, %sw.bb1104
  br label %sw.epilog1759

sw.bb1118:                                        ; preds = %if.end1073
  %arg1120 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %658 = load ptr, ptr %arg1120, align 8
  %659 = load ptr, ptr %dp, align 8
  %arg_index1121 = getelementptr inbounds %struct.char_directive, ptr %659, i32 0, i32 10
  %660 = load i64, ptr %arg_index1121, align 8
  %arrayidx1122 = getelementptr inbounds %struct.argument, ptr %658, i64 %660
  %a1123 = getelementptr inbounds %struct.argument, ptr %arrayidx1122, i32 0, i32 1
  %661 = load i16, ptr %a1123, align 16
  %conv1124 = sext i16 %661 to i32
  store i32 %conv1124, ptr %arg1119, align 4
  %662 = load i32, ptr %prefix_count, align 4
  switch i32 %662, label %sw.default1137 [
    i32 0, label %sw.bb1125
    i32 1, label %sw.bb1128
    i32 2, label %sw.bb1132
  ]

sw.bb1125:                                        ; preds = %sw.bb1118
  %663 = load ptr, ptr %result, align 8
  %664 = load i64, ptr %length, align 8
  %add.ptr1126 = getelementptr inbounds i8, ptr %663, i64 %664
  %665 = load i64, ptr %maxlen, align 8
  %666 = load ptr, ptr %buf, align 8
  %667 = load i32, ptr %arg1119, align 4
  %call1127 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1126, i64 noundef %665, ptr noundef %666, i32 noundef %667, ptr noundef %count1068) #21
  store i32 %call1127, ptr %retcount, align 4
  br label %sw.epilog1138

sw.bb1128:                                        ; preds = %sw.bb1118
  %668 = load ptr, ptr %result, align 8
  %669 = load i64, ptr %length, align 8
  %add.ptr1129 = getelementptr inbounds i8, ptr %668, i64 %669
  %670 = load i64, ptr %maxlen, align 8
  %671 = load ptr, ptr %buf, align 8
  %arrayidx1130 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %672 = load i32, ptr %arrayidx1130, align 4
  %673 = load i32, ptr %arg1119, align 4
  %call1131 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1129, i64 noundef %670, ptr noundef %671, i32 noundef %672, i32 noundef %673, ptr noundef %count1068) #21
  store i32 %call1131, ptr %retcount, align 4
  br label %sw.epilog1138

sw.bb1132:                                        ; preds = %sw.bb1118
  %674 = load ptr, ptr %result, align 8
  %675 = load i64, ptr %length, align 8
  %add.ptr1133 = getelementptr inbounds i8, ptr %674, i64 %675
  %676 = load i64, ptr %maxlen, align 8
  %677 = load ptr, ptr %buf, align 8
  %arrayidx1134 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %678 = load i32, ptr %arrayidx1134, align 4
  %arrayidx1135 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %679 = load i32, ptr %arrayidx1135, align 4
  %680 = load i32, ptr %arg1119, align 4
  %call1136 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1133, i64 noundef %676, ptr noundef %677, i32 noundef %678, i32 noundef %679, i32 noundef %680, ptr noundef %count1068) #21
  store i32 %call1136, ptr %retcount, align 4
  br label %sw.epilog1138

sw.default1137:                                   ; preds = %sw.bb1118
  call void @abort() #22
  unreachable

sw.epilog1138:                                    ; preds = %sw.bb1132, %sw.bb1128, %sw.bb1125
  br label %sw.epilog1759

sw.bb1139:                                        ; preds = %if.end1073
  %arg1141 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %681 = load ptr, ptr %arg1141, align 8
  %682 = load ptr, ptr %dp, align 8
  %arg_index1142 = getelementptr inbounds %struct.char_directive, ptr %682, i32 0, i32 10
  %683 = load i64, ptr %arg_index1142, align 8
  %arrayidx1143 = getelementptr inbounds %struct.argument, ptr %681, i64 %683
  %a1144 = getelementptr inbounds %struct.argument, ptr %arrayidx1143, i32 0, i32 1
  %684 = load i16, ptr %a1144, align 16
  %conv1145 = zext i16 %684 to i32
  store i32 %conv1145, ptr %arg1140, align 4
  %685 = load i32, ptr %prefix_count, align 4
  switch i32 %685, label %sw.default1158 [
    i32 0, label %sw.bb1146
    i32 1, label %sw.bb1149
    i32 2, label %sw.bb1153
  ]

sw.bb1146:                                        ; preds = %sw.bb1139
  %686 = load ptr, ptr %result, align 8
  %687 = load i64, ptr %length, align 8
  %add.ptr1147 = getelementptr inbounds i8, ptr %686, i64 %687
  %688 = load i64, ptr %maxlen, align 8
  %689 = load ptr, ptr %buf, align 8
  %690 = load i32, ptr %arg1140, align 4
  %call1148 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1147, i64 noundef %688, ptr noundef %689, i32 noundef %690, ptr noundef %count1068) #21
  store i32 %call1148, ptr %retcount, align 4
  br label %sw.epilog1159

sw.bb1149:                                        ; preds = %sw.bb1139
  %691 = load ptr, ptr %result, align 8
  %692 = load i64, ptr %length, align 8
  %add.ptr1150 = getelementptr inbounds i8, ptr %691, i64 %692
  %693 = load i64, ptr %maxlen, align 8
  %694 = load ptr, ptr %buf, align 8
  %arrayidx1151 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %695 = load i32, ptr %arrayidx1151, align 4
  %696 = load i32, ptr %arg1140, align 4
  %call1152 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1150, i64 noundef %693, ptr noundef %694, i32 noundef %695, i32 noundef %696, ptr noundef %count1068) #21
  store i32 %call1152, ptr %retcount, align 4
  br label %sw.epilog1159

sw.bb1153:                                        ; preds = %sw.bb1139
  %697 = load ptr, ptr %result, align 8
  %698 = load i64, ptr %length, align 8
  %add.ptr1154 = getelementptr inbounds i8, ptr %697, i64 %698
  %699 = load i64, ptr %maxlen, align 8
  %700 = load ptr, ptr %buf, align 8
  %arrayidx1155 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %701 = load i32, ptr %arrayidx1155, align 4
  %arrayidx1156 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %702 = load i32, ptr %arrayidx1156, align 4
  %703 = load i32, ptr %arg1140, align 4
  %call1157 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1154, i64 noundef %699, ptr noundef %700, i32 noundef %701, i32 noundef %702, i32 noundef %703, ptr noundef %count1068) #21
  store i32 %call1157, ptr %retcount, align 4
  br label %sw.epilog1159

sw.default1158:                                   ; preds = %sw.bb1139
  call void @abort() #22
  unreachable

sw.epilog1159:                                    ; preds = %sw.bb1153, %sw.bb1149, %sw.bb1146
  br label %sw.epilog1759

sw.bb1160:                                        ; preds = %if.end1073
  %arg1162 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %704 = load ptr, ptr %arg1162, align 8
  %705 = load ptr, ptr %dp, align 8
  %arg_index1163 = getelementptr inbounds %struct.char_directive, ptr %705, i32 0, i32 10
  %706 = load i64, ptr %arg_index1163, align 8
  %arrayidx1164 = getelementptr inbounds %struct.argument, ptr %704, i64 %706
  %a1165 = getelementptr inbounds %struct.argument, ptr %arrayidx1164, i32 0, i32 1
  %707 = load i32, ptr %a1165, align 16
  store i32 %707, ptr %arg1161, align 4
  %708 = load i32, ptr %prefix_count, align 4
  switch i32 %708, label %sw.default1178 [
    i32 0, label %sw.bb1166
    i32 1, label %sw.bb1169
    i32 2, label %sw.bb1173
  ]

sw.bb1166:                                        ; preds = %sw.bb1160
  %709 = load ptr, ptr %result, align 8
  %710 = load i64, ptr %length, align 8
  %add.ptr1167 = getelementptr inbounds i8, ptr %709, i64 %710
  %711 = load i64, ptr %maxlen, align 8
  %712 = load ptr, ptr %buf, align 8
  %713 = load i32, ptr %arg1161, align 4
  %call1168 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1167, i64 noundef %711, ptr noundef %712, i32 noundef %713, ptr noundef %count1068) #21
  store i32 %call1168, ptr %retcount, align 4
  br label %sw.epilog1179

sw.bb1169:                                        ; preds = %sw.bb1160
  %714 = load ptr, ptr %result, align 8
  %715 = load i64, ptr %length, align 8
  %add.ptr1170 = getelementptr inbounds i8, ptr %714, i64 %715
  %716 = load i64, ptr %maxlen, align 8
  %717 = load ptr, ptr %buf, align 8
  %arrayidx1171 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %718 = load i32, ptr %arrayidx1171, align 4
  %719 = load i32, ptr %arg1161, align 4
  %call1172 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1170, i64 noundef %716, ptr noundef %717, i32 noundef %718, i32 noundef %719, ptr noundef %count1068) #21
  store i32 %call1172, ptr %retcount, align 4
  br label %sw.epilog1179

sw.bb1173:                                        ; preds = %sw.bb1160
  %720 = load ptr, ptr %result, align 8
  %721 = load i64, ptr %length, align 8
  %add.ptr1174 = getelementptr inbounds i8, ptr %720, i64 %721
  %722 = load i64, ptr %maxlen, align 8
  %723 = load ptr, ptr %buf, align 8
  %arrayidx1175 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %724 = load i32, ptr %arrayidx1175, align 4
  %arrayidx1176 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %725 = load i32, ptr %arrayidx1176, align 4
  %726 = load i32, ptr %arg1161, align 4
  %call1177 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1174, i64 noundef %722, ptr noundef %723, i32 noundef %724, i32 noundef %725, i32 noundef %726, ptr noundef %count1068) #21
  store i32 %call1177, ptr %retcount, align 4
  br label %sw.epilog1179

sw.default1178:                                   ; preds = %sw.bb1160
  call void @abort() #22
  unreachable

sw.epilog1179:                                    ; preds = %sw.bb1173, %sw.bb1169, %sw.bb1166
  br label %sw.epilog1759

sw.bb1180:                                        ; preds = %if.end1073
  %arg1182 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %727 = load ptr, ptr %arg1182, align 8
  %728 = load ptr, ptr %dp, align 8
  %arg_index1183 = getelementptr inbounds %struct.char_directive, ptr %728, i32 0, i32 10
  %729 = load i64, ptr %arg_index1183, align 8
  %arrayidx1184 = getelementptr inbounds %struct.argument, ptr %727, i64 %729
  %a1185 = getelementptr inbounds %struct.argument, ptr %arrayidx1184, i32 0, i32 1
  %730 = load i32, ptr %a1185, align 16
  store i32 %730, ptr %arg1181, align 4
  %731 = load i32, ptr %prefix_count, align 4
  switch i32 %731, label %sw.default1198 [
    i32 0, label %sw.bb1186
    i32 1, label %sw.bb1189
    i32 2, label %sw.bb1193
  ]

sw.bb1186:                                        ; preds = %sw.bb1180
  %732 = load ptr, ptr %result, align 8
  %733 = load i64, ptr %length, align 8
  %add.ptr1187 = getelementptr inbounds i8, ptr %732, i64 %733
  %734 = load i64, ptr %maxlen, align 8
  %735 = load ptr, ptr %buf, align 8
  %736 = load i32, ptr %arg1181, align 4
  %call1188 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1187, i64 noundef %734, ptr noundef %735, i32 noundef %736, ptr noundef %count1068) #21
  store i32 %call1188, ptr %retcount, align 4
  br label %sw.epilog1199

sw.bb1189:                                        ; preds = %sw.bb1180
  %737 = load ptr, ptr %result, align 8
  %738 = load i64, ptr %length, align 8
  %add.ptr1190 = getelementptr inbounds i8, ptr %737, i64 %738
  %739 = load i64, ptr %maxlen, align 8
  %740 = load ptr, ptr %buf, align 8
  %arrayidx1191 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %741 = load i32, ptr %arrayidx1191, align 4
  %742 = load i32, ptr %arg1181, align 4
  %call1192 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1190, i64 noundef %739, ptr noundef %740, i32 noundef %741, i32 noundef %742, ptr noundef %count1068) #21
  store i32 %call1192, ptr %retcount, align 4
  br label %sw.epilog1199

sw.bb1193:                                        ; preds = %sw.bb1180
  %743 = load ptr, ptr %result, align 8
  %744 = load i64, ptr %length, align 8
  %add.ptr1194 = getelementptr inbounds i8, ptr %743, i64 %744
  %745 = load i64, ptr %maxlen, align 8
  %746 = load ptr, ptr %buf, align 8
  %arrayidx1195 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %747 = load i32, ptr %arrayidx1195, align 4
  %arrayidx1196 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %748 = load i32, ptr %arrayidx1196, align 4
  %749 = load i32, ptr %arg1181, align 4
  %call1197 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1194, i64 noundef %745, ptr noundef %746, i32 noundef %747, i32 noundef %748, i32 noundef %749, ptr noundef %count1068) #21
  store i32 %call1197, ptr %retcount, align 4
  br label %sw.epilog1199

sw.default1198:                                   ; preds = %sw.bb1180
  call void @abort() #22
  unreachable

sw.epilog1199:                                    ; preds = %sw.bb1193, %sw.bb1189, %sw.bb1186
  br label %sw.epilog1759

sw.bb1200:                                        ; preds = %if.end1073
  %arg1202 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %750 = load ptr, ptr %arg1202, align 8
  %751 = load ptr, ptr %dp, align 8
  %arg_index1203 = getelementptr inbounds %struct.char_directive, ptr %751, i32 0, i32 10
  %752 = load i64, ptr %arg_index1203, align 8
  %arrayidx1204 = getelementptr inbounds %struct.argument, ptr %750, i64 %752
  %a1205 = getelementptr inbounds %struct.argument, ptr %arrayidx1204, i32 0, i32 1
  %753 = load i64, ptr %a1205, align 16
  store i64 %753, ptr %arg1201, align 8
  %754 = load i32, ptr %prefix_count, align 4
  switch i32 %754, label %sw.default1218 [
    i32 0, label %sw.bb1206
    i32 1, label %sw.bb1209
    i32 2, label %sw.bb1213
  ]

sw.bb1206:                                        ; preds = %sw.bb1200
  %755 = load ptr, ptr %result, align 8
  %756 = load i64, ptr %length, align 8
  %add.ptr1207 = getelementptr inbounds i8, ptr %755, i64 %756
  %757 = load i64, ptr %maxlen, align 8
  %758 = load ptr, ptr %buf, align 8
  %759 = load i64, ptr %arg1201, align 8
  %call1208 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1207, i64 noundef %757, ptr noundef %758, i64 noundef %759, ptr noundef %count1068) #21
  store i32 %call1208, ptr %retcount, align 4
  br label %sw.epilog1219

sw.bb1209:                                        ; preds = %sw.bb1200
  %760 = load ptr, ptr %result, align 8
  %761 = load i64, ptr %length, align 8
  %add.ptr1210 = getelementptr inbounds i8, ptr %760, i64 %761
  %762 = load i64, ptr %maxlen, align 8
  %763 = load ptr, ptr %buf, align 8
  %arrayidx1211 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %764 = load i32, ptr %arrayidx1211, align 4
  %765 = load i64, ptr %arg1201, align 8
  %call1212 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1210, i64 noundef %762, ptr noundef %763, i32 noundef %764, i64 noundef %765, ptr noundef %count1068) #21
  store i32 %call1212, ptr %retcount, align 4
  br label %sw.epilog1219

sw.bb1213:                                        ; preds = %sw.bb1200
  %766 = load ptr, ptr %result, align 8
  %767 = load i64, ptr %length, align 8
  %add.ptr1214 = getelementptr inbounds i8, ptr %766, i64 %767
  %768 = load i64, ptr %maxlen, align 8
  %769 = load ptr, ptr %buf, align 8
  %arrayidx1215 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %770 = load i32, ptr %arrayidx1215, align 4
  %arrayidx1216 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %771 = load i32, ptr %arrayidx1216, align 4
  %772 = load i64, ptr %arg1201, align 8
  %call1217 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1214, i64 noundef %768, ptr noundef %769, i32 noundef %770, i32 noundef %771, i64 noundef %772, ptr noundef %count1068) #21
  store i32 %call1217, ptr %retcount, align 4
  br label %sw.epilog1219

sw.default1218:                                   ; preds = %sw.bb1200
  call void @abort() #22
  unreachable

sw.epilog1219:                                    ; preds = %sw.bb1213, %sw.bb1209, %sw.bb1206
  br label %sw.epilog1759

sw.bb1220:                                        ; preds = %if.end1073
  %arg1222 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %773 = load ptr, ptr %arg1222, align 8
  %774 = load ptr, ptr %dp, align 8
  %arg_index1223 = getelementptr inbounds %struct.char_directive, ptr %774, i32 0, i32 10
  %775 = load i64, ptr %arg_index1223, align 8
  %arrayidx1224 = getelementptr inbounds %struct.argument, ptr %773, i64 %775
  %a1225 = getelementptr inbounds %struct.argument, ptr %arrayidx1224, i32 0, i32 1
  %776 = load i64, ptr %a1225, align 16
  store i64 %776, ptr %arg1221, align 8
  %777 = load i32, ptr %prefix_count, align 4
  switch i32 %777, label %sw.default1238 [
    i32 0, label %sw.bb1226
    i32 1, label %sw.bb1229
    i32 2, label %sw.bb1233
  ]

sw.bb1226:                                        ; preds = %sw.bb1220
  %778 = load ptr, ptr %result, align 8
  %779 = load i64, ptr %length, align 8
  %add.ptr1227 = getelementptr inbounds i8, ptr %778, i64 %779
  %780 = load i64, ptr %maxlen, align 8
  %781 = load ptr, ptr %buf, align 8
  %782 = load i64, ptr %arg1221, align 8
  %call1228 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1227, i64 noundef %780, ptr noundef %781, i64 noundef %782, ptr noundef %count1068) #21
  store i32 %call1228, ptr %retcount, align 4
  br label %sw.epilog1239

sw.bb1229:                                        ; preds = %sw.bb1220
  %783 = load ptr, ptr %result, align 8
  %784 = load i64, ptr %length, align 8
  %add.ptr1230 = getelementptr inbounds i8, ptr %783, i64 %784
  %785 = load i64, ptr %maxlen, align 8
  %786 = load ptr, ptr %buf, align 8
  %arrayidx1231 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %787 = load i32, ptr %arrayidx1231, align 4
  %788 = load i64, ptr %arg1221, align 8
  %call1232 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1230, i64 noundef %785, ptr noundef %786, i32 noundef %787, i64 noundef %788, ptr noundef %count1068) #21
  store i32 %call1232, ptr %retcount, align 4
  br label %sw.epilog1239

sw.bb1233:                                        ; preds = %sw.bb1220
  %789 = load ptr, ptr %result, align 8
  %790 = load i64, ptr %length, align 8
  %add.ptr1234 = getelementptr inbounds i8, ptr %789, i64 %790
  %791 = load i64, ptr %maxlen, align 8
  %792 = load ptr, ptr %buf, align 8
  %arrayidx1235 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %793 = load i32, ptr %arrayidx1235, align 4
  %arrayidx1236 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %794 = load i32, ptr %arrayidx1236, align 4
  %795 = load i64, ptr %arg1221, align 8
  %call1237 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1234, i64 noundef %791, ptr noundef %792, i32 noundef %793, i32 noundef %794, i64 noundef %795, ptr noundef %count1068) #21
  store i32 %call1237, ptr %retcount, align 4
  br label %sw.epilog1239

sw.default1238:                                   ; preds = %sw.bb1220
  call void @abort() #22
  unreachable

sw.epilog1239:                                    ; preds = %sw.bb1233, %sw.bb1229, %sw.bb1226
  br label %sw.epilog1759

sw.bb1240:                                        ; preds = %if.end1073
  %arg1242 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %796 = load ptr, ptr %arg1242, align 8
  %797 = load ptr, ptr %dp, align 8
  %arg_index1243 = getelementptr inbounds %struct.char_directive, ptr %797, i32 0, i32 10
  %798 = load i64, ptr %arg_index1243, align 8
  %arrayidx1244 = getelementptr inbounds %struct.argument, ptr %796, i64 %798
  %a1245 = getelementptr inbounds %struct.argument, ptr %arrayidx1244, i32 0, i32 1
  %799 = load i64, ptr %a1245, align 16
  store i64 %799, ptr %arg1241, align 8
  %800 = load i32, ptr %prefix_count, align 4
  switch i32 %800, label %sw.default1258 [
    i32 0, label %sw.bb1246
    i32 1, label %sw.bb1249
    i32 2, label %sw.bb1253
  ]

sw.bb1246:                                        ; preds = %sw.bb1240
  %801 = load ptr, ptr %result, align 8
  %802 = load i64, ptr %length, align 8
  %add.ptr1247 = getelementptr inbounds i8, ptr %801, i64 %802
  %803 = load i64, ptr %maxlen, align 8
  %804 = load ptr, ptr %buf, align 8
  %805 = load i64, ptr %arg1241, align 8
  %call1248 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1247, i64 noundef %803, ptr noundef %804, i64 noundef %805, ptr noundef %count1068) #21
  store i32 %call1248, ptr %retcount, align 4
  br label %sw.epilog1259

sw.bb1249:                                        ; preds = %sw.bb1240
  %806 = load ptr, ptr %result, align 8
  %807 = load i64, ptr %length, align 8
  %add.ptr1250 = getelementptr inbounds i8, ptr %806, i64 %807
  %808 = load i64, ptr %maxlen, align 8
  %809 = load ptr, ptr %buf, align 8
  %arrayidx1251 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %810 = load i32, ptr %arrayidx1251, align 4
  %811 = load i64, ptr %arg1241, align 8
  %call1252 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1250, i64 noundef %808, ptr noundef %809, i32 noundef %810, i64 noundef %811, ptr noundef %count1068) #21
  store i32 %call1252, ptr %retcount, align 4
  br label %sw.epilog1259

sw.bb1253:                                        ; preds = %sw.bb1240
  %812 = load ptr, ptr %result, align 8
  %813 = load i64, ptr %length, align 8
  %add.ptr1254 = getelementptr inbounds i8, ptr %812, i64 %813
  %814 = load i64, ptr %maxlen, align 8
  %815 = load ptr, ptr %buf, align 8
  %arrayidx1255 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %816 = load i32, ptr %arrayidx1255, align 4
  %arrayidx1256 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %817 = load i32, ptr %arrayidx1256, align 4
  %818 = load i64, ptr %arg1241, align 8
  %call1257 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1254, i64 noundef %814, ptr noundef %815, i32 noundef %816, i32 noundef %817, i64 noundef %818, ptr noundef %count1068) #21
  store i32 %call1257, ptr %retcount, align 4
  br label %sw.epilog1259

sw.default1258:                                   ; preds = %sw.bb1240
  call void @abort() #22
  unreachable

sw.epilog1259:                                    ; preds = %sw.bb1253, %sw.bb1249, %sw.bb1246
  br label %sw.epilog1759

sw.bb1260:                                        ; preds = %if.end1073
  %arg1262 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %819 = load ptr, ptr %arg1262, align 8
  %820 = load ptr, ptr %dp, align 8
  %arg_index1263 = getelementptr inbounds %struct.char_directive, ptr %820, i32 0, i32 10
  %821 = load i64, ptr %arg_index1263, align 8
  %arrayidx1264 = getelementptr inbounds %struct.argument, ptr %819, i64 %821
  %a1265 = getelementptr inbounds %struct.argument, ptr %arrayidx1264, i32 0, i32 1
  %822 = load i64, ptr %a1265, align 16
  store i64 %822, ptr %arg1261, align 8
  %823 = load i32, ptr %prefix_count, align 4
  switch i32 %823, label %sw.default1278 [
    i32 0, label %sw.bb1266
    i32 1, label %sw.bb1269
    i32 2, label %sw.bb1273
  ]

sw.bb1266:                                        ; preds = %sw.bb1260
  %824 = load ptr, ptr %result, align 8
  %825 = load i64, ptr %length, align 8
  %add.ptr1267 = getelementptr inbounds i8, ptr %824, i64 %825
  %826 = load i64, ptr %maxlen, align 8
  %827 = load ptr, ptr %buf, align 8
  %828 = load i64, ptr %arg1261, align 8
  %call1268 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1267, i64 noundef %826, ptr noundef %827, i64 noundef %828, ptr noundef %count1068) #21
  store i32 %call1268, ptr %retcount, align 4
  br label %sw.epilog1279

sw.bb1269:                                        ; preds = %sw.bb1260
  %829 = load ptr, ptr %result, align 8
  %830 = load i64, ptr %length, align 8
  %add.ptr1270 = getelementptr inbounds i8, ptr %829, i64 %830
  %831 = load i64, ptr %maxlen, align 8
  %832 = load ptr, ptr %buf, align 8
  %arrayidx1271 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %833 = load i32, ptr %arrayidx1271, align 4
  %834 = load i64, ptr %arg1261, align 8
  %call1272 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1270, i64 noundef %831, ptr noundef %832, i32 noundef %833, i64 noundef %834, ptr noundef %count1068) #21
  store i32 %call1272, ptr %retcount, align 4
  br label %sw.epilog1279

sw.bb1273:                                        ; preds = %sw.bb1260
  %835 = load ptr, ptr %result, align 8
  %836 = load i64, ptr %length, align 8
  %add.ptr1274 = getelementptr inbounds i8, ptr %835, i64 %836
  %837 = load i64, ptr %maxlen, align 8
  %838 = load ptr, ptr %buf, align 8
  %arrayidx1275 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %839 = load i32, ptr %arrayidx1275, align 4
  %arrayidx1276 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %840 = load i32, ptr %arrayidx1276, align 4
  %841 = load i64, ptr %arg1261, align 8
  %call1277 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1274, i64 noundef %837, ptr noundef %838, i32 noundef %839, i32 noundef %840, i64 noundef %841, ptr noundef %count1068) #21
  store i32 %call1277, ptr %retcount, align 4
  br label %sw.epilog1279

sw.default1278:                                   ; preds = %sw.bb1260
  call void @abort() #22
  unreachable

sw.epilog1279:                                    ; preds = %sw.bb1273, %sw.bb1269, %sw.bb1266
  br label %sw.epilog1759

sw.bb1280:                                        ; preds = %if.end1073
  %arg1282 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %842 = load ptr, ptr %arg1282, align 8
  %843 = load ptr, ptr %dp, align 8
  %arg_index1283 = getelementptr inbounds %struct.char_directive, ptr %843, i32 0, i32 10
  %844 = load i64, ptr %arg_index1283, align 8
  %arrayidx1284 = getelementptr inbounds %struct.argument, ptr %842, i64 %844
  %a1285 = getelementptr inbounds %struct.argument, ptr %arrayidx1284, i32 0, i32 1
  %845 = load i8, ptr %a1285, align 16
  store i8 %845, ptr %arg1281, align 1
  %846 = load i32, ptr %prefix_count, align 4
  switch i32 %846, label %sw.default1301 [
    i32 0, label %sw.bb1286
    i32 1, label %sw.bb1290
    i32 2, label %sw.bb1295
  ]

sw.bb1286:                                        ; preds = %sw.bb1280
  %847 = load ptr, ptr %result, align 8
  %848 = load i64, ptr %length, align 8
  %add.ptr1287 = getelementptr inbounds i8, ptr %847, i64 %848
  %849 = load i64, ptr %maxlen, align 8
  %850 = load ptr, ptr %buf, align 8
  %851 = load i8, ptr %arg1281, align 1
  %conv1288 = sext i8 %851 to i32
  %call1289 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1287, i64 noundef %849, ptr noundef %850, i32 noundef %conv1288, ptr noundef %count1068) #21
  store i32 %call1289, ptr %retcount, align 4
  br label %sw.epilog1302

sw.bb1290:                                        ; preds = %sw.bb1280
  %852 = load ptr, ptr %result, align 8
  %853 = load i64, ptr %length, align 8
  %add.ptr1291 = getelementptr inbounds i8, ptr %852, i64 %853
  %854 = load i64, ptr %maxlen, align 8
  %855 = load ptr, ptr %buf, align 8
  %arrayidx1292 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %856 = load i32, ptr %arrayidx1292, align 4
  %857 = load i8, ptr %arg1281, align 1
  %conv1293 = sext i8 %857 to i32
  %call1294 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1291, i64 noundef %854, ptr noundef %855, i32 noundef %856, i32 noundef %conv1293, ptr noundef %count1068) #21
  store i32 %call1294, ptr %retcount, align 4
  br label %sw.epilog1302

sw.bb1295:                                        ; preds = %sw.bb1280
  %858 = load ptr, ptr %result, align 8
  %859 = load i64, ptr %length, align 8
  %add.ptr1296 = getelementptr inbounds i8, ptr %858, i64 %859
  %860 = load i64, ptr %maxlen, align 8
  %861 = load ptr, ptr %buf, align 8
  %arrayidx1297 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %862 = load i32, ptr %arrayidx1297, align 4
  %arrayidx1298 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %863 = load i32, ptr %arrayidx1298, align 4
  %864 = load i8, ptr %arg1281, align 1
  %conv1299 = sext i8 %864 to i32
  %call1300 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1296, i64 noundef %860, ptr noundef %861, i32 noundef %862, i32 noundef %863, i32 noundef %conv1299, ptr noundef %count1068) #21
  store i32 %call1300, ptr %retcount, align 4
  br label %sw.epilog1302

sw.default1301:                                   ; preds = %sw.bb1280
  call void @abort() #22
  unreachable

sw.epilog1302:                                    ; preds = %sw.bb1295, %sw.bb1290, %sw.bb1286
  br label %sw.epilog1759

sw.bb1303:                                        ; preds = %if.end1073
  %arg1305 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %865 = load ptr, ptr %arg1305, align 8
  %866 = load ptr, ptr %dp, align 8
  %arg_index1306 = getelementptr inbounds %struct.char_directive, ptr %866, i32 0, i32 10
  %867 = load i64, ptr %arg_index1306, align 8
  %arrayidx1307 = getelementptr inbounds %struct.argument, ptr %865, i64 %867
  %a1308 = getelementptr inbounds %struct.argument, ptr %arrayidx1307, i32 0, i32 1
  %868 = load i8, ptr %a1308, align 16
  store i8 %868, ptr %arg1304, align 1
  %869 = load i32, ptr %prefix_count, align 4
  switch i32 %869, label %sw.default1324 [
    i32 0, label %sw.bb1309
    i32 1, label %sw.bb1313
    i32 2, label %sw.bb1318
  ]

sw.bb1309:                                        ; preds = %sw.bb1303
  %870 = load ptr, ptr %result, align 8
  %871 = load i64, ptr %length, align 8
  %add.ptr1310 = getelementptr inbounds i8, ptr %870, i64 %871
  %872 = load i64, ptr %maxlen, align 8
  %873 = load ptr, ptr %buf, align 8
  %874 = load i8, ptr %arg1304, align 1
  %conv1311 = zext i8 %874 to i32
  %call1312 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1310, i64 noundef %872, ptr noundef %873, i32 noundef %conv1311, ptr noundef %count1068) #21
  store i32 %call1312, ptr %retcount, align 4
  br label %sw.epilog1325

sw.bb1313:                                        ; preds = %sw.bb1303
  %875 = load ptr, ptr %result, align 8
  %876 = load i64, ptr %length, align 8
  %add.ptr1314 = getelementptr inbounds i8, ptr %875, i64 %876
  %877 = load i64, ptr %maxlen, align 8
  %878 = load ptr, ptr %buf, align 8
  %arrayidx1315 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %879 = load i32, ptr %arrayidx1315, align 4
  %880 = load i8, ptr %arg1304, align 1
  %conv1316 = zext i8 %880 to i32
  %call1317 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1314, i64 noundef %877, ptr noundef %878, i32 noundef %879, i32 noundef %conv1316, ptr noundef %count1068) #21
  store i32 %call1317, ptr %retcount, align 4
  br label %sw.epilog1325

sw.bb1318:                                        ; preds = %sw.bb1303
  %881 = load ptr, ptr %result, align 8
  %882 = load i64, ptr %length, align 8
  %add.ptr1319 = getelementptr inbounds i8, ptr %881, i64 %882
  %883 = load i64, ptr %maxlen, align 8
  %884 = load ptr, ptr %buf, align 8
  %arrayidx1320 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %885 = load i32, ptr %arrayidx1320, align 4
  %arrayidx1321 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %886 = load i32, ptr %arrayidx1321, align 4
  %887 = load i8, ptr %arg1304, align 1
  %conv1322 = zext i8 %887 to i32
  %call1323 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1319, i64 noundef %883, ptr noundef %884, i32 noundef %885, i32 noundef %886, i32 noundef %conv1322, ptr noundef %count1068) #21
  store i32 %call1323, ptr %retcount, align 4
  br label %sw.epilog1325

sw.default1324:                                   ; preds = %sw.bb1303
  call void @abort() #22
  unreachable

sw.epilog1325:                                    ; preds = %sw.bb1318, %sw.bb1313, %sw.bb1309
  br label %sw.epilog1759

sw.bb1326:                                        ; preds = %if.end1073
  %arg1328 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %888 = load ptr, ptr %arg1328, align 8
  %889 = load ptr, ptr %dp, align 8
  %arg_index1329 = getelementptr inbounds %struct.char_directive, ptr %889, i32 0, i32 10
  %890 = load i64, ptr %arg_index1329, align 8
  %arrayidx1330 = getelementptr inbounds %struct.argument, ptr %888, i64 %890
  %a1331 = getelementptr inbounds %struct.argument, ptr %arrayidx1330, i32 0, i32 1
  %891 = load i16, ptr %a1331, align 16
  store i16 %891, ptr %arg1327, align 2
  %892 = load i32, ptr %prefix_count, align 4
  switch i32 %892, label %sw.default1347 [
    i32 0, label %sw.bb1332
    i32 1, label %sw.bb1336
    i32 2, label %sw.bb1341
  ]

sw.bb1332:                                        ; preds = %sw.bb1326
  %893 = load ptr, ptr %result, align 8
  %894 = load i64, ptr %length, align 8
  %add.ptr1333 = getelementptr inbounds i8, ptr %893, i64 %894
  %895 = load i64, ptr %maxlen, align 8
  %896 = load ptr, ptr %buf, align 8
  %897 = load i16, ptr %arg1327, align 2
  %conv1334 = sext i16 %897 to i32
  %call1335 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1333, i64 noundef %895, ptr noundef %896, i32 noundef %conv1334, ptr noundef %count1068) #21
  store i32 %call1335, ptr %retcount, align 4
  br label %sw.epilog1348

sw.bb1336:                                        ; preds = %sw.bb1326
  %898 = load ptr, ptr %result, align 8
  %899 = load i64, ptr %length, align 8
  %add.ptr1337 = getelementptr inbounds i8, ptr %898, i64 %899
  %900 = load i64, ptr %maxlen, align 8
  %901 = load ptr, ptr %buf, align 8
  %arrayidx1338 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %902 = load i32, ptr %arrayidx1338, align 4
  %903 = load i16, ptr %arg1327, align 2
  %conv1339 = sext i16 %903 to i32
  %call1340 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1337, i64 noundef %900, ptr noundef %901, i32 noundef %902, i32 noundef %conv1339, ptr noundef %count1068) #21
  store i32 %call1340, ptr %retcount, align 4
  br label %sw.epilog1348

sw.bb1341:                                        ; preds = %sw.bb1326
  %904 = load ptr, ptr %result, align 8
  %905 = load i64, ptr %length, align 8
  %add.ptr1342 = getelementptr inbounds i8, ptr %904, i64 %905
  %906 = load i64, ptr %maxlen, align 8
  %907 = load ptr, ptr %buf, align 8
  %arrayidx1343 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %908 = load i32, ptr %arrayidx1343, align 4
  %arrayidx1344 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %909 = load i32, ptr %arrayidx1344, align 4
  %910 = load i16, ptr %arg1327, align 2
  %conv1345 = sext i16 %910 to i32
  %call1346 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1342, i64 noundef %906, ptr noundef %907, i32 noundef %908, i32 noundef %909, i32 noundef %conv1345, ptr noundef %count1068) #21
  store i32 %call1346, ptr %retcount, align 4
  br label %sw.epilog1348

sw.default1347:                                   ; preds = %sw.bb1326
  call void @abort() #22
  unreachable

sw.epilog1348:                                    ; preds = %sw.bb1341, %sw.bb1336, %sw.bb1332
  br label %sw.epilog1759

sw.bb1349:                                        ; preds = %if.end1073
  %arg1351 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %911 = load ptr, ptr %arg1351, align 8
  %912 = load ptr, ptr %dp, align 8
  %arg_index1352 = getelementptr inbounds %struct.char_directive, ptr %912, i32 0, i32 10
  %913 = load i64, ptr %arg_index1352, align 8
  %arrayidx1353 = getelementptr inbounds %struct.argument, ptr %911, i64 %913
  %a1354 = getelementptr inbounds %struct.argument, ptr %arrayidx1353, i32 0, i32 1
  %914 = load i16, ptr %a1354, align 16
  store i16 %914, ptr %arg1350, align 2
  %915 = load i32, ptr %prefix_count, align 4
  switch i32 %915, label %sw.default1370 [
    i32 0, label %sw.bb1355
    i32 1, label %sw.bb1359
    i32 2, label %sw.bb1364
  ]

sw.bb1355:                                        ; preds = %sw.bb1349
  %916 = load ptr, ptr %result, align 8
  %917 = load i64, ptr %length, align 8
  %add.ptr1356 = getelementptr inbounds i8, ptr %916, i64 %917
  %918 = load i64, ptr %maxlen, align 8
  %919 = load ptr, ptr %buf, align 8
  %920 = load i16, ptr %arg1350, align 2
  %conv1357 = zext i16 %920 to i32
  %call1358 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1356, i64 noundef %918, ptr noundef %919, i32 noundef %conv1357, ptr noundef %count1068) #21
  store i32 %call1358, ptr %retcount, align 4
  br label %sw.epilog1371

sw.bb1359:                                        ; preds = %sw.bb1349
  %921 = load ptr, ptr %result, align 8
  %922 = load i64, ptr %length, align 8
  %add.ptr1360 = getelementptr inbounds i8, ptr %921, i64 %922
  %923 = load i64, ptr %maxlen, align 8
  %924 = load ptr, ptr %buf, align 8
  %arrayidx1361 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %925 = load i32, ptr %arrayidx1361, align 4
  %926 = load i16, ptr %arg1350, align 2
  %conv1362 = zext i16 %926 to i32
  %call1363 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1360, i64 noundef %923, ptr noundef %924, i32 noundef %925, i32 noundef %conv1362, ptr noundef %count1068) #21
  store i32 %call1363, ptr %retcount, align 4
  br label %sw.epilog1371

sw.bb1364:                                        ; preds = %sw.bb1349
  %927 = load ptr, ptr %result, align 8
  %928 = load i64, ptr %length, align 8
  %add.ptr1365 = getelementptr inbounds i8, ptr %927, i64 %928
  %929 = load i64, ptr %maxlen, align 8
  %930 = load ptr, ptr %buf, align 8
  %arrayidx1366 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %931 = load i32, ptr %arrayidx1366, align 4
  %arrayidx1367 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %932 = load i32, ptr %arrayidx1367, align 4
  %933 = load i16, ptr %arg1350, align 2
  %conv1368 = zext i16 %933 to i32
  %call1369 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1365, i64 noundef %929, ptr noundef %930, i32 noundef %931, i32 noundef %932, i32 noundef %conv1368, ptr noundef %count1068) #21
  store i32 %call1369, ptr %retcount, align 4
  br label %sw.epilog1371

sw.default1370:                                   ; preds = %sw.bb1349
  call void @abort() #22
  unreachable

sw.epilog1371:                                    ; preds = %sw.bb1364, %sw.bb1359, %sw.bb1355
  br label %sw.epilog1759

sw.bb1372:                                        ; preds = %if.end1073
  %arg1374 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %934 = load ptr, ptr %arg1374, align 8
  %935 = load ptr, ptr %dp, align 8
  %arg_index1375 = getelementptr inbounds %struct.char_directive, ptr %935, i32 0, i32 10
  %936 = load i64, ptr %arg_index1375, align 8
  %arrayidx1376 = getelementptr inbounds %struct.argument, ptr %934, i64 %936
  %a1377 = getelementptr inbounds %struct.argument, ptr %arrayidx1376, i32 0, i32 1
  %937 = load i32, ptr %a1377, align 16
  store i32 %937, ptr %arg1373, align 4
  %938 = load i32, ptr %prefix_count, align 4
  switch i32 %938, label %sw.default1390 [
    i32 0, label %sw.bb1378
    i32 1, label %sw.bb1381
    i32 2, label %sw.bb1385
  ]

sw.bb1378:                                        ; preds = %sw.bb1372
  %939 = load ptr, ptr %result, align 8
  %940 = load i64, ptr %length, align 8
  %add.ptr1379 = getelementptr inbounds i8, ptr %939, i64 %940
  %941 = load i64, ptr %maxlen, align 8
  %942 = load ptr, ptr %buf, align 8
  %943 = load i32, ptr %arg1373, align 4
  %call1380 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1379, i64 noundef %941, ptr noundef %942, i32 noundef %943, ptr noundef %count1068) #21
  store i32 %call1380, ptr %retcount, align 4
  br label %sw.epilog1391

sw.bb1381:                                        ; preds = %sw.bb1372
  %944 = load ptr, ptr %result, align 8
  %945 = load i64, ptr %length, align 8
  %add.ptr1382 = getelementptr inbounds i8, ptr %944, i64 %945
  %946 = load i64, ptr %maxlen, align 8
  %947 = load ptr, ptr %buf, align 8
  %arrayidx1383 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %948 = load i32, ptr %arrayidx1383, align 4
  %949 = load i32, ptr %arg1373, align 4
  %call1384 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1382, i64 noundef %946, ptr noundef %947, i32 noundef %948, i32 noundef %949, ptr noundef %count1068) #21
  store i32 %call1384, ptr %retcount, align 4
  br label %sw.epilog1391

sw.bb1385:                                        ; preds = %sw.bb1372
  %950 = load ptr, ptr %result, align 8
  %951 = load i64, ptr %length, align 8
  %add.ptr1386 = getelementptr inbounds i8, ptr %950, i64 %951
  %952 = load i64, ptr %maxlen, align 8
  %953 = load ptr, ptr %buf, align 8
  %arrayidx1387 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %954 = load i32, ptr %arrayidx1387, align 4
  %arrayidx1388 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %955 = load i32, ptr %arrayidx1388, align 4
  %956 = load i32, ptr %arg1373, align 4
  %call1389 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1386, i64 noundef %952, ptr noundef %953, i32 noundef %954, i32 noundef %955, i32 noundef %956, ptr noundef %count1068) #21
  store i32 %call1389, ptr %retcount, align 4
  br label %sw.epilog1391

sw.default1390:                                   ; preds = %sw.bb1372
  call void @abort() #22
  unreachable

sw.epilog1391:                                    ; preds = %sw.bb1385, %sw.bb1381, %sw.bb1378
  br label %sw.epilog1759

sw.bb1392:                                        ; preds = %if.end1073
  %arg1394 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %957 = load ptr, ptr %arg1394, align 8
  %958 = load ptr, ptr %dp, align 8
  %arg_index1395 = getelementptr inbounds %struct.char_directive, ptr %958, i32 0, i32 10
  %959 = load i64, ptr %arg_index1395, align 8
  %arrayidx1396 = getelementptr inbounds %struct.argument, ptr %957, i64 %959
  %a1397 = getelementptr inbounds %struct.argument, ptr %arrayidx1396, i32 0, i32 1
  %960 = load i32, ptr %a1397, align 16
  store i32 %960, ptr %arg1393, align 4
  %961 = load i32, ptr %prefix_count, align 4
  switch i32 %961, label %sw.default1410 [
    i32 0, label %sw.bb1398
    i32 1, label %sw.bb1401
    i32 2, label %sw.bb1405
  ]

sw.bb1398:                                        ; preds = %sw.bb1392
  %962 = load ptr, ptr %result, align 8
  %963 = load i64, ptr %length, align 8
  %add.ptr1399 = getelementptr inbounds i8, ptr %962, i64 %963
  %964 = load i64, ptr %maxlen, align 8
  %965 = load ptr, ptr %buf, align 8
  %966 = load i32, ptr %arg1393, align 4
  %call1400 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1399, i64 noundef %964, ptr noundef %965, i32 noundef %966, ptr noundef %count1068) #21
  store i32 %call1400, ptr %retcount, align 4
  br label %sw.epilog1411

sw.bb1401:                                        ; preds = %sw.bb1392
  %967 = load ptr, ptr %result, align 8
  %968 = load i64, ptr %length, align 8
  %add.ptr1402 = getelementptr inbounds i8, ptr %967, i64 %968
  %969 = load i64, ptr %maxlen, align 8
  %970 = load ptr, ptr %buf, align 8
  %arrayidx1403 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %971 = load i32, ptr %arrayidx1403, align 4
  %972 = load i32, ptr %arg1393, align 4
  %call1404 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1402, i64 noundef %969, ptr noundef %970, i32 noundef %971, i32 noundef %972, ptr noundef %count1068) #21
  store i32 %call1404, ptr %retcount, align 4
  br label %sw.epilog1411

sw.bb1405:                                        ; preds = %sw.bb1392
  %973 = load ptr, ptr %result, align 8
  %974 = load i64, ptr %length, align 8
  %add.ptr1406 = getelementptr inbounds i8, ptr %973, i64 %974
  %975 = load i64, ptr %maxlen, align 8
  %976 = load ptr, ptr %buf, align 8
  %arrayidx1407 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %977 = load i32, ptr %arrayidx1407, align 4
  %arrayidx1408 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %978 = load i32, ptr %arrayidx1408, align 4
  %979 = load i32, ptr %arg1393, align 4
  %call1409 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1406, i64 noundef %975, ptr noundef %976, i32 noundef %977, i32 noundef %978, i32 noundef %979, ptr noundef %count1068) #21
  store i32 %call1409, ptr %retcount, align 4
  br label %sw.epilog1411

sw.default1410:                                   ; preds = %sw.bb1392
  call void @abort() #22
  unreachable

sw.epilog1411:                                    ; preds = %sw.bb1405, %sw.bb1401, %sw.bb1398
  br label %sw.epilog1759

sw.bb1412:                                        ; preds = %if.end1073
  %arg1414 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %980 = load ptr, ptr %arg1414, align 8
  %981 = load ptr, ptr %dp, align 8
  %arg_index1415 = getelementptr inbounds %struct.char_directive, ptr %981, i32 0, i32 10
  %982 = load i64, ptr %arg_index1415, align 8
  %arrayidx1416 = getelementptr inbounds %struct.argument, ptr %980, i64 %982
  %a1417 = getelementptr inbounds %struct.argument, ptr %arrayidx1416, i32 0, i32 1
  %983 = load i64, ptr %a1417, align 16
  store i64 %983, ptr %arg1413, align 8
  %984 = load i32, ptr %prefix_count, align 4
  switch i32 %984, label %sw.default1430 [
    i32 0, label %sw.bb1418
    i32 1, label %sw.bb1421
    i32 2, label %sw.bb1425
  ]

sw.bb1418:                                        ; preds = %sw.bb1412
  %985 = load ptr, ptr %result, align 8
  %986 = load i64, ptr %length, align 8
  %add.ptr1419 = getelementptr inbounds i8, ptr %985, i64 %986
  %987 = load i64, ptr %maxlen, align 8
  %988 = load ptr, ptr %buf, align 8
  %989 = load i64, ptr %arg1413, align 8
  %call1420 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1419, i64 noundef %987, ptr noundef %988, i64 noundef %989, ptr noundef %count1068) #21
  store i32 %call1420, ptr %retcount, align 4
  br label %sw.epilog1431

sw.bb1421:                                        ; preds = %sw.bb1412
  %990 = load ptr, ptr %result, align 8
  %991 = load i64, ptr %length, align 8
  %add.ptr1422 = getelementptr inbounds i8, ptr %990, i64 %991
  %992 = load i64, ptr %maxlen, align 8
  %993 = load ptr, ptr %buf, align 8
  %arrayidx1423 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %994 = load i32, ptr %arrayidx1423, align 4
  %995 = load i64, ptr %arg1413, align 8
  %call1424 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1422, i64 noundef %992, ptr noundef %993, i32 noundef %994, i64 noundef %995, ptr noundef %count1068) #21
  store i32 %call1424, ptr %retcount, align 4
  br label %sw.epilog1431

sw.bb1425:                                        ; preds = %sw.bb1412
  %996 = load ptr, ptr %result, align 8
  %997 = load i64, ptr %length, align 8
  %add.ptr1426 = getelementptr inbounds i8, ptr %996, i64 %997
  %998 = load i64, ptr %maxlen, align 8
  %999 = load ptr, ptr %buf, align 8
  %arrayidx1427 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1000 = load i32, ptr %arrayidx1427, align 4
  %arrayidx1428 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1001 = load i32, ptr %arrayidx1428, align 4
  %1002 = load i64, ptr %arg1413, align 8
  %call1429 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1426, i64 noundef %998, ptr noundef %999, i32 noundef %1000, i32 noundef %1001, i64 noundef %1002, ptr noundef %count1068) #21
  store i32 %call1429, ptr %retcount, align 4
  br label %sw.epilog1431

sw.default1430:                                   ; preds = %sw.bb1412
  call void @abort() #22
  unreachable

sw.epilog1431:                                    ; preds = %sw.bb1425, %sw.bb1421, %sw.bb1418
  br label %sw.epilog1759

sw.bb1432:                                        ; preds = %if.end1073
  %arg1434 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1003 = load ptr, ptr %arg1434, align 8
  %1004 = load ptr, ptr %dp, align 8
  %arg_index1435 = getelementptr inbounds %struct.char_directive, ptr %1004, i32 0, i32 10
  %1005 = load i64, ptr %arg_index1435, align 8
  %arrayidx1436 = getelementptr inbounds %struct.argument, ptr %1003, i64 %1005
  %a1437 = getelementptr inbounds %struct.argument, ptr %arrayidx1436, i32 0, i32 1
  %1006 = load i64, ptr %a1437, align 16
  store i64 %1006, ptr %arg1433, align 8
  %1007 = load i32, ptr %prefix_count, align 4
  switch i32 %1007, label %sw.default1450 [
    i32 0, label %sw.bb1438
    i32 1, label %sw.bb1441
    i32 2, label %sw.bb1445
  ]

sw.bb1438:                                        ; preds = %sw.bb1432
  %1008 = load ptr, ptr %result, align 8
  %1009 = load i64, ptr %length, align 8
  %add.ptr1439 = getelementptr inbounds i8, ptr %1008, i64 %1009
  %1010 = load i64, ptr %maxlen, align 8
  %1011 = load ptr, ptr %buf, align 8
  %1012 = load i64, ptr %arg1433, align 8
  %call1440 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1439, i64 noundef %1010, ptr noundef %1011, i64 noundef %1012, ptr noundef %count1068) #21
  store i32 %call1440, ptr %retcount, align 4
  br label %sw.epilog1451

sw.bb1441:                                        ; preds = %sw.bb1432
  %1013 = load ptr, ptr %result, align 8
  %1014 = load i64, ptr %length, align 8
  %add.ptr1442 = getelementptr inbounds i8, ptr %1013, i64 %1014
  %1015 = load i64, ptr %maxlen, align 8
  %1016 = load ptr, ptr %buf, align 8
  %arrayidx1443 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1017 = load i32, ptr %arrayidx1443, align 4
  %1018 = load i64, ptr %arg1433, align 8
  %call1444 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1442, i64 noundef %1015, ptr noundef %1016, i32 noundef %1017, i64 noundef %1018, ptr noundef %count1068) #21
  store i32 %call1444, ptr %retcount, align 4
  br label %sw.epilog1451

sw.bb1445:                                        ; preds = %sw.bb1432
  %1019 = load ptr, ptr %result, align 8
  %1020 = load i64, ptr %length, align 8
  %add.ptr1446 = getelementptr inbounds i8, ptr %1019, i64 %1020
  %1021 = load i64, ptr %maxlen, align 8
  %1022 = load ptr, ptr %buf, align 8
  %arrayidx1447 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1023 = load i32, ptr %arrayidx1447, align 4
  %arrayidx1448 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1024 = load i32, ptr %arrayidx1448, align 4
  %1025 = load i64, ptr %arg1433, align 8
  %call1449 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1446, i64 noundef %1021, ptr noundef %1022, i32 noundef %1023, i32 noundef %1024, i64 noundef %1025, ptr noundef %count1068) #21
  store i32 %call1449, ptr %retcount, align 4
  br label %sw.epilog1451

sw.default1450:                                   ; preds = %sw.bb1432
  call void @abort() #22
  unreachable

sw.epilog1451:                                    ; preds = %sw.bb1445, %sw.bb1441, %sw.bb1438
  br label %sw.epilog1759

sw.bb1452:                                        ; preds = %if.end1073
  %arg1454 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1026 = load ptr, ptr %arg1454, align 8
  %1027 = load ptr, ptr %dp, align 8
  %arg_index1455 = getelementptr inbounds %struct.char_directive, ptr %1027, i32 0, i32 10
  %1028 = load i64, ptr %arg_index1455, align 8
  %arrayidx1456 = getelementptr inbounds %struct.argument, ptr %1026, i64 %1028
  %a1457 = getelementptr inbounds %struct.argument, ptr %arrayidx1456, i32 0, i32 1
  %1029 = load i8, ptr %a1457, align 16
  store i8 %1029, ptr %arg1453, align 1
  %1030 = load i32, ptr %prefix_count, align 4
  switch i32 %1030, label %sw.default1473 [
    i32 0, label %sw.bb1458
    i32 1, label %sw.bb1462
    i32 2, label %sw.bb1467
  ]

sw.bb1458:                                        ; preds = %sw.bb1452
  %1031 = load ptr, ptr %result, align 8
  %1032 = load i64, ptr %length, align 8
  %add.ptr1459 = getelementptr inbounds i8, ptr %1031, i64 %1032
  %1033 = load i64, ptr %maxlen, align 8
  %1034 = load ptr, ptr %buf, align 8
  %1035 = load i8, ptr %arg1453, align 1
  %conv1460 = sext i8 %1035 to i32
  %call1461 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1459, i64 noundef %1033, ptr noundef %1034, i32 noundef %conv1460, ptr noundef %count1068) #21
  store i32 %call1461, ptr %retcount, align 4
  br label %sw.epilog1474

sw.bb1462:                                        ; preds = %sw.bb1452
  %1036 = load ptr, ptr %result, align 8
  %1037 = load i64, ptr %length, align 8
  %add.ptr1463 = getelementptr inbounds i8, ptr %1036, i64 %1037
  %1038 = load i64, ptr %maxlen, align 8
  %1039 = load ptr, ptr %buf, align 8
  %arrayidx1464 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1040 = load i32, ptr %arrayidx1464, align 4
  %1041 = load i8, ptr %arg1453, align 1
  %conv1465 = sext i8 %1041 to i32
  %call1466 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1463, i64 noundef %1038, ptr noundef %1039, i32 noundef %1040, i32 noundef %conv1465, ptr noundef %count1068) #21
  store i32 %call1466, ptr %retcount, align 4
  br label %sw.epilog1474

sw.bb1467:                                        ; preds = %sw.bb1452
  %1042 = load ptr, ptr %result, align 8
  %1043 = load i64, ptr %length, align 8
  %add.ptr1468 = getelementptr inbounds i8, ptr %1042, i64 %1043
  %1044 = load i64, ptr %maxlen, align 8
  %1045 = load ptr, ptr %buf, align 8
  %arrayidx1469 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1046 = load i32, ptr %arrayidx1469, align 4
  %arrayidx1470 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1047 = load i32, ptr %arrayidx1470, align 4
  %1048 = load i8, ptr %arg1453, align 1
  %conv1471 = sext i8 %1048 to i32
  %call1472 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1468, i64 noundef %1044, ptr noundef %1045, i32 noundef %1046, i32 noundef %1047, i32 noundef %conv1471, ptr noundef %count1068) #21
  store i32 %call1472, ptr %retcount, align 4
  br label %sw.epilog1474

sw.default1473:                                   ; preds = %sw.bb1452
  call void @abort() #22
  unreachable

sw.epilog1474:                                    ; preds = %sw.bb1467, %sw.bb1462, %sw.bb1458
  br label %sw.epilog1759

sw.bb1475:                                        ; preds = %if.end1073
  %arg1477 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1049 = load ptr, ptr %arg1477, align 8
  %1050 = load ptr, ptr %dp, align 8
  %arg_index1478 = getelementptr inbounds %struct.char_directive, ptr %1050, i32 0, i32 10
  %1051 = load i64, ptr %arg_index1478, align 8
  %arrayidx1479 = getelementptr inbounds %struct.argument, ptr %1049, i64 %1051
  %a1480 = getelementptr inbounds %struct.argument, ptr %arrayidx1479, i32 0, i32 1
  %1052 = load i8, ptr %a1480, align 16
  store i8 %1052, ptr %arg1476, align 1
  %1053 = load i32, ptr %prefix_count, align 4
  switch i32 %1053, label %sw.default1496 [
    i32 0, label %sw.bb1481
    i32 1, label %sw.bb1485
    i32 2, label %sw.bb1490
  ]

sw.bb1481:                                        ; preds = %sw.bb1475
  %1054 = load ptr, ptr %result, align 8
  %1055 = load i64, ptr %length, align 8
  %add.ptr1482 = getelementptr inbounds i8, ptr %1054, i64 %1055
  %1056 = load i64, ptr %maxlen, align 8
  %1057 = load ptr, ptr %buf, align 8
  %1058 = load i8, ptr %arg1476, align 1
  %conv1483 = zext i8 %1058 to i32
  %call1484 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1482, i64 noundef %1056, ptr noundef %1057, i32 noundef %conv1483, ptr noundef %count1068) #21
  store i32 %call1484, ptr %retcount, align 4
  br label %sw.epilog1497

sw.bb1485:                                        ; preds = %sw.bb1475
  %1059 = load ptr, ptr %result, align 8
  %1060 = load i64, ptr %length, align 8
  %add.ptr1486 = getelementptr inbounds i8, ptr %1059, i64 %1060
  %1061 = load i64, ptr %maxlen, align 8
  %1062 = load ptr, ptr %buf, align 8
  %arrayidx1487 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1063 = load i32, ptr %arrayidx1487, align 4
  %1064 = load i8, ptr %arg1476, align 1
  %conv1488 = zext i8 %1064 to i32
  %call1489 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1486, i64 noundef %1061, ptr noundef %1062, i32 noundef %1063, i32 noundef %conv1488, ptr noundef %count1068) #21
  store i32 %call1489, ptr %retcount, align 4
  br label %sw.epilog1497

sw.bb1490:                                        ; preds = %sw.bb1475
  %1065 = load ptr, ptr %result, align 8
  %1066 = load i64, ptr %length, align 8
  %add.ptr1491 = getelementptr inbounds i8, ptr %1065, i64 %1066
  %1067 = load i64, ptr %maxlen, align 8
  %1068 = load ptr, ptr %buf, align 8
  %arrayidx1492 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1069 = load i32, ptr %arrayidx1492, align 4
  %arrayidx1493 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1070 = load i32, ptr %arrayidx1493, align 4
  %1071 = load i8, ptr %arg1476, align 1
  %conv1494 = zext i8 %1071 to i32
  %call1495 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1491, i64 noundef %1067, ptr noundef %1068, i32 noundef %1069, i32 noundef %1070, i32 noundef %conv1494, ptr noundef %count1068) #21
  store i32 %call1495, ptr %retcount, align 4
  br label %sw.epilog1497

sw.default1496:                                   ; preds = %sw.bb1475
  call void @abort() #22
  unreachable

sw.epilog1497:                                    ; preds = %sw.bb1490, %sw.bb1485, %sw.bb1481
  br label %sw.epilog1759

sw.bb1498:                                        ; preds = %if.end1073
  %arg1500 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1072 = load ptr, ptr %arg1500, align 8
  %1073 = load ptr, ptr %dp, align 8
  %arg_index1501 = getelementptr inbounds %struct.char_directive, ptr %1073, i32 0, i32 10
  %1074 = load i64, ptr %arg_index1501, align 8
  %arrayidx1502 = getelementptr inbounds %struct.argument, ptr %1072, i64 %1074
  %a1503 = getelementptr inbounds %struct.argument, ptr %arrayidx1502, i32 0, i32 1
  %1075 = load i64, ptr %a1503, align 16
  store i64 %1075, ptr %arg1499, align 8
  %1076 = load i32, ptr %prefix_count, align 4
  switch i32 %1076, label %sw.default1516 [
    i32 0, label %sw.bb1504
    i32 1, label %sw.bb1507
    i32 2, label %sw.bb1511
  ]

sw.bb1504:                                        ; preds = %sw.bb1498
  %1077 = load ptr, ptr %result, align 8
  %1078 = load i64, ptr %length, align 8
  %add.ptr1505 = getelementptr inbounds i8, ptr %1077, i64 %1078
  %1079 = load i64, ptr %maxlen, align 8
  %1080 = load ptr, ptr %buf, align 8
  %1081 = load i64, ptr %arg1499, align 8
  %call1506 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1505, i64 noundef %1079, ptr noundef %1080, i64 noundef %1081, ptr noundef %count1068) #21
  store i32 %call1506, ptr %retcount, align 4
  br label %sw.epilog1517

sw.bb1507:                                        ; preds = %sw.bb1498
  %1082 = load ptr, ptr %result, align 8
  %1083 = load i64, ptr %length, align 8
  %add.ptr1508 = getelementptr inbounds i8, ptr %1082, i64 %1083
  %1084 = load i64, ptr %maxlen, align 8
  %1085 = load ptr, ptr %buf, align 8
  %arrayidx1509 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1086 = load i32, ptr %arrayidx1509, align 4
  %1087 = load i64, ptr %arg1499, align 8
  %call1510 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1508, i64 noundef %1084, ptr noundef %1085, i32 noundef %1086, i64 noundef %1087, ptr noundef %count1068) #21
  store i32 %call1510, ptr %retcount, align 4
  br label %sw.epilog1517

sw.bb1511:                                        ; preds = %sw.bb1498
  %1088 = load ptr, ptr %result, align 8
  %1089 = load i64, ptr %length, align 8
  %add.ptr1512 = getelementptr inbounds i8, ptr %1088, i64 %1089
  %1090 = load i64, ptr %maxlen, align 8
  %1091 = load ptr, ptr %buf, align 8
  %arrayidx1513 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1092 = load i32, ptr %arrayidx1513, align 4
  %arrayidx1514 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1093 = load i32, ptr %arrayidx1514, align 4
  %1094 = load i64, ptr %arg1499, align 8
  %call1515 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1512, i64 noundef %1090, ptr noundef %1091, i32 noundef %1092, i32 noundef %1093, i64 noundef %1094, ptr noundef %count1068) #21
  store i32 %call1515, ptr %retcount, align 4
  br label %sw.epilog1517

sw.default1516:                                   ; preds = %sw.bb1498
  call void @abort() #22
  unreachable

sw.epilog1517:                                    ; preds = %sw.bb1511, %sw.bb1507, %sw.bb1504
  br label %sw.epilog1759

sw.bb1518:                                        ; preds = %if.end1073
  %arg1520 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1095 = load ptr, ptr %arg1520, align 8
  %1096 = load ptr, ptr %dp, align 8
  %arg_index1521 = getelementptr inbounds %struct.char_directive, ptr %1096, i32 0, i32 10
  %1097 = load i64, ptr %arg_index1521, align 8
  %arrayidx1522 = getelementptr inbounds %struct.argument, ptr %1095, i64 %1097
  %a1523 = getelementptr inbounds %struct.argument, ptr %arrayidx1522, i32 0, i32 1
  %1098 = load i64, ptr %a1523, align 16
  store i64 %1098, ptr %arg1519, align 8
  %1099 = load i32, ptr %prefix_count, align 4
  switch i32 %1099, label %sw.default1536 [
    i32 0, label %sw.bb1524
    i32 1, label %sw.bb1527
    i32 2, label %sw.bb1531
  ]

sw.bb1524:                                        ; preds = %sw.bb1518
  %1100 = load ptr, ptr %result, align 8
  %1101 = load i64, ptr %length, align 8
  %add.ptr1525 = getelementptr inbounds i8, ptr %1100, i64 %1101
  %1102 = load i64, ptr %maxlen, align 8
  %1103 = load ptr, ptr %buf, align 8
  %1104 = load i64, ptr %arg1519, align 8
  %call1526 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1525, i64 noundef %1102, ptr noundef %1103, i64 noundef %1104, ptr noundef %count1068) #21
  store i32 %call1526, ptr %retcount, align 4
  br label %sw.epilog1537

sw.bb1527:                                        ; preds = %sw.bb1518
  %1105 = load ptr, ptr %result, align 8
  %1106 = load i64, ptr %length, align 8
  %add.ptr1528 = getelementptr inbounds i8, ptr %1105, i64 %1106
  %1107 = load i64, ptr %maxlen, align 8
  %1108 = load ptr, ptr %buf, align 8
  %arrayidx1529 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1109 = load i32, ptr %arrayidx1529, align 4
  %1110 = load i64, ptr %arg1519, align 8
  %call1530 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1528, i64 noundef %1107, ptr noundef %1108, i32 noundef %1109, i64 noundef %1110, ptr noundef %count1068) #21
  store i32 %call1530, ptr %retcount, align 4
  br label %sw.epilog1537

sw.bb1531:                                        ; preds = %sw.bb1518
  %1111 = load ptr, ptr %result, align 8
  %1112 = load i64, ptr %length, align 8
  %add.ptr1532 = getelementptr inbounds i8, ptr %1111, i64 %1112
  %1113 = load i64, ptr %maxlen, align 8
  %1114 = load ptr, ptr %buf, align 8
  %arrayidx1533 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1115 = load i32, ptr %arrayidx1533, align 4
  %arrayidx1534 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1116 = load i32, ptr %arrayidx1534, align 4
  %1117 = load i64, ptr %arg1519, align 8
  %call1535 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1532, i64 noundef %1113, ptr noundef %1114, i32 noundef %1115, i32 noundef %1116, i64 noundef %1117, ptr noundef %count1068) #21
  store i32 %call1535, ptr %retcount, align 4
  br label %sw.epilog1537

sw.default1536:                                   ; preds = %sw.bb1518
  call void @abort() #22
  unreachable

sw.epilog1537:                                    ; preds = %sw.bb1531, %sw.bb1527, %sw.bb1524
  br label %sw.epilog1759

sw.bb1538:                                        ; preds = %if.end1073
  %arg1540 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1118 = load ptr, ptr %arg1540, align 8
  %1119 = load ptr, ptr %dp, align 8
  %arg_index1541 = getelementptr inbounds %struct.char_directive, ptr %1119, i32 0, i32 10
  %1120 = load i64, ptr %arg_index1541, align 8
  %arrayidx1542 = getelementptr inbounds %struct.argument, ptr %1118, i64 %1120
  %a1543 = getelementptr inbounds %struct.argument, ptr %arrayidx1542, i32 0, i32 1
  %1121 = load i64, ptr %a1543, align 16
  store i64 %1121, ptr %arg1539, align 8
  %1122 = load i32, ptr %prefix_count, align 4
  switch i32 %1122, label %sw.default1556 [
    i32 0, label %sw.bb1544
    i32 1, label %sw.bb1547
    i32 2, label %sw.bb1551
  ]

sw.bb1544:                                        ; preds = %sw.bb1538
  %1123 = load ptr, ptr %result, align 8
  %1124 = load i64, ptr %length, align 8
  %add.ptr1545 = getelementptr inbounds i8, ptr %1123, i64 %1124
  %1125 = load i64, ptr %maxlen, align 8
  %1126 = load ptr, ptr %buf, align 8
  %1127 = load i64, ptr %arg1539, align 8
  %call1546 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1545, i64 noundef %1125, ptr noundef %1126, i64 noundef %1127, ptr noundef %count1068) #21
  store i32 %call1546, ptr %retcount, align 4
  br label %sw.epilog1557

sw.bb1547:                                        ; preds = %sw.bb1538
  %1128 = load ptr, ptr %result, align 8
  %1129 = load i64, ptr %length, align 8
  %add.ptr1548 = getelementptr inbounds i8, ptr %1128, i64 %1129
  %1130 = load i64, ptr %maxlen, align 8
  %1131 = load ptr, ptr %buf, align 8
  %arrayidx1549 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1132 = load i32, ptr %arrayidx1549, align 4
  %1133 = load i64, ptr %arg1539, align 8
  %call1550 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1548, i64 noundef %1130, ptr noundef %1131, i32 noundef %1132, i64 noundef %1133, ptr noundef %count1068) #21
  store i32 %call1550, ptr %retcount, align 4
  br label %sw.epilog1557

sw.bb1551:                                        ; preds = %sw.bb1538
  %1134 = load ptr, ptr %result, align 8
  %1135 = load i64, ptr %length, align 8
  %add.ptr1552 = getelementptr inbounds i8, ptr %1134, i64 %1135
  %1136 = load i64, ptr %maxlen, align 8
  %1137 = load ptr, ptr %buf, align 8
  %arrayidx1553 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1138 = load i32, ptr %arrayidx1553, align 4
  %arrayidx1554 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1139 = load i32, ptr %arrayidx1554, align 4
  %1140 = load i64, ptr %arg1539, align 8
  %call1555 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1552, i64 noundef %1136, ptr noundef %1137, i32 noundef %1138, i32 noundef %1139, i64 noundef %1140, ptr noundef %count1068) #21
  store i32 %call1555, ptr %retcount, align 4
  br label %sw.epilog1557

sw.default1556:                                   ; preds = %sw.bb1538
  call void @abort() #22
  unreachable

sw.epilog1557:                                    ; preds = %sw.bb1551, %sw.bb1547, %sw.bb1544
  br label %sw.epilog1759

sw.bb1558:                                        ; preds = %if.end1073
  %arg1560 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1141 = load ptr, ptr %arg1560, align 8
  %1142 = load ptr, ptr %dp, align 8
  %arg_index1561 = getelementptr inbounds %struct.char_directive, ptr %1142, i32 0, i32 10
  %1143 = load i64, ptr %arg_index1561, align 8
  %arrayidx1562 = getelementptr inbounds %struct.argument, ptr %1141, i64 %1143
  %a1563 = getelementptr inbounds %struct.argument, ptr %arrayidx1562, i32 0, i32 1
  %1144 = load i64, ptr %a1563, align 16
  store i64 %1144, ptr %arg1559, align 8
  %1145 = load i32, ptr %prefix_count, align 4
  switch i32 %1145, label %sw.default1576 [
    i32 0, label %sw.bb1564
    i32 1, label %sw.bb1567
    i32 2, label %sw.bb1571
  ]

sw.bb1564:                                        ; preds = %sw.bb1558
  %1146 = load ptr, ptr %result, align 8
  %1147 = load i64, ptr %length, align 8
  %add.ptr1565 = getelementptr inbounds i8, ptr %1146, i64 %1147
  %1148 = load i64, ptr %maxlen, align 8
  %1149 = load ptr, ptr %buf, align 8
  %1150 = load i64, ptr %arg1559, align 8
  %call1566 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1565, i64 noundef %1148, ptr noundef %1149, i64 noundef %1150, ptr noundef %count1068) #21
  store i32 %call1566, ptr %retcount, align 4
  br label %sw.epilog1577

sw.bb1567:                                        ; preds = %sw.bb1558
  %1151 = load ptr, ptr %result, align 8
  %1152 = load i64, ptr %length, align 8
  %add.ptr1568 = getelementptr inbounds i8, ptr %1151, i64 %1152
  %1153 = load i64, ptr %maxlen, align 8
  %1154 = load ptr, ptr %buf, align 8
  %arrayidx1569 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1155 = load i32, ptr %arrayidx1569, align 4
  %1156 = load i64, ptr %arg1559, align 8
  %call1570 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1568, i64 noundef %1153, ptr noundef %1154, i32 noundef %1155, i64 noundef %1156, ptr noundef %count1068) #21
  store i32 %call1570, ptr %retcount, align 4
  br label %sw.epilog1577

sw.bb1571:                                        ; preds = %sw.bb1558
  %1157 = load ptr, ptr %result, align 8
  %1158 = load i64, ptr %length, align 8
  %add.ptr1572 = getelementptr inbounds i8, ptr %1157, i64 %1158
  %1159 = load i64, ptr %maxlen, align 8
  %1160 = load ptr, ptr %buf, align 8
  %arrayidx1573 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1161 = load i32, ptr %arrayidx1573, align 4
  %arrayidx1574 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1162 = load i32, ptr %arrayidx1574, align 4
  %1163 = load i64, ptr %arg1559, align 8
  %call1575 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1572, i64 noundef %1159, ptr noundef %1160, i32 noundef %1161, i32 noundef %1162, i64 noundef %1163, ptr noundef %count1068) #21
  store i32 %call1575, ptr %retcount, align 4
  br label %sw.epilog1577

sw.default1576:                                   ; preds = %sw.bb1558
  call void @abort() #22
  unreachable

sw.epilog1577:                                    ; preds = %sw.bb1571, %sw.bb1567, %sw.bb1564
  br label %sw.epilog1759

sw.bb1578:                                        ; preds = %if.end1073
  %arg1580 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1164 = load ptr, ptr %arg1580, align 8
  %1165 = load ptr, ptr %dp, align 8
  %arg_index1581 = getelementptr inbounds %struct.char_directive, ptr %1165, i32 0, i32 10
  %1166 = load i64, ptr %arg_index1581, align 8
  %arrayidx1582 = getelementptr inbounds %struct.argument, ptr %1164, i64 %1166
  %a1583 = getelementptr inbounds %struct.argument, ptr %arrayidx1582, i32 0, i32 1
  %1167 = load i64, ptr %a1583, align 16
  store i64 %1167, ptr %arg1579, align 8
  %1168 = load i32, ptr %prefix_count, align 4
  switch i32 %1168, label %sw.default1596 [
    i32 0, label %sw.bb1584
    i32 1, label %sw.bb1587
    i32 2, label %sw.bb1591
  ]

sw.bb1584:                                        ; preds = %sw.bb1578
  %1169 = load ptr, ptr %result, align 8
  %1170 = load i64, ptr %length, align 8
  %add.ptr1585 = getelementptr inbounds i8, ptr %1169, i64 %1170
  %1171 = load i64, ptr %maxlen, align 8
  %1172 = load ptr, ptr %buf, align 8
  %1173 = load i64, ptr %arg1579, align 8
  %call1586 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1585, i64 noundef %1171, ptr noundef %1172, i64 noundef %1173, ptr noundef %count1068) #21
  store i32 %call1586, ptr %retcount, align 4
  br label %sw.epilog1597

sw.bb1587:                                        ; preds = %sw.bb1578
  %1174 = load ptr, ptr %result, align 8
  %1175 = load i64, ptr %length, align 8
  %add.ptr1588 = getelementptr inbounds i8, ptr %1174, i64 %1175
  %1176 = load i64, ptr %maxlen, align 8
  %1177 = load ptr, ptr %buf, align 8
  %arrayidx1589 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1178 = load i32, ptr %arrayidx1589, align 4
  %1179 = load i64, ptr %arg1579, align 8
  %call1590 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1588, i64 noundef %1176, ptr noundef %1177, i32 noundef %1178, i64 noundef %1179, ptr noundef %count1068) #21
  store i32 %call1590, ptr %retcount, align 4
  br label %sw.epilog1597

sw.bb1591:                                        ; preds = %sw.bb1578
  %1180 = load ptr, ptr %result, align 8
  %1181 = load i64, ptr %length, align 8
  %add.ptr1592 = getelementptr inbounds i8, ptr %1180, i64 %1181
  %1182 = load i64, ptr %maxlen, align 8
  %1183 = load ptr, ptr %buf, align 8
  %arrayidx1593 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1184 = load i32, ptr %arrayidx1593, align 4
  %arrayidx1594 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1185 = load i32, ptr %arrayidx1594, align 4
  %1186 = load i64, ptr %arg1579, align 8
  %call1595 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1592, i64 noundef %1182, ptr noundef %1183, i32 noundef %1184, i32 noundef %1185, i64 noundef %1186, ptr noundef %count1068) #21
  store i32 %call1595, ptr %retcount, align 4
  br label %sw.epilog1597

sw.default1596:                                   ; preds = %sw.bb1578
  call void @abort() #22
  unreachable

sw.epilog1597:                                    ; preds = %sw.bb1591, %sw.bb1587, %sw.bb1584
  br label %sw.epilog1759

sw.bb1598:                                        ; preds = %if.end1073
  %arg1600 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1187 = load ptr, ptr %arg1600, align 8
  %1188 = load ptr, ptr %dp, align 8
  %arg_index1601 = getelementptr inbounds %struct.char_directive, ptr %1188, i32 0, i32 10
  %1189 = load i64, ptr %arg_index1601, align 8
  %arrayidx1602 = getelementptr inbounds %struct.argument, ptr %1187, i64 %1189
  %a1603 = getelementptr inbounds %struct.argument, ptr %arrayidx1602, i32 0, i32 1
  %1190 = load i64, ptr %a1603, align 16
  store i64 %1190, ptr %arg1599, align 8
  %1191 = load i32, ptr %prefix_count, align 4
  switch i32 %1191, label %sw.default1616 [
    i32 0, label %sw.bb1604
    i32 1, label %sw.bb1607
    i32 2, label %sw.bb1611
  ]

sw.bb1604:                                        ; preds = %sw.bb1598
  %1192 = load ptr, ptr %result, align 8
  %1193 = load i64, ptr %length, align 8
  %add.ptr1605 = getelementptr inbounds i8, ptr %1192, i64 %1193
  %1194 = load i64, ptr %maxlen, align 8
  %1195 = load ptr, ptr %buf, align 8
  %1196 = load i64, ptr %arg1599, align 8
  %call1606 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1605, i64 noundef %1194, ptr noundef %1195, i64 noundef %1196, ptr noundef %count1068) #21
  store i32 %call1606, ptr %retcount, align 4
  br label %sw.epilog1617

sw.bb1607:                                        ; preds = %sw.bb1598
  %1197 = load ptr, ptr %result, align 8
  %1198 = load i64, ptr %length, align 8
  %add.ptr1608 = getelementptr inbounds i8, ptr %1197, i64 %1198
  %1199 = load i64, ptr %maxlen, align 8
  %1200 = load ptr, ptr %buf, align 8
  %arrayidx1609 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1201 = load i32, ptr %arrayidx1609, align 4
  %1202 = load i64, ptr %arg1599, align 8
  %call1610 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1608, i64 noundef %1199, ptr noundef %1200, i32 noundef %1201, i64 noundef %1202, ptr noundef %count1068) #21
  store i32 %call1610, ptr %retcount, align 4
  br label %sw.epilog1617

sw.bb1611:                                        ; preds = %sw.bb1598
  %1203 = load ptr, ptr %result, align 8
  %1204 = load i64, ptr %length, align 8
  %add.ptr1612 = getelementptr inbounds i8, ptr %1203, i64 %1204
  %1205 = load i64, ptr %maxlen, align 8
  %1206 = load ptr, ptr %buf, align 8
  %arrayidx1613 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1207 = load i32, ptr %arrayidx1613, align 4
  %arrayidx1614 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1208 = load i32, ptr %arrayidx1614, align 4
  %1209 = load i64, ptr %arg1599, align 8
  %call1615 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1612, i64 noundef %1205, ptr noundef %1206, i32 noundef %1207, i32 noundef %1208, i64 noundef %1209, ptr noundef %count1068) #21
  store i32 %call1615, ptr %retcount, align 4
  br label %sw.epilog1617

sw.default1616:                                   ; preds = %sw.bb1598
  call void @abort() #22
  unreachable

sw.epilog1617:                                    ; preds = %sw.bb1611, %sw.bb1607, %sw.bb1604
  br label %sw.epilog1759

sw.bb1618:                                        ; preds = %if.end1073
  %arg1620 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1210 = load ptr, ptr %arg1620, align 8
  %1211 = load ptr, ptr %dp, align 8
  %arg_index1621 = getelementptr inbounds %struct.char_directive, ptr %1211, i32 0, i32 10
  %1212 = load i64, ptr %arg_index1621, align 8
  %arrayidx1622 = getelementptr inbounds %struct.argument, ptr %1210, i64 %1212
  %a1623 = getelementptr inbounds %struct.argument, ptr %arrayidx1622, i32 0, i32 1
  %1213 = load double, ptr %a1623, align 16
  store double %1213, ptr %arg1619, align 8
  %1214 = load i32, ptr %prefix_count, align 4
  switch i32 %1214, label %sw.default1636 [
    i32 0, label %sw.bb1624
    i32 1, label %sw.bb1627
    i32 2, label %sw.bb1631
  ]

sw.bb1624:                                        ; preds = %sw.bb1618
  %1215 = load ptr, ptr %result, align 8
  %1216 = load i64, ptr %length, align 8
  %add.ptr1625 = getelementptr inbounds i8, ptr %1215, i64 %1216
  %1217 = load i64, ptr %maxlen, align 8
  %1218 = load ptr, ptr %buf, align 8
  %1219 = load double, ptr %arg1619, align 8
  %call1626 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1625, i64 noundef %1217, ptr noundef %1218, double noundef %1219, ptr noundef %count1068) #21
  store i32 %call1626, ptr %retcount, align 4
  br label %sw.epilog1637

sw.bb1627:                                        ; preds = %sw.bb1618
  %1220 = load ptr, ptr %result, align 8
  %1221 = load i64, ptr %length, align 8
  %add.ptr1628 = getelementptr inbounds i8, ptr %1220, i64 %1221
  %1222 = load i64, ptr %maxlen, align 8
  %1223 = load ptr, ptr %buf, align 8
  %arrayidx1629 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1224 = load i32, ptr %arrayidx1629, align 4
  %1225 = load double, ptr %arg1619, align 8
  %call1630 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1628, i64 noundef %1222, ptr noundef %1223, i32 noundef %1224, double noundef %1225, ptr noundef %count1068) #21
  store i32 %call1630, ptr %retcount, align 4
  br label %sw.epilog1637

sw.bb1631:                                        ; preds = %sw.bb1618
  %1226 = load ptr, ptr %result, align 8
  %1227 = load i64, ptr %length, align 8
  %add.ptr1632 = getelementptr inbounds i8, ptr %1226, i64 %1227
  %1228 = load i64, ptr %maxlen, align 8
  %1229 = load ptr, ptr %buf, align 8
  %arrayidx1633 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1230 = load i32, ptr %arrayidx1633, align 4
  %arrayidx1634 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1231 = load i32, ptr %arrayidx1634, align 4
  %1232 = load double, ptr %arg1619, align 8
  %call1635 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1632, i64 noundef %1228, ptr noundef %1229, i32 noundef %1230, i32 noundef %1231, double noundef %1232, ptr noundef %count1068) #21
  store i32 %call1635, ptr %retcount, align 4
  br label %sw.epilog1637

sw.default1636:                                   ; preds = %sw.bb1618
  call void @abort() #22
  unreachable

sw.epilog1637:                                    ; preds = %sw.bb1631, %sw.bb1627, %sw.bb1624
  br label %sw.epilog1759

sw.bb1638:                                        ; preds = %if.end1073
  %arg1640 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1233 = load ptr, ptr %arg1640, align 8
  %1234 = load ptr, ptr %dp, align 8
  %arg_index1641 = getelementptr inbounds %struct.char_directive, ptr %1234, i32 0, i32 10
  %1235 = load i64, ptr %arg_index1641, align 8
  %arrayidx1642 = getelementptr inbounds %struct.argument, ptr %1233, i64 %1235
  %a1643 = getelementptr inbounds %struct.argument, ptr %arrayidx1642, i32 0, i32 1
  %1236 = load x86_fp80, ptr %a1643, align 16
  store x86_fp80 %1236, ptr %arg1639, align 16
  %1237 = load i32, ptr %prefix_count, align 4
  switch i32 %1237, label %sw.default1656 [
    i32 0, label %sw.bb1644
    i32 1, label %sw.bb1647
    i32 2, label %sw.bb1651
  ]

sw.bb1644:                                        ; preds = %sw.bb1638
  %1238 = load ptr, ptr %result, align 8
  %1239 = load i64, ptr %length, align 8
  %add.ptr1645 = getelementptr inbounds i8, ptr %1238, i64 %1239
  %1240 = load i64, ptr %maxlen, align 8
  %1241 = load ptr, ptr %buf, align 8
  %1242 = load x86_fp80, ptr %arg1639, align 16
  %call1646 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1645, i64 noundef %1240, ptr noundef %1241, x86_fp80 noundef %1242, ptr noundef %count1068) #21
  store i32 %call1646, ptr %retcount, align 4
  br label %sw.epilog1657

sw.bb1647:                                        ; preds = %sw.bb1638
  %1243 = load ptr, ptr %result, align 8
  %1244 = load i64, ptr %length, align 8
  %add.ptr1648 = getelementptr inbounds i8, ptr %1243, i64 %1244
  %1245 = load i64, ptr %maxlen, align 8
  %1246 = load ptr, ptr %buf, align 8
  %arrayidx1649 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1247 = load i32, ptr %arrayidx1649, align 4
  %1248 = load x86_fp80, ptr %arg1639, align 16
  %call1650 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1648, i64 noundef %1245, ptr noundef %1246, i32 noundef %1247, x86_fp80 noundef %1248, ptr noundef %count1068) #21
  store i32 %call1650, ptr %retcount, align 4
  br label %sw.epilog1657

sw.bb1651:                                        ; preds = %sw.bb1638
  %1249 = load ptr, ptr %result, align 8
  %1250 = load i64, ptr %length, align 8
  %add.ptr1652 = getelementptr inbounds i8, ptr %1249, i64 %1250
  %1251 = load i64, ptr %maxlen, align 8
  %1252 = load ptr, ptr %buf, align 8
  %arrayidx1653 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1253 = load i32, ptr %arrayidx1653, align 4
  %arrayidx1654 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1254 = load i32, ptr %arrayidx1654, align 4
  %1255 = load x86_fp80, ptr %arg1639, align 16
  %call1655 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1652, i64 noundef %1251, ptr noundef %1252, i32 noundef %1253, i32 noundef %1254, x86_fp80 noundef %1255, ptr noundef %count1068) #21
  store i32 %call1655, ptr %retcount, align 4
  br label %sw.epilog1657

sw.default1656:                                   ; preds = %sw.bb1638
  call void @abort() #22
  unreachable

sw.epilog1657:                                    ; preds = %sw.bb1651, %sw.bb1647, %sw.bb1644
  br label %sw.epilog1759

sw.bb1658:                                        ; preds = %if.end1073
  %arg1660 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1256 = load ptr, ptr %arg1660, align 8
  %1257 = load ptr, ptr %dp, align 8
  %arg_index1661 = getelementptr inbounds %struct.char_directive, ptr %1257, i32 0, i32 10
  %1258 = load i64, ptr %arg_index1661, align 8
  %arrayidx1662 = getelementptr inbounds %struct.argument, ptr %1256, i64 %1258
  %a1663 = getelementptr inbounds %struct.argument, ptr %arrayidx1662, i32 0, i32 1
  %1259 = load i32, ptr %a1663, align 16
  store i32 %1259, ptr %arg1659, align 4
  %1260 = load i32, ptr %prefix_count, align 4
  switch i32 %1260, label %sw.default1676 [
    i32 0, label %sw.bb1664
    i32 1, label %sw.bb1667
    i32 2, label %sw.bb1671
  ]

sw.bb1664:                                        ; preds = %sw.bb1658
  %1261 = load ptr, ptr %result, align 8
  %1262 = load i64, ptr %length, align 8
  %add.ptr1665 = getelementptr inbounds i8, ptr %1261, i64 %1262
  %1263 = load i64, ptr %maxlen, align 8
  %1264 = load ptr, ptr %buf, align 8
  %1265 = load i32, ptr %arg1659, align 4
  %call1666 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1665, i64 noundef %1263, ptr noundef %1264, i32 noundef %1265, ptr noundef %count1068) #21
  store i32 %call1666, ptr %retcount, align 4
  br label %sw.epilog1677

sw.bb1667:                                        ; preds = %sw.bb1658
  %1266 = load ptr, ptr %result, align 8
  %1267 = load i64, ptr %length, align 8
  %add.ptr1668 = getelementptr inbounds i8, ptr %1266, i64 %1267
  %1268 = load i64, ptr %maxlen, align 8
  %1269 = load ptr, ptr %buf, align 8
  %arrayidx1669 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1270 = load i32, ptr %arrayidx1669, align 4
  %1271 = load i32, ptr %arg1659, align 4
  %call1670 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1668, i64 noundef %1268, ptr noundef %1269, i32 noundef %1270, i32 noundef %1271, ptr noundef %count1068) #21
  store i32 %call1670, ptr %retcount, align 4
  br label %sw.epilog1677

sw.bb1671:                                        ; preds = %sw.bb1658
  %1272 = load ptr, ptr %result, align 8
  %1273 = load i64, ptr %length, align 8
  %add.ptr1672 = getelementptr inbounds i8, ptr %1272, i64 %1273
  %1274 = load i64, ptr %maxlen, align 8
  %1275 = load ptr, ptr %buf, align 8
  %arrayidx1673 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1276 = load i32, ptr %arrayidx1673, align 4
  %arrayidx1674 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1277 = load i32, ptr %arrayidx1674, align 4
  %1278 = load i32, ptr %arg1659, align 4
  %call1675 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1672, i64 noundef %1274, ptr noundef %1275, i32 noundef %1276, i32 noundef %1277, i32 noundef %1278, ptr noundef %count1068) #21
  store i32 %call1675, ptr %retcount, align 4
  br label %sw.epilog1677

sw.default1676:                                   ; preds = %sw.bb1658
  call void @abort() #22
  unreachable

sw.epilog1677:                                    ; preds = %sw.bb1671, %sw.bb1667, %sw.bb1664
  br label %sw.epilog1759

sw.bb1678:                                        ; preds = %if.end1073
  %arg1680 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1279 = load ptr, ptr %arg1680, align 8
  %1280 = load ptr, ptr %dp, align 8
  %arg_index1681 = getelementptr inbounds %struct.char_directive, ptr %1280, i32 0, i32 10
  %1281 = load i64, ptr %arg_index1681, align 8
  %arrayidx1682 = getelementptr inbounds %struct.argument, ptr %1279, i64 %1281
  %a1683 = getelementptr inbounds %struct.argument, ptr %arrayidx1682, i32 0, i32 1
  %1282 = load i32, ptr %a1683, align 16
  store i32 %1282, ptr %arg1679, align 4
  %1283 = load i32, ptr %prefix_count, align 4
  switch i32 %1283, label %sw.default1696 [
    i32 0, label %sw.bb1684
    i32 1, label %sw.bb1687
    i32 2, label %sw.bb1691
  ]

sw.bb1684:                                        ; preds = %sw.bb1678
  %1284 = load ptr, ptr %result, align 8
  %1285 = load i64, ptr %length, align 8
  %add.ptr1685 = getelementptr inbounds i8, ptr %1284, i64 %1285
  %1286 = load i64, ptr %maxlen, align 8
  %1287 = load ptr, ptr %buf, align 8
  %1288 = load i32, ptr %arg1679, align 4
  %call1686 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1685, i64 noundef %1286, ptr noundef %1287, i32 noundef %1288, ptr noundef %count1068) #21
  store i32 %call1686, ptr %retcount, align 4
  br label %sw.epilog1697

sw.bb1687:                                        ; preds = %sw.bb1678
  %1289 = load ptr, ptr %result, align 8
  %1290 = load i64, ptr %length, align 8
  %add.ptr1688 = getelementptr inbounds i8, ptr %1289, i64 %1290
  %1291 = load i64, ptr %maxlen, align 8
  %1292 = load ptr, ptr %buf, align 8
  %arrayidx1689 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1293 = load i32, ptr %arrayidx1689, align 4
  %1294 = load i32, ptr %arg1679, align 4
  %call1690 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1688, i64 noundef %1291, ptr noundef %1292, i32 noundef %1293, i32 noundef %1294, ptr noundef %count1068) #21
  store i32 %call1690, ptr %retcount, align 4
  br label %sw.epilog1697

sw.bb1691:                                        ; preds = %sw.bb1678
  %1295 = load ptr, ptr %result, align 8
  %1296 = load i64, ptr %length, align 8
  %add.ptr1692 = getelementptr inbounds i8, ptr %1295, i64 %1296
  %1297 = load i64, ptr %maxlen, align 8
  %1298 = load ptr, ptr %buf, align 8
  %arrayidx1693 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1299 = load i32, ptr %arrayidx1693, align 4
  %arrayidx1694 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1300 = load i32, ptr %arrayidx1694, align 4
  %1301 = load i32, ptr %arg1679, align 4
  %call1695 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1692, i64 noundef %1297, ptr noundef %1298, i32 noundef %1299, i32 noundef %1300, i32 noundef %1301, ptr noundef %count1068) #21
  store i32 %call1695, ptr %retcount, align 4
  br label %sw.epilog1697

sw.default1696:                                   ; preds = %sw.bb1678
  call void @abort() #22
  unreachable

sw.epilog1697:                                    ; preds = %sw.bb1691, %sw.bb1687, %sw.bb1684
  br label %sw.epilog1759

sw.bb1698:                                        ; preds = %if.end1073
  %arg1700 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1302 = load ptr, ptr %arg1700, align 8
  %1303 = load ptr, ptr %dp, align 8
  %arg_index1701 = getelementptr inbounds %struct.char_directive, ptr %1303, i32 0, i32 10
  %1304 = load i64, ptr %arg_index1701, align 8
  %arrayidx1702 = getelementptr inbounds %struct.argument, ptr %1302, i64 %1304
  %a1703 = getelementptr inbounds %struct.argument, ptr %arrayidx1702, i32 0, i32 1
  %1305 = load ptr, ptr %a1703, align 16
  store ptr %1305, ptr %arg1699, align 8
  %1306 = load i32, ptr %prefix_count, align 4
  switch i32 %1306, label %sw.default1716 [
    i32 0, label %sw.bb1704
    i32 1, label %sw.bb1707
    i32 2, label %sw.bb1711
  ]

sw.bb1704:                                        ; preds = %sw.bb1698
  %1307 = load ptr, ptr %result, align 8
  %1308 = load i64, ptr %length, align 8
  %add.ptr1705 = getelementptr inbounds i8, ptr %1307, i64 %1308
  %1309 = load i64, ptr %maxlen, align 8
  %1310 = load ptr, ptr %buf, align 8
  %1311 = load ptr, ptr %arg1699, align 8
  %call1706 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1705, i64 noundef %1309, ptr noundef %1310, ptr noundef %1311, ptr noundef %count1068) #21
  store i32 %call1706, ptr %retcount, align 4
  br label %sw.epilog1717

sw.bb1707:                                        ; preds = %sw.bb1698
  %1312 = load ptr, ptr %result, align 8
  %1313 = load i64, ptr %length, align 8
  %add.ptr1708 = getelementptr inbounds i8, ptr %1312, i64 %1313
  %1314 = load i64, ptr %maxlen, align 8
  %1315 = load ptr, ptr %buf, align 8
  %arrayidx1709 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1316 = load i32, ptr %arrayidx1709, align 4
  %1317 = load ptr, ptr %arg1699, align 8
  %call1710 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1708, i64 noundef %1314, ptr noundef %1315, i32 noundef %1316, ptr noundef %1317, ptr noundef %count1068) #21
  store i32 %call1710, ptr %retcount, align 4
  br label %sw.epilog1717

sw.bb1711:                                        ; preds = %sw.bb1698
  %1318 = load ptr, ptr %result, align 8
  %1319 = load i64, ptr %length, align 8
  %add.ptr1712 = getelementptr inbounds i8, ptr %1318, i64 %1319
  %1320 = load i64, ptr %maxlen, align 8
  %1321 = load ptr, ptr %buf, align 8
  %arrayidx1713 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1322 = load i32, ptr %arrayidx1713, align 4
  %arrayidx1714 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1323 = load i32, ptr %arrayidx1714, align 4
  %1324 = load ptr, ptr %arg1699, align 8
  %call1715 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1712, i64 noundef %1320, ptr noundef %1321, i32 noundef %1322, i32 noundef %1323, ptr noundef %1324, ptr noundef %count1068) #21
  store i32 %call1715, ptr %retcount, align 4
  br label %sw.epilog1717

sw.default1716:                                   ; preds = %sw.bb1698
  call void @abort() #22
  unreachable

sw.epilog1717:                                    ; preds = %sw.bb1711, %sw.bb1707, %sw.bb1704
  br label %sw.epilog1759

sw.bb1718:                                        ; preds = %if.end1073
  %arg1720 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1325 = load ptr, ptr %arg1720, align 8
  %1326 = load ptr, ptr %dp, align 8
  %arg_index1721 = getelementptr inbounds %struct.char_directive, ptr %1326, i32 0, i32 10
  %1327 = load i64, ptr %arg_index1721, align 8
  %arrayidx1722 = getelementptr inbounds %struct.argument, ptr %1325, i64 %1327
  %a1723 = getelementptr inbounds %struct.argument, ptr %arrayidx1722, i32 0, i32 1
  %1328 = load ptr, ptr %a1723, align 16
  store ptr %1328, ptr %arg1719, align 8
  %1329 = load i32, ptr %prefix_count, align 4
  switch i32 %1329, label %sw.default1736 [
    i32 0, label %sw.bb1724
    i32 1, label %sw.bb1727
    i32 2, label %sw.bb1731
  ]

sw.bb1724:                                        ; preds = %sw.bb1718
  %1330 = load ptr, ptr %result, align 8
  %1331 = load i64, ptr %length, align 8
  %add.ptr1725 = getelementptr inbounds i8, ptr %1330, i64 %1331
  %1332 = load i64, ptr %maxlen, align 8
  %1333 = load ptr, ptr %buf, align 8
  %1334 = load ptr, ptr %arg1719, align 8
  %call1726 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1725, i64 noundef %1332, ptr noundef %1333, ptr noundef %1334, ptr noundef %count1068) #21
  store i32 %call1726, ptr %retcount, align 4
  br label %sw.epilog1737

sw.bb1727:                                        ; preds = %sw.bb1718
  %1335 = load ptr, ptr %result, align 8
  %1336 = load i64, ptr %length, align 8
  %add.ptr1728 = getelementptr inbounds i8, ptr %1335, i64 %1336
  %1337 = load i64, ptr %maxlen, align 8
  %1338 = load ptr, ptr %buf, align 8
  %arrayidx1729 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1339 = load i32, ptr %arrayidx1729, align 4
  %1340 = load ptr, ptr %arg1719, align 8
  %call1730 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1728, i64 noundef %1337, ptr noundef %1338, i32 noundef %1339, ptr noundef %1340, ptr noundef %count1068) #21
  store i32 %call1730, ptr %retcount, align 4
  br label %sw.epilog1737

sw.bb1731:                                        ; preds = %sw.bb1718
  %1341 = load ptr, ptr %result, align 8
  %1342 = load i64, ptr %length, align 8
  %add.ptr1732 = getelementptr inbounds i8, ptr %1341, i64 %1342
  %1343 = load i64, ptr %maxlen, align 8
  %1344 = load ptr, ptr %buf, align 8
  %arrayidx1733 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1345 = load i32, ptr %arrayidx1733, align 4
  %arrayidx1734 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1346 = load i32, ptr %arrayidx1734, align 4
  %1347 = load ptr, ptr %arg1719, align 8
  %call1735 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1732, i64 noundef %1343, ptr noundef %1344, i32 noundef %1345, i32 noundef %1346, ptr noundef %1347, ptr noundef %count1068) #21
  store i32 %call1735, ptr %retcount, align 4
  br label %sw.epilog1737

sw.default1736:                                   ; preds = %sw.bb1718
  call void @abort() #22
  unreachable

sw.epilog1737:                                    ; preds = %sw.bb1731, %sw.bb1727, %sw.bb1724
  br label %sw.epilog1759

sw.bb1738:                                        ; preds = %if.end1073
  %arg1740 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1348 = load ptr, ptr %arg1740, align 8
  %1349 = load ptr, ptr %dp, align 8
  %arg_index1741 = getelementptr inbounds %struct.char_directive, ptr %1349, i32 0, i32 10
  %1350 = load i64, ptr %arg_index1741, align 8
  %arrayidx1742 = getelementptr inbounds %struct.argument, ptr %1348, i64 %1350
  %a1743 = getelementptr inbounds %struct.argument, ptr %arrayidx1742, i32 0, i32 1
  %1351 = load ptr, ptr %a1743, align 16
  store ptr %1351, ptr %arg1739, align 8
  %1352 = load i32, ptr %prefix_count, align 4
  switch i32 %1352, label %sw.default1756 [
    i32 0, label %sw.bb1744
    i32 1, label %sw.bb1747
    i32 2, label %sw.bb1751
  ]

sw.bb1744:                                        ; preds = %sw.bb1738
  %1353 = load ptr, ptr %result, align 8
  %1354 = load i64, ptr %length, align 8
  %add.ptr1745 = getelementptr inbounds i8, ptr %1353, i64 %1354
  %1355 = load i64, ptr %maxlen, align 8
  %1356 = load ptr, ptr %buf, align 8
  %1357 = load ptr, ptr %arg1739, align 8
  %call1746 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1745, i64 noundef %1355, ptr noundef %1356, ptr noundef %1357, ptr noundef %count1068) #21
  store i32 %call1746, ptr %retcount, align 4
  br label %sw.epilog1757

sw.bb1747:                                        ; preds = %sw.bb1738
  %1358 = load ptr, ptr %result, align 8
  %1359 = load i64, ptr %length, align 8
  %add.ptr1748 = getelementptr inbounds i8, ptr %1358, i64 %1359
  %1360 = load i64, ptr %maxlen, align 8
  %1361 = load ptr, ptr %buf, align 8
  %arrayidx1749 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1362 = load i32, ptr %arrayidx1749, align 4
  %1363 = load ptr, ptr %arg1739, align 8
  %call1750 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1748, i64 noundef %1360, ptr noundef %1361, i32 noundef %1362, ptr noundef %1363, ptr noundef %count1068) #21
  store i32 %call1750, ptr %retcount, align 4
  br label %sw.epilog1757

sw.bb1751:                                        ; preds = %sw.bb1738
  %1364 = load ptr, ptr %result, align 8
  %1365 = load i64, ptr %length, align 8
  %add.ptr1752 = getelementptr inbounds i8, ptr %1364, i64 %1365
  %1366 = load i64, ptr %maxlen, align 8
  %1367 = load ptr, ptr %buf, align 8
  %arrayidx1753 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1368 = load i32, ptr %arrayidx1753, align 4
  %arrayidx1754 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1369 = load i32, ptr %arrayidx1754, align 4
  %1370 = load ptr, ptr %arg1739, align 8
  %call1755 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1752, i64 noundef %1366, ptr noundef %1367, i32 noundef %1368, i32 noundef %1369, ptr noundef %1370, ptr noundef %count1068) #21
  store i32 %call1755, ptr %retcount, align 4
  br label %sw.epilog1757

sw.default1756:                                   ; preds = %sw.bb1738
  call void @abort() #22
  unreachable

sw.epilog1757:                                    ; preds = %sw.bb1751, %sw.bb1747, %sw.bb1744
  br label %sw.epilog1759

sw.default1758:                                   ; preds = %if.end1073
  call void @abort() #22
  unreachable

sw.epilog1759:                                    ; preds = %sw.epilog1757, %sw.epilog1737, %sw.epilog1717, %sw.epilog1697, %sw.epilog1677, %sw.epilog1657, %sw.epilog1637, %sw.epilog1617, %sw.epilog1597, %sw.epilog1577, %sw.epilog1557, %sw.epilog1537, %sw.epilog1517, %sw.epilog1497, %sw.epilog1474, %sw.epilog1451, %sw.epilog1431, %sw.epilog1411, %sw.epilog1391, %sw.epilog1371, %sw.epilog1348, %sw.epilog1325, %sw.epilog1302, %sw.epilog1279, %sw.epilog1259, %sw.epilog1239, %sw.epilog1219, %sw.epilog1199, %sw.epilog1179, %sw.epilog1159, %sw.epilog1138, %sw.epilog1117, %sw.epilog1096
  %1371 = load i32, ptr %count1068, align 4
  %cmp1760 = icmp sge i32 %1371, 0
  br i1 %cmp1760, label %if.then1762, label %if.else1779

if.then1762:                                      ; preds = %sw.epilog1759
  %1372 = load i32, ptr %count1068, align 4
  %conv1763 = zext i32 %1372 to i64
  %1373 = load i64, ptr %maxlen, align 8
  %cmp1764 = icmp ult i64 %conv1763, %1373
  br i1 %cmp1764, label %land.lhs.true1766, label %if.end1774

land.lhs.true1766:                                ; preds = %if.then1762
  %1374 = load ptr, ptr %result, align 8
  %1375 = load i64, ptr %length, align 8
  %add.ptr1767 = getelementptr inbounds i8, ptr %1374, i64 %1375
  %1376 = load i32, ptr %count1068, align 4
  %idxprom1768 = sext i32 %1376 to i64
  %arrayidx1769 = getelementptr inbounds i8, ptr %add.ptr1767, i64 %idxprom1768
  %1377 = load i8, ptr %arrayidx1769, align 1
  %conv1770 = sext i8 %1377 to i32
  %cmp1771 = icmp ne i32 %conv1770, 0
  br i1 %cmp1771, label %if.then1773, label %if.end1774

if.then1773:                                      ; preds = %land.lhs.true1766
  call void @abort() #22
  unreachable

if.end1774:                                       ; preds = %land.lhs.true1766, %if.then1762
  %1378 = load i32, ptr %retcount, align 4
  %1379 = load i32, ptr %count1068, align 4
  %cmp1775 = icmp sgt i32 %1378, %1379
  br i1 %cmp1775, label %if.then1777, label %if.end1778

if.then1777:                                      ; preds = %if.end1774
  %1380 = load i32, ptr %retcount, align 4
  store i32 %1380, ptr %count1068, align 4
  br label %if.end1778

if.end1778:                                       ; preds = %if.then1777, %if.end1774
  br label %if.end1793

if.else1779:                                      ; preds = %sw.epilog1759
  %1381 = load ptr, ptr %fbp, align 8
  %arrayidx1780 = getelementptr inbounds i8, ptr %1381, i64 1
  %1382 = load i8, ptr %arrayidx1780, align 1
  %conv1781 = sext i8 %1382 to i32
  %cmp1782 = icmp ne i32 %conv1781, 0
  br i1 %cmp1782, label %if.then1784, label %if.else1786

if.then1784:                                      ; preds = %if.else1779
  %1383 = load ptr, ptr %fbp, align 8
  %arrayidx1785 = getelementptr inbounds i8, ptr %1383, i64 1
  store i8 0, ptr %arrayidx1785, align 1
  br label %for.cond1067

if.else1786:                                      ; preds = %if.else1779
  %1384 = load i32, ptr %retcount, align 4
  %cmp1787 = icmp slt i32 %1384, 0
  br i1 %cmp1787, label %if.then1789, label %if.else1790

if.then1789:                                      ; preds = %if.else1786
  br label %if.end1791

if.else1790:                                      ; preds = %if.else1786
  %1385 = load i32, ptr %retcount, align 4
  store i32 %1385, ptr %count1068, align 4
  br label %if.end1791

if.end1791:                                       ; preds = %if.else1790, %if.then1789
  br label %if.end1792

if.end1792:                                       ; preds = %if.end1791
  br label %if.end1793

if.end1793:                                       ; preds = %if.end1792, %if.end1778
  %1386 = load i32, ptr %count1068, align 4
  %cmp1794 = icmp slt i32 %1386, 0
  br i1 %cmp1794, label %if.then1796, label %if.end1816

if.then1796:                                      ; preds = %if.end1793
  %call1797 = call ptr @__errno_location() #26
  %1387 = load i32, ptr %call1797, align 4
  %cmp1798 = icmp eq i32 %1387, 0
  br i1 %cmp1798, label %if.then1800, label %if.end1815

if.then1800:                                      ; preds = %if.then1796
  %1388 = load ptr, ptr %dp, align 8
  %conversion1801 = getelementptr inbounds %struct.char_directive, ptr %1388, i32 0, i32 9
  %1389 = load i8, ptr %conversion1801, align 8
  %conv1802 = sext i8 %1389 to i32
  %cmp1803 = icmp eq i32 %conv1802, 99
  br i1 %cmp1803, label %if.then1810, label %lor.lhs.false1805

lor.lhs.false1805:                                ; preds = %if.then1800
  %1390 = load ptr, ptr %dp, align 8
  %conversion1806 = getelementptr inbounds %struct.char_directive, ptr %1390, i32 0, i32 9
  %1391 = load i8, ptr %conversion1806, align 8
  %conv1807 = sext i8 %1391 to i32
  %cmp1808 = icmp eq i32 %conv1807, 115
  br i1 %cmp1808, label %if.then1810, label %if.else1812

if.then1810:                                      ; preds = %lor.lhs.false1805, %if.then1800
  %call1811 = call ptr @__errno_location() #26
  store i32 84, ptr %call1811, align 4
  br label %if.end1814

if.else1812:                                      ; preds = %lor.lhs.false1805
  %call1813 = call ptr @__errno_location() #26
  store i32 22, ptr %call1813, align 4
  br label %if.end1814

if.end1814:                                       ; preds = %if.else1812, %if.then1810
  br label %if.end1815

if.end1815:                                       ; preds = %if.end1814, %if.then1796
  br label %fail_with_errno

if.end1816:                                       ; preds = %if.end1793
  %1392 = load i32, ptr %count1068, align 4
  %add1817 = add i32 %1392, 1
  %conv1818 = zext i32 %add1817 to i64
  %1393 = load i64, ptr %maxlen, align 8
  %cmp1819 = icmp uge i64 %conv1818, %1393
  br i1 %cmp1819, label %if.then1821, label %if.end1892

if.then1821:                                      ; preds = %if.end1816
  %1394 = load i64, ptr %maxlen, align 8
  %cmp1822 = icmp eq i64 %1394, 2147483647
  br i1 %cmp1822, label %if.then1824, label %if.else1825

if.then1824:                                      ; preds = %if.then1821
  br label %overflow

if.else1825:                                      ; preds = %if.then1821
  %1395 = load i64, ptr %length, align 8
  %1396 = load i32, ptr %count1068, align 4
  %add1827 = add i32 %1396, 2
  %conv1828 = zext i32 %add1827 to i64
  %add1829 = add i64 %conv1828, 1
  %sub1830 = sub i64 %add1829, 1
  %div = udiv i64 %sub1830, 1
  %call1831 = call i64 @xsum(i64 noundef %1395, i64 noundef %div) #23
  %1397 = load i64, ptr %allocated, align 8
  %cmp1832 = icmp ule i64 %1397, 9223372036854775807
  br i1 %cmp1832, label %cond.true1834, label %cond.false1836

cond.true1834:                                    ; preds = %if.else1825
  %1398 = load i64, ptr %allocated, align 8
  %mul1835 = mul i64 %1398, 2
  br label %cond.end1837

cond.false1836:                                   ; preds = %if.else1825
  br label %cond.end1837

cond.end1837:                                     ; preds = %cond.false1836, %cond.true1834
  %cond1838 = phi i64 [ %mul1835, %cond.true1834 ], [ -1, %cond.false1836 ]
  %call1839 = call i64 @xmax(i64 noundef %call1831, i64 noundef %cond1838) #23
  store i64 %call1839, ptr %n1826, align 8
  %1399 = load i64, ptr %n1826, align 8
  %1400 = load i64, ptr %allocated, align 8
  %cmp1840 = icmp ugt i64 %1399, %1400
  br i1 %cmp1840, label %if.then1842, label %if.end1891

if.then1842:                                      ; preds = %cond.end1837
  %1401 = load i64, ptr %allocated, align 8
  %cmp1845 = icmp ugt i64 %1401, 0
  br i1 %cmp1845, label %cond.true1847, label %cond.false1855

cond.true1847:                                    ; preds = %if.then1842
  %1402 = load i64, ptr %allocated, align 8
  %cmp1848 = icmp ule i64 %1402, 9223372036854775807
  br i1 %cmp1848, label %cond.true1850, label %cond.false1852

cond.true1850:                                    ; preds = %cond.true1847
  %1403 = load i64, ptr %allocated, align 8
  %mul1851 = mul i64 %1403, 2
  br label %cond.end1853

cond.false1852:                                   ; preds = %cond.true1847
  br label %cond.end1853

cond.end1853:                                     ; preds = %cond.false1852, %cond.true1850
  %cond1854 = phi i64 [ %mul1851, %cond.true1850 ], [ -1, %cond.false1852 ]
  br label %cond.end1856

cond.false1855:                                   ; preds = %if.then1842
  br label %cond.end1856

cond.end1856:                                     ; preds = %cond.false1855, %cond.end1853
  %cond1857 = phi i64 [ %cond1854, %cond.end1853 ], [ 12, %cond.false1855 ]
  store i64 %cond1857, ptr %allocated, align 8
  %1404 = load i64, ptr %n1826, align 8
  %1405 = load i64, ptr %allocated, align 8
  %cmp1858 = icmp ugt i64 %1404, %1405
  br i1 %cmp1858, label %if.then1860, label %if.end1861

if.then1860:                                      ; preds = %cond.end1856
  %1406 = load i64, ptr %n1826, align 8
  store i64 %1406, ptr %allocated, align 8
  br label %if.end1861

if.end1861:                                       ; preds = %if.then1860, %cond.end1856
  %1407 = load i64, ptr %allocated, align 8
  %cmp1862 = icmp ule i64 %1407, -1
  br i1 %cmp1862, label %cond.true1864, label %cond.false1866

cond.true1864:                                    ; preds = %if.end1861
  %1408 = load i64, ptr %allocated, align 8
  %mul1865 = mul i64 %1408, 1
  br label %cond.end1867

cond.false1866:                                   ; preds = %if.end1861
  br label %cond.end1867

cond.end1867:                                     ; preds = %cond.false1866, %cond.true1864
  %cond1868 = phi i64 [ %mul1865, %cond.true1864 ], [ -1, %cond.false1866 ]
  store i64 %cond1868, ptr %memory_size1843, align 8
  %1409 = load i64, ptr %memory_size1843, align 8
  %cmp1869 = icmp eq i64 %1409, -1
  br i1 %cmp1869, label %if.then1871, label %if.end1872

if.then1871:                                      ; preds = %cond.end1867
  br label %out_of_memory

if.end1872:                                       ; preds = %cond.end1867
  %1410 = load ptr, ptr %result, align 8
  %1411 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1873 = icmp eq ptr %1410, %1411
  br i1 %cmp1873, label %if.then1875, label %if.else1877

if.then1875:                                      ; preds = %if.end1872
  %1412 = load i64, ptr %memory_size1843, align 8
  %call1876 = call noalias ptr @malloc(i64 noundef %1412) #29
  store ptr %call1876, ptr %memory1844, align 8
  br label %if.end1879

if.else1877:                                      ; preds = %if.end1872
  %1413 = load ptr, ptr %result, align 8
  %1414 = load i64, ptr %memory_size1843, align 8
  %call1878 = call ptr @rpl_realloc(ptr noundef %1413, i64 noundef %1414)
  store ptr %call1878, ptr %memory1844, align 8
  br label %if.end1879

if.end1879:                                       ; preds = %if.else1877, %if.then1875
  %1415 = load ptr, ptr %memory1844, align 8
  %cmp1880 = icmp eq ptr %1415, null
  br i1 %cmp1880, label %if.then1882, label %if.end1883

if.then1882:                                      ; preds = %if.end1879
  br label %out_of_memory

if.end1883:                                       ; preds = %if.end1879
  %1416 = load ptr, ptr %result, align 8
  %1417 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1884 = icmp eq ptr %1416, %1417
  br i1 %cmp1884, label %land.lhs.true1886, label %if.end1890

land.lhs.true1886:                                ; preds = %if.end1883
  %1418 = load i64, ptr %length, align 8
  %cmp1887 = icmp ugt i64 %1418, 0
  br i1 %cmp1887, label %if.then1889, label %if.end1890

if.then1889:                                      ; preds = %land.lhs.true1886
  %1419 = load ptr, ptr %memory1844, align 8
  %1420 = load ptr, ptr %result, align 8
  %1421 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1419, ptr align 1 %1420, i64 %1421, i1 false)
  br label %if.end1890

if.end1890:                                       ; preds = %if.then1889, %land.lhs.true1886, %if.end1883
  %1422 = load ptr, ptr %memory1844, align 8
  store ptr %1422, ptr %result, align 8
  br label %if.end1891

if.end1891:                                       ; preds = %if.end1890, %cond.end1837
  br label %for.cond1067

if.end1892:                                       ; preds = %if.end1816
  %1423 = load i32, ptr %count1068, align 4
  %conv1893 = sext i32 %1423 to i64
  %1424 = load i64, ptr %length, align 8
  %add1894 = add i64 %1424, %conv1893
  store i64 %add1894, ptr %length, align 8
  br label %for.end1895

for.end1895:                                      ; preds = %if.end1892
  %1425 = load i32, ptr %orig_errno, align 4
  %call1896 = call ptr @__errno_location() #26
  store i32 %1425, ptr %call1896, align 4
  br label %if.end1897

if.end1897:                                       ; preds = %for.end1895, %if.end840
  br label %if.end1898

if.end1898:                                       ; preds = %if.end1897, %if.end344
  br label %if.end1899

if.end1899:                                       ; preds = %if.end1898
  br label %if.end1900

if.end1900:                                       ; preds = %if.end1899, %if.end130
  br label %for.inc

for.inc:                                          ; preds = %if.end1900
  %1426 = load ptr, ptr %dp, align 8
  %dir_end = getelementptr inbounds %struct.char_directive, ptr %1426, i32 0, i32 1
  %1427 = load ptr, ptr %dir_end, align 8
  store ptr %1427, ptr %cp, align 8
  %1428 = load i64, ptr %i, align 8
  %inc1901 = add i64 %1428, 1
  store i64 %inc1901, ptr %i, align 8
  %1429 = load ptr, ptr %dp, align 8
  %incdec.ptr1902 = getelementptr inbounds %struct.char_directive, ptr %1429, i32 1
  store ptr %incdec.ptr1902, ptr %dp, align 8
  br label %for.cond

for.end1903:                                      ; preds = %if.then68
  %1430 = load i64, ptr %length, align 8
  %call1904 = call i64 @xsum(i64 noundef %1430, i64 noundef 1) #23
  %1431 = load i64, ptr %allocated, align 8
  %cmp1905 = icmp ugt i64 %call1904, %1431
  br i1 %cmp1905, label %if.then1907, label %if.end1958

if.then1907:                                      ; preds = %for.end1903
  %1432 = load i64, ptr %allocated, align 8
  %cmp1910 = icmp ugt i64 %1432, 0
  br i1 %cmp1910, label %cond.true1912, label %cond.false1920

cond.true1912:                                    ; preds = %if.then1907
  %1433 = load i64, ptr %allocated, align 8
  %cmp1913 = icmp ule i64 %1433, 9223372036854775807
  br i1 %cmp1913, label %cond.true1915, label %cond.false1917

cond.true1915:                                    ; preds = %cond.true1912
  %1434 = load i64, ptr %allocated, align 8
  %mul1916 = mul i64 %1434, 2
  br label %cond.end1918

cond.false1917:                                   ; preds = %cond.true1912
  br label %cond.end1918

cond.end1918:                                     ; preds = %cond.false1917, %cond.true1915
  %cond1919 = phi i64 [ %mul1916, %cond.true1915 ], [ -1, %cond.false1917 ]
  br label %cond.end1921

cond.false1920:                                   ; preds = %if.then1907
  br label %cond.end1921

cond.end1921:                                     ; preds = %cond.false1920, %cond.end1918
  %cond1922 = phi i64 [ %cond1919, %cond.end1918 ], [ 12, %cond.false1920 ]
  store i64 %cond1922, ptr %allocated, align 8
  %1435 = load i64, ptr %length, align 8
  %call1923 = call i64 @xsum(i64 noundef %1435, i64 noundef 1) #23
  %1436 = load i64, ptr %allocated, align 8
  %cmp1924 = icmp ugt i64 %call1923, %1436
  br i1 %cmp1924, label %if.then1926, label %if.end1928

if.then1926:                                      ; preds = %cond.end1921
  %1437 = load i64, ptr %length, align 8
  %call1927 = call i64 @xsum(i64 noundef %1437, i64 noundef 1) #23
  store i64 %call1927, ptr %allocated, align 8
  br label %if.end1928

if.end1928:                                       ; preds = %if.then1926, %cond.end1921
  %1438 = load i64, ptr %allocated, align 8
  %cmp1929 = icmp ule i64 %1438, -1
  br i1 %cmp1929, label %cond.true1931, label %cond.false1933

cond.true1931:                                    ; preds = %if.end1928
  %1439 = load i64, ptr %allocated, align 8
  %mul1932 = mul i64 %1439, 1
  br label %cond.end1934

cond.false1933:                                   ; preds = %if.end1928
  br label %cond.end1934

cond.end1934:                                     ; preds = %cond.false1933, %cond.true1931
  %cond1935 = phi i64 [ %mul1932, %cond.true1931 ], [ -1, %cond.false1933 ]
  store i64 %cond1935, ptr %memory_size1908, align 8
  %1440 = load i64, ptr %memory_size1908, align 8
  %cmp1936 = icmp eq i64 %1440, -1
  br i1 %cmp1936, label %if.then1938, label %if.end1939

if.then1938:                                      ; preds = %cond.end1934
  br label %out_of_memory

if.end1939:                                       ; preds = %cond.end1934
  %1441 = load ptr, ptr %result, align 8
  %1442 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1940 = icmp eq ptr %1441, %1442
  br i1 %cmp1940, label %if.then1942, label %if.else1944

if.then1942:                                      ; preds = %if.end1939
  %1443 = load i64, ptr %memory_size1908, align 8
  %call1943 = call noalias ptr @malloc(i64 noundef %1443) #29
  store ptr %call1943, ptr %memory1909, align 8
  br label %if.end1946

if.else1944:                                      ; preds = %if.end1939
  %1444 = load ptr, ptr %result, align 8
  %1445 = load i64, ptr %memory_size1908, align 8
  %call1945 = call ptr @rpl_realloc(ptr noundef %1444, i64 noundef %1445)
  store ptr %call1945, ptr %memory1909, align 8
  br label %if.end1946

if.end1946:                                       ; preds = %if.else1944, %if.then1942
  %1446 = load ptr, ptr %memory1909, align 8
  %cmp1947 = icmp eq ptr %1446, null
  br i1 %cmp1947, label %if.then1949, label %if.end1950

if.then1949:                                      ; preds = %if.end1946
  br label %out_of_memory

if.end1950:                                       ; preds = %if.end1946
  %1447 = load ptr, ptr %result, align 8
  %1448 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1951 = icmp eq ptr %1447, %1448
  br i1 %cmp1951, label %land.lhs.true1953, label %if.end1957

land.lhs.true1953:                                ; preds = %if.end1950
  %1449 = load i64, ptr %length, align 8
  %cmp1954 = icmp ugt i64 %1449, 0
  br i1 %cmp1954, label %if.then1956, label %if.end1957

if.then1956:                                      ; preds = %land.lhs.true1953
  %1450 = load ptr, ptr %memory1909, align 8
  %1451 = load ptr, ptr %result, align 8
  %1452 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1450, ptr align 1 %1451, i64 %1452, i1 false)
  br label %if.end1957

if.end1957:                                       ; preds = %if.then1956, %land.lhs.true1953, %if.end1950
  %1453 = load ptr, ptr %memory1909, align 8
  store ptr %1453, ptr %result, align 8
  br label %if.end1958

if.end1958:                                       ; preds = %if.end1957, %for.end1903
  %1454 = load ptr, ptr %result, align 8
  %1455 = load i64, ptr %length, align 8
  %arrayidx1959 = getelementptr inbounds i8, ptr %1454, i64 %1455
  store i8 0, ptr %arrayidx1959, align 1
  %1456 = load ptr, ptr %result, align 8
  %1457 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1960 = icmp ne ptr %1456, %1457
  br i1 %cmp1960, label %land.lhs.true1962, label %if.end1975

land.lhs.true1962:                                ; preds = %if.end1958
  %1458 = load i64, ptr %length, align 8
  %add1963 = add i64 %1458, 1
  %1459 = load i64, ptr %allocated, align 8
  %cmp1964 = icmp ult i64 %add1963, %1459
  br i1 %cmp1964, label %if.then1966, label %if.end1975

if.then1966:                                      ; preds = %land.lhs.true1962
  %1460 = load ptr, ptr %result, align 8
  %1461 = load i64, ptr %length, align 8
  %add1968 = add i64 %1461, 1
  %mul1969 = mul i64 %add1968, 1
  %call1970 = call ptr @rpl_realloc(ptr noundef %1460, i64 noundef %mul1969)
  store ptr %call1970, ptr %memory1967, align 8
  %1462 = load ptr, ptr %memory1967, align 8
  %cmp1971 = icmp ne ptr %1462, null
  br i1 %cmp1971, label %if.then1973, label %if.end1974

if.then1973:                                      ; preds = %if.then1966
  %1463 = load ptr, ptr %memory1967, align 8
  store ptr %1463, ptr %result, align 8
  br label %if.end1974

if.end1974:                                       ; preds = %if.then1973, %if.then1966
  br label %if.end1975

if.end1975:                                       ; preds = %if.end1974, %land.lhs.true1962, %if.end1958
  %1464 = load ptr, ptr %buf_malloced, align 8
  %cmp1976 = icmp ne ptr %1464, null
  br i1 %cmp1976, label %if.then1978, label %if.end1979

if.then1978:                                      ; preds = %if.end1975
  %1465 = load ptr, ptr %buf_malloced, align 8
  call void @free(ptr noundef %1465) #21
  br label %if.end1979

if.end1979:                                       ; preds = %if.then1978, %if.end1975
  %dir1980 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1466 = load ptr, ptr %dir1980, align 8
  %direct_alloc_dir = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 4
  %arraydecay1981 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir, i64 0, i64 0
  %cmp1982 = icmp ne ptr %1466, %arraydecay1981
  br i1 %cmp1982, label %if.then1984, label %if.end1986

if.then1984:                                      ; preds = %if.end1979
  %dir1985 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1467 = load ptr, ptr %dir1985, align 8
  call void @free(ptr noundef %1467) #21
  br label %if.end1986

if.end1986:                                       ; preds = %if.then1984, %if.end1979
  %arg1987 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1468 = load ptr, ptr %arg1987, align 8
  %direct_alloc_arg = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 2
  %arraydecay1988 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg, i64 0, i64 0
  %cmp1989 = icmp ne ptr %1468, %arraydecay1988
  br i1 %cmp1989, label %if.then1991, label %if.end1993

if.then1991:                                      ; preds = %if.end1986
  %arg1992 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1469 = load ptr, ptr %arg1992, align 8
  call void @free(ptr noundef %1469) #21
  br label %if.end1993

if.end1993:                                       ; preds = %if.then1991, %if.end1986
  %1470 = load i64, ptr %length, align 8
  %1471 = load ptr, ptr %lengthp.addr, align 8
  store i64 %1470, ptr %1471, align 8
  %1472 = load ptr, ptr %result, align 8
  store ptr %1472, ptr %retval, align 8
  br label %return

overflow:                                         ; preds = %if.then1824, %if.then944, %if.then417, %if.then198
  %call1994 = call ptr @__errno_location() #26
  store i32 75, ptr %call1994, align 4
  br label %fail_with_errno

out_of_memory:                                    ; preds = %if.then1949, %if.then1938, %if.then1882, %if.then1871, %if.then1055, %if.then1044, %if.then828, %if.then817, %if.then757, %if.then746, %if.then651, %if.then640, %if.then589, %if.then578, %if.then312, %if.then301, %if.then121, %if.then110, %if.then59, %if.then50
  %call1995 = call ptr @__errno_location() #26
  store i32 12, ptr %call1995, align 4
  br label %fail_with_errno

fail_with_EILSEQ:                                 ; preds = %if.then707, %if.then522, %if.then493
  %call1996 = call ptr @__errno_location() #26
  store i32 84, ptr %call1996, align 4
  br label %fail_with_errno

fail_with_errno:                                  ; preds = %fail_with_EILSEQ, %out_of_memory, %overflow, %if.end1815
  %1473 = load ptr, ptr %result, align 8
  %1474 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1997 = icmp ne ptr %1473, %1474
  br i1 %cmp1997, label %if.then1999, label %if.end2000

if.then1999:                                      ; preds = %fail_with_errno
  %1475 = load ptr, ptr %result, align 8
  call void @free(ptr noundef %1475) #21
  br label %if.end2000

if.end2000:                                       ; preds = %if.then1999, %fail_with_errno
  %1476 = load ptr, ptr %buf_malloced, align 8
  %cmp2001 = icmp ne ptr %1476, null
  br i1 %cmp2001, label %if.then2003, label %if.end2004

if.then2003:                                      ; preds = %if.end2000
  %1477 = load ptr, ptr %buf_malloced, align 8
  call void @free(ptr noundef %1477) #21
  br label %if.end2004

if.end2004:                                       ; preds = %if.then2003, %if.end2000
  %dir2005 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1478 = load ptr, ptr %dir2005, align 8
  %direct_alloc_dir2006 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 4
  %arraydecay2007 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir2006, i64 0, i64 0
  %cmp2008 = icmp ne ptr %1478, %arraydecay2007
  br i1 %cmp2008, label %if.then2010, label %if.end2012

if.then2010:                                      ; preds = %if.end2004
  %dir2011 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1479 = load ptr, ptr %dir2011, align 8
  call void @free(ptr noundef %1479) #21
  br label %if.end2012

if.end2012:                                       ; preds = %if.then2010, %if.end2004
  %arg2013 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1480 = load ptr, ptr %arg2013, align 8
  %direct_alloc_arg2014 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 2
  %arraydecay2015 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg2014, i64 0, i64 0
  %cmp2016 = icmp ne ptr %1480, %arraydecay2015
  br i1 %cmp2016, label %if.then2018, label %if.end2020

if.then2018:                                      ; preds = %if.end2012
  %arg2019 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1481 = load ptr, ptr %arg2019, align 8
  call void @free(ptr noundef %1481) #21
  br label %if.end2020

if.end2020:                                       ; preds = %if.then2018, %if.end2012
  store ptr null, ptr %retval, align 8
  br label %return

out_of_memory_1:                                  ; preds = %if.then15, %if.then11
  %call2021 = call ptr @__errno_location() #26
  store i32 12, ptr %call2021, align 4
  br label %fail_1_with_errno

fail_1_with_EINVAL:                               ; preds = %if.then3
  %call2022 = call ptr @__errno_location() #26
  store i32 22, ptr %call2022, align 4
  br label %fail_1_with_errno

fail_1_with_errno:                                ; preds = %fail_1_with_EINVAL, %out_of_memory_1
  %dir2023 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1482 = load ptr, ptr %dir2023, align 8
  %direct_alloc_dir2024 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 4
  %arraydecay2025 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir2024, i64 0, i64 0
  %cmp2026 = icmp ne ptr %1482, %arraydecay2025
  br i1 %cmp2026, label %if.then2028, label %if.end2030

if.then2028:                                      ; preds = %fail_1_with_errno
  %dir2029 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1483 = load ptr, ptr %dir2029, align 8
  call void @free(ptr noundef %1483) #21
  br label %if.end2030

if.end2030:                                       ; preds = %if.then2028, %fail_1_with_errno
  %arg2031 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1484 = load ptr, ptr %arg2031, align 8
  %direct_alloc_arg2032 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 2
  %arraydecay2033 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg2032, i64 0, i64 0
  %cmp2034 = icmp ne ptr %1484, %arraydecay2033
  br i1 %cmp2034, label %if.then2036, label %if.end2038

if.then2036:                                      ; preds = %if.end2030
  %arg2037 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1485 = load ptr, ptr %arg2037, align 8
  call void @free(ptr noundef %1485) #21
  br label %if.end2038

if.end2038:                                       ; preds = %if.then2036, %if.end2030
  store ptr null, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end2038, %if.end2020, %if.end1993, %if.then
  %1486 = load ptr, ptr %retval, align 8
  ret ptr %1486
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @xsum4(i64 noundef, i64 noundef, i64 noundef, i64 noundef) #6

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strnlen(ptr noundef, i64 noundef) #6

; Function Attrs: nounwind
declare i64 @wcrtomb(ptr noundef, i32 noundef, ptr noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @wcslen(ptr noundef) #6

; Function Attrs: nounwind
declare i32 @snprintf(ptr noundef, i64 noundef, ptr noundef, ...) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @xmax(i64 noundef, i64 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @vfzprintf(ptr noundef nonnull %fp, ptr noundef nonnull %format, ptr noundef %args) #3 {
entry:
  %retval = alloca i64, align 8
  %fp.addr = alloca ptr, align 8
  %format.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  %buf = alloca [2000 x i8], align 16
  %output = alloca ptr, align 8
  %len = alloca i64, align 8
  %lenbuf = alloca i64, align 8
  store ptr %fp, ptr %fp.addr, align 8
  store ptr %format, ptr %format.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  store i64 2000, ptr %lenbuf, align 8
  %arraydecay = getelementptr inbounds [2000 x i8], ptr %buf, i64 0, i64 0
  %0 = load ptr, ptr %format.addr, align 8
  %1 = load ptr, ptr %args.addr, align 8
  %call = call ptr @vasnprintf(ptr noundef %arraydecay, ptr noundef %lenbuf, ptr noundef %0, ptr noundef %1)
  store ptr %call, ptr %output, align 8
  %2 = load i64, ptr %lenbuf, align 8
  store i64 %2, ptr %len, align 8
  %3 = load ptr, ptr %output, align 8
  %tobool = icmp ne ptr %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load ptr, ptr %fp.addr, align 8
  call void @fseterr(ptr noundef %4)
  store i64 -1, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64, ptr %len, align 8
  %cmp = icmp ugt i64 %5, 9223372036854775807
  br i1 %cmp, label %if.then1, label %if.end7

if.then1:                                         ; preds = %if.end
  %6 = load ptr, ptr %output, align 8
  %arraydecay2 = getelementptr inbounds [2000 x i8], ptr %buf, i64 0, i64 0
  %cmp3 = icmp ne ptr %6, %arraydecay2
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.then1
  %7 = load ptr, ptr %output, align 8
  call void @free(ptr noundef %7) #21
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.then1
  %8 = load ptr, ptr %fp.addr, align 8
  call void @fseterr(ptr noundef %8)
  %call6 = call ptr @__errno_location() #26
  store i32 12, ptr %call6, align 4
  store i64 -1, ptr %retval, align 8
  br label %return

if.end7:                                          ; preds = %if.end
  %9 = load ptr, ptr %output, align 8
  %10 = load i64, ptr %len, align 8
  %11 = load ptr, ptr %fp.addr, align 8
  %call8 = call i64 @fwrite(ptr noundef %9, i64 noundef 1, i64 noundef %10, ptr noundef %11)
  %12 = load i64, ptr %len, align 8
  %cmp9 = icmp ult i64 %call8, %12
  br i1 %cmp9, label %if.then10, label %if.end15

if.then10:                                        ; preds = %if.end7
  %13 = load ptr, ptr %output, align 8
  %arraydecay11 = getelementptr inbounds [2000 x i8], ptr %buf, i64 0, i64 0
  %cmp12 = icmp ne ptr %13, %arraydecay11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.then10
  %14 = load ptr, ptr %output, align 8
  call void @free(ptr noundef %14) #21
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.then10
  store i64 -1, ptr %retval, align 8
  br label %return

if.end15:                                         ; preds = %if.end7
  %15 = load ptr, ptr %output, align 8
  %arraydecay16 = getelementptr inbounds [2000 x i8], ptr %buf, i64 0, i64 0
  %cmp17 = icmp ne ptr %15, %arraydecay16
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end15
  %16 = load ptr, ptr %output, align 8
  call void @free(ptr noundef %16) #21
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.end15
  %17 = load i64, ptr %len, align 8
  store i64 %17, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end19, %if.end14, %if.end5, %if.then
  %18 = load i64, ptr %retval, align 8
  ret i64 %18
}

declare i64 @fwrite(ptr noundef, i64 noundef, i64 noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(1,2) uwtable
define dso_local ptr @xnrealloc(ptr noundef %p, i64 noundef %n, i64 noundef %s) #15 {
entry:
  %p.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %n.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  %call = call ptr @xreallocarray(ptr noundef %0, i64 noundef %1, i64 noundef %2) #30
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(1,2) uwtable
define dso_local ptr @xreallocarray(ptr noundef %p, i64 noundef %n, i64 noundef %s) #15 {
entry:
  %p.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  %r = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %n.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  %call = call ptr @rpl_reallocarray(ptr noundef %0, i64 noundef %1, i64 noundef %2)
  store ptr %call, ptr %r, align 8
  %3 = load ptr, ptr %r, align 8
  %tobool = icmp ne ptr %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @xalloc_die() #25
  unreachable

if.end:                                           ; preds = %entry
  %4 = load ptr, ptr %r, align 8
  ret ptr %4
}

declare ptr @rpl_reallocarray(ptr noundef, i64 noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @xmalloc(i64 noundef %s) #16 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias ptr @malloc(i64 noundef %0) #29
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define internal ptr @check_nonnull(ptr noundef %p) #11 {
entry:
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @xalloc_die() #25
  unreachable

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %p.addr, align 8
  ret ptr %1
}

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @ximalloc(i64 noundef %s) #16 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias ptr @imalloc(i64 noundef %0)
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

declare noalias ptr @imalloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @xcharalloc(i64 noundef %n) #16 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %call = call noalias nonnull ptr @xmalloc(i64 noundef %0) #28
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(1) uwtable
define dso_local ptr @xrealloc(ptr noundef %p, i64 noundef %s) #17 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  %r = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call ptr @rpl_realloc(ptr noundef %0, i64 noundef %1)
  store ptr %call, ptr %r, align 8
  %2 = load ptr, ptr %r, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @xalloc_die() #25
  unreachable

if.end:                                           ; preds = %entry
  %3 = load ptr, ptr %r, align 8
  ret ptr %3
}

; Function Attrs: noinline nounwind optnone allocsize(1) uwtable
define dso_local nonnull ptr @xirealloc(ptr noundef %p, i64 noundef %s) #17 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call ptr @irealloc(ptr noundef %0, i64 noundef %1)
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

declare ptr @irealloc(ptr noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(1,2) uwtable
define dso_local nonnull ptr @xireallocarray(ptr noundef %p, i64 noundef %n, i64 noundef %s) #15 {
entry:
  %p.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %n.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  %call = call ptr @ireallocarray(ptr noundef %0, i64 noundef %1, i64 noundef %2)
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

declare ptr @ireallocarray(ptr noundef, i64 noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(0,1) uwtable
define dso_local noalias nonnull ptr @xnmalloc(i64 noundef %n, i64 noundef %s) #18 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call ptr @xreallocarray(ptr noundef null, i64 noundef %0, i64 noundef %1) #30
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(0,1) uwtable
define dso_local noalias nonnull ptr @xinmalloc(i64 noundef %n, i64 noundef %s) #18 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call nonnull ptr @xireallocarray(ptr noundef null, i64 noundef %0, i64 noundef %1) #30
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local nonnull ptr @x2realloc(ptr noundef %p, ptr noundef %ps) #3 {
entry:
  %p.addr = alloca ptr, align 8
  %ps.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %ps, ptr %ps.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load ptr, ptr %ps.addr, align 8
  %call = call nonnull ptr @x2nrealloc(ptr noundef %0, ptr noundef %1, i64 noundef 1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local nonnull ptr @x2nrealloc(ptr noundef %p, ptr noundef %pn, i64 noundef %s) #3 {
entry:
  %p.addr = alloca ptr, align 8
  %pn.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  %n = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %pn, ptr %pn.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %pn.addr, align 8
  %1 = load i64, ptr %0, align 8
  store i64 %1, ptr %n, align 8
  %2 = load ptr, ptr %p.addr, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, ptr %n, align 8
  %tobool1 = icmp ne i64 %3, 0
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %4 = load i64, ptr %s.addr, align 8
  %div = udiv i64 128, %4
  store i64 %div, ptr %n, align 8
  %5 = load i64, ptr %n, align 8
  %tobool3 = icmp ne i64 %5, 0
  %lnot = xor i1 %tobool3, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %6 = load i64, ptr %n, align 8
  %add = add i64 %6, %conv
  store i64 %add, ptr %n, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7

if.else:                                          ; preds = %entry
  %7 = load i64, ptr %n, align 8
  %8 = load i64, ptr %n, align 8
  %shr = lshr i64 %8, 1
  %add4 = add i64 %shr, 1
  %9 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %7, i64 %add4)
  %10 = extractvalue { i64, i1 } %9, 1
  %11 = extractvalue { i64, i1 } %9, 0
  store i64 %11, ptr %n, align 8
  br i1 %10, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.else
  call void @xalloc_die() #25
  unreachable

if.end6:                                          ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  %12 = load ptr, ptr %p.addr, align 8
  %13 = load i64, ptr %n, align 8
  %14 = load i64, ptr %s.addr, align 8
  %call = call ptr @xreallocarray(ptr noundef %12, i64 noundef %13, i64 noundef %14) #30
  store ptr %call, ptr %p.addr, align 8
  %15 = load i64, ptr %n, align 8
  %16 = load ptr, ptr %pn.addr, align 8
  store i64 %15, ptr %16, align 8
  %17 = load ptr, ptr %p.addr, align 8
  ret ptr %17
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #9

; Function Attrs: noinline nounwind optnone uwtable
define dso_local nonnull ptr @xpalloc(ptr noundef %pa, ptr noundef %pn, i64 noundef %n_incr_min, i64 noundef %n_max, i64 noundef %s) #3 {
entry:
  %pa.addr = alloca ptr, align 8
  %pn.addr = alloca ptr, align 8
  %n_incr_min.addr = alloca i64, align 8
  %n_max.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  %n0 = alloca i64, align 8
  %n = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %adjusted_nbytes = alloca i64, align 8
  store ptr %pa, ptr %pa.addr, align 8
  store ptr %pn, ptr %pn.addr, align 8
  store i64 %n_incr_min, ptr %n_incr_min.addr, align 8
  store i64 %n_max, ptr %n_max.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %pn.addr, align 8
  %1 = load i64, ptr %0, align 8
  store i64 %1, ptr %n0, align 8
  %2 = load i64, ptr %n0, align 8
  %3 = load i64, ptr %n0, align 8
  %shr = ashr i64 %3, 1
  %4 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %2, i64 %shr)
  %5 = extractvalue { i64, i1 } %4, 1
  %6 = extractvalue { i64, i1 } %4, 0
  store i64 %6, ptr %n, align 8
  br i1 %5, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 9223372036854775807, ptr %n, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i64, ptr %n_max.addr, align 8
  %cmp = icmp sle i64 0, %7
  br i1 %cmp, label %land.lhs.true, label %if.end3

land.lhs.true:                                    ; preds = %if.end
  %8 = load i64, ptr %n_max.addr, align 8
  %9 = load i64, ptr %n, align 8
  %cmp1 = icmp slt i64 %8, %9
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %land.lhs.true
  %10 = load i64, ptr %n_max.addr, align 8
  store i64 %10, ptr %n, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %land.lhs.true, %if.end
  %11 = load i64, ptr %n, align 8
  %12 = load i64, ptr %s.addr, align 8
  %13 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %11, i64 %12)
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  store i64 %15, ptr %nbytes, align 8
  br i1 %14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end3
  br label %cond.end

cond.false:                                       ; preds = %if.end3
  %16 = load i64, ptr %nbytes, align 8
  %cmp4 = icmp slt i64 %16, 128
  %17 = zext i1 %cmp4 to i64
  %cond = select i1 %cmp4, i32 128, i32 0
  %conv = sext i32 %cond to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi i64 [ 9223372036854775807, %cond.true ], [ %conv, %cond.false ]
  store i64 %cond5, ptr %adjusted_nbytes, align 8
  %18 = load i64, ptr %adjusted_nbytes, align 8
  %tobool = icmp ne i64 %18, 0
  br i1 %tobool, label %if.then6, label %if.end7

if.then6:                                         ; preds = %cond.end
  %19 = load i64, ptr %adjusted_nbytes, align 8
  %20 = load i64, ptr %s.addr, align 8
  %div = sdiv i64 %19, %20
  store i64 %div, ptr %n, align 8
  %21 = load i64, ptr %adjusted_nbytes, align 8
  %22 = load i64, ptr %adjusted_nbytes, align 8
  %23 = load i64, ptr %s.addr, align 8
  %rem = srem i64 %22, %23
  %sub = sub nsw i64 %21, %rem
  store i64 %sub, ptr %nbytes, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %cond.end
  %24 = load ptr, ptr %pa.addr, align 8
  %tobool8 = icmp ne ptr %24, null
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %if.end7
  %25 = load ptr, ptr %pn.addr, align 8
  store i64 0, ptr %25, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  %26 = load i64, ptr %n, align 8
  %27 = load i64, ptr %n0, align 8
  %sub11 = sub nsw i64 %26, %27
  %28 = load i64, ptr %n_incr_min.addr, align 8
  %cmp12 = icmp slt i64 %sub11, %28
  br i1 %cmp12, label %land.lhs.true14, label %if.end24

land.lhs.true14:                                  ; preds = %if.end10
  %29 = load i64, ptr %n0, align 8
  %30 = load i64, ptr %n_incr_min.addr, align 8
  %31 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %29, i64 %30)
  %32 = extractvalue { i64, i1 } %31, 1
  %33 = extractvalue { i64, i1 } %31, 0
  store i64 %33, ptr %n, align 8
  br i1 %32, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true14
  %34 = load i64, ptr %n_max.addr, align 8
  %cmp16 = icmp sle i64 0, %34
  br i1 %cmp16, label %land.lhs.true18, label %lor.lhs.false21

land.lhs.true18:                                  ; preds = %lor.lhs.false
  %35 = load i64, ptr %n_max.addr, align 8
  %36 = load i64, ptr %n, align 8
  %cmp19 = icmp slt i64 %35, %36
  br i1 %cmp19, label %if.then23, label %lor.lhs.false21

lor.lhs.false21:                                  ; preds = %land.lhs.true18, %lor.lhs.false
  %37 = load i64, ptr %n, align 8
  %38 = load i64, ptr %s.addr, align 8
  %39 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %37, i64 %38)
  %40 = extractvalue { i64, i1 } %39, 1
  %41 = extractvalue { i64, i1 } %39, 0
  store i64 %41, ptr %nbytes, align 8
  br i1 %40, label %if.then23, label %if.end24

if.then23:                                        ; preds = %lor.lhs.false21, %land.lhs.true18, %land.lhs.true14
  call void @xalloc_die() #25
  unreachable

if.end24:                                         ; preds = %lor.lhs.false21, %if.end10
  %42 = load ptr, ptr %pa.addr, align 8
  %43 = load i64, ptr %nbytes, align 8
  %call = call ptr @xrealloc(ptr noundef %42, i64 noundef %43) #27
  store ptr %call, ptr %pa.addr, align 8
  %44 = load i64, ptr %n, align 8
  %45 = load ptr, ptr %pn.addr, align 8
  store i64 %44, ptr %45, align 8
  %46 = load ptr, ptr %pa.addr, align 8
  ret ptr %46
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #9

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #9

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @xzalloc(i64 noundef %s) #16 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias nonnull ptr @xcalloc(i64 noundef %0, i64 noundef 1) #31
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(0,1) uwtable
define dso_local noalias nonnull ptr @xcalloc(i64 noundef %n, i64 noundef %s) #18 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call noalias ptr @calloc(i64 noundef %0, i64 noundef %1) #32
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

; Function Attrs: nounwind allocsize(0,1)
declare noalias ptr @calloc(i64 noundef, i64 noundef) #19

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @xizalloc(i64 noundef %s) #16 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias nonnull ptr @xicalloc(i64 noundef %0, i64 noundef 1) #31
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(0,1) uwtable
define dso_local noalias nonnull ptr @xicalloc(i64 noundef %n, i64 noundef %s) #18 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call noalias ptr @icalloc(i64 noundef %0, i64 noundef %1)
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

declare noalias ptr @icalloc(i64 noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(1) uwtable
define dso_local noalias nonnull ptr @xmemdup(ptr noundef %p, i64 noundef %s) #17 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias nonnull ptr @xmalloc(i64 noundef %0) #28
  %1 = load ptr, ptr %p.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %call, ptr align 1 %1, i64 %2, i1 false)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(1) uwtable
define dso_local noalias nonnull ptr @ximemdup(ptr noundef %p, i64 noundef %s) #17 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias nonnull ptr @ximalloc(i64 noundef %0) #28
  %1 = load ptr, ptr %p.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %call, ptr align 1 %1, i64 %2, i1 false)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @ximemdup0(ptr noundef %p, i64 noundef %s) #3 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  %result = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %add = add nsw i64 %0, 1
  %call = call noalias nonnull ptr @ximalloc(i64 noundef %add) #28
  store ptr %call, ptr %result, align 8
  %1 = load ptr, ptr %result, align 8
  %2 = load i64, ptr %s.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %1, i64 %2
  store i8 0, ptr %arrayidx, align 1
  %3 = load ptr, ptr %result, align 8
  %4 = load ptr, ptr %p.addr, align 8
  %5 = load i64, ptr %s.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %3, ptr align 1 %4, i64 %5, i1 false)
  ret ptr %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @xstrdup(ptr noundef %string) #3 {
entry:
  %string.addr = alloca ptr, align 8
  store ptr %string, ptr %string.addr, align 8
  %0 = load ptr, ptr %string.addr, align 8
  %1 = load ptr, ptr %string.addr, align 8
  %call = call i64 @strlen(ptr noundef %1) #23
  %add = add i64 %call, 1
  %call1 = call noalias nonnull ptr @xmemdup(ptr noundef %0, i64 noundef %add) #27
  ret ptr %call1
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @xalloc_die() #0 {
entry:
  %__errstatus = alloca i32, align 4
  %0 = load volatile i32, ptr @exit_failure, align 4
  store i32 %0, ptr %__errstatus, align 4
  %1 = load i32, ptr %__errstatus, align 4
  %call = call ptr @dgettext(ptr noundef @.str.1.431, ptr noundef @.str.2.432) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef %1, i32 noundef 0, ptr noundef @.str.433, ptr noundef %call) #24
  %2 = load i32, ptr %__errstatus, align 4
  %cmp = icmp ne i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  unreachable

unreachable.cont:                                 ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %unreachable.cont
  call void @abort() #22
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @xnumtoumax(ptr noundef nonnull %n_str, i32 noundef %base, i64 noundef %min, i64 noundef %max, ptr noundef %suffixes, ptr noundef nonnull %err, i32 noundef %err_exit, i32 noundef %flags) #3 {
entry:
  %n_str.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %min.addr = alloca i64, align 8
  %max.addr = alloca i64, align 8
  %suffixes.addr = alloca ptr, align 8
  %err.addr = alloca ptr, align 8
  %err_exit.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %tnum = alloca i64, align 8
  %r = alloca i64, align 8
  %s_err = alloca i32, align 4
  %overflow_errno = alloca i32, align 4
  %e = alloca i32, align 4
  %__errstatus = alloca i32, align 4
  store ptr %n_str, ptr %n_str.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store i64 %min, ptr %min.addr, align 8
  store i64 %max, ptr %max.addr, align 8
  store ptr %suffixes, ptr %suffixes.addr, align 8
  store ptr %err, ptr %err.addr, align 8
  store i32 %err_exit, ptr %err_exit.addr, align 4
  store i32 %flags, ptr %flags.addr, align 4
  %0 = load ptr, ptr %n_str.addr, align 8
  %1 = load i32, ptr %base.addr, align 4
  %2 = load ptr, ptr %suffixes.addr, align 8
  %call = call i32 @xstrtoumax(ptr noundef %0, ptr noundef null, i32 noundef %1, ptr noundef %tnum, ptr noundef %2)
  store i32 %call, ptr %s_err, align 4
  %3 = load i32, ptr %s_err, align 4
  %cmp = icmp ne i32 %3, 4
  br i1 %cmp, label %if.then, label %if.end16

if.then:                                          ; preds = %entry
  %4 = load i64, ptr %tnum, align 8
  %5 = load i64, ptr %min.addr, align 8
  %cmp1 = icmp ult i64 %4, %5
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %6 = load i64, ptr %min.addr, align 8
  store i64 %6, ptr %r, align 8
  %7 = load i32, ptr %flags.addr, align 4
  %and = and i32 %7, 4
  %tobool = icmp ne i32 %and, 0
  %8 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 34, i32 75
  store i32 %cond, ptr %overflow_errno, align 4
  %9 = load i32, ptr %s_err, align 4
  %cmp3 = icmp eq i32 %9, 0
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then2
  store i32 1, ptr %s_err, align 4
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then2
  br label %if.end15

if.else:                                          ; preds = %if.then
  %10 = load i64, ptr %max.addr, align 8
  %11 = load i64, ptr %tnum, align 8
  %cmp5 = icmp ult i64 %10, %11
  br i1 %cmp5, label %if.then6, label %if.else13

if.then6:                                         ; preds = %if.else
  %12 = load i64, ptr %max.addr, align 8
  store i64 %12, ptr %r, align 8
  %13 = load i32, ptr %flags.addr, align 4
  %and7 = and i32 %13, 8
  %tobool8 = icmp ne i32 %and7, 0
  %14 = zext i1 %tobool8 to i64
  %cond9 = select i1 %tobool8, i32 34, i32 75
  store i32 %cond9, ptr %overflow_errno, align 4
  %15 = load i32, ptr %s_err, align 4
  %cmp10 = icmp eq i32 %15, 0
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then6
  store i32 1, ptr %s_err, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then6
  br label %if.end14

if.else13:                                        ; preds = %if.else
  %16 = load i64, ptr %tnum, align 8
  store i64 %16, ptr %r, align 8
  store i32 75, ptr %overflow_errno, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.else13, %if.end12
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %entry
  %17 = load i32, ptr %s_err, align 4
  %cmp17 = icmp eq i32 %17, 1
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end16
  %18 = load i32, ptr %overflow_errno, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond18 = phi i32 [ %18, %cond.true ], [ 0, %cond.false ]
  store i32 %cond18, ptr %e, align 4
  %19 = load i32, ptr %s_err, align 4
  %cmp19 = icmp eq i32 %19, 0
  br i1 %cmp19, label %if.end60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %20 = load i32, ptr %s_err, align 4
  %cmp20 = icmp eq i32 %20, 1
  br i1 %cmp20, label %land.lhs.true, label %if.then25

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load i32, ptr %flags.addr, align 4
  %22 = load i64, ptr %tnum, align 8
  %cmp21 = icmp ult i64 %22, 0
  %23 = zext i1 %cmp21 to i64
  %cond22 = select i1 %cmp21, i32 1, i32 2
  %and23 = and i32 %21, %cond22
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.end60, label %if.then25

if.then25:                                        ; preds = %land.lhs.true, %lor.lhs.false
  %24 = load i32, ptr %err_exit.addr, align 4
  %tobool26 = icmp ne i32 %24, 0
  br i1 %tobool26, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %if.then25
  %25 = load i32, ptr %err_exit.addr, align 4
  br label %cond.end29

cond.false28:                                     ; preds = %if.then25
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ %25, %cond.true27 ], [ 1, %cond.false28 ]
  %26 = call i1 @llvm.is.constant.i32(i32 %cond30)
  br i1 %26, label %cond.true31, label %cond.false47

cond.true31:                                      ; preds = %cond.end29
  %27 = load i32, ptr %err_exit.addr, align 4
  %tobool32 = icmp ne i32 %27, 0
  br i1 %tobool32, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %cond.true31
  %28 = load i32, ptr %err_exit.addr, align 4
  br label %cond.end35

cond.false34:                                     ; preds = %cond.true31
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ %28, %cond.true33 ], [ 1, %cond.false34 ]
  %29 = load i32, ptr %e, align 4
  %30 = load ptr, ptr %err.addr, align 8
  %31 = load ptr, ptr %n_str.addr, align 8
  %call37 = call ptr @quote(ptr noundef %31)
  call void (i32, i32, ptr, ...) @error(i32 noundef %cond36, i32 noundef %29, ptr noundef @.str.436, ptr noundef %30, ptr noundef %call37) #24
  %32 = load i32, ptr %err_exit.addr, align 4
  %tobool38 = icmp ne i32 %32, 0
  br i1 %tobool38, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %cond.end35
  %33 = load i32, ptr %err_exit.addr, align 4
  br label %cond.end41

cond.false40:                                     ; preds = %cond.end35
  br label %cond.end41

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ %33, %cond.true39 ], [ 1, %cond.false40 ]
  %cmp43 = icmp ne i32 %cond42, 0
  br i1 %cmp43, label %cond.true44, label %cond.false45

cond.true44:                                      ; preds = %cond.end41
  unreachable

unreachable.cont:                                 ; No predecessors!
  br label %cond.end46

cond.false45:                                     ; preds = %cond.end41
  br label %cond.end46

cond.end46:                                       ; preds = %cond.false45, %unreachable.cont
  br label %cond.end59

cond.false47:                                     ; preds = %cond.end29
  %34 = load i32, ptr %err_exit.addr, align 4
  %tobool48 = icmp ne i32 %34, 0
  br i1 %tobool48, label %cond.true49, label %cond.false50

cond.true49:                                      ; preds = %cond.false47
  %35 = load i32, ptr %err_exit.addr, align 4
  br label %cond.end51

cond.false50:                                     ; preds = %cond.false47
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond52 = phi i32 [ %35, %cond.true49 ], [ 1, %cond.false50 ]
  store i32 %cond52, ptr %__errstatus, align 4
  %36 = load i32, ptr %__errstatus, align 4
  %37 = load i32, ptr %e, align 4
  %38 = load ptr, ptr %err.addr, align 8
  %39 = load ptr, ptr %n_str.addr, align 8
  %call53 = call ptr @quote(ptr noundef %39)
  call void (i32, i32, ptr, ...) @error(i32 noundef %36, i32 noundef %37, ptr noundef @.str.436, ptr noundef %38, ptr noundef %call53) #24
  %40 = load i32, ptr %__errstatus, align 4
  %cmp54 = icmp ne i32 %40, 0
  br i1 %cmp54, label %cond.true55, label %cond.false57

cond.true55:                                      ; preds = %cond.end51
  unreachable

unreachable.cont56:                               ; No predecessors!
  br label %cond.end58

cond.false57:                                     ; preds = %cond.end51
  br label %cond.end58

cond.end58:                                       ; preds = %cond.false57, %unreachable.cont56
  br label %cond.end59

cond.end59:                                       ; preds = %cond.end58, %cond.end46
  br label %if.end60

if.end60:                                         ; preds = %cond.end59, %land.lhs.true, %cond.end
  %41 = load i32, ptr %e, align 4
  %call61 = call ptr @__errno_location() #26
  store i32 %41, ptr %call61, align 4
  %42 = load i64, ptr %r, align 8
  ret i64 %42
}

; Function Attrs: convergent nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.is.constant.i32(i32) #20

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @xdectoumax(ptr noundef nonnull %n_str, i64 noundef %min, i64 noundef %max, ptr noundef %suffixes, ptr noundef nonnull %err, i32 noundef %err_exit) #3 {
entry:
  %n_str.addr = alloca ptr, align 8
  %min.addr = alloca i64, align 8
  %max.addr = alloca i64, align 8
  %suffixes.addr = alloca ptr, align 8
  %err.addr = alloca ptr, align 8
  %err_exit.addr = alloca i32, align 4
  store ptr %n_str, ptr %n_str.addr, align 8
  store i64 %min, ptr %min.addr, align 8
  store i64 %max, ptr %max.addr, align 8
  store ptr %suffixes, ptr %suffixes.addr, align 8
  store ptr %err, ptr %err.addr, align 8
  store i32 %err_exit, ptr %err_exit.addr, align 4
  %0 = load ptr, ptr %n_str.addr, align 8
  %1 = load i64, ptr %min.addr, align 8
  %2 = load i64, ptr %max.addr, align 8
  %3 = load ptr, ptr %suffixes.addr, align 8
  %4 = load ptr, ptr %err.addr, align 8
  %5 = load i32, ptr %err_exit.addr, align 4
  %call = call i64 @xnumtoumax(ptr noundef %0, i32 noundef 10, i64 noundef %1, i64 noundef %2, ptr noundef %3, ptr noundef %4, i32 noundef %5, i32 noundef 0)
  ret i64 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xstrtol(ptr noundef %nptr, ptr noundef %endptr, i32 noundef %base, ptr noundef %val, ptr noundef %valid_suffixes) #3 {
entry:
  %retval = alloca i32, align 4
  %nptr.addr = alloca ptr, align 8
  %endptr.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %val.addr = alloca ptr, align 8
  %valid_suffixes.addr = alloca ptr, align 8
  %t_ptr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %tmp = alloca i64, align 8
  %err = alloca i32, align 4
  %xbase = alloca i32, align 4
  %suffixes = alloca i32, align 4
  %overflow = alloca i32, align 4
  store ptr %nptr, ptr %nptr.addr, align 8
  store ptr %endptr, ptr %endptr.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store ptr %val, ptr %val.addr, align 8
  store ptr %valid_suffixes, ptr %valid_suffixes.addr, align 8
  %0 = load ptr, ptr %endptr.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %endptr.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ %t_ptr, %cond.false ]
  store ptr %cond, ptr %p, align 8
  %call = call ptr @__errno_location() #26
  store i32 0, ptr %call, align 4
  %2 = load ptr, ptr %nptr.addr, align 8
  %3 = load ptr, ptr %p, align 8
  %4 = load i32, ptr %base.addr, align 4
  %call1 = call i64 @__isoc23_strtol(ptr noundef %2, ptr noundef %3, i32 noundef %4) #21
  store i64 %call1, ptr %tmp, align 8
  store i32 0, ptr %err, align 4
  %5 = load ptr, ptr %p, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr %nptr.addr, align 8
  %cmp = icmp eq ptr %6, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %8 = load ptr, ptr %valid_suffixes.addr, align 8
  %tobool2 = icmp ne ptr %8, null
  br i1 %tobool2, label %land.lhs.true, label %if.then8

land.lhs.true:                                    ; preds = %if.then
  %9 = load ptr, ptr %nptr.addr, align 8
  %10 = load i8, ptr %9, align 1
  %conv = sext i8 %10 to i32
  %tobool3 = icmp ne i32 %conv, 0
  br i1 %tobool3, label %land.lhs.true4, label %if.then8

land.lhs.true4:                                   ; preds = %land.lhs.true
  %11 = load ptr, ptr %valid_suffixes.addr, align 8
  %12 = load ptr, ptr %nptr.addr, align 8
  %13 = load i8, ptr %12, align 1
  %conv5 = sext i8 %13 to i32
  %call6 = call ptr @strchr(ptr noundef %11, i32 noundef %conv5) #23
  %tobool7 = icmp ne ptr %call6, null
  br i1 %tobool7, label %if.end, label %if.then8

if.then8:                                         ; preds = %land.lhs.true4, %land.lhs.true, %if.then
  store i32 4, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true4
  store i64 1, ptr %tmp, align 8
  br label %if.end19

if.else:                                          ; preds = %cond.end
  %call9 = call ptr @__errno_location() #26
  %14 = load i32, ptr %call9, align 4
  %cmp10 = icmp ne i32 %14, 0
  br i1 %cmp10, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.else
  %call13 = call ptr @__errno_location() #26
  %15 = load i32, ptr %call13, align 4
  %cmp14 = icmp ne i32 %15, 34
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.then12
  store i32 4, ptr %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.then12
  store i32 1, ptr %err, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end
  %16 = load ptr, ptr %valid_suffixes.addr, align 8
  %tobool20 = icmp ne ptr %16, null
  br i1 %tobool20, label %if.end22, label %if.then21

if.then21:                                        ; preds = %if.end19
  %17 = load i64, ptr %tmp, align 8
  %18 = load ptr, ptr %val.addr, align 8
  store i64 %17, ptr %18, align 8
  %19 = load i32, ptr %err, align 4
  store i32 %19, ptr %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end19
  %20 = load ptr, ptr %p, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = load i8, ptr %21, align 1
  %conv23 = sext i8 %22 to i32
  %cmp24 = icmp ne i32 %conv23, 0
  br i1 %cmp24, label %if.then26, label %if.end84

if.then26:                                        ; preds = %if.end22
  store i32 1024, ptr %xbase, align 4
  store i32 1, ptr %suffixes, align 4
  %23 = load ptr, ptr %valid_suffixes.addr, align 8
  %24 = load ptr, ptr %p, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = load i8, ptr %25, align 1
  %conv27 = sext i8 %26 to i32
  %call28 = call ptr @strchr(ptr noundef %23, i32 noundef %conv27) #23
  %tobool29 = icmp ne ptr %call28, null
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.then26
  %27 = load i64, ptr %tmp, align 8
  %28 = load ptr, ptr %val.addr, align 8
  store i64 %27, ptr %28, align 8
  %29 = load i32, ptr %err, align 4
  %or = or i32 %29, 2
  store i32 %or, ptr %retval, align 4
  br label %return

if.end31:                                         ; preds = %if.then26
  %30 = load ptr, ptr %p, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = load i8, ptr %31, align 1
  %conv32 = sext i8 %32 to i32
  switch i32 %conv32, label %sw.epilog48 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31
  %33 = load ptr, ptr %valid_suffixes.addr, align 8
  %call33 = call ptr @strchr(ptr noundef %33, i32 noundef 48) #23
  %tobool34 = icmp ne ptr %call33, null
  br i1 %tobool34, label %if.then35, label %if.end47

if.then35:                                        ; preds = %sw.bb
  %34 = load ptr, ptr %p, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %34, i64 0
  %35 = load ptr, ptr %arrayidx, align 8
  %arrayidx36 = getelementptr inbounds i8, ptr %35, i64 1
  %36 = load i8, ptr %arrayidx36, align 1
  %conv37 = sext i8 %36 to i32
  switch i32 %conv37, label %sw.epilog [
    i32 105, label %sw.bb38
    i32 66, label %sw.bb46
    i32 68, label %sw.bb46
  ]

sw.bb38:                                          ; preds = %if.then35
  %37 = load ptr, ptr %p, align 8
  %arrayidx39 = getelementptr inbounds ptr, ptr %37, i64 0
  %38 = load ptr, ptr %arrayidx39, align 8
  %arrayidx40 = getelementptr inbounds i8, ptr %38, i64 2
  %39 = load i8, ptr %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %cmp42 = icmp eq i32 %conv41, 66
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %sw.bb38
  %40 = load i32, ptr %suffixes, align 4
  %add = add nsw i32 %40, 2
  store i32 %add, ptr %suffixes, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %sw.bb38
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.then35, %if.then35
  store i32 1000, ptr %xbase, align 4
  %41 = load i32, ptr %suffixes, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, ptr %suffixes, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb46, %if.end45, %if.then35
  br label %if.end47

if.end47:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog48

sw.epilog48:                                      ; preds = %if.end47, %if.end31
  %42 = load ptr, ptr %p, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = load i8, ptr %43, align 1
  %conv49 = sext i8 %44 to i32
  switch i32 %conv49, label %sw.default [
    i32 98, label %sw.bb50
    i32 66, label %sw.bb52
    i32 99, label %sw.bb54
    i32 69, label %sw.bb55
    i32 71, label %sw.bb57
    i32 103, label %sw.bb57
    i32 107, label %sw.bb59
    i32 75, label %sw.bb59
    i32 77, label %sw.bb61
    i32 109, label %sw.bb61
    i32 80, label %sw.bb63
    i32 81, label %sw.bb65
    i32 82, label %sw.bb67
    i32 84, label %sw.bb69
    i32 116, label %sw.bb69
    i32 119, label %sw.bb71
    i32 89, label %sw.bb73
    i32 90, label %sw.bb75
  ]

sw.bb50:                                          ; preds = %sw.epilog48
  %call51 = call i32 @bkm_scale(ptr noundef %tmp, i32 noundef 512)
  store i32 %call51, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb52:                                          ; preds = %sw.epilog48
  %call53 = call i32 @bkm_scale(ptr noundef %tmp, i32 noundef 1024)
  store i32 %call53, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb54:                                          ; preds = %sw.epilog48
  store i32 0, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb55:                                          ; preds = %sw.epilog48
  %45 = load i32, ptr %xbase, align 4
  %call56 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %45, i32 noundef 6)
  store i32 %call56, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb57:                                          ; preds = %sw.epilog48, %sw.epilog48
  %46 = load i32, ptr %xbase, align 4
  %call58 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %46, i32 noundef 3)
  store i32 %call58, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb59:                                          ; preds = %sw.epilog48, %sw.epilog48
  %47 = load i32, ptr %xbase, align 4
  %call60 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %47, i32 noundef 1)
  store i32 %call60, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb61:                                          ; preds = %sw.epilog48, %sw.epilog48
  %48 = load i32, ptr %xbase, align 4
  %call62 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %48, i32 noundef 2)
  store i32 %call62, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb63:                                          ; preds = %sw.epilog48
  %49 = load i32, ptr %xbase, align 4
  %call64 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %49, i32 noundef 5)
  store i32 %call64, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb65:                                          ; preds = %sw.epilog48
  %50 = load i32, ptr %xbase, align 4
  %call66 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %50, i32 noundef 10)
  store i32 %call66, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb67:                                          ; preds = %sw.epilog48
  %51 = load i32, ptr %xbase, align 4
  %call68 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %51, i32 noundef 9)
  store i32 %call68, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb69:                                          ; preds = %sw.epilog48, %sw.epilog48
  %52 = load i32, ptr %xbase, align 4
  %call70 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %52, i32 noundef 4)
  store i32 %call70, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb71:                                          ; preds = %sw.epilog48
  %call72 = call i32 @bkm_scale(ptr noundef %tmp, i32 noundef 2)
  store i32 %call72, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb73:                                          ; preds = %sw.epilog48
  %53 = load i32, ptr %xbase, align 4
  %call74 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %53, i32 noundef 8)
  store i32 %call74, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb75:                                          ; preds = %sw.epilog48
  %54 = load i32, ptr %xbase, align 4
  %call76 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %54, i32 noundef 7)
  store i32 %call76, ptr %overflow, align 4
  br label %sw.epilog78

sw.default:                                       ; preds = %sw.epilog48
  %55 = load i64, ptr %tmp, align 8
  %56 = load ptr, ptr %val.addr, align 8
  store i64 %55, ptr %56, align 8
  %57 = load i32, ptr %err, align 4
  %or77 = or i32 %57, 2
  store i32 %or77, ptr %retval, align 4
  br label %return

sw.epilog78:                                      ; preds = %sw.bb75, %sw.bb73, %sw.bb71, %sw.bb69, %sw.bb67, %sw.bb65, %sw.bb63, %sw.bb61, %sw.bb59, %sw.bb57, %sw.bb55, %sw.bb54, %sw.bb52, %sw.bb50
  %58 = load i32, ptr %overflow, align 4
  %59 = load i32, ptr %err, align 4
  %or79 = or i32 %59, %58
  store i32 %or79, ptr %err, align 4
  %60 = load i32, ptr %suffixes, align 4
  %61 = load ptr, ptr %p, align 8
  %62 = load ptr, ptr %61, align 8
  %idx.ext = sext i32 %60 to i64
  %add.ptr = getelementptr inbounds i8, ptr %62, i64 %idx.ext
  store ptr %add.ptr, ptr %61, align 8
  %63 = load ptr, ptr %p, align 8
  %64 = load ptr, ptr %63, align 8
  %65 = load i8, ptr %64, align 1
  %tobool80 = icmp ne i8 %65, 0
  br i1 %tobool80, label %if.then81, label %if.end83

if.then81:                                        ; preds = %sw.epilog78
  %66 = load i32, ptr %err, align 4
  %or82 = or i32 %66, 2
  store i32 %or82, ptr %err, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.then81, %sw.epilog78
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end22
  %67 = load i64, ptr %tmp, align 8
  %68 = load ptr, ptr %val.addr, align 8
  store i64 %67, ptr %68, align 8
  %69 = load i32, ptr %err, align 4
  store i32 %69, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end84, %sw.default, %if.then30, %if.then21, %if.then16, %if.then8
  %70 = load i32, ptr %retval, align 4
  ret i32 %70
}

; Function Attrs: nounwind
declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare ptr @strchr(ptr noundef, i32 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale(ptr noundef %x, i32 noundef %scale_factor) #3 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca ptr, align 8
  %scale_factor.addr = alloca i32, align 4
  %scaled = alloca i64, align 8
  store ptr %x, ptr %x.addr, align 8
  store i32 %scale_factor, ptr %scale_factor.addr, align 4
  %0 = load ptr, ptr %x.addr, align 8
  %1 = load i64, ptr %0, align 8
  %2 = load i32, ptr %scale_factor.addr, align 4
  %3 = sext i32 %2 to i64
  %4 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %3)
  %5 = extractvalue { i64, i1 } %4, 1
  %6 = extractvalue { i64, i1 } %4, 0
  store i64 %6, ptr %scaled, align 8
  br i1 %5, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load ptr, ptr %x.addr, align 8
  %8 = load i64, ptr %7, align 8
  %cmp = icmp slt i64 %8, 0
  %9 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i64 -9223372036854775808, i64 9223372036854775807
  %10 = load ptr, ptr %x.addr, align 8
  store i64 %cond, ptr %10, align 8
  store i32 1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %11 = load i64, ptr %scaled, align 8
  %12 = load ptr, ptr %x.addr, align 8
  store i64 %11, ptr %12, align 8
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i32, ptr %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power(ptr noundef %x, i32 noundef %base, i32 noundef %power) #3 {
entry:
  %x.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4
  store ptr %x, ptr %x.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store i32 %power, ptr %power.addr, align 4
  store i32 0, ptr %err, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, ptr %power.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, ptr %power.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load ptr, ptr %x.addr, align 8
  %2 = load i32, ptr %base.addr, align 4
  %call = call i32 @bkm_scale(ptr noundef %1, i32 noundef %2)
  %3 = load i32, ptr %err, align 4
  %or = or i32 %3, %call
  store i32 %or, ptr %err, align 4
  br label %while.cond, !llvm.loop !55

while.end:                                        ; preds = %while.cond
  %4 = load i32, ptr %err, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xstrtoumax(ptr noundef %nptr, ptr noundef %endptr, i32 noundef %base, ptr noundef %val, ptr noundef %valid_suffixes) #3 {
entry:
  %retval = alloca i32, align 4
  %nptr.addr = alloca ptr, align 8
  %endptr.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %val.addr = alloca ptr, align 8
  %valid_suffixes.addr = alloca ptr, align 8
  %t_ptr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %q = alloca ptr, align 8
  %ch = alloca i8, align 1
  %tmp = alloca i64, align 8
  %err = alloca i32, align 4
  %xbase = alloca i32, align 4
  %suffixes = alloca i32, align 4
  %overflow = alloca i32, align 4
  store ptr %nptr, ptr %nptr.addr, align 8
  store ptr %endptr, ptr %endptr.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store ptr %val, ptr %val.addr, align 8
  store ptr %valid_suffixes, ptr %valid_suffixes.addr, align 8
  %0 = load ptr, ptr %endptr.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %endptr.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ %t_ptr, %cond.false ]
  store ptr %cond, ptr %p, align 8
  %2 = load ptr, ptr %nptr.addr, align 8
  store ptr %2, ptr %q, align 8
  %3 = load ptr, ptr %q, align 8
  %4 = load i8, ptr %3, align 1
  store i8 %4, ptr %ch, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end
  %call = call ptr @__ctype_b_loc() #26
  %5 = load ptr, ptr %call, align 8
  %6 = load i8, ptr %ch, align 1
  %conv = zext i8 %6 to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds i16, ptr %5, i64 %idxprom
  %7 = load i16, ptr %arrayidx, align 2
  %conv1 = zext i16 %7 to i32
  %and = and i32 %conv1, 8192
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load ptr, ptr %q, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %q, align 8
  %9 = load i8, ptr %incdec.ptr, align 1
  store i8 %9, ptr %ch, align 1
  br label %while.cond, !llvm.loop !56

while.end:                                        ; preds = %while.cond
  %10 = load i8, ptr %ch, align 1
  %conv3 = zext i8 %10 to i32
  %cmp = icmp eq i32 %conv3, 45
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %11 = load ptr, ptr %nptr.addr, align 8
  %12 = load ptr, ptr %p, align 8
  store ptr %11, ptr %12, align 8
  store i32 4, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %while.end
  %call5 = call ptr @__errno_location() #26
  store i32 0, ptr %call5, align 4
  %13 = load ptr, ptr %nptr.addr, align 8
  %14 = load ptr, ptr %p, align 8
  %15 = load i32, ptr %base.addr, align 4
  %call6 = call i64 @__isoc23_strtoumax(ptr noundef %13, ptr noundef %14, i32 noundef %15) #21
  store i64 %call6, ptr %tmp, align 8
  store i32 0, ptr %err, align 4
  %16 = load ptr, ptr %p, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %nptr.addr, align 8
  %cmp7 = icmp eq ptr %17, %18
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end
  %19 = load ptr, ptr %valid_suffixes.addr, align 8
  %tobool10 = icmp ne ptr %19, null
  br i1 %tobool10, label %land.lhs.true, label %if.then17

land.lhs.true:                                    ; preds = %if.then9
  %20 = load ptr, ptr %nptr.addr, align 8
  %21 = load i8, ptr %20, align 1
  %conv11 = sext i8 %21 to i32
  %tobool12 = icmp ne i32 %conv11, 0
  br i1 %tobool12, label %land.lhs.true13, label %if.then17

land.lhs.true13:                                  ; preds = %land.lhs.true
  %22 = load ptr, ptr %valid_suffixes.addr, align 8
  %23 = load ptr, ptr %nptr.addr, align 8
  %24 = load i8, ptr %23, align 1
  %conv14 = sext i8 %24 to i32
  %call15 = call ptr @strchr(ptr noundef %22, i32 noundef %conv14) #23
  %tobool16 = icmp ne ptr %call15, null
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %land.lhs.true13, %land.lhs.true, %if.then9
  store i32 4, ptr %retval, align 4
  br label %return

if.end18:                                         ; preds = %land.lhs.true13
  store i64 1, ptr %tmp, align 8
  br label %if.end29

if.else:                                          ; preds = %if.end
  %call19 = call ptr @__errno_location() #26
  %25 = load i32, ptr %call19, align 4
  %cmp20 = icmp ne i32 %25, 0
  br i1 %cmp20, label %if.then22, label %if.end28

if.then22:                                        ; preds = %if.else
  %call23 = call ptr @__errno_location() #26
  %26 = load i32, ptr %call23, align 4
  %cmp24 = icmp ne i32 %26, 34
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.then22
  store i32 4, ptr %retval, align 4
  br label %return

if.end27:                                         ; preds = %if.then22
  store i32 1, ptr %err, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.else
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end18
  %27 = load ptr, ptr %valid_suffixes.addr, align 8
  %tobool30 = icmp ne ptr %27, null
  br i1 %tobool30, label %if.end32, label %if.then31

if.then31:                                        ; preds = %if.end29
  %28 = load i64, ptr %tmp, align 8
  %29 = load ptr, ptr %val.addr, align 8
  store i64 %28, ptr %29, align 8
  %30 = load i32, ptr %err, align 4
  store i32 %30, ptr %retval, align 4
  br label %return

if.end32:                                         ; preds = %if.end29
  %31 = load ptr, ptr %p, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = load i8, ptr %32, align 1
  %conv33 = sext i8 %33 to i32
  %cmp34 = icmp ne i32 %conv33, 0
  br i1 %cmp34, label %if.then36, label %if.end95

if.then36:                                        ; preds = %if.end32
  store i32 1024, ptr %xbase, align 4
  store i32 1, ptr %suffixes, align 4
  %34 = load ptr, ptr %valid_suffixes.addr, align 8
  %35 = load ptr, ptr %p, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = load i8, ptr %36, align 1
  %conv37 = sext i8 %37 to i32
  %call38 = call ptr @strchr(ptr noundef %34, i32 noundef %conv37) #23
  %tobool39 = icmp ne ptr %call38, null
  br i1 %tobool39, label %if.end41, label %if.then40

if.then40:                                        ; preds = %if.then36
  %38 = load i64, ptr %tmp, align 8
  %39 = load ptr, ptr %val.addr, align 8
  store i64 %38, ptr %39, align 8
  %40 = load i32, ptr %err, align 4
  %or = or i32 %40, 2
  store i32 %or, ptr %retval, align 4
  br label %return

if.end41:                                         ; preds = %if.then36
  %41 = load ptr, ptr %p, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = load i8, ptr %42, align 1
  %conv42 = sext i8 %43 to i32
  switch i32 %conv42, label %sw.epilog59 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41, %if.end41
  %44 = load ptr, ptr %valid_suffixes.addr, align 8
  %call43 = call ptr @strchr(ptr noundef %44, i32 noundef 48) #23
  %tobool44 = icmp ne ptr %call43, null
  br i1 %tobool44, label %if.then45, label %if.end58

if.then45:                                        ; preds = %sw.bb
  %45 = load ptr, ptr %p, align 8
  %arrayidx46 = getelementptr inbounds ptr, ptr %45, i64 0
  %46 = load ptr, ptr %arrayidx46, align 8
  %arrayidx47 = getelementptr inbounds i8, ptr %46, i64 1
  %47 = load i8, ptr %arrayidx47, align 1
  %conv48 = sext i8 %47 to i32
  switch i32 %conv48, label %sw.epilog [
    i32 105, label %sw.bb49
    i32 66, label %sw.bb57
    i32 68, label %sw.bb57
  ]

sw.bb49:                                          ; preds = %if.then45
  %48 = load ptr, ptr %p, align 8
  %arrayidx50 = getelementptr inbounds ptr, ptr %48, i64 0
  %49 = load ptr, ptr %arrayidx50, align 8
  %arrayidx51 = getelementptr inbounds i8, ptr %49, i64 2
  %50 = load i8, ptr %arrayidx51, align 1
  %conv52 = sext i8 %50 to i32
  %cmp53 = icmp eq i32 %conv52, 66
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %sw.bb49
  %51 = load i32, ptr %suffixes, align 4
  %add = add nsw i32 %51, 2
  store i32 %add, ptr %suffixes, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %sw.bb49
  br label %sw.epilog

sw.bb57:                                          ; preds = %if.then45, %if.then45
  store i32 1000, ptr %xbase, align 4
  %52 = load i32, ptr %suffixes, align 4
  %inc = add nsw i32 %52, 1
  store i32 %inc, ptr %suffixes, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb57, %if.end56, %if.then45
  br label %if.end58

if.end58:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog59

sw.epilog59:                                      ; preds = %if.end58, %if.end41
  %53 = load ptr, ptr %p, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = load i8, ptr %54, align 1
  %conv60 = sext i8 %55 to i32
  switch i32 %conv60, label %sw.default [
    i32 98, label %sw.bb61
    i32 66, label %sw.bb63
    i32 99, label %sw.bb65
    i32 69, label %sw.bb66
    i32 71, label %sw.bb68
    i32 103, label %sw.bb68
    i32 107, label %sw.bb70
    i32 75, label %sw.bb70
    i32 77, label %sw.bb72
    i32 109, label %sw.bb72
    i32 80, label %sw.bb74
    i32 81, label %sw.bb76
    i32 82, label %sw.bb78
    i32 84, label %sw.bb80
    i32 116, label %sw.bb80
    i32 119, label %sw.bb82
    i32 89, label %sw.bb84
    i32 90, label %sw.bb86
  ]

sw.bb61:                                          ; preds = %sw.epilog59
  %call62 = call i32 @bkm_scale.441(ptr noundef %tmp, i32 noundef 512)
  store i32 %call62, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb63:                                          ; preds = %sw.epilog59
  %call64 = call i32 @bkm_scale.441(ptr noundef %tmp, i32 noundef 1024)
  store i32 %call64, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb65:                                          ; preds = %sw.epilog59
  store i32 0, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb66:                                          ; preds = %sw.epilog59
  %56 = load i32, ptr %xbase, align 4
  %call67 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %56, i32 noundef 6)
  store i32 %call67, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb68:                                          ; preds = %sw.epilog59, %sw.epilog59
  %57 = load i32, ptr %xbase, align 4
  %call69 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %57, i32 noundef 3)
  store i32 %call69, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb70:                                          ; preds = %sw.epilog59, %sw.epilog59
  %58 = load i32, ptr %xbase, align 4
  %call71 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %58, i32 noundef 1)
  store i32 %call71, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb72:                                          ; preds = %sw.epilog59, %sw.epilog59
  %59 = load i32, ptr %xbase, align 4
  %call73 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %59, i32 noundef 2)
  store i32 %call73, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb74:                                          ; preds = %sw.epilog59
  %60 = load i32, ptr %xbase, align 4
  %call75 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %60, i32 noundef 5)
  store i32 %call75, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb76:                                          ; preds = %sw.epilog59
  %61 = load i32, ptr %xbase, align 4
  %call77 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %61, i32 noundef 10)
  store i32 %call77, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb78:                                          ; preds = %sw.epilog59
  %62 = load i32, ptr %xbase, align 4
  %call79 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %62, i32 noundef 9)
  store i32 %call79, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb80:                                          ; preds = %sw.epilog59, %sw.epilog59
  %63 = load i32, ptr %xbase, align 4
  %call81 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %63, i32 noundef 4)
  store i32 %call81, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb82:                                          ; preds = %sw.epilog59
  %call83 = call i32 @bkm_scale.441(ptr noundef %tmp, i32 noundef 2)
  store i32 %call83, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb84:                                          ; preds = %sw.epilog59
  %64 = load i32, ptr %xbase, align 4
  %call85 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %64, i32 noundef 8)
  store i32 %call85, ptr %overflow, align 4
  br label %sw.epilog89

sw.bb86:                                          ; preds = %sw.epilog59
  %65 = load i32, ptr %xbase, align 4
  %call87 = call i32 @bkm_scale_by_power.442(ptr noundef %tmp, i32 noundef %65, i32 noundef 7)
  store i32 %call87, ptr %overflow, align 4
  br label %sw.epilog89

sw.default:                                       ; preds = %sw.epilog59
  %66 = load i64, ptr %tmp, align 8
  %67 = load ptr, ptr %val.addr, align 8
  store i64 %66, ptr %67, align 8
  %68 = load i32, ptr %err, align 4
  %or88 = or i32 %68, 2
  store i32 %or88, ptr %retval, align 4
  br label %return

sw.epilog89:                                      ; preds = %sw.bb86, %sw.bb84, %sw.bb82, %sw.bb80, %sw.bb78, %sw.bb76, %sw.bb74, %sw.bb72, %sw.bb70, %sw.bb68, %sw.bb66, %sw.bb65, %sw.bb63, %sw.bb61
  %69 = load i32, ptr %overflow, align 4
  %70 = load i32, ptr %err, align 4
  %or90 = or i32 %70, %69
  store i32 %or90, ptr %err, align 4
  %71 = load i32, ptr %suffixes, align 4
  %72 = load ptr, ptr %p, align 8
  %73 = load ptr, ptr %72, align 8
  %idx.ext = sext i32 %71 to i64
  %add.ptr = getelementptr inbounds i8, ptr %73, i64 %idx.ext
  store ptr %add.ptr, ptr %72, align 8
  %74 = load ptr, ptr %p, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = load i8, ptr %75, align 1
  %tobool91 = icmp ne i8 %76, 0
  br i1 %tobool91, label %if.then92, label %if.end94

if.then92:                                        ; preds = %sw.epilog89
  %77 = load i32, ptr %err, align 4
  %or93 = or i32 %77, 2
  store i32 %or93, ptr %err, align 4
  br label %if.end94

if.end94:                                         ; preds = %if.then92, %sw.epilog89
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.end32
  %78 = load i64, ptr %tmp, align 8
  %79 = load ptr, ptr %val.addr, align 8
  store i64 %78, ptr %79, align 8
  %80 = load i32, ptr %err, align 4
  store i32 %80, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end95, %sw.default, %if.then40, %if.then31, %if.then26, %if.then17, %if.then
  %81 = load i32, ptr %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind
declare i64 @__isoc23_strtoumax(ptr noundef, ptr noundef, i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale.441(ptr noundef %x, i32 noundef %scale_factor) #3 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca ptr, align 8
  %scale_factor.addr = alloca i32, align 4
  %scaled = alloca i64, align 8
  store ptr %x, ptr %x.addr, align 8
  store i32 %scale_factor, ptr %scale_factor.addr, align 4
  %0 = load i32, ptr %scale_factor.addr, align 4
  %1 = load ptr, ptr %x.addr, align 8
  %2 = load i64, ptr %1, align 8
  %op.sext = sext i32 %0 to i64
  %3 = icmp slt i64 %op.sext, 0
  %4 = sub i64 0, %op.sext
  %5 = select i1 %3, i64 %4, i64 %op.sext
  %6 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %5, i64 %2)
  %7 = extractvalue { i64, i1 } %6, 1
  %8 = extractvalue { i64, i1 } %6, 0
  %9 = icmp ne i64 %8, 0
  %10 = and i1 %3, %9
  %11 = or i1 %7, %10
  %12 = sub i64 0, %8
  %13 = select i1 %3, i64 %12, i64 %8
  store i64 %13, ptr %scaled, align 8
  br i1 %11, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %14 = load ptr, ptr %x.addr, align 8
  %15 = load i64, ptr %14, align 8
  %cmp = icmp ult i64 %15, 0
  %16 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i64 0, i64 -1
  %17 = load ptr, ptr %x.addr, align 8
  store i64 %cond, ptr %17, align 8
  store i32 1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %18 = load i64, ptr %scaled, align 8
  %19 = load ptr, ptr %x.addr, align 8
  store i64 %18, ptr %19, align 8
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, ptr %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power.442(ptr noundef %x, i32 noundef %base, i32 noundef %power) #3 {
entry:
  %x.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4
  store ptr %x, ptr %x.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store i32 %power, ptr %power.addr, align 4
  store i32 0, ptr %err, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, ptr %power.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, ptr %power.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load ptr, ptr %x.addr, align 8
  %2 = load i32, ptr %base.addr, align 4
  %call = call i32 @bkm_scale.441(ptr noundef %1, i32 noundef %2)
  %3 = load i32, ptr %err, align 4
  %or = or i32 %3, %call
  store i32 %or, ptr %err, align 4
  br label %while.cond, !llvm.loop !57

while.end:                                        ; preds = %while.cond
  %4 = load i32, ptr %err, align 4
  ret i32 %4
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #9

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @print_and_abort() #0 {
entry:
  %0 = load ptr, ptr @stderr, align 8
  %call = call ptr @dgettext(ptr noundef @.str.1.443, ptr noundef @.str.2.444) #21
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef @.str.445, ptr noundef %call)
  %1 = load volatile i32, ptr @exit_failure, align 4
  call void @exit(i32 noundef %1) #22
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_obstack_begin(ptr noundef %h, i64 noundef %size, i64 noundef %alignment, ptr noundef %chunkfun, ptr noundef %freefun) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca ptr, align 8
  %freefun.addr = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 %size, ptr %size.addr, align 8
  store i64 %alignment, ptr %alignment.addr, align 8
  store ptr %chunkfun, ptr %chunkfun.addr, align 8
  store ptr %freefun, ptr %freefun.addr, align 8
  %0 = load ptr, ptr %chunkfun.addr, align 8
  %1 = load ptr, ptr %h.addr, align 8
  %chunkfun1 = getelementptr inbounds %struct.obstack, ptr %1, i32 0, i32 7
  store ptr %0, ptr %chunkfun1, align 8
  %2 = load ptr, ptr %freefun.addr, align 8
  %3 = load ptr, ptr %h.addr, align 8
  %freefun2 = getelementptr inbounds %struct.obstack, ptr %3, i32 0, i32 8
  store ptr %2, ptr %freefun2, align 8
  %4 = load ptr, ptr %h.addr, align 8
  %use_extra_arg = getelementptr inbounds %struct.obstack, ptr %4, i32 0, i32 10
  %bf.load = load i8, ptr %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 0
  store i8 %bf.set, ptr %use_extra_arg, align 8
  %5 = load ptr, ptr %h.addr, align 8
  %6 = load i64, ptr %size.addr, align 8
  %7 = load i64, ptr %alignment.addr, align 8
  %call = call i32 @_obstack_begin_worker(ptr noundef %5, i64 noundef %6, i64 noundef %7)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @_obstack_begin_worker(ptr noundef %h, i64 noundef %size, i64 noundef %alignment) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunk = alloca ptr, align 8
  %extra = alloca i32, align 4
  store ptr %h, ptr %h.addr, align 8
  store i64 %size, ptr %size.addr, align 8
  store i64 %alignment, ptr %alignment.addr, align 8
  %0 = load i64, ptr %alignment.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 16, ptr %alignment.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, ptr %size.addr, align 8
  %cmp1 = icmp eq i64 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 32, ptr %extra, align 4
  %2 = load i32, ptr %extra, align 4
  %sub = sub nsw i32 4096, %2
  %conv = sext i32 %sub to i64
  store i64 %conv, ptr %size.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load i64, ptr %size.addr, align 8
  %4 = load ptr, ptr %h.addr, align 8
  %chunk_size = getelementptr inbounds %struct.obstack, ptr %4, i32 0, i32 0
  store i64 %3, ptr %chunk_size, align 8
  %5 = load i64, ptr %alignment.addr, align 8
  %sub4 = sub i64 %5, 1
  %6 = load ptr, ptr %h.addr, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, ptr %6, i32 0, i32 6
  store i64 %sub4, ptr %alignment_mask, align 8
  %7 = load ptr, ptr %h.addr, align 8
  %8 = load ptr, ptr %h.addr, align 8
  %chunk_size5 = getelementptr inbounds %struct.obstack, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %chunk_size5, align 8
  %call = call ptr @call_chunkfun(ptr noundef %7, i64 noundef %9)
  %10 = load ptr, ptr %h.addr, align 8
  %chunk6 = getelementptr inbounds %struct.obstack, ptr %10, i32 0, i32 1
  store ptr %call, ptr %chunk6, align 8
  store ptr %call, ptr %chunk, align 8
  %11 = load ptr, ptr %chunk, align 8
  %tobool = icmp ne ptr %11, null
  br i1 %tobool, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end3
  %12 = load ptr, ptr @obstack_alloc_failed_handler, align 8
  call void %12() #25
  unreachable

if.end8:                                          ; preds = %if.end3
  %13 = load ptr, ptr %chunk, align 8
  %contents = getelementptr inbounds %struct._obstack_chunk, ptr %13, i32 0, i32 2
  %arraydecay = getelementptr inbounds [0 x i8], ptr %contents, i64 0, i64 0
  %14 = load ptr, ptr %chunk, align 8
  %contents9 = getelementptr inbounds %struct._obstack_chunk, ptr %14, i32 0, i32 2
  %arraydecay10 = getelementptr inbounds [0 x i8], ptr %contents9, i64 0, i64 0
  %15 = ptrtoint ptr %arraydecay10 to i64
  %sub11 = sub i64 0, %15
  %16 = load i64, ptr %alignment.addr, align 8
  %sub12 = sub i64 %16, 1
  %and = and i64 %sub11, %sub12
  %add.ptr = getelementptr inbounds i8, ptr %arraydecay, i64 %and
  %17 = load ptr, ptr %h.addr, align 8
  %object_base = getelementptr inbounds %struct.obstack, ptr %17, i32 0, i32 2
  store ptr %add.ptr, ptr %object_base, align 8
  %18 = load ptr, ptr %h.addr, align 8
  %next_free = getelementptr inbounds %struct.obstack, ptr %18, i32 0, i32 3
  store ptr %add.ptr, ptr %next_free, align 8
  %19 = load ptr, ptr %chunk, align 8
  %20 = load ptr, ptr %h.addr, align 8
  %chunk_size13 = getelementptr inbounds %struct.obstack, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %chunk_size13, align 8
  %add.ptr14 = getelementptr inbounds i8, ptr %19, i64 %21
  %22 = load ptr, ptr %chunk, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %22, i32 0, i32 0
  store ptr %add.ptr14, ptr %limit, align 8
  %23 = load ptr, ptr %h.addr, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, ptr %23, i32 0, i32 4
  store ptr %add.ptr14, ptr %chunk_limit, align 8
  %24 = load ptr, ptr %chunk, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %24, i32 0, i32 1
  store ptr null, ptr %prev, align 8
  %25 = load ptr, ptr %h.addr, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, ptr %25, i32 0, i32 10
  %bf.load = load i8, ptr %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 0
  store i8 %bf.set, ptr %maybe_empty_object, align 8
  %26 = load ptr, ptr %h.addr, align 8
  %alloc_failed = getelementptr inbounds %struct.obstack, ptr %26, i32 0, i32 10
  %bf.load15 = load i8, ptr %alloc_failed, align 8
  %bf.clear16 = and i8 %bf.load15, -5
  %bf.set17 = or i8 %bf.clear16, 0
  store i8 %bf.set17, ptr %alloc_failed, align 8
  ret i32 1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @call_chunkfun(ptr noundef %h, i64 noundef %size) #3 {
entry:
  %retval = alloca ptr, align 8
  %h.addr = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 %size, ptr %size.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %use_extra_arg = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 10
  %bf.load = load i8, ptr %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %h.addr, align 8
  %chunkfun = getelementptr inbounds %struct.obstack, ptr %1, i32 0, i32 7
  %2 = load ptr, ptr %chunkfun, align 8
  %3 = load ptr, ptr %h.addr, align 8
  %extra_arg = getelementptr inbounds %struct.obstack, ptr %3, i32 0, i32 9
  %4 = load ptr, ptr %extra_arg, align 8
  %5 = load i64, ptr %size.addr, align 8
  %call = call ptr %2(ptr noundef %4, i64 noundef %5)
  store ptr %call, ptr %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %6 = load ptr, ptr %h.addr, align 8
  %chunkfun1 = getelementptr inbounds %struct.obstack, ptr %6, i32 0, i32 7
  %7 = load ptr, ptr %chunkfun1, align 8
  %8 = load i64, ptr %size.addr, align 8
  %call2 = call ptr %7(i64 noundef %8)
  store ptr %call2, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load ptr, ptr %retval, align 8
  ret ptr %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_obstack_begin_1(ptr noundef %h, i64 noundef %size, i64 noundef %alignment, ptr noundef %chunkfun, ptr noundef %freefun, ptr noundef %arg) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca ptr, align 8
  %freefun.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 %size, ptr %size.addr, align 8
  store i64 %alignment, ptr %alignment.addr, align 8
  store ptr %chunkfun, ptr %chunkfun.addr, align 8
  store ptr %freefun, ptr %freefun.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %chunkfun.addr, align 8
  %1 = load ptr, ptr %h.addr, align 8
  %chunkfun1 = getelementptr inbounds %struct.obstack, ptr %1, i32 0, i32 7
  store ptr %0, ptr %chunkfun1, align 8
  %2 = load ptr, ptr %freefun.addr, align 8
  %3 = load ptr, ptr %h.addr, align 8
  %freefun2 = getelementptr inbounds %struct.obstack, ptr %3, i32 0, i32 8
  store ptr %2, ptr %freefun2, align 8
  %4 = load ptr, ptr %arg.addr, align 8
  %5 = load ptr, ptr %h.addr, align 8
  %extra_arg = getelementptr inbounds %struct.obstack, ptr %5, i32 0, i32 9
  store ptr %4, ptr %extra_arg, align 8
  %6 = load ptr, ptr %h.addr, align 8
  %use_extra_arg = getelementptr inbounds %struct.obstack, ptr %6, i32 0, i32 10
  %bf.load = load i8, ptr %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, ptr %use_extra_arg, align 8
  %7 = load ptr, ptr %h.addr, align 8
  %8 = load i64, ptr %size.addr, align 8
  %9 = load i64, ptr %alignment.addr, align 8
  %call = call i32 @_obstack_begin_worker(ptr noundef %7, i64 noundef %8, i64 noundef %9)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @rpl_obstack_newchunk(ptr noundef %h, i64 noundef %length) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %length.addr = alloca i64, align 8
  %old_chunk = alloca ptr, align 8
  %new_chunk = alloca ptr, align 8
  %obj_size = alloca i64, align 8
  %object_base1 = alloca ptr, align 8
  %sum1 = alloca i64, align 8
  %sum2 = alloca i64, align 8
  %new_size = alloca i64, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 %length, ptr %length.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %chunk = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %chunk, align 8
  store ptr %1, ptr %old_chunk, align 8
  store ptr null, ptr %new_chunk, align 8
  %2 = load ptr, ptr %h.addr, align 8
  %next_free = getelementptr inbounds %struct.obstack, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %next_free, align 8
  %4 = load ptr, ptr %h.addr, align 8
  %object_base = getelementptr inbounds %struct.obstack, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %object_base, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %3 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, ptr %obj_size, align 8
  %6 = load i64, ptr %obj_size, align 8
  %7 = load i64, ptr %length.addr, align 8
  %add = add i64 %6, %7
  store i64 %add, ptr %sum1, align 8
  %8 = load i64, ptr %sum1, align 8
  %9 = load ptr, ptr %h.addr, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, ptr %9, i32 0, i32 6
  %10 = load i64, ptr %alignment_mask, align 8
  %add2 = add i64 %8, %10
  store i64 %add2, ptr %sum2, align 8
  %11 = load i64, ptr %sum2, align 8
  %12 = load i64, ptr %obj_size, align 8
  %shr = lshr i64 %12, 3
  %add3 = add i64 %11, %shr
  %add4 = add i64 %add3, 100
  store i64 %add4, ptr %new_size, align 8
  %13 = load i64, ptr %new_size, align 8
  %14 = load i64, ptr %sum2, align 8
  %cmp = icmp ult i64 %13, %14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %15 = load i64, ptr %sum2, align 8
  store i64 %15, ptr %new_size, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %16 = load i64, ptr %new_size, align 8
  %17 = load ptr, ptr %h.addr, align 8
  %chunk_size = getelementptr inbounds %struct.obstack, ptr %17, i32 0, i32 0
  %18 = load i64, ptr %chunk_size, align 8
  %cmp5 = icmp ult i64 %16, %18
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %19 = load ptr, ptr %h.addr, align 8
  %chunk_size7 = getelementptr inbounds %struct.obstack, ptr %19, i32 0, i32 0
  %20 = load i64, ptr %chunk_size7, align 8
  store i64 %20, ptr %new_size, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %21 = load i64, ptr %obj_size, align 8
  %22 = load i64, ptr %sum1, align 8
  %cmp9 = icmp ule i64 %21, %22
  br i1 %cmp9, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end8
  %23 = load i64, ptr %sum1, align 8
  %24 = load i64, ptr %sum2, align 8
  %cmp10 = icmp ule i64 %23, %24
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  %25 = load ptr, ptr %h.addr, align 8
  %26 = load i64, ptr %new_size, align 8
  %call = call ptr @call_chunkfun(ptr noundef %25, i64 noundef %26)
  store ptr %call, ptr %new_chunk, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end8
  %27 = load ptr, ptr %new_chunk, align 8
  %tobool = icmp ne ptr %27, null
  br i1 %tobool, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end12
  %28 = load ptr, ptr @obstack_alloc_failed_handler, align 8
  call void %28() #25
  unreachable

if.end14:                                         ; preds = %if.end12
  %29 = load ptr, ptr %new_chunk, align 8
  %30 = load ptr, ptr %h.addr, align 8
  %chunk15 = getelementptr inbounds %struct.obstack, ptr %30, i32 0, i32 1
  store ptr %29, ptr %chunk15, align 8
  %31 = load ptr, ptr %old_chunk, align 8
  %32 = load ptr, ptr %new_chunk, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %32, i32 0, i32 1
  store ptr %31, ptr %prev, align 8
  %33 = load ptr, ptr %new_chunk, align 8
  %34 = load i64, ptr %new_size, align 8
  %add.ptr = getelementptr inbounds i8, ptr %33, i64 %34
  %35 = load ptr, ptr %h.addr, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, ptr %35, i32 0, i32 4
  store ptr %add.ptr, ptr %chunk_limit, align 8
  %36 = load ptr, ptr %new_chunk, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %36, i32 0, i32 0
  store ptr %add.ptr, ptr %limit, align 8
  %37 = load ptr, ptr %new_chunk, align 8
  %contents = getelementptr inbounds %struct._obstack_chunk, ptr %37, i32 0, i32 2
  %arraydecay = getelementptr inbounds [0 x i8], ptr %contents, i64 0, i64 0
  %38 = load ptr, ptr %new_chunk, align 8
  %contents16 = getelementptr inbounds %struct._obstack_chunk, ptr %38, i32 0, i32 2
  %arraydecay17 = getelementptr inbounds [0 x i8], ptr %contents16, i64 0, i64 0
  %39 = ptrtoint ptr %arraydecay17 to i64
  %sub = sub i64 0, %39
  %40 = load ptr, ptr %h.addr, align 8
  %alignment_mask18 = getelementptr inbounds %struct.obstack, ptr %40, i32 0, i32 6
  %41 = load i64, ptr %alignment_mask18, align 8
  %and = and i64 %sub, %41
  %add.ptr19 = getelementptr inbounds i8, ptr %arraydecay, i64 %and
  store ptr %add.ptr19, ptr %object_base1, align 8
  %42 = load ptr, ptr %object_base1, align 8
  %43 = load ptr, ptr %h.addr, align 8
  %object_base20 = getelementptr inbounds %struct.obstack, ptr %43, i32 0, i32 2
  %44 = load ptr, ptr %object_base20, align 8
  %45 = load i64, ptr %obj_size, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %42, ptr align 1 %44, i64 %45, i1 false)
  %46 = load ptr, ptr %h.addr, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, ptr %46, i32 0, i32 10
  %bf.load = load i8, ptr %maybe_empty_object, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool21 = icmp ne i32 %bf.cast, 0
  br i1 %tobool21, label %if.end36, label %land.lhs.true22

land.lhs.true22:                                  ; preds = %if.end14
  %47 = load ptr, ptr %h.addr, align 8
  %object_base23 = getelementptr inbounds %struct.obstack, ptr %47, i32 0, i32 2
  %48 = load ptr, ptr %object_base23, align 8
  %49 = load ptr, ptr %old_chunk, align 8
  %contents24 = getelementptr inbounds %struct._obstack_chunk, ptr %49, i32 0, i32 2
  %arraydecay25 = getelementptr inbounds [0 x i8], ptr %contents24, i64 0, i64 0
  %50 = load ptr, ptr %old_chunk, align 8
  %contents26 = getelementptr inbounds %struct._obstack_chunk, ptr %50, i32 0, i32 2
  %arraydecay27 = getelementptr inbounds [0 x i8], ptr %contents26, i64 0, i64 0
  %51 = ptrtoint ptr %arraydecay27 to i64
  %sub28 = sub i64 0, %51
  %52 = load ptr, ptr %h.addr, align 8
  %alignment_mask29 = getelementptr inbounds %struct.obstack, ptr %52, i32 0, i32 6
  %53 = load i64, ptr %alignment_mask29, align 8
  %and30 = and i64 %sub28, %53
  %add.ptr31 = getelementptr inbounds i8, ptr %arraydecay25, i64 %and30
  %cmp32 = icmp eq ptr %48, %add.ptr31
  br i1 %cmp32, label %if.then33, label %if.end36

if.then33:                                        ; preds = %land.lhs.true22
  %54 = load ptr, ptr %old_chunk, align 8
  %prev34 = getelementptr inbounds %struct._obstack_chunk, ptr %54, i32 0, i32 1
  %55 = load ptr, ptr %prev34, align 8
  %56 = load ptr, ptr %new_chunk, align 8
  %prev35 = getelementptr inbounds %struct._obstack_chunk, ptr %56, i32 0, i32 1
  store ptr %55, ptr %prev35, align 8
  %57 = load ptr, ptr %h.addr, align 8
  %58 = load ptr, ptr %old_chunk, align 8
  call void @call_freefun(ptr noundef %57, ptr noundef %58)
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %land.lhs.true22, %if.end14
  %59 = load ptr, ptr %object_base1, align 8
  %60 = load ptr, ptr %h.addr, align 8
  %object_base37 = getelementptr inbounds %struct.obstack, ptr %60, i32 0, i32 2
  store ptr %59, ptr %object_base37, align 8
  %61 = load ptr, ptr %h.addr, align 8
  %object_base38 = getelementptr inbounds %struct.obstack, ptr %61, i32 0, i32 2
  %62 = load ptr, ptr %object_base38, align 8
  %63 = load i64, ptr %obj_size, align 8
  %add.ptr39 = getelementptr inbounds i8, ptr %62, i64 %63
  %64 = load ptr, ptr %h.addr, align 8
  %next_free40 = getelementptr inbounds %struct.obstack, ptr %64, i32 0, i32 3
  store ptr %add.ptr39, ptr %next_free40, align 8
  %65 = load ptr, ptr %h.addr, align 8
  %maybe_empty_object41 = getelementptr inbounds %struct.obstack, ptr %65, i32 0, i32 10
  %bf.load42 = load i8, ptr %maybe_empty_object41, align 8
  %bf.clear43 = and i8 %bf.load42, -3
  %bf.set = or i8 %bf.clear43, 0
  store i8 %bf.set, ptr %maybe_empty_object41, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @call_freefun(ptr noundef %h, ptr noundef %old_chunk) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %old_chunk.addr = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store ptr %old_chunk, ptr %old_chunk.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %use_extra_arg = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 10
  %bf.load = load i8, ptr %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %h.addr, align 8
  %freefun = getelementptr inbounds %struct.obstack, ptr %1, i32 0, i32 8
  %2 = load ptr, ptr %freefun, align 8
  %3 = load ptr, ptr %h.addr, align 8
  %extra_arg = getelementptr inbounds %struct.obstack, ptr %3, i32 0, i32 9
  %4 = load ptr, ptr %extra_arg, align 8
  %5 = load ptr, ptr %old_chunk.addr, align 8
  call void %2(ptr noundef %4, ptr noundef %5)
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load ptr, ptr %h.addr, align 8
  %freefun1 = getelementptr inbounds %struct.obstack, ptr %6, i32 0, i32 8
  %7 = load ptr, ptr %freefun1, align 8
  %8 = load ptr, ptr %old_chunk.addr, align 8
  call void %7(ptr noundef %8)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local i32 @rpl_obstack_allocated_p(ptr noundef %h, ptr noundef %obj) #11 {
entry:
  %h.addr = alloca ptr, align 8
  %obj.addr = alloca ptr, align 8
  %lp = alloca ptr, align 8
  %plp = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store ptr %obj, ptr %obj.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %chunk = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %chunk, align 8
  store ptr %1, ptr %lp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load ptr, ptr %lp, align 8
  %cmp = icmp ne ptr %2, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load ptr, ptr %lp, align 8
  %4 = load ptr, ptr %obj.addr, align 8
  %cmp1 = icmp uge ptr %3, %4
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %5 = load ptr, ptr %lp, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %limit, align 8
  %7 = load ptr, ptr %obj.addr, align 8
  %cmp2 = icmp ult ptr %6, %7
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %8 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %8, %lor.end ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %10 = load ptr, ptr %lp, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %prev, align 8
  store ptr %11, ptr %plp, align 8
  %12 = load ptr, ptr %plp, align 8
  store ptr %12, ptr %lp, align 8
  br label %while.cond, !llvm.loop !58

while.end:                                        ; preds = %land.end
  %13 = load ptr, ptr %lp, align 8
  %cmp3 = icmp ne ptr %13, null
  %conv = zext i1 %cmp3 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @rpl_obstack_free(ptr noundef %h, ptr noundef %obj) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %obj.addr = alloca ptr, align 8
  %lp = alloca ptr, align 8
  %plp = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store ptr %obj, ptr %obj.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %chunk = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %chunk, align 8
  store ptr %1, ptr %lp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load ptr, ptr %lp, align 8
  %cmp = icmp ne ptr %2, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load ptr, ptr %lp, align 8
  %4 = load ptr, ptr %obj.addr, align 8
  %cmp1 = icmp uge ptr %3, %4
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %5 = load ptr, ptr %lp, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %limit, align 8
  %7 = load ptr, ptr %obj.addr, align 8
  %cmp2 = icmp ult ptr %6, %7
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %8 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %8, %lor.end ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %10 = load ptr, ptr %lp, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %prev, align 8
  store ptr %11, ptr %plp, align 8
  %12 = load ptr, ptr %h.addr, align 8
  %13 = load ptr, ptr %lp, align 8
  call void @call_freefun(ptr noundef %12, ptr noundef %13)
  %14 = load ptr, ptr %plp, align 8
  store ptr %14, ptr %lp, align 8
  %15 = load ptr, ptr %h.addr, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, ptr %15, i32 0, i32 10
  %bf.load = load i8, ptr %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, ptr %maybe_empty_object, align 8
  br label %while.cond, !llvm.loop !59

while.end:                                        ; preds = %land.end
  %16 = load ptr, ptr %lp, align 8
  %tobool = icmp ne ptr %16, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %17 = load ptr, ptr %obj.addr, align 8
  %18 = load ptr, ptr %h.addr, align 8
  %next_free = getelementptr inbounds %struct.obstack, ptr %18, i32 0, i32 3
  store ptr %17, ptr %next_free, align 8
  %19 = load ptr, ptr %h.addr, align 8
  %object_base = getelementptr inbounds %struct.obstack, ptr %19, i32 0, i32 2
  store ptr %17, ptr %object_base, align 8
  %20 = load ptr, ptr %lp, align 8
  %limit3 = getelementptr inbounds %struct._obstack_chunk, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %limit3, align 8
  %22 = load ptr, ptr %h.addr, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, ptr %22, i32 0, i32 4
  store ptr %21, ptr %chunk_limit, align 8
  %23 = load ptr, ptr %lp, align 8
  %24 = load ptr, ptr %h.addr, align 8
  %chunk4 = getelementptr inbounds %struct.obstack, ptr %24, i32 0, i32 1
  store ptr %23, ptr %chunk4, align 8
  br label %if.end7

if.else:                                          ; preds = %while.end
  %25 = load ptr, ptr %obj.addr, align 8
  %cmp5 = icmp ne ptr %25, null
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.else
  call void @abort() #22
  unreachable

if.end:                                           ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local i64 @rpl_obstack_memory_used(ptr noundef %h) #11 {
entry:
  %h.addr = alloca ptr, align 8
  %lp = alloca ptr, align 8
  %nbytes = alloca i64, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 0, ptr %nbytes, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %chunk = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %chunk, align 8
  store ptr %1, ptr %lp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load ptr, ptr %lp, align 8
  %cmp = icmp ne ptr %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %lp, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %limit, align 8
  %5 = load ptr, ptr %lp, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %4 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %6 = load i64, ptr %nbytes, align 8
  %add = add i64 %6, %sub.ptr.sub
  store i64 %add, ptr %nbytes, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load ptr, ptr %lp, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %prev, align 8
  store ptr %8, ptr %lp, align 8
  br label %for.cond, !llvm.loop !60

for.end:                                          ; preds = %for.cond
  %9 = load i64, ptr %nbytes, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdin_set_file_name(ptr noundef %file) #3 {
entry:
  %file.addr = alloca ptr, align 8
  store ptr %file, ptr %file.addr, align 8
  %0 = load ptr, ptr %file.addr, align 8
  store ptr %0, ptr @file_name.446, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdin() #3 {
entry:
  %fail = alloca i8, align 1
  %close_error = alloca ptr, align 8
  store i8 0, ptr %fail, align 1
  %0 = load ptr, ptr @stdin, align 8
  %call = call i64 @freadahead(ptr noundef %0) #23
  %cmp = icmp ugt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stdin, align 8
  %call1 = call i32 @rpl_fseeko(ptr noundef %1, i64 noundef 0, i32 noundef 1)
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %2 = load ptr, ptr @stdin, align 8
  %call3 = call i32 @rpl_fflush(ptr noundef %2)
  %cmp4 = icmp ne i32 %call3, 0
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  store i8 1, ptr %fail, align 1
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  br label %if.end6

if.end6:                                          ; preds = %if.end, %entry
  %3 = load ptr, ptr @stdin, align 8
  %call7 = call i32 @close_stream(ptr noundef %3)
  %cmp8 = icmp ne i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  store i8 1, ptr %fail, align 1
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end6
  %4 = load i8, ptr %fail, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then11, label %if.end19

if.then11:                                        ; preds = %if.end10
  %call12 = call ptr @dgettext(ptr noundef @.str.447, ptr noundef @.str.1.448) #21
  store ptr %call12, ptr %close_error, align 8
  %5 = load ptr, ptr @file_name.446, align 8
  %tobool13 = icmp ne ptr %5, null
  br i1 %tobool13, label %if.then14, label %if.else

if.then14:                                        ; preds = %if.then11
  %call15 = call ptr @__errno_location() #26
  %6 = load i32, ptr %call15, align 4
  %7 = load ptr, ptr @file_name.446, align 8
  %call16 = call ptr @quotearg_colon(ptr noundef %7)
  %8 = load ptr, ptr %close_error, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %6, ptr noundef @.str.2.449, ptr noundef %call16, ptr noundef %8) #24
  br label %if.end18

if.else:                                          ; preds = %if.then11
  %call17 = call ptr @__errno_location() #26
  %9 = load i32, ptr %call17, align 4
  %10 = load ptr, ptr %close_error, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %9, ptr noundef @.str.3.450, ptr noundef %10) #24
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then14
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end10
  call void @close_stdout()
  %11 = load i8, ptr %fail, align 1
  %tobool20 = trunc i8 %11 to i1
  br i1 %tobool20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end19
  %12 = load volatile i32, ptr @exit_failure, align 4
  call void @_exit(i32 noundef %12) #25
  unreachable

if.end22:                                         ; preds = %if.end19
  ret void
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @freadahead(ptr noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rpl_mbrlen(ptr noundef %s, i64 noundef %n, ptr noundef %ps) #3 {
entry:
  %s.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %ps.addr = alloca ptr, align 8
  store ptr %s, ptr %s.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store ptr %ps, ptr %ps.addr, align 8
  %0 = load ptr, ptr %ps.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr @internal_state.451, ptr %ps.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %s.addr, align 8
  %2 = load i64, ptr %n.addr, align 8
  %3 = load ptr, ptr %ps.addr, align 8
  %call = call i64 @rpl_mbrtowc(ptr noundef null, ptr noundef %1, i64 noundef %2, ptr noundef %3)
  ret i64 %call
}

declare i64 @rpl_mbrtowc(ptr noundef, ptr noundef, i64 noundef, ptr noundef) #2

attributes #0 = { noinline noreturn nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nocallback nofree nosync nounwind willreturn }
attributes #9 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #10 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #11 = { noinline nounwind optnone willreturn memory(read) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #13 = { cold noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #15 = { noinline nounwind optnone allocsize(1,2) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { noinline nounwind optnone allocsize(0) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { noinline nounwind optnone allocsize(1) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { noinline nounwind optnone allocsize(0,1) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { nounwind allocsize(0,1) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { convergent nocallback nofree nosync nounwind willreturn memory(none) }
attributes #21 = { nounwind }
attributes #22 = { noreturn nounwind }
attributes #23 = { nounwind willreturn memory(read) }
attributes #24 = { cold }
attributes #25 = { noreturn }
attributes #26 = { nounwind willreturn memory(none) }
attributes #27 = { allocsize(1) }
attributes #28 = { allocsize(0) }
attributes #29 = { nounwind allocsize(0) }
attributes #30 = { allocsize(1,2) }
attributes #31 = { allocsize(0,1) }
attributes #32 = { nounwind allocsize(0,1) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5}

!0 = !{!"clang version 18.1.8 (https://github.com/llvm/llvm-project.git 3b5b5c1ec4a3095ab096dd780e84d7ab81f3d7ff)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !7}
!14 = distinct !{!14, !7}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !7}
!17 = distinct !{!17, !7}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !7}
!20 = distinct !{!20, !7}
!21 = distinct !{!21, !7}
!22 = distinct !{!22, !7}
!23 = distinct !{!23, !7}
!24 = distinct !{!24, !7}
!25 = distinct !{!25, !7}
!26 = distinct !{!26, !7}
!27 = distinct !{!27, !7}
!28 = distinct !{!28, !7}
!29 = distinct !{!29, !7}
!30 = distinct !{!30, !7}
!31 = distinct !{!31, !7}
!32 = distinct !{!32, !7}
!33 = distinct !{!33, !7}
!34 = distinct !{!34, !7}
!35 = distinct !{!35, !7}
!36 = distinct !{!36, !7}
!37 = distinct !{!37, !7}
!38 = distinct !{!38, !7}
!39 = distinct !{!39, !7}
!40 = distinct !{!40, !7}
!41 = distinct !{!41, !7}
!42 = distinct !{!42, !7}
!43 = distinct !{!43, !7}
!44 = distinct !{!44, !7}
!45 = distinct !{!45, !7}
!46 = distinct !{!46, !7}
!47 = distinct !{!47, !7}
!48 = distinct !{!48, !7}
!49 = distinct !{!49, !7}
!50 = distinct !{!50, !7}
!51 = distinct !{!51, !7}
!52 = distinct !{!52, !7}
!53 = distinct !{!53, !7}
!54 = distinct !{!54, !7}
!55 = distinct !{!55, !7}
!56 = distinct !{!56, !7}
!57 = distinct !{!57, !7}
!58 = distinct !{!58, !7}
!59 = distinct !{!59, !7}
!60 = distinct !{!60, !7}
