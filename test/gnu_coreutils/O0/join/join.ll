; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.option = type { ptr, i32, ptr, i32 }
%struct.mcel_t = type { i32, i8, i8 }
%struct.infomap = type { ptr, ptr }
%struct.outlist = type { i32, i64, ptr }
%struct.line = type { %struct.seq, i64, i64, ptr }
%struct.seq = type { i64, i64, ptr }
%struct.quoting_options = type { i32, i32, [8 x i32], ptr, ptr }
%struct.slotvec = type { i64, ptr }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%union.YYSTYPE = type { %struct.relative_time }
%struct.relative_time = type { i64, i64, i64, i64, i64, i64, i32 }
%struct.table = type { ptr, i32, i32 }
%struct.field = type { ptr, i64 }
%struct.__va_list_tag = type { i32, i32, ptr, ptr }
%struct._IO_FILE = type { i32, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, i32, i32, i64, i16, i8, [1 x i8], ptr, i64, ptr, ptr, ptr, ptr, i64, i32, [20 x i8] }
%struct.arguments = type { i64, ptr, [7 x %struct.argument] }
%struct.argument = type { i32, %union.anon.1 }
%union.anon.1 = type { x86_fp80 }
%struct.char_directives = type { i64, ptr, i64, i64, [7 x %struct.char_directive] }
%struct.char_directive = type { ptr, ptr, i32, ptr, ptr, i64, ptr, ptr, i64, i8, i64 }
%struct.timespec = type { i64, i64 }
%union.yyalloc = type { %union.YYSTYPE }
%struct.parser_control = type { ptr, i64, i32, i32, i32, i32, %struct.textint, i64, i64, i64, i64, %struct.timespec, %struct.relative_time, i8, i8, i64, i64, i64, i64, i64, i64, i64, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x %struct.table] }
%struct.textint = type { i8, i64, i64 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, ptr }
%struct.obstack = type { i64, ptr, ptr, ptr, ptr, %union.anon.18, i64, %union.anon.0, %union.anon.0, ptr, i8 }
%union.anon.18 = type { i64 }
%union.anon.0 = type { ptr }
%struct._obstack_chunk = type { ptr, ptr, [0 x i8] }

@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"Usage: %s [OPTION]... FILE1 FILE2\0A\00", align 1
@.str.2 = private unnamed_addr constant [150 x i8] c"For each pair of input lines with identical join fields, write a line to\0Astandard output.  The default join field is the first, delimited by blanks.\0A\00", align 1
@.str.3 = private unnamed_addr constant [60 x i8] c"\0AWhen FILE1 or FILE2 (not both) is -, read standard input.\0A\00", align 1
@.str.4 = private unnamed_addr constant [158 x i8] c"\0A  -a FILENUM             also print unpairable lines from file FILENUM, where\0A                           FILENUM is 1 or 2, corresponding to FILE1 or FILE2\0A\00", align 1
@.str.5 = private unnamed_addr constant [155 x i8] c"  -e STRING              replace missing (empty) input fields with STRING;\0A                           I.e., missing fields specified with '-12jo' options\0A\00", align 1
@.str.6 = private unnamed_addr constant [272 x i8] c"  -i, --ignore-case      ignore differences in case when comparing fields\0A  -j FIELD               equivalent to '-1 FIELD -2 FIELD'\0A  -o FORMAT              obey FORMAT while constructing output line\0A  -t CHAR                use CHAR as input and output field separator\0A\00", align 1
@.str.7 = private unnamed_addr constant [531 x i8] c"  -v FILENUM             like -a FILENUM, but suppress joined output lines\0A  -1 FIELD               join on this FIELD of file 1\0A  -2 FIELD               join on this FIELD of file 2\0A      --check-order      check that the input is correctly sorted, even\0A                           if all input lines are pairable\0A      --nocheck-order    do not check that the input is correctly sorted\0A      --header           treat the first line in each file as field headers,\0A                           print them without trying to pair them\0A\00", align 1
@.str.8 = private unnamed_addr constant [61 x i8] c"  -z, --zero-terminated  line delimiter is NUL, not newline\0A\00", align 1
@.str.9 = private unnamed_addr constant [48 x i8] c"      --help        display this help and exit\0A\00", align 1
@.str.10 = private unnamed_addr constant [57 x i8] c"      --version     output version information and exit\0A\00", align 1
@.str.11 = private unnamed_addr constant [812 x i8] c"\0AUnless -t CHAR is given, leading blanks separate fields and are ignored,\0Aelse fields are separated by CHAR.  Any FIELD is a field number counted\0Afrom 1.  FORMAT is one or more comma or blank separated specifications,\0Aeach being 'FILENUM.FIELD' or '0'.  Default FORMAT outputs the join field,\0Athe remaining fields from FILE1, the remaining fields from FILE2, all\0Aseparated by CHAR.  If FORMAT is the keyword 'auto', then the first\0Aline of each file determines the number of fields output for each line.\0A\0AImportant: FILE1 and FILE2 must be sorted on the join fields.\0AE.g., use \22sort -k 1b,1\22 if 'join' has no options,\0Aor use \22join -t ''\22 if 'sort' has no options.\0AComparisons honor the rules specified by 'LC_COLLATE'.\0AIf the input is not sorted and some lines cannot be joined, a\0Awarning message will be given.\0A\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"join\00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@hard_LC_COLLATE = internal global i8 0, align 1
@print_pairables = internal global i8 0, align 1
@seen_unpairable = internal global i8 0, align 1
@issued_disorder_warning = internal global [2 x i8] zeroinitializer, align 1
@check_input_order = internal global i32 0, align 4
@.str.16 = private unnamed_addr constant [20 x i8] c"-a:e:i1:2:j:o:t:v:z\00", align 1
@longopts = internal constant [8 x %struct.option] [%struct.option { ptr @.str.48, i32 0, ptr null, i32 105 }, %struct.option { ptr @.str.49, i32 0, ptr null, i32 128 }, %struct.option { ptr @.str.50, i32 0, ptr null, i32 129 }, %struct.option { ptr @.str.51, i32 0, ptr null, i32 122 }, %struct.option { ptr @.str.52, i32 0, ptr null, i32 130 }, %struct.option { ptr @.str.53, i32 0, ptr null, i32 -130 }, %struct.option { ptr @.str.54, i32 0, ptr null, i32 -131 }, %struct.option zeroinitializer], align 16
@optarg = external global ptr, align 8
@.str.17 = private unnamed_addr constant [24 x i8] c"invalid file number: %s\00", align 1
@print_unpairables_1 = internal global i8 0, align 1
@print_unpairables_2 = internal global i8 0, align 1
@empty_filler = internal global ptr null, align 8
@.str.18 = private unnamed_addr constant [44 x i8] c"conflicting empty-field replacement strings\00", align 1
@ignore_case = internal global i8 0, align 1
@join_field_1 = internal global i64 -1, align 8
@join_field_2 = internal global i64 -1, align 8
@optind = external global i32, align 4
@.str.19 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@autoformat = internal global i8 0, align 1
@.str.20 = private unnamed_addr constant [3 x i8] c"\\0\00", align 1
@output_separator = internal global ptr @.str.62, align 8
@.str.21 = private unnamed_addr constant [23 x i8] c"multi-character tab %s\00", align 1
@tab = internal global %struct.mcel_t zeroinitializer, align 4
@.str.22 = private unnamed_addr constant [18 x i8] c"incompatible tabs\00", align 1
@output_seplen = internal global i64 1, align 8
@eolchar = internal global i8 10, align 1
@g_names = internal global [2 x ptr] zeroinitializer, align 16
@join_header_lines = internal global i8 0, align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@Version = external global ptr, align 8
@.str.24 = private unnamed_addr constant [13 x i8] c"Mike Haertel\00", align 1
@.str.25 = private unnamed_addr constant [16 x i8] c"missing operand\00", align 1
@.str.26 = private unnamed_addr constant [25 x i8] c"missing operand after %s\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.30 = private unnamed_addr constant [36 x i8] c"both files cannot be standard input\00", align 1
@.str.31 = private unnamed_addr constant [29 x i8] c"input is not in sorted order\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.33 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.34 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.38 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.39 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { ptr @.str.32, ptr @.str.33 }, %struct.infomap { ptr @.str.14, ptr @.str.34 }, %struct.infomap { ptr @.str.35, ptr @.str.36 }, %struct.infomap { ptr @.str.37, ptr @.str.36 }, %struct.infomap { ptr @.str.38, ptr @.str.36 }, %struct.infomap { ptr @.str.39, ptr @.str.36 }, %struct.infomap zeroinitializer], align 16
@.str.40 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.41 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.43 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.46 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.47 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@spareline = internal global [2 x ptr] zeroinitializer, align 16
@.str.48 = private unnamed_addr constant [12 x i8] c"ignore-case\00", align 1
@.str.49 = private unnamed_addr constant [12 x i8] c"check-order\00", align 1
@.str.50 = private unnamed_addr constant [14 x i8] c"nocheck-order\00", align 1
@.str.51 = private unnamed_addr constant [16 x i8] c"zero-terminated\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"header\00", align 1
@.str.53 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.55 = private unnamed_addr constant [34 x i8] c"incompatible join fields %td, %td\00", align 1
@.str.56 = private unnamed_addr constant [25 x i8] c"invalid field number: %s\00", align 1
@.str.57 = private unnamed_addr constant [28 x i8] c"invalid field specifier: %s\00", align 1
@.str.58 = private unnamed_addr constant [38 x i8] c"invalid file number in field spec: %s\00", align 1
@.str.59 = private unnamed_addr constant [36 x i8] c"file == 0 || file == 1 || file == 2\00", align 1
@.str.60 = private unnamed_addr constant [11 x i8] c"src/join.c\00", align 1
@__PRETTY_FUNCTION__.add_field = private unnamed_addr constant [27 x i8] c"void add_field(int, idx_t)\00", align 1
@.str.61 = private unnamed_addr constant [24 x i8] c"file != 0 || field == 0\00", align 1
@outlist_end = internal global ptr @outlist_head, align 8
@outlist_head = internal global %struct.outlist zeroinitializer, align 8
@.str.62 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.63 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@autocount_1 = internal global i64 0, align 8
@autocount_2 = internal global i64 0, align 8
@uni_blank = internal global %struct.line zeroinitializer, align 8
@prevline = internal global [2 x ptr] zeroinitializer, align 16
@.str.64 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.65 = private unnamed_addr constant [11 x i8] c"read error\00", align 1
@line_no = internal global [2 x i64] zeroinitializer, align 16
@.str.66 = private unnamed_addr constant [28 x i8] c"%s:%ju: is not sorted: %.*s\00", align 1
@.str.67 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.68 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.69 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.70 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.71 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.72 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.73 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.74 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.75 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.76 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_args = dso_local constant [11 x ptr] [ptr @.str.67, ptr @.str.1.68, ptr @.str.2.69, ptr @.str.3.70, ptr @.str.4.71, ptr @.str.5.72, ptr @.str.6.73, ptr @.str.7.74, ptr @.str.8.75, ptr @.str.9.76, ptr null], align 16
@quoting_style_vals = dso_local constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8
@slotvec = internal global ptr @slotvec0, align 8
@nslots = internal global i32 1, align 4
@slot0 = internal global [256 x i8] zeroinitializer, align 16
@slotvec0 = internal global %struct.slotvec { i64 256, ptr @slot0 }, align 8
@quote_quoting_options = dso_local global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, ptr null, ptr null }, align 8
@.str.10.77 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.78 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.79 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.80 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.14.81 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.15.82 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.16.83 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.17.84 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.18.85 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.19.86 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@file_name = internal global ptr null, align 8
@ignore_EPIPE = internal global i8 0, align 1
@.str.95 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.1.96 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@.str.2.97 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.3.98 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.101 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.102 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@version_etc_copyright = external constant [0 x i8], align 1
@.str.2.103 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.3.104 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.4.105 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5.106 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.6.107 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.7.108 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.8.109 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.9.110 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.10.111 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.11.112 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.12.113 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.13.114 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.14.115 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.15.116 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.16.117 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@.str.17.120 = private unnamed_addr constant [20 x i8] c"Report bugs to: %s\0A\00", align 1
@.str.18.121 = private unnamed_addr constant [22 x i8] c"bug-coreutils@gnu.org\00", align 1
@.str.19.122 = private unnamed_addr constant [20 x i8] c"%s home page: <%s>\0A\00", align 1
@.str.20.123 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.21.124 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.22.125 = private unnamed_addr constant [39 x i8] c"General help using GNU software: <%s>\0A\00", align 1
@.str.23.126 = private unnamed_addr constant [29 x i8] c"https://www.gnu.org/gethelp/\00", align 1
@error_print_progname = dso_local global ptr null, align 8
@.str.127 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@error_one_per_line = dso_local global i32 0, align 4
@verror_at_line.old_file_name = internal global ptr null, align 8
@verror_at_line.old_line_number = internal global i32 0, align 4
@.str.1.133 = private unnamed_addr constant [4 x i8] c"%s:\00", align 1
@.str.2.134 = private unnamed_addr constant [8 x i8] c"%s:%u: \00", align 1
@.str.3.135 = private unnamed_addr constant [2 x i8] c" \00", align 1
@error_message_count = dso_local global i32 0, align 4
@stdout = external global ptr, align 8
@.str.4.128 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.5.129 = private unnamed_addr constant [21 x i8] c"Unknown system error\00", align 1
@.str.6.130 = private unnamed_addr constant [5 x i8] c": %s\00", align 1
@.str.148 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.149 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.152 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.153 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.156 = private unnamed_addr constant [7 x i8] c"(NULL)\00", align 1
@printf_fetchargs.wide_null_string = internal constant [7 x i32] [i32 40, i32 78, i32 85, i32 76, i32 76, i32 41, i32 0], align 16
@.str.159 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec = internal global i32 0, align 4
@.str.172 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@internal_state = internal global %struct.__mbstate_t zeroinitializer, align 4
@program_name = dso_local global ptr null, align 8
@.str.177 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.178 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.179 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_name = external global ptr, align 8
@program_invocation_short_name = external global ptr, align 8
@.str.200 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1.198 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.2.199 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.205 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.1.203 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.2.204 = private unnamed_addr constant [25 x i8] c"string comparison failed\00", align 1
@.str.3.206 = private unnamed_addr constant [43 x i8] c"Set LC_ALL='C' to work around the problem.\00", align 1
@.str.4.207 = private unnamed_addr constant [37 x i8] c"The strings compared were %s and %s.\00", align 1
@yyparse.yyval_default = internal global %union.YYSTYPE zeroinitializer, align 8
@yypact = internal constant [115 x i8] c"\F2\07'\A5%\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\0E\A5@/C\06R\FCJK\A5L\A5\A5\A5\A5\A5\A5\A5\A5\A5E\A5]\A5\A5\A5\A5\A5\A5OH\A5\A5\A5\A5\A5\A5\A5\A5\1A\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5\A5>\0BPQ\A5\A5\A5\A5\A5S\A5\A5TU\A5\A5\A5\A5\A5-V\F4\A5\A5\A5\A5W\12\A5\A5XYN\A5;\A5\A5\12[", align 16
@yytranslate = internal constant [278 x i8] calign 16
@yycheck = internal constant [115 x i8] c"\1B\05\06\07\08\09\0A\13\0C\17\04\0F\10g\1A\13\05\06\07\08\09\0A\1Aq\1C\13\13\14\15\16\13\05\06\07\08\09\0A\1A\14\00\16\1B\05\06\07\08\09\0A\0B\0C\0D\0E\1A\10\11\12\13\14\15\16\0F\18\19\19\13\1B\13\14\04\1Fa\1A\05\06\07\08\09\0A\13\0Cl\13\14\09\09\1Ar\05\06\07\08\09\0A\0F\19\13\03\13\13\1B\14\14U\14\14\14<\FF\14\14\13\FF\FF\1A\1C", align 16
@yytable = internal constant [115 x i8] c"PDEFGHIfJ\01;KLlkM>?@ABCNrO<\05\06\07\08]>?@ABCY\06\0C\080\0D\0E\0F\10\11\12\13\14\15\16Y\17\18\19\1A\1B\1C\1De\1E\1F=fQ231TPg456789f:p[\\RSqp>?@ABCoU\1AVfWX_`bacdZ\00mnf\00\00Yj", align 16
@yydefact = internal constant [115 x i8] c"\05\00\00\02\03VXUW\04ST\019<BEJ?R&$\1D\00\00\1F\00Y\00\00\0A \06\07\11\08\16\09\0B\0D\0C2\0E5K6\0F\10'\1E\00.7:@CF=(%[!LMOPQN8;ADG>)\130[\00\00\17ZHI\22\004-\00\00#,13\1C\1A*\00\12/\\\14[\00\18\1B\00\00\1A+\1A\15\19\00\1A", align 16
@yyr2 = internal constant [93 x i8] c"\00\02\01\01\02\00\02\01\01\01\01\01\01\01\01\01\01\01\03\02\04\06\01\02\04\06\00\01\02\01\02\01\01\02\02\03\01\02\01\02\02\02\03\05\03\03\02\04\02\03\01\03\02\01\01\02\02\01\02\02\01\02\02\01\02\02\01\02\02\01\02\02\02\02\01\01\02\02\02\02\02\02\01\01\01\01\01\01\01\01\02\00\02", align 16
@.str.214 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.1.215 = private unnamed_addr constant [18 x i8] c"number of seconds\00", align 1
@.str.2.216 = private unnamed_addr constant [9 x i8] c"datetime\00", align 1
@.str.3.217 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.4.218 = private unnamed_addr constant [11 x i8] c"local_zone\00", align 1
@.str.5.219 = private unnamed_addr constant [2 x i8] c"J\00", align 1
@.str.6.220 = private unnamed_addr constant [5 x i8] c"zone\00", align 1
@.str.7.221 = private unnamed_addr constant [5 x i8] c"date\00", align 1
@.str.8.222 = private unnamed_addr constant [4 x i8] c"day\00", align 1
@.str.9.223 = private unnamed_addr constant [9 x i8] c"relative\00", align 1
@.str.10.224 = private unnamed_addr constant [7 x i8] c"number\00", align 1
@.str.11.225 = private unnamed_addr constant [7 x i8] c"hybrid\00", align 1
@.str.12.226 = private unnamed_addr constant [56 x i8] c"warning: value %ld has %ld digits. Assuming YYYY/MM/DD\0A\00", align 1
@.str.13.227 = private unnamed_addr constant [66 x i8] c"warning: value %ld has less than 4 digits. Assuming MM/DD/YY[YY]\0A\00", align 1
@yyr1 = internal constant [93 x i8] c"\00\1D\1E\1E\1F  !!!!!!!!!!\22#$$$$%%%&&'(()))))))****+++++++++,---.....................//////01122334566", align 16
@yypgoto = internal constant [26 x i8] c"\A5\A5\A5\A5\A5\A5\A5\A5\11\E4\E5\A5\A5\A5\A5\A5\A5\A5&\A5\A5\A5\A6\A5\A5.", align 16
@yydefgoto = internal constant [26 x i8] c"\00\02\03\04 !\22#$hi%&'()*+,-\09\0A\0B./^", align 16
@.str.14.228 = private unnamed_addr constant [13 x i8] c"syntax error\00", align 1
@.str.15.229 = private unnamed_addr constant [18 x i8] c"Error: discarding\00", align 1
@.str.16.230 = private unnamed_addr constant [15 x i8] c"Error: popping\00", align 1
@yystos = internal constant [115 x i8] c"\00\17\1E\1F \13\14\15\16123\00\05\06\07\08\09\0A\0B\0C\0D\0E\10\11\12\13\14\15\16\18\19!\22#$%()*+,-./045\1B\04\13\14\05\06\07\08\09\0A\0C\04\13/\05\06\07\08\09\0A\05\06\07\08\09\0A\0C\0F\10\13\1A\1C'/\09\09/\19\03\13\1B\1A6\13\14\136\14\14\14%\14\14\0F\13\1A&'\1C\1A3\14\14\0F&\1A3", align 16
@.str.17.231 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.18.232 = private unnamed_addr constant [30 x i8] c"Cleanup: discarding lookahead\00", align 1
@.str.19.233 = private unnamed_addr constant [17 x i8] c"Cleanup: popping\00", align 1
@.str.20.293 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@.str.21.236 = private unnamed_addr constant [17 x i8] c"parsed %s part: \00", align 1
@.str.22.246 = private unnamed_addr constant [26 x i8] c"(Y-M-D) %04ld-%02ld-%02ld\00", align 1
@.str.23.247 = private unnamed_addr constant [12 x i8] c"year: %04ld\00", align 1
@.str.24.248 = private unnamed_addr constant [19 x i8] c" %02ld:%02ld:%02ld\00", align 1
@.str.25.249 = private unnamed_addr constant [6 x i8] c".%09d\00", align 1
@.str.26.250 = private unnamed_addr constant [3 x i8] c"pm\00", align 1
@.str.27.251 = private unnamed_addr constant [31 x i8] c"%s (day ordinal=%ld number=%d)\00", align 1
@.str.28.252 = private unnamed_addr constant [12 x i8] c" isdst=%d%s\00", align 1
@.str.29.253 = private unnamed_addr constant [5 x i8] c" DST\00", align 1
@.str.30.254 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.31.255 = private unnamed_addr constant [7 x i8] c" UTC%s\00", align 1
@.str.32.256 = private unnamed_addr constant [23 x i8] c"number of seconds: %ld\00", align 1
@str_days.ordinal_values = internal constant [14 x [11 x i8]] [[11 x i8] c"last\00\00\00\00\00\00\00", [11 x i8] c"this\00\00\00\00\00\00\00", [11 x i8] c"next/first\00", [11 x i8] c"(SECOND)\00\00\00", [11 x i8] c"third\00\00\00\00\00\00", [11 x i8] c"fourth\00\00\00\00\00", [11 x i8] c"fifth\00\00\00\00\00\00", [11 x i8] c"sixth\00\00\00\00\00\00", [11 x i8] c"seventh\00\00\00\00", [11 x i8] c"eight\00\00\00\00\00\00", [11 x i8] c"ninth\00\00\00\00\00\00", [11 x i8] c"tenth\00\00\00\00\00\00", [11 x i8] c"eleventh\00\00\00", [11 x i8] c"twelfth\00\00\00\00"], align 16
@str_days.days_values = internal constant [7 x [4 x i8]] [[4 x i8] c"Sun\00", [4 x i8] c"Mon\00", [4 x i8] c"Tue\00", [4 x i8] c"Wed\00", [4 x i8] c"Thu\00", [4 x i8] c"Fri\00", [4 x i8] c"Sat\00"], align 16
@.str.33.258 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.34.259 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.35.260 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.36.257 = private unnamed_addr constant [7 x i8] c"%c%02d\00", align 1
@.str.37.237 = private unnamed_addr constant [16 x i8] c"today/this/now\0A\00", align 1
@.str.38.238 = private unnamed_addr constant [8 x i8] c"year(s)\00", align 1
@.str.39.239 = private unnamed_addr constant [9 x i8] c"month(s)\00", align 1
@.str.40.240 = private unnamed_addr constant [7 x i8] c"day(s)\00", align 1
@.str.41.241 = private unnamed_addr constant [8 x i8] c"hour(s)\00", align 1
@.str.42.242 = private unnamed_addr constant [8 x i8] c"minutes\00", align 1
@.str.43.243 = private unnamed_addr constant [8 x i8] c"seconds\00", align 1
@.str.44.244 = private unnamed_addr constant [12 x i8] c"nanoseconds\00", align 1
@.str.45.245 = private unnamed_addr constant [9 x i8] c" %+ld %s\00", align 1
@.str.46.235 = private unnamed_addr constant [7 x i8] c"date: \00", align 1
@.str.47.234 = private unnamed_addr constant [9 x i8] c"Deleting\00", align 1
@.str.48.261 = private unnamed_addr constant [26 x i8] c"error: unknown word '%s'\0A\00", align 1
@meridian_table = internal constant [5 x %struct.table] [%struct.table { ptr @.str.49.286, i32 270, i32 0 }, %struct.table { ptr @.str.50.287, i32 270, i32 0 }, %struct.table { ptr @.str.51.288, i32 270, i32 1 }, %struct.table { ptr @.str.52.289, i32 270, i32 1 }, %struct.table zeroinitializer], align 16
@month_and_day_table = internal constant [25 x %struct.table] [%struct.table { ptr @.str.53.271, i32 271, i32 1 }, %struct.table { ptr @.str.54.272, i32 271, i32 2 }, %struct.table { ptr @.str.55.273, i32 271, i32 3 }, %struct.table { ptr @.str.56.274, i32 271, i32 4 }, %struct.table { ptr @.str.57.275, i32 271, i32 5 }, %struct.table { ptr @.str.58.276, i32 271, i32 6 }, %struct.table { ptr @.str.59.277, i32 271, i32 7 }, %struct.table { ptr @.str.60.278, i32 271, i32 8 }, %struct.table { ptr @.str.61.279, i32 271, i32 9 }, %struct.table { ptr @.str.62.280, i32 271, i32 9 }, %struct.table { ptr @.str.63.281, i32 271, i32 10 }, %struct.table { ptr @.str.64.282, i32 271, i32 11 }, %struct.table { ptr @.str.65.283, i32 271, i32 12 }, %struct.table { ptr @.str.66.284, i32 267, i32 0 }, %struct.table { ptr @.str.67.285, i32 267, i32 1 }, %struct.table { ptr @.str.68, i32 267, i32 2 }, %struct.table { ptr @.str.69, i32 267, i32 2 }, %struct.table { ptr @.str.70, i32 267, i32 3 }, %struct.table { ptr @.str.71, i32 267, i32 3 }, %struct.table { ptr @.str.72, i32 267, i32 4 }, %struct.table { ptr @.str.73, i32 267, i32 4 }, %struct.table { ptr @.str.74, i32 267, i32 4 }, %struct.table { ptr @.str.75, i32 267, i32 5 }, %struct.table { ptr @.str.76, i32 267, i32 6 }, %struct.table zeroinitializer], align 16
@dst_table = internal constant [1 x %struct.table] [%struct.table { ptr @.str.127.268, i32 259, i32 0 }], align 16
@time_units_table = internal constant [11 x %struct.table] [%struct.table { ptr @.str.128, i32 260, i32 1 }, %struct.table { ptr @.str.129, i32 261, i32 1 }, %struct.table { ptr @.str.130, i32 265, i32 14 }, %struct.table { ptr @.str.131, i32 265, i32 7 }, %struct.table { ptr @.str.132, i32 265, i32 1 }, %struct.table { ptr @.str.133, i32 262, i32 1 }, %struct.table { ptr @.str.134, i32 263, i32 1 }, %struct.table { ptr @.str.135, i32 263, i32 1 }, %struct.table { ptr @.str.136, i32 264, i32 1 }, %struct.table { ptr @.str.137, i32 264, i32 1 }, %struct.table zeroinitializer], align 16
@relative_time_table = internal constant [21 x %struct.table] [%struct.table { ptr @.str.138, i32 266, i32 1 }, %struct.table { ptr @.str.139, i32 266, i32 -1 }, %struct.table { ptr @.str.140, i32 266, i32 0 }, %struct.table { ptr @.str.141, i32 266, i32 0 }, %struct.table { ptr @.str.142, i32 272, i32 -1 }, %struct.table { ptr @.str.143, i32 272, i32 0 }, %struct.table { ptr @.str.144, i32 272, i32 1 }, %struct.table { ptr @.str.145, i32 272, i32 1 }, %struct.table { ptr @.str.146, i32 272, i32 3 }, %struct.table { ptr @.str.147, i32 272, i32 4 }, %struct.table { ptr @.str.148.265, i32 272, i32 5 }, %struct.table { ptr @.str.149, i32 272, i32 6 }, %struct.table { ptr @.str.150, i32 272, i32 7 }, %struct.table { ptr @.str.151, i32 272, i32 8 }, %struct.table { ptr @.str.152.266, i32 272, i32 9 }, %struct.table { ptr @.str.153, i32 272, i32 10 }, %struct.table { ptr @.str.154, i32 272, i32 11 }, %struct.table { ptr @.str.155, i32 272, i32 12 }, %struct.table { ptr @.str.156.267, i32 258, i32 -1 }, %struct.table { ptr @.str.157, i32 258, i32 1 }, %struct.table zeroinitializer], align 16
@military_table = internal constant [27 x %struct.table] [%struct.table { ptr @.str.158, i32 273, i32 3600 }, %struct.table { ptr @.str.159.262, i32 273, i32 7200 }, %struct.table { ptr @.str.160, i32 273, i32 10800 }, %struct.table { ptr @.str.161, i32 273, i32 14400 }, %struct.table { ptr @.str.162, i32 273, i32 18000 }, %struct.table { ptr @.str.163, i32 273, i32 21600 }, %struct.table { ptr @.str.164, i32 273, i32 25200 }, %struct.table { ptr @.str.165, i32 273, i32 28800 }, %struct.table { ptr @.str.166, i32 273, i32 32400 }, %struct.table { ptr @.str.5.219, i32 74, i32 0 }, %struct.table { ptr @.str.167, i32 273, i32 36000 }, %struct.table { ptr @.str.168, i32 273, i32 39600 }, %struct.table { ptr @.str.169, i32 273, i32 43200 }, %struct.table { ptr @.str.170, i32 273, i32 -3600 }, %struct.table { ptr @.str.171, i32 273, i32 -7200 }, %struct.table { ptr @.str.172.263, i32 273, i32 -10800 }, %struct.table { ptr @.str.173, i32 273, i32 -14400 }, %struct.table { ptr @.str.174, i32 273, i32 -18000 }, %struct.table { ptr @.str.175, i32 273, i32 -21600 }, %struct.table { ptr @.str.176, i32 84, i32 0 }, %struct.table { ptr @.str.177.264, i32 273, i32 -28800 }, %struct.table { ptr @.str.178, i32 273, i32 -32400 }, %struct.table { ptr @.str.179, i32 273, i32 -36000 }, %struct.table { ptr @.str.180, i32 273, i32 -39600 }, %struct.table { ptr @.str.181, i32 273, i32 -43200 }, %struct.table { ptr @.str.182, i32 273, i32 0 }, %struct.table zeroinitializer], align 16
@.str.49.286 = private unnamed_addr constant [3 x i8] c"AM\00", align 1
@.str.50.287 = private unnamed_addr constant [5 x i8] c"A.M.\00", align 1
@.str.51.288 = private unnamed_addr constant [3 x i8] c"PM\00", align 1
@.str.52.289 = private unnamed_addr constant [5 x i8] c"P.M.\00", align 1
@.str.53.271 = private unnamed_addr constant [8 x i8] c"JANUARY\00", align 1
@.str.54.272 = private unnamed_addr constant [9 x i8] c"FEBRUARY\00", align 1
@.str.55.273 = private unnamed_addr constant [6 x i8] c"MARCH\00", align 1
@.str.56.274 = private unnamed_addr constant [6 x i8] c"APRIL\00", align 1
@.str.57.275 = private unnamed_addr constant [4 x i8] c"MAY\00", align 1
@.str.58.276 = private unnamed_addr constant [5 x i8] c"JUNE\00", align 1
@.str.59.277 = private unnamed_addr constant [5 x i8] c"JULY\00", align 1
@.str.60.278 = private unnamed_addr constant [7 x i8] c"AUGUST\00", align 1
@.str.61.279 = private unnamed_addr constant [10 x i8] c"SEPTEMBER\00", align 1
@.str.62.280 = private unnamed_addr constant [5 x i8] c"SEPT\00", align 1
@.str.63.281 = private unnamed_addr constant [8 x i8] c"OCTOBER\00", align 1
@.str.64.282 = private unnamed_addr constant [9 x i8] c"NOVEMBER\00", align 1
@.str.65.283 = private unnamed_addr constant [9 x i8] c"DECEMBER\00", align 1
@.str.66.284 = private unnamed_addr constant [7 x i8] c"SUNDAY\00", align 1
@.str.67.285 = private unnamed_addr constant [7 x i8] c"MONDAY\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"TUESDAY\00", align 1
@.str.69 = private unnamed_addr constant [5 x i8] c"TUES\00", align 1
@.str.70 = private unnamed_addr constant [10 x i8] c"WEDNESDAY\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c"WEDNES\00", align 1
@.str.72 = private unnamed_addr constant [9 x i8] c"THURSDAY\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"THUR\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"THURS\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"FRIDAY\00", align 1
@.str.76 = private unnamed_addr constant [9 x i8] c"SATURDAY\00", align 1
@universal_time_zone_table = internal constant [4 x %struct.table] [%struct.table { ptr @.str.77, i32 273, i32 0 }, %struct.table { ptr @.str.78, i32 273, i32 0 }, %struct.table { ptr @.str.79, i32 273, i32 0 }, %struct.table zeroinitializer], align 16
@time_zone_table = internal constant [48 x %struct.table] [%struct.table { ptr @.str.80, i32 273, i32 0 }, %struct.table { ptr @.str.81, i32 268, i32 0 }, %struct.table { ptr @.str.82, i32 268, i32 0 }, %struct.table { ptr @.str.83, i32 273, i32 -10800 }, %struct.table { ptr @.str.84, i32 273, i32 -10800 }, %struct.table { ptr @.str.85, i32 268, i32 -10800 }, %struct.table { ptr @.str.86, i32 273, i32 -12600 }, %struct.table { ptr @.str.87, i32 268, i32 -12600 }, %struct.table { ptr @.str.88, i32 273, i32 -14400 }, %struct.table { ptr @.str.89, i32 268, i32 -14400 }, %struct.table { ptr @.str.90, i32 273, i32 -14400 }, %struct.table { ptr @.str.91, i32 268, i32 -14400 }, %struct.table { ptr @.str.92, i32 273, i32 -18000 }, %struct.table { ptr @.str.93, i32 268, i32 -18000 }, %struct.table { ptr @.str.94, i32 273, i32 -21600 }, %struct.table { ptr @.str.95.269, i32 268, i32 -21600 }, %struct.table { ptr @.str.96, i32 273, i32 -25200 }, %struct.table { ptr @.str.97, i32 268, i32 -25200 }, %struct.table { ptr @.str.98, i32 273, i32 -28800 }, %struct.table { ptr @.str.99, i32 268, i32 -28800 }, %struct.table { ptr @.str.100, i32 273, i32 -32400 }, %struct.table { ptr @.str.101.270, i32 268, i32 -32400 }, %struct.table { ptr @.str.102, i32 273, i32 -36000 }, %struct.table { ptr @.str.103, i32 273, i32 -36000 }, %struct.table { ptr @.str.104, i32 268, i32 -36000 }, %struct.table { ptr @.str.105, i32 273, i32 -43200 }, %struct.table { ptr @.str.106, i32 273, i32 3600 }, %struct.table { ptr @.str.107, i32 273, i32 3600 }, %struct.table { ptr @.str.108, i32 268, i32 3600 }, %struct.table { ptr @.str.109, i32 273, i32 3600 }, %struct.table { ptr @.str.110, i32 273, i32 3600 }, %struct.table { ptr @.str.111, i32 268, i32 3600 }, %struct.table { ptr @.str.112, i32 268, i32 3600 }, %struct.table { ptr @.str.113, i32 273, i32 7200 }, %struct.table { ptr @.str.114, i32 268, i32 7200 }, %struct.table { ptr @.str.115, i32 273, i32 7200 }, %struct.table { ptr @.str.116, i32 273, i32 7200 }, %struct.table { ptr @.str.117, i32 273, i32 10800 }, %struct.table { ptr @.str.118, i32 273, i32 10800 }, %struct.table { ptr @.str.119, i32 268, i32 10800 }, %struct.table { ptr @.str.120, i32 273, i32 19800 }, %struct.table { ptr @.str.121, i32 273, i32 28800 }, %struct.table { ptr @.str.122, i32 273, i32 32400 }, %struct.table { ptr @.str.123, i32 273, i32 32400 }, %struct.table { ptr @.str.124, i32 273, i32 36000 }, %struct.table { ptr @.str.125, i32 273, i32 43200 }, %struct.table { ptr @.str.126, i32 268, i32 43200 }, %struct.table zeroinitializer], align 16
@.str.77 = private unnamed_addr constant [4 x i8] c"GMT\00", align 1
@.str.78 = private unnamed_addr constant [3 x i8] c"UT\00", align 1
@.str.79 = private unnamed_addr constant [4 x i8] c"UTC\00", align 1
@.str.80 = private unnamed_addr constant [4 x i8] c"WET\00", align 1
@.str.81 = private unnamed_addr constant [5 x i8] c"WEST\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c"BST\00", align 1
@.str.83 = private unnamed_addr constant [4 x i8] c"ART\00", align 1
@.str.84 = private unnamed_addr constant [4 x i8] c"BRT\00", align 1
@.str.85 = private unnamed_addr constant [5 x i8] c"BRST\00", align 1
@.str.86 = private unnamed_addr constant [4 x i8] c"NST\00", align 1
@.str.87 = private unnamed_addr constant [4 x i8] c"NDT\00", align 1
@.str.88 = private unnamed_addr constant [4 x i8] c"AST\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"ADT\00", align 1
@.str.90 = private unnamed_addr constant [4 x i8] c"CLT\00", align 1
@.str.91 = private unnamed_addr constant [5 x i8] c"CLST\00", align 1
@.str.92 = private unnamed_addr constant [4 x i8] c"EST\00", align 1
@.str.93 = private unnamed_addr constant [4 x i8] c"EDT\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"CST\00", align 1
@.str.95.269 = private unnamed_addr constant [4 x i8] c"CDT\00", align 1
@.str.96 = private unnamed_addr constant [4 x i8] c"MST\00", align 1
@.str.97 = private unnamed_addr constant [4 x i8] c"MDT\00", align 1
@.str.98 = private unnamed_addr constant [4 x i8] c"PST\00", align 1
@.str.99 = private unnamed_addr constant [4 x i8] c"PDT\00", align 1
@.str.100 = private unnamed_addr constant [5 x i8] c"AKST\00", align 1
@.str.101.270 = private unnamed_addr constant [5 x i8] c"AKDT\00", align 1
@.str.102 = private unnamed_addr constant [4 x i8] c"HST\00", align 1
@.str.103 = private unnamed_addr constant [5 x i8] c"HAST\00", align 1
@.str.104 = private unnamed_addr constant [5 x i8] c"HADT\00", align 1
@.str.105 = private unnamed_addr constant [4 x i8] c"SST\00", align 1
@.str.106 = private unnamed_addr constant [4 x i8] c"WAT\00", align 1
@.str.107 = private unnamed_addr constant [4 x i8] c"CET\00", align 1
@.str.108 = private unnamed_addr constant [5 x i8] c"CEST\00", align 1
@.str.109 = private unnamed_addr constant [4 x i8] c"MET\00", align 1
@.str.110 = private unnamed_addr constant [4 x i8] c"MEZ\00", align 1
@.str.111 = private unnamed_addr constant [5 x i8] c"MEST\00", align 1
@.str.112 = private unnamed_addr constant [5 x i8] c"MESZ\00", align 1
@.str.113 = private unnamed_addr constant [4 x i8] c"EET\00", align 1
@.str.114 = private unnamed_addr constant [5 x i8] c"EEST\00", align 1
@.str.115 = private unnamed_addr constant [4 x i8] c"CAT\00", align 1
@.str.116 = private unnamed_addr constant [5 x i8] c"SAST\00", align 1
@.str.117 = private unnamed_addr constant [4 x i8] c"EAT\00", align 1
@.str.118 = private unnamed_addr constant [4 x i8] c"MSK\00", align 1
@.str.119 = private unnamed_addr constant [4 x i8] c"MSD\00", align 1
@.str.120 = private unnamed_addr constant [4 x i8] c"IST\00", align 1
@.str.121 = private unnamed_addr constant [4 x i8] c"SGT\00", align 1
@.str.122 = private unnamed_addr constant [4 x i8] c"KST\00", align 1
@.str.123 = private unnamed_addr constant [4 x i8] c"JST\00", align 1
@.str.124 = private unnamed_addr constant [4 x i8] c"GST\00", align 1
@.str.125 = private unnamed_addr constant [5 x i8] c"NZST\00", align 1
@.str.126 = private unnamed_addr constant [5 x i8] c"NZDT\00", align 1
@.str.127.268 = private unnamed_addr constant [4 x i8] c"DST\00", align 1
@.str.128 = private unnamed_addr constant [5 x i8] c"YEAR\00", align 1
@.str.129 = private unnamed_addr constant [6 x i8] c"MONTH\00", align 1
@.str.130 = private unnamed_addr constant [10 x i8] c"FORTNIGHT\00", align 1
@.str.131 = private unnamed_addr constant [5 x i8] c"WEEK\00", align 1
@.str.132 = private unnamed_addr constant [4 x i8] c"DAY\00", align 1
@.str.133 = private unnamed_addr constant [5 x i8] c"HOUR\00", align 1
@.str.134 = private unnamed_addr constant [7 x i8] c"MINUTE\00", align 1
@.str.135 = private unnamed_addr constant [4 x i8] c"MIN\00", align 1
@.str.136 = private unnamed_addr constant [7 x i8] c"SECOND\00", align 1
@.str.137 = private unnamed_addr constant [4 x i8] c"SEC\00", align 1
@.str.138 = private unnamed_addr constant [9 x i8] c"TOMORROW\00", align 1
@.str.139 = private unnamed_addr constant [10 x i8] c"YESTERDAY\00", align 1
@.str.140 = private unnamed_addr constant [6 x i8] c"TODAY\00", align 1
@.str.141 = private unnamed_addr constant [4 x i8] c"NOW\00", align 1
@.str.142 = private unnamed_addr constant [5 x i8] c"LAST\00", align 1
@.str.143 = private unnamed_addr constant [5 x i8] c"THIS\00", align 1
@.str.144 = private unnamed_addr constant [5 x i8] c"NEXT\00", align 1
@.str.145 = private unnamed_addr constant [6 x i8] c"FIRST\00", align 1
@.str.146 = private unnamed_addr constant [6 x i8] c"THIRD\00", align 1
@.str.147 = private unnamed_addr constant [7 x i8] c"FOURTH\00", align 1
@.str.148.265 = private unnamed_addr constant [6 x i8] c"FIFTH\00", align 1
@.str.149 = private unnamed_addr constant [6 x i8] c"SIXTH\00", align 1
@.str.150 = private unnamed_addr constant [8 x i8] c"SEVENTH\00", align 1
@.str.151 = private unnamed_addr constant [7 x i8] c"EIGHTH\00", align 1
@.str.152.266 = private unnamed_addr constant [6 x i8] c"NINTH\00", align 1
@.str.153 = private unnamed_addr constant [6 x i8] c"TENTH\00", align 1
@.str.154 = private unnamed_addr constant [9 x i8] c"ELEVENTH\00", align 1
@.str.155 = private unnamed_addr constant [8 x i8] c"TWELFTH\00", align 1
@.str.156.267 = private unnamed_addr constant [4 x i8] c"AGO\00", align 1
@.str.157 = private unnamed_addr constant [6 x i8] c"HENCE\00", align 1
@.str.158 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.159.262 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@.str.160 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.161 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.162 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str.163 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@.str.164 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.165 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.166 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@.str.167 = private unnamed_addr constant [2 x i8] c"K\00", align 1
@.str.168 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.169 = private unnamed_addr constant [2 x i8] c"M\00", align 1
@.str.170 = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str.171 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@.str.172.263 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.173 = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@.str.174 = private unnamed_addr constant [2 x i8] c"R\00", align 1
@.str.175 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.176 = private unnamed_addr constant [2 x i8] c"T\00", align 1
@.str.177.264 = private unnamed_addr constant [2 x i8] c"U\00", align 1
@.str.178 = private unnamed_addr constant [2 x i8] c"V\00", align 1
@.str.179 = private unnamed_addr constant [2 x i8] c"W\00", align 1
@.str.180 = private unnamed_addr constant [2 x i8] c"X\00", align 1
@.str.181 = private unnamed_addr constant [2 x i8] c"Y\00", align 1
@.str.182 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@.str.183 = private unnamed_addr constant [5 x i8] c"TZ=\22\00", align 1
@.str.184 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.185 = private unnamed_addr constant [34 x i8] c"error: initial year out of range\0A\00", align 1
@.str.186 = private unnamed_addr constant [23 x i8] c"error: parsing failed\0A\00", align 1
@.str.187 = private unnamed_addr constant [40 x i8] c"error: parsing failed, stopped at '%s'\0A\00", align 1
@.str.188 = private unnamed_addr constant [17 x i8] c"input timezone: \00", align 1
@.str.189 = private unnamed_addr constant [25 x i8] c"'@timespec' - always UTC\00", align 1
@.str.190 = private unnamed_addr constant [24 x i8] c"parsed date/time string\00", align 1
@.str.191 = private unnamed_addr constant [23 x i8] c"TZ=\22%s\22 in date string\00", align 1
@.str.192 = private unnamed_addr constant [5 x i8] c"UTC0\00", align 1
@.str.193 = private unnamed_addr constant [34 x i8] c"TZ=\22UTC0\22 environment value or -u\00", align 1
@.str.194 = private unnamed_addr constant [26 x i8] c"TZ=\22%s\22 environment value\00", align 1
@.str.195 = private unnamed_addr constant [15 x i8] c"system default\00", align 1
@.str.196 = private unnamed_addr constant [6 x i8] c", dst\00", align 1
@.str.197 = private unnamed_addr constant [6 x i8] c" (%s)\00", align 1
@.str.198 = private unnamed_addr constant [33 x i8] c"error: seen multiple time parts\0A\00", align 1
@.str.199 = private unnamed_addr constant [33 x i8] c"error: seen multiple date parts\0A\00", align 1
@.str.200.290 = private unnamed_addr constant [33 x i8] c"error: seen multiple days parts\0A\00", align 1
@.str.201 = private unnamed_addr constant [44 x i8] c"error: seen multiple daylight-saving parts\0A\00", align 1
@.str.202 = private unnamed_addr constant [38 x i8] c"error: seen multiple time-zone parts\0A\00", align 1
@.str.203 = private unnamed_addr constant [37 x i8] c"error: year, month, or day overflow\0A\00", align 1
@.str.204 = private unnamed_addr constant [3 x i8] c"am\00", align 1
@.str.205.291 = private unnamed_addr constant [27 x i8] c"error: invalid hour %ld%s\0A\00", align 1
@.str.206 = private unnamed_addr constant [46 x i8] c"using specified time as starting value: '%s'\0A\00", align 1
@.str.207 = private unnamed_addr constant [44 x i8] c"using current time as starting value: '%s'\0A\00", align 1
@.str.208 = private unnamed_addr constant [46 x i8] c"warning: using midnight as starting time: %s\0A\00", align 1
@.str.209 = private unnamed_addr constant [9 x i8] c"00:00:00\00", align 1
@.str.210 = private unnamed_addr constant [30 x i8] c"error: tzalloc (\22%s\22) failed\0A\00", align 1
@.str.211 = private unnamed_addr constant [79 x i8] c"error: day '%s' (day ordinal=%ld number=%d) resulted in an invalid date: '%s'\0A\00", align 1
@.str.212 = private unnamed_addr constant [30 x i8] c"new start date: '%s' is '%s'\0A\00", align 1
@.str.213 = private unnamed_addr constant [44 x i8] c"using current date as starting value: '%s'\0A\00", align 1
@.str.214.292 = private unnamed_addr constant [57 x i8] c"warning: day (%s) ignored when explicit dates are given\0A\00", align 1
@.str.215 = private unnamed_addr constant [26 x i8] c"starting date/time: '%s'\0A\00", align 1
@.str.216 = private unnamed_addr constant [97 x i8] c"warning: when adding relative months/years, it is recommended to specify the 15th of the months\0A\00", align 1
@.str.217 = private unnamed_addr constant [71 x i8] c"warning: when adding relative days, it is recommended to specify noon\0A\00", align 1
@.str.218 = private unnamed_addr constant [14 x i8] c"error: %s:%d\0A\00", align 1
@.str.219 = private unnamed_addr constant [17 x i8] c"parse-datetime.y\00", align 1
@.str.220 = private unnamed_addr constant [63 x i8] c"error: adding relative date resulted in an invalid date: '%s'\0A\00", align 1
@.str.221 = private unnamed_addr constant [61 x i8] c"after date adjustment (%+ld years, %+ld months, %+ld days),\0A\00", align 1
@.str.222 = private unnamed_addr constant [26 x i8] c"    new date/time = '%s'\0A\00", align 1
@.str.223 = private unnamed_addr constant [61 x i8] c"warning: daylight saving time changed after date adjustment\0A\00", align 1
@.str.224 = private unnamed_addr constant [59 x i8] c"warning: month/year adjustment resulted in shifted dates:\0A\00", align 1
@.str.225 = private unnamed_addr constant [35 x i8] c"     adjusted Y M D: %s %02d %02d\0A\00", align 1
@.str.226 = private unnamed_addr constant [35 x i8] c"   normalized Y M D: %s %02d %02d\0A\00", align 1
@.str.227 = private unnamed_addr constant [43 x i8] c"error: timezone %d caused time_t overflow\0A\00", align 1
@.str.228 = private unnamed_addr constant [26 x i8] c"'%s' = %ld epoch-seconds\0A\00", align 1
@.str.229 = private unnamed_addr constant [48 x i8] c"error: adding relative time caused an overflow\0A\00", align 1
@.str.230 = private unnamed_addr constant [73 x i8] c"after time adjustment (%+ld hours, %+ld minutes, %+ld seconds, %+d ns),\0A\00", align 1
@.str.231 = private unnamed_addr constant [34 x i8] c"    new time = %ld epoch-seconds\0A\00", align 1
@.str.232 = private unnamed_addr constant [61 x i8] c"warning: daylight saving time changed after time adjustment\0A\00", align 1
@.str.233 = private unnamed_addr constant [26 x i8] c"timezone: system default\0A\00", align 1
@.str.234 = private unnamed_addr constant [26 x i8] c"timezone: Universal Time\0A\00", align 1
@.str.235 = private unnamed_addr constant [37 x i8] c"timezone: TZ=\22%s\22 environment value\0A\00", align 1
@.str.236 = private unnamed_addr constant [33 x i8] c"final: %ld.%09d (epoch-seconds)\0A\00", align 1
@.str.237 = private unnamed_addr constant [17 x i8] c"final: %s (UTC)\0A\00", align 1
@.str.238 = private unnamed_addr constant [19 x i8] c"final: %s (UTC%s)\0A\00", align 1
@.str.239 = private unnamed_addr constant [38 x i8] c"final: %s (unknown time zone offset)\0A\00", align 1
@.str.240 = private unnamed_addr constant [42 x i8] c"warning: adjusting year value %ld to %ld\0A\00", align 1
@.str.241 = private unnamed_addr constant [30 x i8] c"error: out-of-range year %ld\0A\00", align 1
@.str.242 = private unnamed_addr constant [15 x i8] c"%02d:%02d:%02d\00", align 1
@.str.243 = private unnamed_addr constant [33 x i8] c"error: invalid date/time value:\0A\00", align 1
@.str.244 = private unnamed_addr constant [30 x i8] c"    user provided time: '%s'\0A\00", align 1
@.str.245 = private unnamed_addr constant [30 x i8] c"       normalized time: '%s'\0A\00", align 1
@.str.246 = private unnamed_addr constant [57 x i8] c"                                 %4s %2s %2s %2s %2s %2s\00", align 1
@.str.247 = private unnamed_addr constant [5 x i8] c"----\00", align 1
@.str.248 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.249 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.250 = private unnamed_addr constant [24 x i8] c"     possible reasons:\0A\00", align 1
@.str.251 = private unnamed_addr constant [49 x i8] c"       nonexistent due to daylight-saving time;\0A\00", align 1
@.str.252 = private unnamed_addr constant [39 x i8] c"       invalid day/month combination;\0A\00", align 1
@.str.253 = private unnamed_addr constant [33 x i8] c"       numeric values overflow;\0A\00", align 1
@.str.254 = private unnamed_addr constant [11 x i8] c"       %s\0A\00", align 1
@.str.255 = private unnamed_addr constant [19 x i8] c"incorrect timezone\00", align 1
@.str.256 = private unnamed_addr constant [17 x i8] c"missing timezone\00", align 1
@.str.257 = private unnamed_addr constant [26 x i8] c"(Y-M-D) %Y-%m-%d %H:%M:%S\00", align 1
@.str.258 = private unnamed_addr constant [7 x i8] c" TZ=%s\00", align 1
@.str.259 = private unnamed_addr constant [21 x i8] c"(Y-M-D) %s-%02d-%02d\00", align 1
@.str.260 = private unnamed_addr constant [10 x i8] c"-%02d%02d\00", align 1
@obstack_alloc_failed_handler = dso_local global ptr @print_and_abort, align 8
@stderr = external global ptr, align 8
@.str.296 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.1.294 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.2.295 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@file_name.297 = internal global ptr null, align 8
@stdin = external global ptr, align 8
@.str.298 = private unnamed_addr constant [7 x i8] c"gnulib\00", align 1
@.str.1.299 = private unnamed_addr constant [19 x i8] c"error closing file\00", align 1
@.str.2.300 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.3.301 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = external global i32, align 4
@internal_state.302 = internal global %struct.__mbstate_t zeroinitializer, align 4

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @usage(i32 noundef %status) #0 {
entry:
  %status.addr = alloca i32, align 4
  store i32 %status, ptr %status.addr, align 4
  %0 = load i32, ptr %status.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load ptr, ptr @stderr, align 8
  %call = call ptr @gettext(ptr noundef @.str) #21
  %2 = load ptr, ptr @program_name, align 8
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef %call, ptr noundef %2)
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %entry
  %call2 = call ptr @gettext(ptr noundef @.str.1) #21
  %3 = load ptr, ptr @program_name, align 8
  %call3 = call i32 (ptr, ...) @printf(ptr noundef %call2, ptr noundef %3)
  %call4 = call ptr @gettext(ptr noundef @.str.2) #21
  %4 = load ptr, ptr @stdout, align 8
  %call5 = call i32 @fputs_unlocked(ptr noundef %call4, ptr noundef %4)
  %call6 = call ptr @gettext(ptr noundef @.str.3) #21
  %5 = load ptr, ptr @stdout, align 8
  %call7 = call i32 @fputs_unlocked(ptr noundef %call6, ptr noundef %5)
  %call8 = call ptr @gettext(ptr noundef @.str.4) #21
  %6 = load ptr, ptr @stdout, align 8
  %call9 = call i32 @fputs_unlocked(ptr noundef %call8, ptr noundef %6)
  %call10 = call ptr @gettext(ptr noundef @.str.5) #21
  %7 = load ptr, ptr @stdout, align 8
  %call11 = call i32 @fputs_unlocked(ptr noundef %call10, ptr noundef %7)
  %call12 = call ptr @gettext(ptr noundef @.str.6) #21
  %8 = load ptr, ptr @stdout, align 8
  %call13 = call i32 @fputs_unlocked(ptr noundef %call12, ptr noundef %8)
  %call14 = call ptr @gettext(ptr noundef @.str.7) #21
  %9 = load ptr, ptr @stdout, align 8
  %call15 = call i32 @fputs_unlocked(ptr noundef %call14, ptr noundef %9)
  %call16 = call ptr @gettext(ptr noundef @.str.8) #21
  %10 = load ptr, ptr @stdout, align 8
  %call17 = call i32 @fputs_unlocked(ptr noundef %call16, ptr noundef %10)
  %call18 = call ptr @gettext(ptr noundef @.str.9) #21
  %11 = load ptr, ptr @stdout, align 8
  %call19 = call i32 @fputs_unlocked(ptr noundef %call18, ptr noundef %11)
  %call20 = call ptr @gettext(ptr noundef @.str.10) #21
  %12 = load ptr, ptr @stdout, align 8
  %call21 = call i32 @fputs_unlocked(ptr noundef %call20, ptr noundef %12)
  %call22 = call ptr @gettext(ptr noundef @.str.11) #21
  %13 = load ptr, ptr @stdout, align 8
  %call23 = call i32 @fputs_unlocked(ptr noundef %call22, ptr noundef %13)
  call void @emit_ancillary_info(ptr noundef @.str.12)
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end
  %14 = load i32, ptr %status.addr, align 4
  call void @exit(i32 noundef %14) #22
  unreachable
}

; Function Attrs: nounwind
declare ptr @gettext(ptr noundef) #1

declare i32 @fprintf(ptr noundef, ptr noundef, ...) #2

declare i32 @printf(ptr noundef, ...) #2

declare i32 @fputs_unlocked(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(ptr noundef %program) #3 {
entry:
  %program.addr = alloca ptr, align 8
  %infomap = alloca [7 x %struct.infomap], align 16
  %node = alloca ptr, align 8
  %map_prog = alloca ptr, align 8
  %lc_messages = alloca ptr, align 8
  %url_program = alloca ptr, align 8
  store ptr %program, ptr %program.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %infomap, ptr align 16 @__const.emit_ancillary_info.infomap, i64 112, i1 false)
  %0 = load ptr, ptr %program.addr, align 8
  store ptr %0, ptr %node, align 8
  %arraydecay = getelementptr inbounds [7 x %struct.infomap], ptr %infomap, i64 0, i64 0
  store ptr %arraydecay, ptr %map_prog, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load ptr, ptr %map_prog, align 8
  %program1 = getelementptr inbounds %struct.infomap, ptr %1, i32 0, i32 0
  %2 = load ptr, ptr %program1, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load ptr, ptr %program.addr, align 8
  %4 = load ptr, ptr %map_prog, align 8
  %program2 = getelementptr inbounds %struct.infomap, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %program2, align 8
  %call = call i32 @strcmp(ptr noundef %3, ptr noundef %5) #23
  %cmp = icmp eq i32 %call, 0
  %lnot = xor i1 %cmp, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load ptr, ptr %map_prog, align 8
  %incdec.ptr = getelementptr inbounds %struct.infomap, ptr %7, i32 1
  store ptr %incdec.ptr, ptr %map_prog, align 8
  br label %while.cond, !llvm.loop !6

while.end:                                        ; preds = %land.end
  %8 = load ptr, ptr %map_prog, align 8
  %node3 = getelementptr inbounds %struct.infomap, ptr %8, i32 0, i32 1
  %9 = load ptr, ptr %node3, align 8
  %tobool4 = icmp ne ptr %9, null
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %10 = load ptr, ptr %map_prog, align 8
  %node5 = getelementptr inbounds %struct.infomap, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %node5, align 8
  store ptr %11, ptr %node, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %call6 = call ptr @gettext(ptr noundef @.str.40) #21
  %call7 = call i32 (ptr, ...) @printf(ptr noundef %call6, ptr noundef @.str.23, ptr noundef @.str.41)
  %call8 = call ptr @setlocale(i32 noundef 5, ptr noundef null) #21
  store ptr %call8, ptr %lc_messages, align 8
  %12 = load ptr, ptr %lc_messages, align 8
  %tobool9 = icmp ne ptr %12, null
  br i1 %tobool9, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %if.end
  %13 = load ptr, ptr %lc_messages, align 8
  %call10 = call i32 @strncmp(ptr noundef %13, ptr noundef @.str.42, i64 noundef 3) #23
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then12, label %if.end15

if.then12:                                        ; preds = %land.lhs.true
  %call13 = call ptr @gettext(ptr noundef @.str.43) #21
  %14 = load ptr, ptr @stdout, align 8
  %call14 = call i32 @fputs_unlocked(ptr noundef %call13, ptr noundef %14)
  br label %if.end15

if.end15:                                         ; preds = %if.then12, %land.lhs.true, %if.end
  %15 = load ptr, ptr %program.addr, align 8
  %call16 = call i32 @strcmp(ptr noundef %15, ptr noundef @.str.32) #23
  %cmp17 = icmp eq i32 %call16, 0
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end15
  br label %cond.end

cond.false:                                       ; preds = %if.end15
  %16 = load ptr, ptr %program.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ @.str.44, %cond.true ], [ %16, %cond.false ]
  store ptr %cond, ptr %url_program, align 8
  %call18 = call ptr @gettext(ptr noundef @.str.45) #21
  %17 = load ptr, ptr %url_program, align 8
  %call19 = call i32 (ptr, ...) @printf(ptr noundef %call18, ptr noundef @.str.41, ptr noundef %17)
  %call20 = call ptr @gettext(ptr noundef @.str.46) #21
  %18 = load ptr, ptr %node, align 8
  %19 = load ptr, ptr %node, align 8
  %20 = load ptr, ptr %program.addr, align 8
  %cmp21 = icmp eq ptr %19, %20
  %21 = zext i1 %cmp21 to i64
  %cond22 = select i1 %cmp21, ptr @.str.47, ptr @.str.13
  %call23 = call i32 (ptr, ...) @printf(ptr noundef %call20, ptr noundef %18, ptr noundef %cond22)
  ret void
}

; Function Attrs: noreturn nounwind
declare void @exit(i32 noundef) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind willreturn memory(read)
declare i32 @strcmp(ptr noundef, ptr noundef) #6

; Function Attrs: nounwind
declare ptr @setlocale(i32 noundef, ptr noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare i32 @strncmp(ptr noundef, ptr noundef, i64 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 noundef %argc, ptr noundef %argv) #3 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca ptr, align 8
  %optc_status = alloca i32, align 4
  %prev_optc_status = alloca i32, align 4
  %operand_status = alloca [2 x i32], align 4
  %joption_count = alloca [2 x i32], align 4
  %fp1 = alloca ptr, align 8
  %fp2 = alloca ptr, align 8
  %optc = alloca i32, align 4
  %nfiles = alloca i32, align 4
  %i = alloca i32, align 4
  %val = alloca i64, align 8
  %is_j2 = alloca i8, align 1
  %newtab = alloca %struct.mcel_t, align 4
  %tmp = alloca %struct.mcel_t, align 4
  %tmp75 = alloca %struct.mcel_t, align 4
  %tmp78 = alloca %struct.mcel_t, align 4
  store i32 0, ptr %retval, align 4
  store i32 %argc, ptr %argc.addr, align 4
  store ptr %argv, ptr %argv.addr, align 8
  store i32 0, ptr %prev_optc_status, align 4
  call void @llvm.memset.p0.i64(ptr align 4 %joption_count, i8 0, i64 8, i1 false)
  store i32 0, ptr %nfiles, align 4
  %0 = load ptr, ptr %argv.addr, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %0, i64 0
  %1 = load ptr, ptr %arrayidx, align 8
  call void @set_program_name(ptr noundef %1)
  %call = call ptr @setlocale(i32 noundef 6, ptr noundef @.str.13) #21
  %call1 = call ptr @bindtextdomain(ptr noundef @.str.14, ptr noundef @.str.15) #21
  %call2 = call ptr @textdomain(ptr noundef @.str.14) #21
  %call3 = call zeroext i1 @hard_locale(i32 noundef 3)
  %frombool = zext i1 %call3 to i8
  store i8 %frombool, ptr @hard_LC_COLLATE, align 1
  %call4 = call i32 @atexit(ptr noundef @close_stdout) #21
  %call5 = call i32 @atexit(ptr noundef @free_spareline) #21
  store i8 1, ptr @print_pairables, align 1
  store i8 0, ptr @seen_unpairable, align 1
  store i8 0, ptr getelementptr inbounds ([2 x i8], ptr @issued_disorder_warning, i64 0, i64 1), align 1
  store i8 0, ptr @issued_disorder_warning, align 1
  store i32 0, ptr @check_input_order, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %2 = load i32, ptr %argc.addr, align 4
  %3 = load ptr, ptr %argv.addr, align 8
  %call6 = call i32 @getopt_long(i32 noundef %2, ptr noundef %3, ptr noundef @.str.16, ptr noundef @longopts, ptr noundef null) #21
  store i32 %call6, ptr %optc, align 4
  %cmp = icmp ne i32 %call6, -1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, ptr %optc_status, align 4
  %4 = load i32, ptr %optc, align 4
  switch i32 %4, label %sw.default [
    i32 118, label %sw.bb
    i32 97, label %sw.bb7
    i32 101, label %sw.bb17
    i32 105, label %sw.bb24
    i32 49, label %sw.bb25
    i32 50, label %sw.bb27
    i32 106, label %sw.bb29
    i32 111, label %sw.bb59
    i32 116, label %sw.bb66
    i32 122, label %sw.bb100
    i32 129, label %sw.bb101
    i32 128, label %sw.bb102
    i32 1, label %sw.bb103
    i32 130, label %sw.bb105
    i32 -130, label %sw.bb106
    i32 -131, label %sw.bb107
  ]

sw.bb:                                            ; preds = %while.body
  store i8 0, ptr @print_pairables, align 1
  br label %sw.bb7

sw.bb7:                                           ; preds = %sw.bb, %while.body
  %5 = load ptr, ptr @optarg, align 8
  %call8 = call i32 @xstrtol(ptr noundef %5, ptr noundef null, i32 noundef 10, ptr noundef %val, ptr noundef @.str.13)
  %cmp9 = icmp ne i32 %call8, 0
  br i1 %cmp9, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb7
  %6 = load i64, ptr %val, align 8
  %cmp10 = icmp ne i64 %6, 1
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load i64, ptr %val, align 8
  %cmp11 = icmp ne i64 %7, 2
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %sw.bb7
  %call12 = call ptr @gettext(ptr noundef @.str.17) #21
  %8 = load ptr, ptr @optarg, align 8
  %call13 = call ptr @quote(ptr noundef %8)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call12, ptr noundef %call13) #24
  unreachable

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %9 = load i64, ptr %val, align 8
  %cmp14 = icmp eq i64 %9, 1
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end
  store i8 1, ptr @print_unpairables_1, align 1
  br label %if.end16

if.else:                                          ; preds = %if.end
  store i8 1, ptr @print_unpairables_2, align 1
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then15
  br label %sw.epilog

sw.bb17:                                          ; preds = %while.body
  %10 = load ptr, ptr @empty_filler, align 8
  %tobool = icmp ne ptr %10, null
  br i1 %tobool, label %land.lhs.true18, label %if.end23

land.lhs.true18:                                  ; preds = %sw.bb17
  %11 = load ptr, ptr @empty_filler, align 8
  %12 = load ptr, ptr @optarg, align 8
  %call19 = call i32 @strcmp(ptr noundef %11, ptr noundef %12) #23
  %cmp20 = icmp eq i32 %call19, 0
  br i1 %cmp20, label %if.end23, label %if.then21

if.then21:                                        ; preds = %land.lhs.true18
  %call22 = call ptr @gettext(ptr noundef @.str.18) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call22) #24
  unreachable

if.end23:                                         ; preds = %land.lhs.true18, %sw.bb17
  %13 = load ptr, ptr @optarg, align 8
  store ptr %13, ptr @empty_filler, align 8
  br label %sw.epilog

sw.bb24:                                          ; preds = %while.body
  store i8 1, ptr @ignore_case, align 1
  br label %sw.epilog

sw.bb25:                                          ; preds = %while.body
  %14 = load ptr, ptr @optarg, align 8
  %call26 = call i64 @string_to_join_field(ptr noundef %14)
  call void @set_join_field(ptr noundef @join_field_1, i64 noundef %call26)
  br label %sw.epilog

sw.bb27:                                          ; preds = %while.body
  %15 = load ptr, ptr @optarg, align 8
  %call28 = call i64 @string_to_join_field(ptr noundef %15)
  call void @set_join_field(ptr noundef @join_field_2, i64 noundef %call28)
  br label %sw.epilog

sw.bb29:                                          ; preds = %while.body
  %16 = load ptr, ptr @optarg, align 8
  %arrayidx30 = getelementptr inbounds i8, ptr %16, i64 0
  %17 = load i8, ptr %arrayidx30, align 1
  %conv = sext i8 %17 to i32
  %cmp31 = icmp eq i32 %conv, 49
  br i1 %cmp31, label %land.lhs.true38, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %sw.bb29
  %18 = load ptr, ptr @optarg, align 8
  %arrayidx34 = getelementptr inbounds i8, ptr %18, i64 0
  %19 = load i8, ptr %arrayidx34, align 1
  %conv35 = sext i8 %19 to i32
  %cmp36 = icmp eq i32 %conv35, 50
  br i1 %cmp36, label %land.lhs.true38, label %if.else56

land.lhs.true38:                                  ; preds = %lor.lhs.false33, %sw.bb29
  %20 = load ptr, ptr @optarg, align 8
  %arrayidx39 = getelementptr inbounds i8, ptr %20, i64 1
  %21 = load i8, ptr %arrayidx39, align 1
  %tobool40 = icmp ne i8 %21, 0
  br i1 %tobool40, label %if.else56, label %land.lhs.true41

land.lhs.true41:                                  ; preds = %land.lhs.true38
  %22 = load ptr, ptr @optarg, align 8
  %23 = load ptr, ptr %argv.addr, align 8
  %24 = load i32, ptr @optind, align 4
  %sub = sub nsw i32 %24, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx42 = getelementptr inbounds ptr, ptr %23, i64 %idxprom
  %25 = load ptr, ptr %arrayidx42, align 8
  %add.ptr = getelementptr inbounds i8, ptr %25, i64 2
  %cmp43 = icmp eq ptr %22, %add.ptr
  br i1 %cmp43, label %if.then45, label %if.else56

if.then45:                                        ; preds = %land.lhs.true41
  %26 = load ptr, ptr @optarg, align 8
  %arrayidx46 = getelementptr inbounds i8, ptr %26, i64 0
  %27 = load i8, ptr %arrayidx46, align 1
  %conv47 = sext i8 %27 to i32
  %cmp48 = icmp eq i32 %conv47, 50
  %frombool50 = zext i1 %cmp48 to i8
  store i8 %frombool50, ptr %is_j2, align 1
  %28 = load i8, ptr %is_j2, align 1
  %tobool51 = trunc i8 %28 to i1
  %idxprom52 = zext i1 %tobool51 to i64
  %arrayidx53 = getelementptr inbounds [2 x i32], ptr %joption_count, i64 0, i64 %idxprom52
  %29 = load i32, ptr %arrayidx53, align 4
  %inc = add nsw i32 %29, 1
  store i32 %inc, ptr %arrayidx53, align 4
  %30 = load i8, ptr %is_j2, align 1
  %tobool54 = trunc i8 %30 to i1
  %conv55 = zext i1 %tobool54 to i32
  %add = add nsw i32 1, %conv55
  store i32 %add, ptr %optc_status, align 4
  br label %if.end58

if.else56:                                        ; preds = %land.lhs.true41, %land.lhs.true38, %lor.lhs.false33
  %31 = load ptr, ptr @optarg, align 8
  %call57 = call i64 @string_to_join_field(ptr noundef %31)
  call void @set_join_field(ptr noundef @join_field_1, i64 noundef %call57)
  %32 = load i64, ptr @join_field_1, align 8
  call void @set_join_field(ptr noundef @join_field_2, i64 noundef %32)
  br label %if.end58

if.end58:                                         ; preds = %if.else56, %if.then45
  br label %sw.epilog

sw.bb59:                                          ; preds = %while.body
  %33 = load ptr, ptr @optarg, align 8
  %call60 = call i32 @strcmp(ptr noundef %33, ptr noundef @.str.19) #23
  %cmp61 = icmp eq i32 %call60, 0
  br i1 %cmp61, label %if.then63, label %if.else64

if.then63:                                        ; preds = %sw.bb59
  store i8 1, ptr @autoformat, align 1
  br label %if.end65

if.else64:                                        ; preds = %sw.bb59
  %34 = load ptr, ptr @optarg, align 8
  call void @add_field_list(ptr noundef %34)
  store i32 3, ptr %optc_status, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  br label %sw.epilog

sw.bb66:                                          ; preds = %while.body
  %35 = load ptr, ptr @optarg, align 8
  %36 = load i8, ptr %35, align 1
  %tobool67 = icmp ne i8 %36, 0
  br i1 %tobool67, label %if.else70, label %if.then68

if.then68:                                        ; preds = %sw.bb66
  %call69 = call i64 @mcel_ch(i32 noundef 10, i64 noundef 1)
  store i64 %call69, ptr %tmp, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %newtab, ptr align 4 %tmp, i64 8, i1 false)
  br label %if.end88

if.else70:                                        ; preds = %sw.bb66
  %37 = load ptr, ptr @optarg, align 8
  %call71 = call i32 @strcmp(ptr noundef %37, ptr noundef @.str.20) #23
  %cmp72 = icmp eq i32 %call71, 0
  br i1 %cmp72, label %if.then74, label %if.else77

if.then74:                                        ; preds = %if.else70
  %call76 = call i64 @mcel_ch(i32 noundef 0, i64 noundef 1)
  store i64 %call76, ptr %tmp75, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %newtab, ptr align 4 %tmp75, i64 8, i1 false)
  store ptr @.str.13, ptr @output_separator, align 8
  br label %if.end87

if.else77:                                        ; preds = %if.else70
  %38 = load ptr, ptr @optarg, align 8
  %call79 = call i64 @mcel_scanz(ptr noundef %38)
  store i64 %call79, ptr %tmp78, align 4
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 %newtab, ptr align 4 %tmp78, i64 8, i1 false)
  %39 = load ptr, ptr @optarg, align 8
  %len = getelementptr inbounds %struct.mcel_t, ptr %newtab, i32 0, i32 2
  %40 = load i8, ptr %len, align 1
  %idxprom80 = zext i8 %40 to i64
  %arrayidx81 = getelementptr inbounds i8, ptr %39, i64 %idxprom80
  %41 = load i8, ptr %arrayidx81, align 1
  %tobool82 = icmp ne i8 %41, 0
  br i1 %tobool82, label %if.then83, label %if.end86

if.then83:                                        ; preds = %if.else77
  %call84 = call ptr @gettext(ptr noundef @.str.21) #21
  %42 = load ptr, ptr @optarg, align 8
  %call85 = call ptr @quote(ptr noundef %42)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call84, ptr noundef %call85) #24
  unreachable

if.end86:                                         ; preds = %if.else77
  %43 = load ptr, ptr @optarg, align 8
  store ptr %43, ptr @output_separator, align 8
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %if.then74
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.then68
  %44 = load i8, ptr getelementptr inbounds (%struct.mcel_t, ptr @tab, i32 0, i32 2), align 1
  %conv89 = zext i8 %44 to i32
  %tobool90 = icmp ne i32 %conv89, 0
  br i1 %tobool90, label %land.lhs.true91, label %if.end97

land.lhs.true91:                                  ; preds = %if.end88
  %45 = load i64, ptr @tab, align 4
  %46 = load i64, ptr %newtab, align 4
  %call92 = call i32 @mcel_cmp(i64 %45, i64 %46)
  %cmp93 = icmp ne i32 %call92, 0
  br i1 %cmp93, label %if.then95, label %if.end97

if.then95:                                        ; preds = %land.lhs.true91
  %call96 = call ptr @gettext(ptr noundef @.str.22) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call96) #24
  unreachable

if.end97:                                         ; preds = %land.lhs.true91, %if.end88
  call void @llvm.memcpy.p0.p0.i64(ptr align 4 @tab, ptr align 4 %newtab, i64 8, i1 false)
  %len98 = getelementptr inbounds %struct.mcel_t, ptr %newtab, i32 0, i32 2
  %47 = load i8, ptr %len98, align 1
  %conv99 = zext i8 %47 to i64
  store i64 %conv99, ptr @output_seplen, align 8
  br label %sw.epilog

sw.bb100:                                         ; preds = %while.body
  store i8 0, ptr @eolchar, align 1
  br label %sw.epilog

sw.bb101:                                         ; preds = %while.body
  store i32 2, ptr @check_input_order, align 4
  br label %sw.epilog

sw.bb102:                                         ; preds = %while.body
  store i32 1, ptr @check_input_order, align 4
  br label %sw.epilog

sw.bb103:                                         ; preds = %while.body
  %48 = load ptr, ptr @optarg, align 8
  %arraydecay = getelementptr inbounds [2 x i32], ptr %operand_status, i64 0, i64 0
  %arraydecay104 = getelementptr inbounds [2 x i32], ptr %joption_count, i64 0, i64 0
  call void @add_file_name(ptr noundef %48, ptr noundef @g_names, ptr noundef %arraydecay, ptr noundef %arraydecay104, ptr noundef %nfiles, ptr noundef %prev_optc_status, ptr noundef %optc_status)
  br label %sw.epilog

sw.bb105:                                         ; preds = %while.body
  store i8 1, ptr @join_header_lines, align 1
  br label %sw.epilog

sw.bb106:                                         ; preds = %while.body
  call void @usage(i32 noundef 0) #25
  unreachable

sw.bb107:                                         ; preds = %while.body
  %49 = load ptr, ptr @stdout, align 8
  %50 = load ptr, ptr @Version, align 8
  %call108 = call ptr @proper_name_lite(ptr noundef @.str.24, ptr noundef @.str.24)
  call void (ptr, ptr, ptr, ptr, ...) @version_etc(ptr noundef %49, ptr noundef @.str.12, ptr noundef @.str.23, ptr noundef %50, ptr noundef %call108, ptr noundef null)
  call void @exit(i32 noundef 0) #22
  unreachable

sw.default:                                       ; preds = %while.body
  call void @usage(i32 noundef 1) #25
  unreachable

sw.epilog:                                        ; preds = %sw.bb105, %sw.bb103, %sw.bb102, %sw.bb101, %sw.bb100, %if.end97, %if.end65, %if.end58, %sw.bb27, %sw.bb25, %sw.bb24, %if.end23, %if.end16
  %51 = load i32, ptr %optc_status, align 4
  store i32 %51, ptr %prev_optc_status, align 4
  br label %while.cond, !llvm.loop !8

while.end:                                        ; preds = %while.cond
  store i32 0, ptr %prev_optc_status, align 4
  br label %while.cond109

while.cond109:                                    ; preds = %while.body112, %while.end
  %52 = load i32, ptr @optind, align 4
  %53 = load i32, ptr %argc.addr, align 4
  %cmp110 = icmp slt i32 %52, %53
  br i1 %cmp110, label %while.body112, label %while.end118

while.body112:                                    ; preds = %while.cond109
  %54 = load ptr, ptr %argv.addr, align 8
  %55 = load i32, ptr @optind, align 4
  %inc113 = add nsw i32 %55, 1
  store i32 %inc113, ptr @optind, align 4
  %idxprom114 = sext i32 %55 to i64
  %arrayidx115 = getelementptr inbounds ptr, ptr %54, i64 %idxprom114
  %56 = load ptr, ptr %arrayidx115, align 8
  %arraydecay116 = getelementptr inbounds [2 x i32], ptr %operand_status, i64 0, i64 0
  %arraydecay117 = getelementptr inbounds [2 x i32], ptr %joption_count, i64 0, i64 0
  call void @add_file_name(ptr noundef %56, ptr noundef @g_names, ptr noundef %arraydecay116, ptr noundef %arraydecay117, ptr noundef %nfiles, ptr noundef %prev_optc_status, ptr noundef %optc_status)
  br label %while.cond109, !llvm.loop !9

while.end118:                                     ; preds = %while.cond109
  %57 = load i32, ptr %nfiles, align 4
  %cmp119 = icmp ne i32 %57, 2
  br i1 %cmp119, label %if.then121, label %if.end133

if.then121:                                       ; preds = %while.end118
  %58 = load i32, ptr %nfiles, align 4
  %cmp122 = icmp eq i32 %58, 0
  br i1 %cmp122, label %if.then124, label %if.else126

if.then124:                                       ; preds = %if.then121
  %call125 = call ptr @gettext(ptr noundef @.str.25) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call125) #24
  br label %if.end132

if.else126:                                       ; preds = %if.then121
  %call127 = call ptr @gettext(ptr noundef @.str.26) #21
  %59 = load ptr, ptr %argv.addr, align 8
  %60 = load i32, ptr %argc.addr, align 4
  %sub128 = sub nsw i32 %60, 1
  %idxprom129 = sext i32 %sub128 to i64
  %arrayidx130 = getelementptr inbounds ptr, ptr %59, i64 %idxprom129
  %61 = load ptr, ptr %arrayidx130, align 8
  %call131 = call ptr @quote(ptr noundef %61)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call127, ptr noundef %call131) #24
  br label %if.end132

if.end132:                                        ; preds = %if.else126, %if.then124
  call void @usage(i32 noundef 1) #25
  unreachable

if.end133:                                        ; preds = %while.end118
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end133
  %62 = load i32, ptr %i, align 4
  %cmp134 = icmp slt i32 %62, 2
  br i1 %cmp134, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %63 = load i32, ptr %i, align 4
  %idxprom136 = sext i32 %63 to i64
  %arrayidx137 = getelementptr inbounds [2 x i32], ptr %joption_count, i64 0, i64 %idxprom136
  %64 = load i32, ptr %arrayidx137, align 4
  %cmp138 = icmp ne i32 %64, 0
  br i1 %cmp138, label %if.then140, label %if.end143

if.then140:                                       ; preds = %for.body
  %65 = load i32, ptr %i, align 4
  %conv141 = sext i32 %65 to i64
  call void @set_join_field(ptr noundef @join_field_1, i64 noundef %conv141)
  %66 = load i32, ptr %i, align 4
  %conv142 = sext i32 %66 to i64
  call void @set_join_field(ptr noundef @join_field_2, i64 noundef %conv142)
  br label %if.end143

if.end143:                                        ; preds = %if.then140, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end143
  %67 = load i32, ptr %i, align 4
  %inc144 = add nsw i32 %67, 1
  store i32 %inc144, ptr %i, align 4
  br label %for.cond, !llvm.loop !10

for.end:                                          ; preds = %for.cond
  %68 = load i64, ptr @join_field_1, align 8
  %cmp145 = icmp slt i64 %68, 0
  br i1 %cmp145, label %if.then147, label %if.end148

if.then147:                                       ; preds = %for.end
  store i64 0, ptr @join_field_1, align 8
  br label %if.end148

if.end148:                                        ; preds = %if.then147, %for.end
  %69 = load i64, ptr @join_field_2, align 8
  %cmp149 = icmp slt i64 %69, 0
  br i1 %cmp149, label %if.then151, label %if.end152

if.then151:                                       ; preds = %if.end148
  store i64 0, ptr @join_field_2, align 8
  br label %if.end152

if.end152:                                        ; preds = %if.then151, %if.end148
  %70 = load ptr, ptr @g_names, align 16
  %call153 = call i32 @strcmp(ptr noundef %70, ptr noundef @.str.27) #23
  %cmp154 = icmp eq i32 %call153, 0
  br i1 %cmp154, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end152
  %71 = load ptr, ptr @stdin, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end152
  %72 = load ptr, ptr @g_names, align 16
  %call156 = call ptr @fopen_safer(ptr noundef %72, ptr noundef @.str.28)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %71, %cond.true ], [ %call156, %cond.false ]
  store ptr %cond, ptr %fp1, align 8
  %73 = load ptr, ptr %fp1, align 8
  %tobool157 = icmp ne ptr %73, null
  br i1 %tobool157, label %if.end161, label %if.then158

if.then158:                                       ; preds = %cond.end
  %call159 = call ptr @__errno_location() #26
  %74 = load i32, ptr %call159, align 4
  %75 = load ptr, ptr @g_names, align 16
  %call160 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %75)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %74, ptr noundef @.str.29, ptr noundef %call160) #24
  unreachable

if.end161:                                        ; preds = %cond.end
  %76 = load ptr, ptr getelementptr inbounds ([2 x ptr], ptr @g_names, i64 0, i64 1), align 8
  %call162 = call i32 @strcmp(ptr noundef %76, ptr noundef @.str.27) #23
  %cmp163 = icmp eq i32 %call162, 0
  br i1 %cmp163, label %cond.true165, label %cond.false166

cond.true165:                                     ; preds = %if.end161
  %77 = load ptr, ptr @stdin, align 8
  br label %cond.end168

cond.false166:                                    ; preds = %if.end161
  %78 = load ptr, ptr getelementptr inbounds ([2 x ptr], ptr @g_names, i64 0, i64 1), align 8
  %call167 = call ptr @fopen_safer(ptr noundef %78, ptr noundef @.str.28)
  br label %cond.end168

cond.end168:                                      ; preds = %cond.false166, %cond.true165
  %cond169 = phi ptr [ %77, %cond.true165 ], [ %call167, %cond.false166 ]
  store ptr %cond169, ptr %fp2, align 8
  %79 = load ptr, ptr %fp2, align 8
  %tobool170 = icmp ne ptr %79, null
  br i1 %tobool170, label %if.end174, label %if.then171

if.then171:                                       ; preds = %cond.end168
  %call172 = call ptr @__errno_location() #26
  %80 = load i32, ptr %call172, align 4
  %81 = load ptr, ptr getelementptr inbounds ([2 x ptr], ptr @g_names, i64 0, i64 1), align 8
  %call173 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %81)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %80, ptr noundef @.str.29, ptr noundef %call173) #24
  unreachable

if.end174:                                        ; preds = %cond.end168
  %82 = load ptr, ptr %fp1, align 8
  %83 = load ptr, ptr %fp2, align 8
  %cmp175 = icmp eq ptr %82, %83
  br i1 %cmp175, label %if.then177, label %if.end180

if.then177:                                       ; preds = %if.end174
  %call178 = call ptr @__errno_location() #26
  %84 = load i32, ptr %call178, align 4
  %call179 = call ptr @gettext(ptr noundef @.str.30) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %84, ptr noundef %call179) #24
  unreachable

if.end180:                                        ; preds = %if.end174
  %85 = load ptr, ptr %fp1, align 8
  %86 = load ptr, ptr %fp2, align 8
  call void @system_join(ptr noundef %85, ptr noundef %86)
  %87 = load ptr, ptr %fp1, align 8
  %call181 = call i32 @rpl_fclose(ptr noundef %87)
  %cmp182 = icmp ne i32 %call181, 0
  br i1 %cmp182, label %if.then184, label %if.end187

if.then184:                                       ; preds = %if.end180
  %call185 = call ptr @__errno_location() #26
  %88 = load i32, ptr %call185, align 4
  %89 = load ptr, ptr @g_names, align 16
  %call186 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %89)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %88, ptr noundef @.str.29, ptr noundef %call186) #24
  unreachable

if.end187:                                        ; preds = %if.end180
  %90 = load ptr, ptr %fp2, align 8
  %call188 = call i32 @rpl_fclose(ptr noundef %90)
  %cmp189 = icmp ne i32 %call188, 0
  br i1 %cmp189, label %if.then191, label %if.end194

if.then191:                                       ; preds = %if.end187
  %call192 = call ptr @__errno_location() #26
  %91 = load i32, ptr %call192, align 4
  %92 = load ptr, ptr getelementptr inbounds ([2 x ptr], ptr @g_names, i64 0, i64 1), align 8
  %call193 = call ptr @quotearg_n_style_colon(i32 noundef 0, i32 noundef 3, ptr noundef %92)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %91, ptr noundef @.str.29, ptr noundef %call193) #24
  unreachable

if.end194:                                        ; preds = %if.end187
  %93 = load i8, ptr @issued_disorder_warning, align 1
  %tobool195 = trunc i8 %93 to i1
  br i1 %tobool195, label %if.then200, label %lor.lhs.false197

lor.lhs.false197:                                 ; preds = %if.end194
  %94 = load i8, ptr getelementptr inbounds ([2 x i8], ptr @issued_disorder_warning, i64 0, i64 1), align 1
  %tobool198 = trunc i8 %94 to i1
  br i1 %tobool198, label %if.then200, label %if.else202

if.then200:                                       ; preds = %lor.lhs.false197, %if.end194
  %call201 = call ptr @gettext(ptr noundef @.str.31) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call201) #24
  unreachable

if.else202:                                       ; preds = %lor.lhs.false197
  ret i32 0
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nounwind
declare ptr @bindtextdomain(ptr noundef, ptr noundef) #1

; Function Attrs: nounwind
declare ptr @textdomain(ptr noundef) #1

; Function Attrs: nounwind
declare i32 @atexit(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_spareline() #3 {
entry:
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, ptr %i, align 8
  %cmp = icmp ult i64 %0, 2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, ptr %i, align 8
  %arrayidx = getelementptr inbounds [2 x ptr], ptr @spareline, i64 0, i64 %1
  %2 = load ptr, ptr %arrayidx, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i64, ptr %i, align 8
  %arrayidx1 = getelementptr inbounds [2 x ptr], ptr @spareline, i64 0, i64 %3
  %4 = load ptr, ptr %arrayidx1, align 8
  call void @freeline(ptr noundef %4)
  %5 = load i64, ptr %i, align 8
  %arrayidx2 = getelementptr inbounds [2 x ptr], ptr @spareline, i64 0, i64 %5
  %6 = load ptr, ptr %arrayidx2, align 8
  call void @free(ptr noundef %6) #21
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i64, ptr %i, align 8
  %inc = add nsw i64 %7, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !11

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind
declare i32 @getopt_long(i32 noundef, ptr noundef, ptr noundef, ptr noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @string_to_join_field(ptr noundef %str) #3 {
entry:
  %str.addr = alloca ptr, align 8
  %val = alloca i64, align 8
  %s_err = alloca i32, align 4
  store ptr %str, ptr %str.addr, align 8
  %0 = load ptr, ptr %str.addr, align 8
  %call = call i32 @xstrtoimax(ptr noundef %0, ptr noundef null, i32 noundef 10, ptr noundef %val, ptr noundef @.str.13)
  store i32 %call, ptr %s_err, align 4
  %1 = load i32, ptr %s_err, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, ptr %s_err, align 4
  %cmp1 = icmp eq i32 %2, 0
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %3 = load i64, ptr %val, align 8
  %cmp2 = icmp slt i64 9223372036854775807, %3
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true, %entry
  store i64 9223372036854775807, ptr %val, align 8
  br label %if.end9

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %4 = load i32, ptr %s_err, align 4
  %cmp3 = icmp ne i32 %4, 0
  br i1 %cmp3, label %if.then6, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.else
  %5 = load i64, ptr %val, align 8
  %cmp5 = icmp sle i64 %5, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %lor.lhs.false4, %if.else
  %call7 = call ptr @gettext(ptr noundef @.str.56) #21
  %6 = load ptr, ptr %str.addr, align 8
  %call8 = call ptr @quote(ptr noundef %6)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call7, ptr noundef %call8) #24
  unreachable

if.end:                                           ; preds = %lor.lhs.false4
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %7 = load i64, ptr %val, align 8
  %sub = sub nsw i64 %7, 1
  ret i64 %sub
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_join_field(ptr noundef %var, i64 noundef %val) #3 {
entry:
  %var.addr = alloca ptr, align 8
  %val.addr = alloca i64, align 8
  store ptr %var, ptr %var.addr, align 8
  store i64 %val, ptr %val.addr, align 8
  %0 = load ptr, ptr %var.addr, align 8
  %1 = load i64, ptr %0, align 8
  %cmp = icmp sle i64 0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load ptr, ptr %var.addr, align 8
  %3 = load i64, ptr %2, align 8
  %4 = load i64, ptr %val.addr, align 8
  %cmp1 = icmp ne i64 %3, %4
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call = call ptr @gettext(ptr noundef @.str.55) #21
  %5 = load ptr, ptr %var.addr, align 8
  %6 = load i64, ptr %5, align 8
  %7 = load i64, ptr %val.addr, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call, i64 noundef %6, i64 noundef %7) #24
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  %8 = load i64, ptr %val.addr, align 8
  %9 = load ptr, ptr %var.addr, align 8
  store i64 %8, ptr %9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @add_field_list(ptr noundef %str) #3 {
entry:
  %str.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %file_index = alloca i32, align 4
  %field_index = alloca i64, align 8
  %spec_item = alloca ptr, align 8
  %g = alloca %struct.mcel_t, align 4
  store ptr %str, ptr %str.addr, align 8
  %0 = load ptr, ptr %str.addr, align 8
  store ptr %0, ptr %p, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %1 = load ptr, ptr %p, align 8
  store ptr %1, ptr %spec_item, align 8
  %2 = load ptr, ptr %spec_item, align 8
  %call = call ptr @skip_str_matching(ptr noundef %2, ptr noundef @comma_or_blank, i1 noundef zeroext false)
  store ptr %call, ptr %p, align 8
  %3 = load ptr, ptr %p, align 8
  %4 = load i8, ptr %3, align 1
  %tobool = icmp ne i8 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %5 = load ptr, ptr %p, align 8
  %call1 = call i64 @mcel_scanz(ptr noundef %5)
  store i64 %call1, ptr %g, align 4
  %6 = load ptr, ptr %p, align 8
  store i8 0, ptr %6, align 1
  %len = getelementptr inbounds %struct.mcel_t, ptr %g, i32 0, i32 2
  %7 = load i8, ptr %len, align 1
  %conv = zext i8 %7 to i32
  %8 = load ptr, ptr %p, align 8
  %idx.ext = sext i32 %conv to i64
  %add.ptr = getelementptr inbounds i8, ptr %8, i64 %idx.ext
  store ptr %add.ptr, ptr %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %9 = load ptr, ptr %spec_item, align 8
  call void @decode_field_spec(ptr noundef %9, ptr noundef %file_index, ptr noundef %field_index)
  %10 = load i32, ptr %file_index, align 4
  %11 = load i64, ptr %field_index, align 8
  call void @add_field(i32 noundef %10, i64 noundef %11)
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %12 = load ptr, ptr %p, align 8
  %13 = load i8, ptr %12, align 1
  %tobool2 = icmp ne i8 %13, 0
  br i1 %tobool2, label %do.body, label %do.end, !llvm.loop !12

do.end:                                           ; preds = %do.cond
  ret void
}

declare i64 @mcel_ch(i32 noundef, i64 noundef) #2

declare i64 @mcel_scanz(ptr noundef) #2

declare i32 @mcel_cmp(i64, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @add_file_name(ptr noundef %name, ptr noundef %names, ptr noundef %operand_status, ptr noundef %joption_count, ptr noundef %nfiles, ptr noundef %prev_optc_status, ptr noundef %optc_status) #3 {
entry:
  %name.addr = alloca ptr, align 8
  %names.addr = alloca ptr, align 8
  %operand_status.addr = alloca ptr, align 8
  %joption_count.addr = alloca ptr, align 8
  %nfiles.addr = alloca ptr, align 8
  %prev_optc_status.addr = alloca ptr, align 8
  %optc_status.addr = alloca ptr, align 8
  %n = alloca i32, align 4
  %op0 = alloca i8, align 1
  %arg = alloca ptr, align 8
  store ptr %name, ptr %name.addr, align 8
  store ptr %names, ptr %names.addr, align 8
  store ptr %operand_status, ptr %operand_status.addr, align 8
  store ptr %joption_count, ptr %joption_count.addr, align 8
  store ptr %nfiles, ptr %nfiles.addr, align 8
  store ptr %prev_optc_status, ptr %prev_optc_status.addr, align 8
  store ptr %optc_status, ptr %optc_status.addr, align 8
  %0 = load ptr, ptr %nfiles.addr, align 8
  %1 = load i32, ptr %0, align 4
  store i32 %1, ptr %n, align 4
  %2 = load i32, ptr %n, align 4
  %cmp = icmp eq i32 %2, 2
  br i1 %cmp, label %if.then, label %if.end21

if.then:                                          ; preds = %entry
  %3 = load ptr, ptr %operand_status.addr, align 8
  %arrayidx = getelementptr inbounds i32, ptr %3, i64 0
  %4 = load i32, ptr %arrayidx, align 4
  %cmp1 = icmp eq i32 %4, 0
  %frombool = zext i1 %cmp1 to i8
  store i8 %frombool, ptr %op0, align 1
  %5 = load ptr, ptr %names.addr, align 8
  %6 = load i8, ptr %op0, align 1
  %tobool = trunc i8 %6 to i1
  %idxprom = zext i1 %tobool to i64
  %arrayidx2 = getelementptr inbounds ptr, ptr %5, i64 %idxprom
  %7 = load ptr, ptr %arrayidx2, align 8
  store ptr %7, ptr %arg, align 8
  %8 = load ptr, ptr %operand_status.addr, align 8
  %9 = load i8, ptr %op0, align 1
  %tobool3 = trunc i8 %9 to i1
  %idxprom4 = zext i1 %tobool3 to i64
  %arrayidx5 = getelementptr inbounds i32, ptr %8, i64 %idxprom4
  %10 = load i32, ptr %arrayidx5, align 4
  switch i32 %10, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb7
    i32 2, label %sw.bb10
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.then
  %call = call ptr @gettext(ptr noundef @.str.63) #21
  %11 = load ptr, ptr %name.addr, align 8
  %call6 = call ptr @quotearg_style(i32 noundef 4, ptr noundef %11)
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef %call, ptr noundef %call6) #24
  call void @usage(i32 noundef 1) #25
  unreachable

sw.bb7:                                           ; preds = %if.then
  %12 = load ptr, ptr %joption_count.addr, align 8
  %arrayidx8 = getelementptr inbounds i32, ptr %12, i64 0
  %13 = load i32, ptr %arrayidx8, align 4
  %dec = add nsw i32 %13, -1
  store i32 %dec, ptr %arrayidx8, align 4
  %14 = load ptr, ptr %arg, align 8
  %call9 = call i64 @string_to_join_field(ptr noundef %14)
  call void @set_join_field(ptr noundef @join_field_1, i64 noundef %call9)
  br label %sw.epilog

sw.bb10:                                          ; preds = %if.then
  %15 = load ptr, ptr %joption_count.addr, align 8
  %arrayidx11 = getelementptr inbounds i32, ptr %15, i64 1
  %16 = load i32, ptr %arrayidx11, align 4
  %dec12 = add nsw i32 %16, -1
  store i32 %dec12, ptr %arrayidx11, align 4
  %17 = load ptr, ptr %arg, align 8
  %call13 = call i64 @string_to_join_field(ptr noundef %17)
  call void @set_join_field(ptr noundef @join_field_2, i64 noundef %call13)
  br label %sw.epilog

sw.bb14:                                          ; preds = %if.then
  %18 = load ptr, ptr %arg, align 8
  call void @add_field_list(ptr noundef %18)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb14, %sw.bb10, %sw.bb7, %if.then
  %19 = load i8, ptr %op0, align 1
  %tobool15 = trunc i8 %19 to i1
  br i1 %tobool15, label %if.end, label %if.then16

if.then16:                                        ; preds = %sw.epilog
  %20 = load ptr, ptr %operand_status.addr, align 8
  %arrayidx17 = getelementptr inbounds i32, ptr %20, i64 1
  %21 = load i32, ptr %arrayidx17, align 4
  %22 = load ptr, ptr %operand_status.addr, align 8
  %arrayidx18 = getelementptr inbounds i32, ptr %22, i64 0
  store i32 %21, ptr %arrayidx18, align 4
  %23 = load ptr, ptr %names.addr, align 8
  %arrayidx19 = getelementptr inbounds ptr, ptr %23, i64 1
  %24 = load ptr, ptr %arrayidx19, align 8
  %25 = load ptr, ptr %names.addr, align 8
  %arrayidx20 = getelementptr inbounds ptr, ptr %25, i64 0
  store ptr %24, ptr %arrayidx20, align 8
  br label %if.end

if.end:                                           ; preds = %if.then16, %sw.epilog
  store i32 1, ptr %n, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.end, %entry
  %26 = load ptr, ptr %prev_optc_status.addr, align 8
  %27 = load i32, ptr %26, align 4
  %28 = load ptr, ptr %operand_status.addr, align 8
  %29 = load i32, ptr %n, align 4
  %idxprom22 = sext i32 %29 to i64
  %arrayidx23 = getelementptr inbounds i32, ptr %28, i64 %idxprom22
  store i32 %27, ptr %arrayidx23, align 4
  %30 = load ptr, ptr %name.addr, align 8
  %31 = load ptr, ptr %names.addr, align 8
  %32 = load i32, ptr %n, align 4
  %idxprom24 = sext i32 %32 to i64
  %arrayidx25 = getelementptr inbounds ptr, ptr %31, i64 %idxprom24
  store ptr %30, ptr %arrayidx25, align 8
  %33 = load i32, ptr %n, align 4
  %add = add nsw i32 %33, 1
  %34 = load ptr, ptr %nfiles.addr, align 8
  store i32 %add, ptr %34, align 4
  %35 = load ptr, ptr %prev_optc_status.addr, align 8
  %36 = load i32, ptr %35, align 4
  %cmp26 = icmp eq i32 %36, 3
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end21
  %37 = load ptr, ptr %optc_status.addr, align 8
  store i32 3, ptr %37, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %if.end21
  ret void
}

; Function Attrs: nounwind willreturn memory(none)
declare ptr @__errno_location() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal void @system_join(ptr noundef %fp1, ptr noundef %fp2) #3 {
entry:
  %fp1.addr = alloca ptr, align 8
  %fp2.addr = alloca ptr, align 8
  %seq1 = alloca %struct.seq, align 8
  %seq2 = alloca %struct.seq, align 8
  %diff = alloca i32, align 4
  %eof1 = alloca i8, align 1
  %eof2 = alloca i8, align 1
  %hline1 = alloca ptr, align 8
  %hline2 = alloca ptr, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %tmp = alloca ptr, align 8
  %tmp141 = alloca ptr, align 8
  %line = alloca ptr, align 8
  %checktail = alloca i8, align 1
  store ptr %fp1, ptr %fp1.addr, align 8
  store ptr %fp2, ptr %fp2.addr, align 8
  %0 = load ptr, ptr %fp1.addr, align 8
  call void @fadvise(ptr noundef %0, i32 noundef 2)
  %1 = load ptr, ptr %fp2.addr, align 8
  call void @fadvise(ptr noundef %1, i32 noundef 2)
  call void @initseq(ptr noundef %seq1)
  %2 = load ptr, ptr %fp1.addr, align 8
  %call = call zeroext i1 @getseq(ptr noundef %2, ptr noundef %seq1, i32 noundef 1)
  call void @initseq(ptr noundef %seq2)
  %3 = load ptr, ptr %fp2.addr, align 8
  %call1 = call zeroext i1 @getseq(ptr noundef %3, ptr noundef %seq2, i32 noundef 2)
  %4 = load i8, ptr @autoformat, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %count = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %5 = load i64, ptr %count, align 8
  %tobool2 = icmp ne i64 %5, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %lines = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %6 = load ptr, ptr %lines, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %6, i64 0
  %7 = load ptr, ptr %arrayidx, align 8
  %nfields = getelementptr inbounds %struct.line, ptr %7, i32 0, i32 1
  %8 = load i64, ptr %nfields, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, ptr @autocount_1, align 8
  %count3 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %9 = load i64, ptr %count3, align 8
  %tobool4 = icmp ne i64 %9, 0
  br i1 %tobool4, label %cond.true5, label %cond.false9

cond.true5:                                       ; preds = %cond.end
  %lines6 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %10 = load ptr, ptr %lines6, align 8
  %arrayidx7 = getelementptr inbounds ptr, ptr %10, i64 0
  %11 = load ptr, ptr %arrayidx7, align 8
  %nfields8 = getelementptr inbounds %struct.line, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %nfields8, align 8
  br label %cond.end10

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %cond.true5
  %cond11 = phi i64 [ %12, %cond.true5 ], [ 0, %cond.false9 ]
  store i64 %cond11, ptr @autocount_2, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end10, %entry
  %13 = load i8, ptr @join_header_lines, align 1
  %tobool12 = trunc i8 %13 to i1
  br i1 %tobool12, label %land.lhs.true, label %if.end44

land.lhs.true:                                    ; preds = %if.end
  %count13 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %14 = load i64, ptr %count13, align 8
  %tobool14 = icmp ne i64 %14, 0
  br i1 %tobool14, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %count15 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %15 = load i64, ptr %count15, align 8
  %tobool16 = icmp ne i64 %15, 0
  br i1 %tobool16, label %if.then17, label %if.end44

if.then17:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %count18 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %16 = load i64, ptr %count18, align 8
  %tobool19 = icmp ne i64 %16, 0
  br i1 %tobool19, label %cond.true20, label %cond.false23

cond.true20:                                      ; preds = %if.then17
  %lines21 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %17 = load ptr, ptr %lines21, align 8
  %arrayidx22 = getelementptr inbounds ptr, ptr %17, i64 0
  %18 = load ptr, ptr %arrayidx22, align 8
  br label %cond.end24

cond.false23:                                     ; preds = %if.then17
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true20
  %cond25 = phi ptr [ %18, %cond.true20 ], [ @uni_blank, %cond.false23 ]
  store ptr %cond25, ptr %hline1, align 8
  %count26 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %19 = load i64, ptr %count26, align 8
  %tobool27 = icmp ne i64 %19, 0
  br i1 %tobool27, label %cond.true28, label %cond.false31

cond.true28:                                      ; preds = %cond.end24
  %lines29 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %20 = load ptr, ptr %lines29, align 8
  %arrayidx30 = getelementptr inbounds ptr, ptr %20, i64 0
  %21 = load ptr, ptr %arrayidx30, align 8
  br label %cond.end32

cond.false31:                                     ; preds = %cond.end24
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false31, %cond.true28
  %cond33 = phi ptr [ %21, %cond.true28 ], [ @uni_blank, %cond.false31 ]
  store ptr %cond33, ptr %hline2, align 8
  %22 = load ptr, ptr %hline1, align 8
  %23 = load ptr, ptr %hline2, align 8
  call void @prjoin(ptr noundef %22, ptr noundef %23)
  store ptr null, ptr @prevline, align 16
  store ptr null, ptr getelementptr inbounds ([2 x ptr], ptr @prevline, i64 0, i64 1), align 8
  %count34 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %24 = load i64, ptr %count34, align 8
  %tobool35 = icmp ne i64 %24, 0
  br i1 %tobool35, label %if.then36, label %if.end38

if.then36:                                        ; preds = %cond.end32
  %25 = load ptr, ptr %fp1.addr, align 8
  %call37 = call zeroext i1 @advance_seq(ptr noundef %25, ptr noundef %seq1, i1 noundef zeroext true, i32 noundef 1)
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %cond.end32
  %count39 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %26 = load i64, ptr %count39, align 8
  %tobool40 = icmp ne i64 %26, 0
  br i1 %tobool40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end38
  %27 = load ptr, ptr %fp2.addr, align 8
  %call42 = call zeroext i1 @advance_seq(ptr noundef %27, ptr noundef %seq2, i1 noundef zeroext true, i32 noundef 2)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %if.end38
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %lor.lhs.false, %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end159, %if.end68, %if.end59, %if.end44
  %count45 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %28 = load i64, ptr %count45, align 8
  %tobool46 = icmp ne i64 %28, 0
  br i1 %tobool46, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %count47 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %29 = load i64, ptr %count47, align 8
  %tobool48 = icmp ne i64 %29, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %30 = phi i1 [ false, %while.cond ], [ %tobool48, %land.rhs ]
  br i1 %30, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %lines49 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %31 = load ptr, ptr %lines49, align 8
  %arrayidx50 = getelementptr inbounds ptr, ptr %31, i64 0
  %32 = load ptr, ptr %arrayidx50, align 8
  %lines51 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %33 = load ptr, ptr %lines51, align 8
  %arrayidx52 = getelementptr inbounds ptr, ptr %33, i64 0
  %34 = load ptr, ptr %arrayidx52, align 8
  %35 = load i64, ptr @join_field_1, align 8
  %36 = load i64, ptr @join_field_2, align 8
  %call53 = call i32 @keycmp(ptr noundef %32, ptr noundef %34, i64 noundef %35, i64 noundef %36)
  store i32 %call53, ptr %diff, align 4
  %37 = load i32, ptr %diff, align 4
  %cmp = icmp slt i32 %37, 0
  br i1 %cmp, label %if.then54, label %if.end61

if.then54:                                        ; preds = %while.body
  %38 = load i8, ptr @print_unpairables_1, align 1
  %tobool55 = trunc i8 %38 to i1
  br i1 %tobool55, label %if.then56, label %if.end59

if.then56:                                        ; preds = %if.then54
  %lines57 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %39 = load ptr, ptr %lines57, align 8
  %arrayidx58 = getelementptr inbounds ptr, ptr %39, i64 0
  %40 = load ptr, ptr %arrayidx58, align 8
  call void @prjoin(ptr noundef %40, ptr noundef @uni_blank)
  br label %if.end59

if.end59:                                         ; preds = %if.then56, %if.then54
  %41 = load ptr, ptr %fp1.addr, align 8
  %call60 = call zeroext i1 @advance_seq(ptr noundef %41, ptr noundef %seq1, i1 noundef zeroext true, i32 noundef 1)
  store i8 1, ptr @seen_unpairable, align 1
  br label %while.cond, !llvm.loop !13

if.end61:                                         ; preds = %while.body
  %42 = load i32, ptr %diff, align 4
  %cmp62 = icmp sgt i32 %42, 0
  br i1 %cmp62, label %if.then63, label %if.end70

if.then63:                                        ; preds = %if.end61
  %43 = load i8, ptr @print_unpairables_2, align 1
  %tobool64 = trunc i8 %43 to i1
  br i1 %tobool64, label %if.then65, label %if.end68

if.then65:                                        ; preds = %if.then63
  %lines66 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %44 = load ptr, ptr %lines66, align 8
  %arrayidx67 = getelementptr inbounds ptr, ptr %44, i64 0
  %45 = load ptr, ptr %arrayidx67, align 8
  call void @prjoin(ptr noundef @uni_blank, ptr noundef %45)
  br label %if.end68

if.end68:                                         ; preds = %if.then65, %if.then63
  %46 = load ptr, ptr %fp2.addr, align 8
  %call69 = call zeroext i1 @advance_seq(ptr noundef %46, ptr noundef %seq2, i1 noundef zeroext true, i32 noundef 2)
  store i8 1, ptr @seen_unpairable, align 1
  br label %while.cond, !llvm.loop !13

if.end70:                                         ; preds = %if.end61
  store i8 0, ptr %eof1, align 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end70
  %47 = load ptr, ptr %fp1.addr, align 8
  %call71 = call zeroext i1 @advance_seq(ptr noundef %47, ptr noundef %seq1, i1 noundef zeroext false, i32 noundef 1)
  br i1 %call71, label %if.end74, label %if.then72

if.then72:                                        ; preds = %do.body
  store i8 1, ptr %eof1, align 1
  %count73 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %48 = load i64, ptr %count73, align 8
  %inc = add nsw i64 %48, 1
  store i64 %inc, ptr %count73, align 8
  br label %do.end

if.end74:                                         ; preds = %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end74
  %lines75 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %49 = load ptr, ptr %lines75, align 8
  %count76 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %50 = load i64, ptr %count76, align 8
  %sub = sub nsw i64 %50, 1
  %arrayidx77 = getelementptr inbounds ptr, ptr %49, i64 %sub
  %51 = load ptr, ptr %arrayidx77, align 8
  %lines78 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %52 = load ptr, ptr %lines78, align 8
  %arrayidx79 = getelementptr inbounds ptr, ptr %52, i64 0
  %53 = load ptr, ptr %arrayidx79, align 8
  %54 = load i64, ptr @join_field_1, align 8
  %55 = load i64, ptr @join_field_2, align 8
  %call80 = call i32 @keycmp(ptr noundef %51, ptr noundef %53, i64 noundef %54, i64 noundef %55)
  %tobool81 = icmp ne i32 %call80, 0
  %lnot = xor i1 %tobool81, true
  br i1 %lnot, label %do.body, label %do.end, !llvm.loop !14

do.end:                                           ; preds = %do.cond, %if.then72
  store i8 0, ptr %eof2, align 1
  br label %do.body82

do.body82:                                        ; preds = %do.cond88, %do.end
  %56 = load ptr, ptr %fp2.addr, align 8
  %call83 = call zeroext i1 @advance_seq(ptr noundef %56, ptr noundef %seq2, i1 noundef zeroext false, i32 noundef 2)
  br i1 %call83, label %if.end87, label %if.then84

if.then84:                                        ; preds = %do.body82
  store i8 1, ptr %eof2, align 1
  %count85 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %57 = load i64, ptr %count85, align 8
  %inc86 = add nsw i64 %57, 1
  store i64 %inc86, ptr %count85, align 8
  br label %do.end98

if.end87:                                         ; preds = %do.body82
  br label %do.cond88

do.cond88:                                        ; preds = %if.end87
  %lines89 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %58 = load ptr, ptr %lines89, align 8
  %arrayidx90 = getelementptr inbounds ptr, ptr %58, i64 0
  %59 = load ptr, ptr %arrayidx90, align 8
  %lines91 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %60 = load ptr, ptr %lines91, align 8
  %count92 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %61 = load i64, ptr %count92, align 8
  %sub93 = sub nsw i64 %61, 1
  %arrayidx94 = getelementptr inbounds ptr, ptr %60, i64 %sub93
  %62 = load ptr, ptr %arrayidx94, align 8
  %63 = load i64, ptr @join_field_1, align 8
  %64 = load i64, ptr @join_field_2, align 8
  %call95 = call i32 @keycmp(ptr noundef %59, ptr noundef %62, i64 noundef %63, i64 noundef %64)
  %tobool96 = icmp ne i32 %call95, 0
  %lnot97 = xor i1 %tobool96, true
  br i1 %lnot97, label %do.body82, label %do.end98, !llvm.loop !15

do.end98:                                         ; preds = %do.cond88, %if.then84
  %65 = load i8, ptr @print_pairables, align 1
  %tobool99 = trunc i8 %65 to i1
  br i1 %tobool99, label %if.then100, label %if.end117

if.then100:                                       ; preds = %do.end98
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc114, %if.then100
  %66 = load i64, ptr %i, align 8
  %count101 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %67 = load i64, ptr %count101, align 8
  %sub102 = sub nsw i64 %67, 1
  %cmp103 = icmp slt i64 %66, %sub102
  br i1 %cmp103, label %for.body, label %for.end116

for.body:                                         ; preds = %for.cond
  store i64 0, ptr %j, align 8
  br label %for.cond104

for.cond104:                                      ; preds = %for.inc, %for.body
  %68 = load i64, ptr %j, align 8
  %count105 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %69 = load i64, ptr %count105, align 8
  %sub106 = sub nsw i64 %69, 1
  %cmp107 = icmp slt i64 %68, %sub106
  br i1 %cmp107, label %for.body108, label %for.end

for.body108:                                      ; preds = %for.cond104
  %lines109 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %70 = load ptr, ptr %lines109, align 8
  %71 = load i64, ptr %i, align 8
  %arrayidx110 = getelementptr inbounds ptr, ptr %70, i64 %71
  %72 = load ptr, ptr %arrayidx110, align 8
  %lines111 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %73 = load ptr, ptr %lines111, align 8
  %74 = load i64, ptr %j, align 8
  %arrayidx112 = getelementptr inbounds ptr, ptr %73, i64 %74
  %75 = load ptr, ptr %arrayidx112, align 8
  call void @prjoin(ptr noundef %72, ptr noundef %75)
  br label %for.inc

for.inc:                                          ; preds = %for.body108
  %76 = load i64, ptr %j, align 8
  %inc113 = add nsw i64 %76, 1
  store i64 %inc113, ptr %j, align 8
  br label %for.cond104, !llvm.loop !16

for.end:                                          ; preds = %for.cond104
  br label %for.inc114

for.inc114:                                       ; preds = %for.end
  %77 = load i64, ptr %i, align 8
  %inc115 = add nsw i64 %77, 1
  store i64 %inc115, ptr %i, align 8
  br label %for.cond, !llvm.loop !17

for.end116:                                       ; preds = %for.cond
  br label %if.end117

if.end117:                                        ; preds = %for.end116, %do.end98
  %78 = load i8, ptr %eof1, align 1
  %tobool118 = trunc i8 %78 to i1
  br i1 %tobool118, label %if.else, label %if.then119

if.then119:                                       ; preds = %if.end117
  br label %do.body120

do.body120:                                       ; preds = %if.then119
  %lines121 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %79 = load ptr, ptr %lines121, align 8
  %arrayidx122 = getelementptr inbounds ptr, ptr %79, i64 0
  %80 = load ptr, ptr %arrayidx122, align 8
  store ptr %80, ptr %tmp, align 8
  %lines123 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %81 = load ptr, ptr %lines123, align 8
  %count124 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %82 = load i64, ptr %count124, align 8
  %sub125 = sub nsw i64 %82, 1
  %arrayidx126 = getelementptr inbounds ptr, ptr %81, i64 %sub125
  %83 = load ptr, ptr %arrayidx126, align 8
  %lines127 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %84 = load ptr, ptr %lines127, align 8
  %arrayidx128 = getelementptr inbounds ptr, ptr %84, i64 0
  store ptr %83, ptr %arrayidx128, align 8
  %85 = load ptr, ptr %tmp, align 8
  %lines129 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %86 = load ptr, ptr %lines129, align 8
  %count130 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %87 = load i64, ptr %count130, align 8
  %sub131 = sub nsw i64 %87, 1
  %arrayidx132 = getelementptr inbounds ptr, ptr %86, i64 %sub131
  store ptr %85, ptr %arrayidx132, align 8
  br label %do.end134

do.end134:                                        ; preds = %do.body120
  %count135 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  store i64 1, ptr %count135, align 8
  br label %if.end137

if.else:                                          ; preds = %if.end117
  %count136 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  store i64 0, ptr %count136, align 8
  br label %if.end137

if.end137:                                        ; preds = %if.else, %do.end134
  %88 = load i8, ptr %eof2, align 1
  %tobool138 = trunc i8 %88 to i1
  br i1 %tobool138, label %if.else157, label %if.then139

if.then139:                                       ; preds = %if.end137
  br label %do.body140

do.body140:                                       ; preds = %if.then139
  %lines142 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %89 = load ptr, ptr %lines142, align 8
  %arrayidx143 = getelementptr inbounds ptr, ptr %89, i64 0
  %90 = load ptr, ptr %arrayidx143, align 8
  store ptr %90, ptr %tmp141, align 8
  %lines144 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %91 = load ptr, ptr %lines144, align 8
  %count145 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %92 = load i64, ptr %count145, align 8
  %sub146 = sub nsw i64 %92, 1
  %arrayidx147 = getelementptr inbounds ptr, ptr %91, i64 %sub146
  %93 = load ptr, ptr %arrayidx147, align 8
  %lines148 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %94 = load ptr, ptr %lines148, align 8
  %arrayidx149 = getelementptr inbounds ptr, ptr %94, i64 0
  store ptr %93, ptr %arrayidx149, align 8
  %95 = load ptr, ptr %tmp141, align 8
  %lines150 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %96 = load ptr, ptr %lines150, align 8
  %count151 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %97 = load i64, ptr %count151, align 8
  %sub152 = sub nsw i64 %97, 1
  %arrayidx153 = getelementptr inbounds ptr, ptr %96, i64 %sub152
  store ptr %95, ptr %arrayidx153, align 8
  br label %do.end155

do.end155:                                        ; preds = %do.body140
  %count156 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  store i64 1, ptr %count156, align 8
  br label %if.end159

if.else157:                                       ; preds = %if.end137
  %count158 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  store i64 0, ptr %count158, align 8
  br label %if.end159

if.end159:                                        ; preds = %if.else157, %do.end155
  br label %while.cond, !llvm.loop !13

while.end:                                        ; preds = %land.end
  store ptr null, ptr %line, align 8
  store i8 0, ptr %checktail, align 1
  %98 = load i32, ptr @check_input_order, align 4
  %cmp160 = icmp ne i32 %98, 2
  br i1 %cmp160, label %land.lhs.true161, label %if.end166

land.lhs.true161:                                 ; preds = %while.end
  %99 = load i8, ptr @issued_disorder_warning, align 1
  %tobool162 = trunc i8 %99 to i1
  br i1 %tobool162, label %land.lhs.true163, label %if.then165

land.lhs.true163:                                 ; preds = %land.lhs.true161
  %100 = load i8, ptr getelementptr inbounds ([2 x i8], ptr @issued_disorder_warning, i64 0, i64 1), align 1
  %tobool164 = trunc i8 %100 to i1
  br i1 %tobool164, label %if.end166, label %if.then165

if.then165:                                       ; preds = %land.lhs.true163, %land.lhs.true161
  store i8 1, ptr %checktail, align 1
  br label %if.end166

if.end166:                                        ; preds = %if.then165, %land.lhs.true163, %while.end
  %101 = load i8, ptr @print_unpairables_1, align 1
  %tobool167 = trunc i8 %101 to i1
  br i1 %tobool167, label %land.lhs.true170, label %lor.lhs.false168

lor.lhs.false168:                                 ; preds = %if.end166
  %102 = load i8, ptr %checktail, align 1
  %tobool169 = trunc i8 %102 to i1
  br i1 %tobool169, label %land.lhs.true170, label %if.end195

land.lhs.true170:                                 ; preds = %lor.lhs.false168, %if.end166
  %count171 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %103 = load i64, ptr %count171, align 8
  %tobool172 = icmp ne i64 %103, 0
  br i1 %tobool172, label %if.then173, label %if.end195

if.then173:                                       ; preds = %land.lhs.true170
  %104 = load i8, ptr @print_unpairables_1, align 1
  %tobool174 = trunc i8 %104 to i1
  br i1 %tobool174, label %if.then175, label %if.end178

if.then175:                                       ; preds = %if.then173
  %lines176 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 2
  %105 = load ptr, ptr %lines176, align 8
  %arrayidx177 = getelementptr inbounds ptr, ptr %105, i64 0
  %106 = load ptr, ptr %arrayidx177, align 8
  call void @prjoin(ptr noundef %106, ptr noundef @uni_blank)
  br label %if.end178

if.end178:                                        ; preds = %if.then175, %if.then173
  %count179 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %107 = load i64, ptr %count179, align 8
  %tobool180 = icmp ne i64 %107, 0
  br i1 %tobool180, label %if.then181, label %if.end182

if.then181:                                       ; preds = %if.end178
  store i8 1, ptr @seen_unpairable, align 1
  br label %if.end182

if.end182:                                        ; preds = %if.then181, %if.end178
  br label %while.cond183

while.cond183:                                    ; preds = %if.end193, %if.end182
  %108 = load ptr, ptr %fp1.addr, align 8
  %call184 = call zeroext i1 @get_line(ptr noundef %108, ptr noundef %line, i32 noundef 1)
  br i1 %call184, label %while.body185, label %while.end194

while.body185:                                    ; preds = %while.cond183
  %109 = load i8, ptr @print_unpairables_1, align 1
  %tobool186 = trunc i8 %109 to i1
  br i1 %tobool186, label %if.then187, label %if.end188

if.then187:                                       ; preds = %while.body185
  %110 = load ptr, ptr %line, align 8
  call void @prjoin(ptr noundef %110, ptr noundef @uni_blank)
  br label %if.end188

if.end188:                                        ; preds = %if.then187, %while.body185
  %111 = load i8, ptr @issued_disorder_warning, align 1
  %tobool189 = trunc i8 %111 to i1
  br i1 %tobool189, label %land.lhs.true190, label %if.end193

land.lhs.true190:                                 ; preds = %if.end188
  %112 = load i8, ptr @print_unpairables_1, align 1
  %tobool191 = trunc i8 %112 to i1
  br i1 %tobool191, label %if.end193, label %if.then192

if.then192:                                       ; preds = %land.lhs.true190
  br label %while.end194

if.end193:                                        ; preds = %land.lhs.true190, %if.end188
  br label %while.cond183, !llvm.loop !18

while.end194:                                     ; preds = %if.then192, %while.cond183
  br label %if.end195

if.end195:                                        ; preds = %while.end194, %land.lhs.true170, %lor.lhs.false168
  %113 = load i8, ptr @print_unpairables_2, align 1
  %tobool196 = trunc i8 %113 to i1
  br i1 %tobool196, label %land.lhs.true199, label %lor.lhs.false197

lor.lhs.false197:                                 ; preds = %if.end195
  %114 = load i8, ptr %checktail, align 1
  %tobool198 = trunc i8 %114 to i1
  br i1 %tobool198, label %land.lhs.true199, label %if.end224

land.lhs.true199:                                 ; preds = %lor.lhs.false197, %if.end195
  %count200 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 0
  %115 = load i64, ptr %count200, align 8
  %tobool201 = icmp ne i64 %115, 0
  br i1 %tobool201, label %if.then202, label %if.end224

if.then202:                                       ; preds = %land.lhs.true199
  %116 = load i8, ptr @print_unpairables_2, align 1
  %tobool203 = trunc i8 %116 to i1
  br i1 %tobool203, label %if.then204, label %if.end207

if.then204:                                       ; preds = %if.then202
  %lines205 = getelementptr inbounds %struct.seq, ptr %seq2, i32 0, i32 2
  %117 = load ptr, ptr %lines205, align 8
  %arrayidx206 = getelementptr inbounds ptr, ptr %117, i64 0
  %118 = load ptr, ptr %arrayidx206, align 8
  call void @prjoin(ptr noundef @uni_blank, ptr noundef %118)
  br label %if.end207

if.end207:                                        ; preds = %if.then204, %if.then202
  %count208 = getelementptr inbounds %struct.seq, ptr %seq1, i32 0, i32 0
  %119 = load i64, ptr %count208, align 8
  %tobool209 = icmp ne i64 %119, 0
  br i1 %tobool209, label %if.then210, label %if.end211

if.then210:                                       ; preds = %if.end207
  store i8 1, ptr @seen_unpairable, align 1
  br label %if.end211

if.end211:                                        ; preds = %if.then210, %if.end207
  br label %while.cond212

while.cond212:                                    ; preds = %if.end222, %if.end211
  %120 = load ptr, ptr %fp2.addr, align 8
  %call213 = call zeroext i1 @get_line(ptr noundef %120, ptr noundef %line, i32 noundef 2)
  br i1 %call213, label %while.body214, label %while.end223

while.body214:                                    ; preds = %while.cond212
  %121 = load i8, ptr @print_unpairables_2, align 1
  %tobool215 = trunc i8 %121 to i1
  br i1 %tobool215, label %if.then216, label %if.end217

if.then216:                                       ; preds = %while.body214
  %122 = load ptr, ptr %line, align 8
  call void @prjoin(ptr noundef @uni_blank, ptr noundef %122)
  br label %if.end217

if.end217:                                        ; preds = %if.then216, %while.body214
  %123 = load i8, ptr getelementptr inbounds ([2 x i8], ptr @issued_disorder_warning, i64 0, i64 1), align 1
  %tobool218 = trunc i8 %123 to i1
  br i1 %tobool218, label %land.lhs.true219, label %if.end222

land.lhs.true219:                                 ; preds = %if.end217
  %124 = load i8, ptr @print_unpairables_2, align 1
  %tobool220 = trunc i8 %124 to i1
  br i1 %tobool220, label %if.end222, label %if.then221

if.then221:                                       ; preds = %land.lhs.true219
  br label %while.end223

if.end222:                                        ; preds = %land.lhs.true219, %if.end217
  br label %while.cond212, !llvm.loop !19

while.end223:                                     ; preds = %if.then221, %while.cond212
  br label %if.end224

if.end224:                                        ; preds = %while.end223, %land.lhs.true199, %lor.lhs.false197
  %125 = load ptr, ptr %line, align 8
  call void @freeline(ptr noundef %125)
  %126 = load ptr, ptr %line, align 8
  call void @free(ptr noundef %126) #21
  call void @delseq(ptr noundef %seq1)
  call void @delseq(ptr noundef %seq2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @initseq(ptr noundef %seq) #3 {
entry:
  %seq.addr = alloca ptr, align 8
  store ptr %seq, ptr %seq.addr, align 8
  %0 = load ptr, ptr %seq.addr, align 8
  %count = getelementptr inbounds %struct.seq, ptr %0, i32 0, i32 0
  store i64 0, ptr %count, align 8
  %1 = load ptr, ptr %seq.addr, align 8
  %alloc = getelementptr inbounds %struct.seq, ptr %1, i32 0, i32 1
  store i64 0, ptr %alloc, align 8
  %2 = load ptr, ptr %seq.addr, align 8
  %lines = getelementptr inbounds %struct.seq, ptr %2, i32 0, i32 2
  store ptr null, ptr %lines, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @getseq(ptr noundef %fp, ptr noundef %seq, i32 noundef %whichfile) #3 {
entry:
  %retval = alloca i1, align 1
  %fp.addr = alloca ptr, align 8
  %seq.addr = alloca ptr, align 8
  %whichfile.addr = alloca i32, align 4
  %i = alloca i64, align 8
  store ptr %fp, ptr %fp.addr, align 8
  store ptr %seq, ptr %seq.addr, align 8
  store i32 %whichfile, ptr %whichfile.addr, align 4
  %0 = load ptr, ptr %seq.addr, align 8
  %count = getelementptr inbounds %struct.seq, ptr %0, i32 0, i32 0
  %1 = load i64, ptr %count, align 8
  %2 = load ptr, ptr %seq.addr, align 8
  %alloc = getelementptr inbounds %struct.seq, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %alloc, align 8
  %cmp = icmp eq i64 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load ptr, ptr %seq.addr, align 8
  %lines = getelementptr inbounds %struct.seq, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %lines, align 8
  %6 = load ptr, ptr %seq.addr, align 8
  %alloc1 = getelementptr inbounds %struct.seq, ptr %6, i32 0, i32 1
  %call = call nonnull ptr @xpalloc(ptr noundef %5, ptr noundef %alloc1, i64 noundef 1, i64 noundef -1, i64 noundef 8)
  %7 = load ptr, ptr %seq.addr, align 8
  %lines2 = getelementptr inbounds %struct.seq, ptr %7, i32 0, i32 2
  store ptr %call, ptr %lines2, align 8
  %8 = load ptr, ptr %seq.addr, align 8
  %count3 = getelementptr inbounds %struct.seq, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %count3, align 8
  store i64 %9, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i64, ptr %i, align 8
  %11 = load ptr, ptr %seq.addr, align 8
  %alloc4 = getelementptr inbounds %struct.seq, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %alloc4, align 8
  %cmp5 = icmp slt i64 %10, %12
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load ptr, ptr %seq.addr, align 8
  %lines6 = getelementptr inbounds %struct.seq, ptr %13, i32 0, i32 2
  %14 = load ptr, ptr %lines6, align 8
  %15 = load i64, ptr %i, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %14, i64 %15
  store ptr null, ptr %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i64, ptr %i, align 8
  %inc = add nsw i64 %16, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !20

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  %17 = load ptr, ptr %fp.addr, align 8
  %18 = load ptr, ptr %seq.addr, align 8
  %lines7 = getelementptr inbounds %struct.seq, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %lines7, align 8
  %20 = load ptr, ptr %seq.addr, align 8
  %count8 = getelementptr inbounds %struct.seq, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %count8, align 8
  %arrayidx9 = getelementptr inbounds ptr, ptr %19, i64 %21
  %22 = load i32, ptr %whichfile.addr, align 4
  %call10 = call zeroext i1 @get_line(ptr noundef %17, ptr noundef %arrayidx9, i32 noundef %22)
  br i1 %call10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end
  %23 = load ptr, ptr %seq.addr, align 8
  %count12 = getelementptr inbounds %struct.seq, ptr %23, i32 0, i32 0
  %24 = load i64, ptr %count12, align 8
  %inc13 = add nsw i64 %24, 1
  store i64 %inc13, ptr %count12, align 8
  store i1 true, ptr %retval, align 1
  br label %return

if.end14:                                         ; preds = %if.end
  store i1 false, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end14, %if.then11
  %25 = load i1, ptr %retval, align 1
  ret i1 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @prjoin(ptr noundef %line1, ptr noundef %line2) #3 {
entry:
  %line1.addr = alloca ptr, align 8
  %line2.addr = alloca ptr, align 8
  %outlist = alloca ptr, align 8
  %field = alloca i64, align 8
  %line = alloca ptr, align 8
  %o = alloca ptr, align 8
  store ptr %line1, ptr %line1.addr, align 8
  store ptr %line2, ptr %line2.addr, align 8
  %0 = load ptr, ptr getelementptr inbounds (%struct.outlist, ptr @outlist_head, i32 0, i32 2), align 8
  store ptr %0, ptr %outlist, align 8
  %1 = load ptr, ptr %outlist, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %if.then, label %if.else13

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %outlist, align 8
  store ptr %2, ptr %o, align 8
  br label %while.body

while.body:                                       ; preds = %if.end11, %if.then
  %3 = load ptr, ptr %o, align 8
  %file = getelementptr inbounds %struct.outlist, ptr %3, i32 0, i32 0
  %4 = load i32, ptr %file, align 8
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then1, label %if.else4

if.then1:                                         ; preds = %while.body
  %5 = load ptr, ptr %line1.addr, align 8
  %cmp2 = icmp eq ptr %5, @uni_blank
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then1
  %6 = load ptr, ptr %line2.addr, align 8
  store ptr %6, ptr %line, align 8
  %7 = load i64, ptr @join_field_2, align 8
  store i64 %7, ptr %field, align 8
  br label %if.end

if.else:                                          ; preds = %if.then1
  %8 = load ptr, ptr %line1.addr, align 8
  store ptr %8, ptr %line, align 8
  %9 = load i64, ptr @join_field_1, align 8
  store i64 %9, ptr %field, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end8

if.else4:                                         ; preds = %while.body
  %10 = load ptr, ptr %o, align 8
  %file5 = getelementptr inbounds %struct.outlist, ptr %10, i32 0, i32 0
  %11 = load i32, ptr %file5, align 8
  %cmp6 = icmp eq i32 %11, 1
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else4
  %12 = load ptr, ptr %line1.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else4
  %13 = load ptr, ptr %line2.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %12, %cond.true ], [ %13, %cond.false ]
  store ptr %cond, ptr %line, align 8
  %14 = load ptr, ptr %o, align 8
  %field7 = getelementptr inbounds %struct.outlist, ptr %14, i32 0, i32 1
  %15 = load i64, ptr %field7, align 8
  store i64 %15, ptr %field, align 8
  br label %if.end8

if.end8:                                          ; preds = %cond.end, %if.end
  %16 = load i64, ptr %field, align 8
  %17 = load ptr, ptr %line, align 8
  call void @prfield(i64 noundef %16, ptr noundef %17)
  %18 = load ptr, ptr %o, align 8
  %next = getelementptr inbounds %struct.outlist, ptr %18, i32 0, i32 2
  %19 = load ptr, ptr %next, align 8
  store ptr %19, ptr %o, align 8
  %20 = load ptr, ptr %o, align 8
  %cmp9 = icmp eq ptr %20, null
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end8
  br label %while.end

if.end11:                                         ; preds = %if.end8
  %21 = load ptr, ptr @output_separator, align 8
  %22 = load i64, ptr @output_seplen, align 8
  %23 = load ptr, ptr @stdout, align 8
  %call = call i64 @fwrite_unlocked(ptr noundef %21, i64 noundef 1, i64 noundef %22, ptr noundef %23)
  br label %while.body

while.end:                                        ; preds = %if.then10
  %24 = load i8, ptr @eolchar, align 1
  %conv = sext i8 %24 to i32
  %call12 = call i32 @putchar_unlocked(i32 noundef %conv)
  br label %if.end21

if.else13:                                        ; preds = %entry
  %25 = load ptr, ptr %line1.addr, align 8
  %cmp14 = icmp eq ptr %25, @uni_blank
  br i1 %cmp14, label %if.then16, label %if.else17

if.then16:                                        ; preds = %if.else13
  %26 = load ptr, ptr %line2.addr, align 8
  store ptr %26, ptr %line, align 8
  %27 = load i64, ptr @join_field_2, align 8
  store i64 %27, ptr %field, align 8
  br label %if.end18

if.else17:                                        ; preds = %if.else13
  %28 = load ptr, ptr %line1.addr, align 8
  store ptr %28, ptr %line, align 8
  %29 = load i64, ptr @join_field_1, align 8
  store i64 %29, ptr %field, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.else17, %if.then16
  %30 = load i64, ptr %field, align 8
  %31 = load ptr, ptr %line, align 8
  call void @prfield(i64 noundef %30, ptr noundef %31)
  %32 = load ptr, ptr %line1.addr, align 8
  %33 = load i64, ptr @join_field_1, align 8
  %34 = load i64, ptr @autocount_1, align 8
  call void @prfields(ptr noundef %32, i64 noundef %33, i64 noundef %34)
  %35 = load ptr, ptr %line2.addr, align 8
  %36 = load i64, ptr @join_field_2, align 8
  %37 = load i64, ptr @autocount_2, align 8
  call void @prfields(ptr noundef %35, i64 noundef %36, i64 noundef %37)
  %38 = load i8, ptr @eolchar, align 1
  %conv19 = sext i8 %38 to i32
  %call20 = call i32 @putchar_unlocked(i32 noundef %conv19)
  br label %if.end21

if.end21:                                         ; preds = %if.end18, %while.end
  %39 = load ptr, ptr @stdout, align 8
  %call22 = call i32 @ferror_unlocked(ptr noundef %39) #21
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end21
  call void @write_error()
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.end21
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @advance_seq(ptr noundef %fp, ptr noundef %seq, i1 noundef zeroext %first, i32 noundef %whichfile) #3 {
entry:
  %fp.addr = alloca ptr, align 8
  %seq.addr = alloca ptr, align 8
  %first.addr = alloca i8, align 1
  %whichfile.addr = alloca i32, align 4
  store ptr %fp, ptr %fp.addr, align 8
  store ptr %seq, ptr %seq.addr, align 8
  %frombool = zext i1 %first to i8
  store i8 %frombool, ptr %first.addr, align 1
  store i32 %whichfile, ptr %whichfile.addr, align 4
  %0 = load i8, ptr %first.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %seq.addr, align 8
  %count = getelementptr inbounds %struct.seq, ptr %1, i32 0, i32 0
  store i64 0, ptr %count, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load ptr, ptr %fp.addr, align 8
  %3 = load ptr, ptr %seq.addr, align 8
  %4 = load i32, ptr %whichfile.addr, align 4
  %call = call zeroext i1 @getseq(ptr noundef %2, ptr noundef %3, i32 noundef %4)
  ret i1 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @keycmp(ptr noundef %line1, ptr noundef %line2, i64 noundef %jf_1, i64 noundef %jf_2) #3 {
entry:
  %retval = alloca i32, align 4
  %line1.addr = alloca ptr, align 8
  %line2.addr = alloca ptr, align 8
  %jf_1.addr = alloca i64, align 8
  %jf_2.addr = alloca i64, align 8
  %beg1 = alloca ptr, align 8
  %beg2 = alloca ptr, align 8
  %len1 = alloca i64, align 8
  %len2 = alloca i64, align 8
  %diff = alloca i32, align 4
  store ptr %line1, ptr %line1.addr, align 8
  store ptr %line2, ptr %line2.addr, align 8
  store i64 %jf_1, ptr %jf_1.addr, align 8
  store i64 %jf_2, ptr %jf_2.addr, align 8
  %0 = load i64, ptr %jf_1.addr, align 8
  %1 = load ptr, ptr %line1.addr, align 8
  %nfields = getelementptr inbounds %struct.line, ptr %1, i32 0, i32 1
  %2 = load i64, ptr %nfields, align 8
  %cmp = icmp slt i64 %0, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load ptr, ptr %line1.addr, align 8
  %fields = getelementptr inbounds %struct.line, ptr %3, i32 0, i32 3
  %4 = load ptr, ptr %fields, align 8
  %5 = load i64, ptr %jf_1.addr, align 8
  %arrayidx = getelementptr inbounds %struct.field, ptr %4, i64 %5
  %beg = getelementptr inbounds %struct.field, ptr %arrayidx, i32 0, i32 0
  %6 = load ptr, ptr %beg, align 8
  store ptr %6, ptr %beg1, align 8
  %7 = load ptr, ptr %line1.addr, align 8
  %fields1 = getelementptr inbounds %struct.line, ptr %7, i32 0, i32 3
  %8 = load ptr, ptr %fields1, align 8
  %9 = load i64, ptr %jf_1.addr, align 8
  %arrayidx2 = getelementptr inbounds %struct.field, ptr %8, i64 %9
  %len = getelementptr inbounds %struct.field, ptr %arrayidx2, i32 0, i32 1
  %10 = load i64, ptr %len, align 8
  store i64 %10, ptr %len1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store ptr null, ptr %beg1, align 8
  store i64 0, ptr %len1, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load i64, ptr %jf_2.addr, align 8
  %12 = load ptr, ptr %line2.addr, align 8
  %nfields3 = getelementptr inbounds %struct.line, ptr %12, i32 0, i32 1
  %13 = load i64, ptr %nfields3, align 8
  %cmp4 = icmp slt i64 %11, %13
  br i1 %cmp4, label %if.then5, label %if.else12

if.then5:                                         ; preds = %if.end
  %14 = load ptr, ptr %line2.addr, align 8
  %fields6 = getelementptr inbounds %struct.line, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %fields6, align 8
  %16 = load i64, ptr %jf_2.addr, align 8
  %arrayidx7 = getelementptr inbounds %struct.field, ptr %15, i64 %16
  %beg8 = getelementptr inbounds %struct.field, ptr %arrayidx7, i32 0, i32 0
  %17 = load ptr, ptr %beg8, align 8
  store ptr %17, ptr %beg2, align 8
  %18 = load ptr, ptr %line2.addr, align 8
  %fields9 = getelementptr inbounds %struct.line, ptr %18, i32 0, i32 3
  %19 = load ptr, ptr %fields9, align 8
  %20 = load i64, ptr %jf_2.addr, align 8
  %arrayidx10 = getelementptr inbounds %struct.field, ptr %19, i64 %20
  %len11 = getelementptr inbounds %struct.field, ptr %arrayidx10, i32 0, i32 1
  %21 = load i64, ptr %len11, align 8
  store i64 %21, ptr %len2, align 8
  br label %if.end13

if.else12:                                        ; preds = %if.end
  store ptr null, ptr %beg2, align 8
  store i64 0, ptr %len2, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.else12, %if.then5
  %22 = load i64, ptr %len1, align 8
  %cmp14 = icmp eq i64 %22, 0
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end13
  %23 = load i64, ptr %len2, align 8
  %cmp16 = icmp eq i64 %23, 0
  %24 = zext i1 %cmp16 to i64
  %cond = select i1 %cmp16, i32 0, i32 -1
  store i32 %cond, ptr %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end13
  %25 = load i64, ptr %len2, align 8
  %cmp18 = icmp eq i64 %25, 0
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  store i32 1, ptr %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.end17
  %26 = load i8, ptr @ignore_case, align 1
  %tobool = trunc i8 %26 to i1
  br i1 %tobool, label %if.then21, label %if.else24

if.then21:                                        ; preds = %if.end20
  %27 = load ptr, ptr %beg1, align 8
  %28 = load ptr, ptr %beg2, align 8
  %29 = load i64, ptr %len1, align 8
  %30 = load i64, ptr %len2, align 8
  %cmp22 = icmp slt i64 %29, %30
  br i1 %cmp22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then21
  %31 = load i64, ptr %len1, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then21
  %32 = load i64, ptr %len2, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond23 = phi i64 [ %31, %cond.true ], [ %32, %cond.false ]
  %call = call i32 @memcasecmp(ptr noundef %27, ptr noundef %28, i64 noundef %cond23) #23
  store i32 %call, ptr %diff, align 4
  br label %if.end35

if.else24:                                        ; preds = %if.end20
  %33 = load i8, ptr @hard_LC_COLLATE, align 1
  %tobool25 = trunc i8 %33 to i1
  br i1 %tobool25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.else24
  %34 = load ptr, ptr %beg1, align 8
  %35 = load i64, ptr %len1, align 8
  %36 = load ptr, ptr %beg2, align 8
  %37 = load i64, ptr %len2, align 8
  %call27 = call i32 @xmemcoll(ptr noundef %34, i64 noundef %35, ptr noundef %36, i64 noundef %37)
  store i32 %call27, ptr %retval, align 4
  br label %return

if.end28:                                         ; preds = %if.else24
  %38 = load ptr, ptr %beg1, align 8
  %39 = load ptr, ptr %beg2, align 8
  %40 = load i64, ptr %len1, align 8
  %41 = load i64, ptr %len2, align 8
  %cmp29 = icmp slt i64 %40, %41
  br i1 %cmp29, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %if.end28
  %42 = load i64, ptr %len1, align 8
  br label %cond.end32

cond.false31:                                     ; preds = %if.end28
  %43 = load i64, ptr %len2, align 8
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i64 [ %42, %cond.true30 ], [ %43, %cond.false31 ]
  %call34 = call i32 @memcmp(ptr noundef %38, ptr noundef %39, i64 noundef %cond33) #23
  store i32 %call34, ptr %diff, align 4
  br label %if.end35

if.end35:                                         ; preds = %cond.end32, %cond.end
  %44 = load i32, ptr %diff, align 4
  %tobool36 = icmp ne i32 %44, 0
  br i1 %tobool36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end35
  %45 = load i32, ptr %diff, align 4
  store i32 %45, ptr %retval, align 4
  br label %return

if.end38:                                         ; preds = %if.end35
  %46 = load i64, ptr %len1, align 8
  %47 = load i64, ptr %len2, align 8
  %cmp39 = icmp sgt i64 %46, %47
  %conv = zext i1 %cmp39 to i32
  %48 = load i64, ptr %len1, align 8
  %49 = load i64, ptr %len2, align 8
  %cmp40 = icmp slt i64 %48, %49
  %conv41 = zext i1 %cmp40 to i32
  %sub = sub nsw i32 %conv, %conv41
  store i32 %sub, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end38, %if.then37, %if.then26, %if.then19, %if.then15
  %50 = load i32, ptr %retval, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @get_line(ptr noundef %fp, ptr noundef %linep, i32 noundef %which) #3 {
entry:
  %retval = alloca i1, align 1
  %fp.addr = alloca ptr, align 8
  %linep.addr = alloca ptr, align 8
  %which.addr = alloca i32, align 4
  %line = alloca ptr, align 8
  %tmp = alloca ptr, align 8
  store ptr %fp, ptr %fp.addr, align 8
  store ptr %linep, ptr %linep.addr, align 8
  store i32 %which, ptr %which.addr, align 4
  %0 = load ptr, ptr %linep.addr, align 8
  %1 = load ptr, ptr %0, align 8
  store ptr %1, ptr %line, align 8
  %2 = load ptr, ptr %line, align 8
  %3 = load i32, ptr %which.addr, align 4
  %sub = sub nsw i32 %3, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [2 x ptr], ptr @prevline, i64 0, i64 %idxprom
  %4 = load ptr, ptr %arrayidx, align 8
  %cmp = icmp eq ptr %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %5 = load ptr, ptr %line, align 8
  store ptr %5, ptr %tmp, align 8
  %6 = load i32, ptr %which.addr, align 4
  %sub1 = sub nsw i32 %6, 1
  %idxprom2 = sext i32 %sub1 to i64
  %arrayidx3 = getelementptr inbounds [2 x ptr], ptr @spareline, i64 0, i64 %idxprom2
  %7 = load ptr, ptr %arrayidx3, align 8
  store ptr %7, ptr %line, align 8
  %8 = load ptr, ptr %tmp, align 8
  %9 = load i32, ptr %which.addr, align 4
  %sub4 = sub nsw i32 %9, 1
  %idxprom5 = sext i32 %sub4 to i64
  %arrayidx6 = getelementptr inbounds [2 x ptr], ptr @spareline, i64 0, i64 %idxprom5
  store ptr %8, ptr %arrayidx6, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %10 = load ptr, ptr %line, align 8
  %11 = load ptr, ptr %linep.addr, align 8
  store ptr %10, ptr %11, align 8
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %12 = load ptr, ptr %line, align 8
  %tobool = icmp ne ptr %12, null
  br i1 %tobool, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end
  %13 = load ptr, ptr %line, align 8
  call void @reset_line(ptr noundef %13)
  br label %if.end8

if.else:                                          ; preds = %if.end
  %14 = load ptr, ptr %linep.addr, align 8
  %call = call ptr @init_linep(ptr noundef %14)
  store ptr %call, ptr %line, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  %15 = load ptr, ptr %line, align 8
  %buf = getelementptr inbounds %struct.line, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %fp.addr, align 8
  %17 = load i8, ptr @eolchar, align 1
  %call9 = call ptr @readlinebuffer_delim(ptr noundef %buf, ptr noundef %16, i8 noundef signext %17)
  %tobool10 = icmp ne ptr %call9, null
  br i1 %tobool10, label %if.end18, label %if.then11

if.then11:                                        ; preds = %if.end8
  %18 = load ptr, ptr %fp.addr, align 8
  %call12 = call i32 @ferror_unlocked(ptr noundef %18) #21
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then14, label %if.end17

if.then14:                                        ; preds = %if.then11
  %call15 = call ptr @__errno_location() #26
  %19 = load i32, ptr %call15, align 4
  %call16 = call ptr @gettext(ptr noundef @.str.65) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %19, ptr noundef %call16) #24
  unreachable

if.end17:                                         ; preds = %if.then11
  %20 = load ptr, ptr %line, align 8
  call void @freeline(ptr noundef %20)
  store i1 false, ptr %retval, align 1
  br label %return

if.end18:                                         ; preds = %if.end8
  %21 = load i32, ptr %which.addr, align 4
  %sub19 = sub nsw i32 %21, 1
  %idxprom20 = sext i32 %sub19 to i64
  %arrayidx21 = getelementptr inbounds [2 x i64], ptr @line_no, i64 0, i64 %idxprom20
  %22 = load i64, ptr %arrayidx21, align 8
  %inc = add i64 %22, 1
  store i64 %inc, ptr %arrayidx21, align 8
  %23 = load ptr, ptr %line, align 8
  call void @xfields(ptr noundef %23)
  %24 = load i32, ptr %which.addr, align 4
  %sub22 = sub nsw i32 %24, 1
  %idxprom23 = sext i32 %sub22 to i64
  %arrayidx24 = getelementptr inbounds [2 x ptr], ptr @prevline, i64 0, i64 %idxprom23
  %25 = load ptr, ptr %arrayidx24, align 8
  %tobool25 = icmp ne ptr %25, null
  br i1 %tobool25, label %if.then26, label %if.end30

if.then26:                                        ; preds = %if.end18
  %26 = load i32, ptr %which.addr, align 4
  %sub27 = sub nsw i32 %26, 1
  %idxprom28 = sext i32 %sub27 to i64
  %arrayidx29 = getelementptr inbounds [2 x ptr], ptr @prevline, i64 0, i64 %idxprom28
  %27 = load ptr, ptr %arrayidx29, align 8
  %28 = load ptr, ptr %line, align 8
  %29 = load i32, ptr %which.addr, align 4
  call void @check_order(ptr noundef %27, ptr noundef %28, i32 noundef %29)
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %if.end18
  %30 = load ptr, ptr %line, align 8
  %31 = load i32, ptr %which.addr, align 4
  %sub31 = sub nsw i32 %31, 1
  %idxprom32 = sext i32 %sub31 to i64
  %arrayidx33 = getelementptr inbounds [2 x ptr], ptr @prevline, i64 0, i64 %idxprom32
  store ptr %30, ptr %arrayidx33, align 8
  store i1 true, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end30, %if.end17
  %32 = load i1, ptr %retval, align 1
  ret i1 %32
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @freeline(ptr noundef %line) #3 {
entry:
  %line.addr = alloca ptr, align 8
  store ptr %line, ptr %line.addr, align 8
  %0 = load ptr, ptr %line.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %line.addr, align 8
  %fields = getelementptr inbounds %struct.line, ptr %1, i32 0, i32 3
  %2 = load ptr, ptr %fields, align 8
  call void @free(ptr noundef %2) #21
  %3 = load ptr, ptr %line.addr, align 8
  %fields1 = getelementptr inbounds %struct.line, ptr %3, i32 0, i32 3
  store ptr null, ptr %fields1, align 8
  %4 = load ptr, ptr %line.addr, align 8
  %buf = getelementptr inbounds %struct.line, ptr %4, i32 0, i32 0
  %buffer = getelementptr inbounds %struct.seq, ptr %buf, i32 0, i32 2
  %5 = load ptr, ptr %buffer, align 8
  call void @free(ptr noundef %5) #21
  %6 = load ptr, ptr %line.addr, align 8
  %buf2 = getelementptr inbounds %struct.line, ptr %6, i32 0, i32 0
  %buffer3 = getelementptr inbounds %struct.seq, ptr %buf2, i32 0, i32 2
  store ptr null, ptr %buffer3, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind
declare void @free(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @delseq(ptr noundef %seq) #3 {
entry:
  %seq.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  store ptr %seq, ptr %seq.addr, align 8
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, ptr %i, align 8
  %1 = load ptr, ptr %seq.addr, align 8
  %alloc = getelementptr inbounds %struct.seq, ptr %1, i32 0, i32 1
  %2 = load i64, ptr %alloc, align 8
  %cmp = icmp slt i64 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %seq.addr, align 8
  %lines = getelementptr inbounds %struct.seq, ptr %3, i32 0, i32 2
  %4 = load ptr, ptr %lines, align 8
  %5 = load i64, ptr %i, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %4, i64 %5
  %6 = load ptr, ptr %arrayidx, align 8
  call void @freeline(ptr noundef %6)
  %7 = load ptr, ptr %seq.addr, align 8
  %lines1 = getelementptr inbounds %struct.seq, ptr %7, i32 0, i32 2
  %8 = load ptr, ptr %lines1, align 8
  %9 = load i64, ptr %i, align 8
  %arrayidx2 = getelementptr inbounds ptr, ptr %8, i64 %9
  %10 = load ptr, ptr %arrayidx2, align 8
  call void @free(ptr noundef %10) #21
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i64, ptr %i, align 8
  %inc = add nsw i64 %11, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !21

for.end:                                          ; preds = %for.cond
  %12 = load ptr, ptr %seq.addr, align 8
  %lines3 = getelementptr inbounds %struct.seq, ptr %12, i32 0, i32 2
  %13 = load ptr, ptr %lines3, align 8
  call void @free(ptr noundef %13) #21
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @reset_line(ptr noundef %line) #3 {
entry:
  %line.addr = alloca ptr, align 8
  store ptr %line, ptr %line.addr, align 8
  %0 = load ptr, ptr %line.addr, align 8
  %nfields = getelementptr inbounds %struct.line, ptr %0, i32 0, i32 1
  store i64 0, ptr %nfields, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @init_linep(ptr noundef %linep) #3 {
entry:
  %linep.addr = alloca ptr, align 8
  %line = alloca ptr, align 8
  store ptr %linep, ptr %linep.addr, align 8
  %call = call noalias nonnull ptr @xzalloc(i64 noundef 48) #27
  store ptr %call, ptr %line, align 8
  %0 = load ptr, ptr %line, align 8
  %1 = load ptr, ptr %linep.addr, align 8
  store ptr %0, ptr %1, align 8
  %2 = load ptr, ptr %line, align 8
  ret ptr %2
}

; Function Attrs: nounwind
declare i32 @ferror_unlocked(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @xfields(ptr noundef %line) #3 {
entry:
  %line.addr = alloca ptr, align 8
  %ptr = alloca ptr, align 8
  %lim = alloca ptr, align 8
  %sep = alloca ptr, align 8
  %sep8 = alloca ptr, align 8
  %coerce = alloca %struct.mcel_t, align 4
  store ptr %line, ptr %line.addr, align 8
  %0 = load ptr, ptr %line.addr, align 8
  %buf = getelementptr inbounds %struct.line, ptr %0, i32 0, i32 0
  %buffer = getelementptr inbounds %struct.seq, ptr %buf, i32 0, i32 2
  %1 = load ptr, ptr %buffer, align 8
  store ptr %1, ptr %ptr, align 8
  %2 = load ptr, ptr %ptr, align 8
  %3 = load ptr, ptr %line.addr, align 8
  %buf1 = getelementptr inbounds %struct.line, ptr %3, i32 0, i32 0
  %length = getelementptr inbounds %struct.seq, ptr %buf1, i32 0, i32 1
  %4 = load i64, ptr %length, align 8
  %add.ptr = getelementptr inbounds i8, ptr %2, i64 %4
  %add.ptr2 = getelementptr inbounds i8, ptr %add.ptr, i64 -1
  store ptr %add.ptr2, ptr %lim, align 8
  %5 = load ptr, ptr %ptr, align 8
  %6 = load ptr, ptr %lim, align 8
  %cmp = icmp eq ptr %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end20

if.end:                                           ; preds = %entry
  %7 = load i8, ptr getelementptr inbounds (%struct.mcel_t, ptr @tab, i32 0, i32 2), align 1
  %tobool = icmp ne i8 %7, 0
  br i1 %tobool, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then3
  %8 = load ptr, ptr %ptr, align 8
  %9 = load ptr, ptr %lim, align 8
  %call = call ptr @skip_buf_matching(ptr noundef %8, ptr noundef %9, ptr noundef @newline_or_blank, i1 noundef zeroext true)
  store ptr %call, ptr %ptr, align 8
  %10 = load ptr, ptr %lim, align 8
  %cmp4 = icmp ult ptr %call, %10
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load ptr, ptr %ptr, align 8
  %12 = load ptr, ptr %lim, align 8
  %call5 = call ptr @skip_buf_matching(ptr noundef %11, ptr noundef %12, ptr noundef @newline_or_blank, i1 noundef zeroext false)
  store ptr %call5, ptr %sep, align 8
  %13 = load ptr, ptr %line.addr, align 8
  %14 = load ptr, ptr %ptr, align 8
  %15 = load ptr, ptr %sep, align 8
  %16 = load ptr, ptr %ptr, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %15 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %16 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @extract_field(ptr noundef %13, ptr noundef %14, i64 noundef %sub.ptr.sub)
  %17 = load ptr, ptr %sep, align 8
  store ptr %17, ptr %ptr, align 8
  br label %while.cond, !llvm.loop !22

while.end:                                        ; preds = %while.cond
  br label %if.end20

if.else:                                          ; preds = %if.end
  %18 = load i32, ptr @tab, align 4
  %cmp6 = icmp ne i32 %18, 10
  br i1 %cmp6, label %if.then7, label %if.end16

if.then7:                                         ; preds = %if.else
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then7
  %19 = load ptr, ptr %ptr, align 8
  %20 = load ptr, ptr %lim, align 8
  %call9 = call ptr @skip_buf_matching(ptr noundef %19, ptr noundef %20, ptr noundef @eq_tab, i1 noundef zeroext false)
  store ptr %call9, ptr %sep8, align 8
  %21 = load ptr, ptr %lim, align 8
  %cmp10 = icmp ult ptr %call9, %21
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load ptr, ptr %line.addr, align 8
  %23 = load ptr, ptr %ptr, align 8
  %24 = load ptr, ptr %sep8, align 8
  %25 = load ptr, ptr %ptr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint ptr %24 to i64
  %sub.ptr.rhs.cast12 = ptrtoint ptr %25 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  call void @extract_field(ptr noundef %22, ptr noundef %23, i64 noundef %sub.ptr.sub13)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %26 = load ptr, ptr %sep8, align 8
  %27 = load ptr, ptr %sep8, align 8
  %28 = load ptr, ptr %lim, align 8
  %call14 = call i64 @mcel_scan(ptr noundef %27, ptr noundef %28)
  store i64 %call14, ptr %coerce, align 4
  %len = getelementptr inbounds %struct.mcel_t, ptr %coerce, i32 0, i32 2
  %29 = load i8, ptr %len, align 1
  %conv = zext i8 %29 to i32
  %idx.ext = sext i32 %conv to i64
  %add.ptr15 = getelementptr inbounds i8, ptr %26, i64 %idx.ext
  store ptr %add.ptr15, ptr %ptr, align 8
  br label %for.cond, !llvm.loop !23

for.end:                                          ; preds = %for.cond
  br label %if.end16

if.end16:                                         ; preds = %for.end, %if.else
  %30 = load ptr, ptr %line.addr, align 8
  %31 = load ptr, ptr %ptr, align 8
  %32 = load ptr, ptr %lim, align 8
  %33 = load ptr, ptr %ptr, align 8
  %sub.ptr.lhs.cast17 = ptrtoint ptr %32 to i64
  %sub.ptr.rhs.cast18 = ptrtoint ptr %33 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  call void @extract_field(ptr noundef %30, ptr noundef %31, i64 noundef %sub.ptr.sub19)
  br label %if.end20

if.end20:                                         ; preds = %if.end16, %while.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @check_order(ptr noundef %prev, ptr noundef %current, i32 noundef %whatfile) #3 {
entry:
  %prev.addr = alloca ptr, align 8
  %current.addr = alloca ptr, align 8
  %whatfile.addr = alloca i32, align 4
  %join_field = alloca i64, align 8
  %len = alloca i64, align 8
  %__errstatus = alloca i32, align 4
  store ptr %prev, ptr %prev.addr, align 8
  store ptr %current, ptr %current.addr, align 8
  store i32 %whatfile, ptr %whatfile.addr, align 4
  %0 = load i32, ptr @check_input_order, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %land.lhs.true, label %if.end72

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @check_input_order, align 4
  %cmp1 = icmp eq i32 %1, 1
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %2 = load i8, ptr @seen_unpairable, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.then, label %if.end72

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %3 = load i32, ptr %whatfile.addr, align 4
  %sub = sub nsw i32 %3, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [2 x i8], ptr @issued_disorder_warning, i64 0, i64 %idxprom
  %4 = load i8, ptr %arrayidx, align 1
  %tobool2 = trunc i8 %4 to i1
  br i1 %tobool2, label %if.end71, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, ptr %whatfile.addr, align 4
  %cmp4 = icmp eq i32 %5, 1
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  %6 = load i64, ptr @join_field_1, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  %7 = load i64, ptr @join_field_2, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %6, %cond.true ], [ %7, %cond.false ]
  store i64 %cond, ptr %join_field, align 8
  %8 = load ptr, ptr %prev.addr, align 8
  %9 = load ptr, ptr %current.addr, align 8
  %10 = load i64, ptr %join_field, align 8
  %11 = load i64, ptr %join_field, align 8
  %call = call i32 @keycmp(ptr noundef %8, ptr noundef %9, i64 noundef %10, i64 noundef %11)
  %cmp5 = icmp sgt i32 %call, 0
  br i1 %cmp5, label %if.then6, label %if.end70

if.then6:                                         ; preds = %cond.end
  %12 = load ptr, ptr %current.addr, align 8
  %buf = getelementptr inbounds %struct.line, ptr %12, i32 0, i32 0
  %length = getelementptr inbounds %struct.seq, ptr %buf, i32 0, i32 1
  %13 = load i64, ptr %length, align 8
  store i64 %13, ptr %len, align 8
  %14 = load i64, ptr %len, align 8
  %cmp7 = icmp slt i64 0, %14
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %if.then6
  %15 = load ptr, ptr %current.addr, align 8
  %buf9 = getelementptr inbounds %struct.line, ptr %15, i32 0, i32 0
  %buffer = getelementptr inbounds %struct.seq, ptr %buf9, i32 0, i32 2
  %16 = load ptr, ptr %buffer, align 8
  %17 = load i64, ptr %len, align 8
  %sub10 = sub nsw i64 %17, 1
  %arrayidx11 = getelementptr inbounds i8, ptr %16, i64 %sub10
  %18 = load i8, ptr %arrayidx11, align 1
  %conv = sext i8 %18 to i32
  %cmp12 = icmp eq i32 %conv, 10
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %land.lhs.true8
  %19 = load i64, ptr %len, align 8
  %dec = add nsw i64 %19, -1
  store i64 %dec, ptr %len, align 8
  br label %if.end

if.end:                                           ; preds = %if.then14, %land.lhs.true8, %if.then6
  %20 = load i64, ptr %len, align 8
  %cmp15 = icmp slt i64 2147483647, %20
  br i1 %cmp15, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %if.end
  br label %cond.end19

cond.false18:                                     ; preds = %if.end
  %21 = load i64, ptr %len, align 8
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i64 [ 2147483647, %cond.true17 ], [ %21, %cond.false18 ]
  store i64 %cond20, ptr %len, align 8
  %22 = load i32, ptr @check_input_order, align 4
  %cmp21 = icmp eq i32 %22, 1
  %23 = zext i1 %cmp21 to i64
  %cond23 = select i1 %cmp21, i32 1, i32 0
  %24 = call i1 @llvm.is.constant.i32(i32 %cond23)
  br i1 %24, label %cond.true24, label %cond.false46

cond.true24:                                      ; preds = %cond.end19
  %25 = load i32, ptr @check_input_order, align 4
  %cmp25 = icmp eq i32 %25, 1
  %26 = zext i1 %cmp25 to i64
  %cond27 = select i1 %cmp25, i32 1, i32 0
  %call28 = call ptr @gettext(ptr noundef @.str.66) #21
  %27 = load i32, ptr %whatfile.addr, align 4
  %sub29 = sub nsw i32 %27, 1
  %idxprom30 = sext i32 %sub29 to i64
  %arrayidx31 = getelementptr inbounds [2 x ptr], ptr @g_names, i64 0, i64 %idxprom30
  %28 = load ptr, ptr %arrayidx31, align 8
  %29 = load i32, ptr %whatfile.addr, align 4
  %sub32 = sub nsw i32 %29, 1
  %idxprom33 = sext i32 %sub32 to i64
  %arrayidx34 = getelementptr inbounds [2 x i64], ptr @line_no, i64 0, i64 %idxprom33
  %30 = load i64, ptr %arrayidx34, align 8
  %31 = load i64, ptr %len, align 8
  %conv35 = trunc i64 %31 to i32
  %32 = load ptr, ptr %current.addr, align 8
  %buf36 = getelementptr inbounds %struct.line, ptr %32, i32 0, i32 0
  %buffer37 = getelementptr inbounds %struct.seq, ptr %buf36, i32 0, i32 2
  %33 = load ptr, ptr %buffer37, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef %cond27, i32 noundef 0, ptr noundef %call28, ptr noundef %28, i64 noundef %30, i32 noundef %conv35, ptr noundef %33) #24
  %34 = load i32, ptr @check_input_order, align 4
  %cmp38 = icmp eq i32 %34, 1
  %35 = zext i1 %cmp38 to i64
  %cond40 = select i1 %cmp38, i32 1, i32 0
  %cmp41 = icmp ne i32 %cond40, 0
  br i1 %cmp41, label %cond.true43, label %cond.false44

cond.true43:                                      ; preds = %cond.true24
  unreachable

unreachable.cont:                                 ; No predecessors!
  br label %cond.end45

cond.false44:                                     ; preds = %cond.true24
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false44, %unreachable.cont
  br label %cond.end66

cond.false46:                                     ; preds = %cond.end19
  %36 = load i32, ptr @check_input_order, align 4
  %cmp47 = icmp eq i32 %36, 1
  %37 = zext i1 %cmp47 to i64
  %cond49 = select i1 %cmp47, i32 1, i32 0
  store i32 %cond49, ptr %__errstatus, align 4
  %38 = load i32, ptr %__errstatus, align 4
  %call50 = call ptr @gettext(ptr noundef @.str.66) #21
  %39 = load i32, ptr %whatfile.addr, align 4
  %sub51 = sub nsw i32 %39, 1
  %idxprom52 = sext i32 %sub51 to i64
  %arrayidx53 = getelementptr inbounds [2 x ptr], ptr @g_names, i64 0, i64 %idxprom52
  %40 = load ptr, ptr %arrayidx53, align 8
  %41 = load i32, ptr %whatfile.addr, align 4
  %sub54 = sub nsw i32 %41, 1
  %idxprom55 = sext i32 %sub54 to i64
  %arrayidx56 = getelementptr inbounds [2 x i64], ptr @line_no, i64 0, i64 %idxprom55
  %42 = load i64, ptr %arrayidx56, align 8
  %43 = load i64, ptr %len, align 8
  %conv57 = trunc i64 %43 to i32
  %44 = load ptr, ptr %current.addr, align 8
  %buf58 = getelementptr inbounds %struct.line, ptr %44, i32 0, i32 0
  %buffer59 = getelementptr inbounds %struct.seq, ptr %buf58, i32 0, i32 2
  %45 = load ptr, ptr %buffer59, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef %38, i32 noundef 0, ptr noundef %call50, ptr noundef %40, i64 noundef %42, i32 noundef %conv57, ptr noundef %45) #24
  %46 = load i32, ptr %__errstatus, align 4
  %cmp60 = icmp ne i32 %46, 0
  br i1 %cmp60, label %cond.true62, label %cond.false64

cond.true62:                                      ; preds = %cond.false46
  unreachable

unreachable.cont63:                               ; No predecessors!
  br label %cond.end65

cond.false64:                                     ; preds = %cond.false46
  br label %cond.end65

cond.end65:                                       ; preds = %cond.false64, %unreachable.cont63
  br label %cond.end66

cond.end66:                                       ; preds = %cond.end65, %cond.end45
  %47 = load i32, ptr %whatfile.addr, align 4
  %sub67 = sub nsw i32 %47, 1
  %idxprom68 = sext i32 %sub67 to i64
  %arrayidx69 = getelementptr inbounds [2 x i8], ptr @issued_disorder_warning, i64 0, i64 %idxprom68
  store i8 1, ptr %arrayidx69, align 1
  br label %if.end70

if.end70:                                         ; preds = %cond.end66, %cond.end
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.then
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %lor.lhs.false, %entry
  ret void
}

; Function Attrs: convergent nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.is.constant.i32(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @newline_or_blank(i64 %g.coerce) #3 {
entry:
  %g = alloca %struct.mcel_t, align 4
  store i64 %g.coerce, ptr %g, align 4
  %ch = getelementptr inbounds %struct.mcel_t, ptr %g, i32 0, i32 0
  %0 = load i32, ptr %ch, align 4
  %cmp = icmp eq i32 %0, 10
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %ch1 = getelementptr inbounds %struct.mcel_t, ptr %g, i32 0, i32 0
  %1 = load i32, ptr %ch1, align 4
  %call = call i32 @c32isblank(i32 noundef %1)
  %tobool = icmp ne i32 %call, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %tobool, %lor.rhs ]
  ret i1 %2
}

declare ptr @skip_buf_matching(ptr noundef, ptr noundef, ptr noundef, i1 noundef zeroext) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @extract_field(ptr noundef %line, ptr noundef %field, i64 noundef %len) #3 {
entry:
  %line.addr = alloca ptr, align 8
  %field.addr = alloca ptr, align 8
  %len.addr = alloca i64, align 8
  store ptr %line, ptr %line.addr, align 8
  store ptr %field, ptr %field.addr, align 8
  store i64 %len, ptr %len.addr, align 8
  %0 = load ptr, ptr %line.addr, align 8
  %nfields = getelementptr inbounds %struct.line, ptr %0, i32 0, i32 1
  %1 = load i64, ptr %nfields, align 8
  %2 = load ptr, ptr %line.addr, align 8
  %nfields_allocated = getelementptr inbounds %struct.line, ptr %2, i32 0, i32 2
  %3 = load i64, ptr %nfields_allocated, align 8
  %cmp = icmp sge i64 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load ptr, ptr %line.addr, align 8
  %fields = getelementptr inbounds %struct.line, ptr %4, i32 0, i32 3
  %5 = load ptr, ptr %fields, align 8
  %6 = load ptr, ptr %line.addr, align 8
  %nfields_allocated1 = getelementptr inbounds %struct.line, ptr %6, i32 0, i32 2
  %call = call nonnull ptr @xpalloc(ptr noundef %5, ptr noundef %nfields_allocated1, i64 noundef 1, i64 noundef -1, i64 noundef 16)
  %7 = load ptr, ptr %line.addr, align 8
  %fields2 = getelementptr inbounds %struct.line, ptr %7, i32 0, i32 3
  store ptr %call, ptr %fields2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load ptr, ptr %field.addr, align 8
  %9 = load ptr, ptr %line.addr, align 8
  %fields3 = getelementptr inbounds %struct.line, ptr %9, i32 0, i32 3
  %10 = load ptr, ptr %fields3, align 8
  %11 = load ptr, ptr %line.addr, align 8
  %nfields4 = getelementptr inbounds %struct.line, ptr %11, i32 0, i32 1
  %12 = load i64, ptr %nfields4, align 8
  %arrayidx = getelementptr inbounds %struct.field, ptr %10, i64 %12
  %beg = getelementptr inbounds %struct.field, ptr %arrayidx, i32 0, i32 0
  store ptr %8, ptr %beg, align 8
  %13 = load i64, ptr %len.addr, align 8
  %14 = load ptr, ptr %line.addr, align 8
  %fields5 = getelementptr inbounds %struct.line, ptr %14, i32 0, i32 3
  %15 = load ptr, ptr %fields5, align 8
  %16 = load ptr, ptr %line.addr, align 8
  %nfields6 = getelementptr inbounds %struct.line, ptr %16, i32 0, i32 1
  %17 = load i64, ptr %nfields6, align 8
  %arrayidx7 = getelementptr inbounds %struct.field, ptr %15, i64 %17
  %len8 = getelementptr inbounds %struct.field, ptr %arrayidx7, i32 0, i32 1
  store i64 %13, ptr %len8, align 8
  %18 = load ptr, ptr %line.addr, align 8
  %nfields9 = getelementptr inbounds %struct.line, ptr %18, i32 0, i32 1
  %19 = load i64, ptr %nfields9, align 8
  %inc = add nsw i64 %19, 1
  store i64 %inc, ptr %nfields9, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @eq_tab(i64 %g.coerce) #3 {
entry:
  %g = alloca %struct.mcel_t, align 4
  store i64 %g.coerce, ptr %g, align 4
  %0 = load i64, ptr %g, align 4
  %1 = load i64, ptr @tab, align 4
  %call = call i32 @mcel_cmp(i64 %0, i64 %1)
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i64 @mcel_scan(ptr noundef, ptr noundef) #2

declare i32 @c32isblank(i32 noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare i32 @memcmp(ptr noundef, ptr noundef, i64 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal void @prfield(i64 noundef %n, ptr noundef %line) #3 {
entry:
  %n.addr = alloca i64, align 8
  %line.addr = alloca ptr, align 8
  %len = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store ptr %line, ptr %line.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load ptr, ptr %line.addr, align 8
  %nfields = getelementptr inbounds %struct.line, ptr %1, i32 0, i32 1
  %2 = load i64, ptr %nfields, align 8
  %cmp = icmp slt i64 %0, %2
  br i1 %cmp, label %if.then, label %if.else9

if.then:                                          ; preds = %entry
  %3 = load ptr, ptr %line.addr, align 8
  %fields = getelementptr inbounds %struct.line, ptr %3, i32 0, i32 3
  %4 = load ptr, ptr %fields, align 8
  %5 = load i64, ptr %n.addr, align 8
  %arrayidx = getelementptr inbounds %struct.field, ptr %4, i64 %5
  %len1 = getelementptr inbounds %struct.field, ptr %arrayidx, i32 0, i32 1
  %6 = load i64, ptr %len1, align 8
  store i64 %6, ptr %len, align 8
  %7 = load i64, ptr %len, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %8 = load ptr, ptr %line.addr, align 8
  %fields3 = getelementptr inbounds %struct.line, ptr %8, i32 0, i32 3
  %9 = load ptr, ptr %fields3, align 8
  %10 = load i64, ptr %n.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.field, ptr %9, i64 %10
  %beg = getelementptr inbounds %struct.field, ptr %arrayidx4, i32 0, i32 0
  %11 = load ptr, ptr %beg, align 8
  %12 = load i64, ptr %len, align 8
  %13 = load ptr, ptr @stdout, align 8
  %call = call i64 @fwrite_unlocked(ptr noundef %11, i64 noundef 1, i64 noundef %12, ptr noundef %13)
  br label %if.end8

if.else:                                          ; preds = %if.then
  %14 = load ptr, ptr @empty_filler, align 8
  %tobool5 = icmp ne ptr %14, null
  br i1 %tobool5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.else
  %15 = load ptr, ptr @empty_filler, align 8
  %16 = load ptr, ptr @stdout, align 8
  %call7 = call i32 @fputs_unlocked(ptr noundef %15, ptr noundef %16)
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then2
  br label %if.end14

if.else9:                                         ; preds = %entry
  %17 = load ptr, ptr @empty_filler, align 8
  %tobool10 = icmp ne ptr %17, null
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.else9
  %18 = load ptr, ptr @empty_filler, align 8
  %19 = load ptr, ptr @stdout, align 8
  %call12 = call i32 @fputs_unlocked(ptr noundef %18, ptr noundef %19)
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.else9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end8
  ret void
}

declare i64 @fwrite_unlocked(ptr noundef, i64 noundef, i64 noundef, ptr noundef) #2

declare i32 @putchar_unlocked(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @prfields(ptr noundef %line, i64 noundef %join_field, i64 noundef %autocount) #3 {
entry:
  %line.addr = alloca ptr, align 8
  %join_field.addr = alloca i64, align 8
  %autocount.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %nfields = alloca i64, align 8
  store ptr %line, ptr %line.addr, align 8
  store i64 %join_field, ptr %join_field.addr, align 8
  store i64 %autocount, ptr %autocount.addr, align 8
  %0 = load i8, ptr @autoformat, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, ptr %autocount.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load ptr, ptr %line.addr, align 8
  %nfields1 = getelementptr inbounds %struct.line, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %nfields1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %1, %cond.true ], [ %3, %cond.false ]
  store i64 %cond, ptr %nfields, align 8
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load i64, ptr %i, align 8
  %5 = load i64, ptr %join_field.addr, align 8
  %cmp = icmp slt i64 %4, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %6 = load i64, ptr %i, align 8
  %7 = load i64, ptr %nfields, align 8
  %cmp2 = icmp slt i64 %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %8 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %8, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %9 = load ptr, ptr @output_separator, align 8
  %10 = load i64, ptr @output_seplen, align 8
  %11 = load ptr, ptr @stdout, align 8
  %call = call i64 @fwrite_unlocked(ptr noundef %9, i64 noundef 1, i64 noundef %10, ptr noundef %11)
  %12 = load i64, ptr %i, align 8
  %13 = load ptr, ptr %line.addr, align 8
  call void @prfield(i64 noundef %12, ptr noundef %13)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i64, ptr %i, align 8
  %inc = add nsw i64 %14, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !24

for.end:                                          ; preds = %land.end
  %15 = load i64, ptr %join_field.addr, align 8
  %add = add nsw i64 %15, 1
  store i64 %add, ptr %i, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %16 = load i64, ptr %i, align 8
  %17 = load i64, ptr %nfields, align 8
  %cmp4 = icmp slt i64 %16, %17
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %18 = load ptr, ptr @output_separator, align 8
  %19 = load i64, ptr @output_seplen, align 8
  %20 = load ptr, ptr @stdout, align 8
  %call6 = call i64 @fwrite_unlocked(ptr noundef %18, i64 noundef 1, i64 noundef %19, ptr noundef %20)
  %21 = load i64, ptr %i, align 8
  %22 = load ptr, ptr %line.addr, align 8
  call void @prfield(i64 noundef %21, ptr noundef %22)
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %23 = load i64, ptr %i, align 8
  %inc8 = add nsw i64 %23, 1
  store i64 %inc8, ptr %i, align 8
  br label %for.cond3, !llvm.loop !25

for.end9:                                         ; preds = %for.cond3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @write_error() #3 {
entry:
  %saved_errno = alloca i32, align 4
  %call = call ptr @__errno_location() #26
  %0 = load i32, ptr %call, align 4
  store i32 %0, ptr %saved_errno, align 4
  %1 = load ptr, ptr @stdout, align 8
  %call1 = call i32 @fflush_unlocked(ptr noundef %1)
  %2 = load ptr, ptr @stdout, align 8
  %call2 = call i32 @fpurge(ptr noundef %2)
  %3 = load ptr, ptr @stdout, align 8
  call void @clearerr_unlocked(ptr noundef %3) #21
  %4 = load i32, ptr %saved_errno, align 4
  %call3 = call ptr @gettext(ptr noundef @.str.64) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef %4, ptr noundef %call3) #24
  unreachable
}

declare i32 @fflush_unlocked(ptr noundef) #2

; Function Attrs: nounwind
declare void @clearerr_unlocked(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @comma_or_blank(i64 %g.coerce) #3 {
entry:
  %g = alloca %struct.mcel_t, align 4
  store i64 %g.coerce, ptr %g, align 4
  %ch = getelementptr inbounds %struct.mcel_t, ptr %g, i32 0, i32 0
  %0 = load i32, ptr %ch, align 4
  %cmp = icmp eq i32 %0, 44
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %ch1 = getelementptr inbounds %struct.mcel_t, ptr %g, i32 0, i32 0
  %1 = load i32, ptr %ch1, align 4
  %call = call i32 @c32isblank(i32 noundef %1)
  %tobool = icmp ne i32 %call, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %tobool, %lor.rhs ]
  ret i1 %2
}

declare ptr @skip_str_matching(ptr noundef, ptr noundef, i1 noundef zeroext) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @decode_field_spec(ptr noundef %s, ptr noundef %file_index, ptr noundef %field_index) #3 {
entry:
  %s.addr = alloca ptr, align 8
  %file_index.addr = alloca ptr, align 8
  %field_index.addr = alloca ptr, align 8
  store ptr %s, ptr %s.addr, align 8
  store ptr %file_index, ptr %file_index.addr, align 8
  store ptr %field_index, ptr %field_index.addr, align 8
  %0 = load ptr, ptr %s.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %0, i64 0
  %1 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %1 to i32
  switch i32 %conv, label %sw.default [
    i32 48, label %sw.bb
    i32 49, label %sw.bb3
    i32 50, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  %2 = load ptr, ptr %s.addr, align 8
  %arrayidx1 = getelementptr inbounds i8, ptr %2, i64 1
  %3 = load i8, ptr %arrayidx1, align 1
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %call = call ptr @gettext(ptr noundef @.str.57) #21
  %4 = load ptr, ptr %s.addr, align 8
  %call2 = call ptr @quote(ptr noundef %4)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call, ptr noundef %call2) #24
  unreachable

if.end:                                           ; preds = %sw.bb
  %5 = load ptr, ptr %file_index.addr, align 8
  store i32 0, ptr %5, align 4
  %6 = load ptr, ptr %field_index.addr, align 8
  store i64 0, ptr %6, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry, %entry
  %7 = load ptr, ptr %s.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, ptr %7, i64 1
  %8 = load i8, ptr %arrayidx4, align 1
  %conv5 = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv5, 46
  br i1 %cmp, label %if.then7, label %if.end10

if.then7:                                         ; preds = %sw.bb3
  %call8 = call ptr @gettext(ptr noundef @.str.57) #21
  %9 = load ptr, ptr %s.addr, align 8
  %call9 = call ptr @quote(ptr noundef %9)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call8, ptr noundef %call9) #24
  unreachable

if.end10:                                         ; preds = %sw.bb3
  %10 = load ptr, ptr %s.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, ptr %10, i64 0
  %11 = load i8, ptr %arrayidx11, align 1
  %conv12 = sext i8 %11 to i32
  %sub = sub nsw i32 %conv12, 48
  %12 = load ptr, ptr %file_index.addr, align 8
  store i32 %sub, ptr %12, align 4
  %13 = load ptr, ptr %s.addr, align 8
  %add.ptr = getelementptr inbounds i8, ptr %13, i64 2
  %call13 = call i64 @string_to_join_field(ptr noundef %add.ptr)
  %14 = load ptr, ptr %field_index.addr, align 8
  store i64 %call13, ptr %14, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %call14 = call ptr @gettext(ptr noundef @.str.58) #21
  %15 = load ptr, ptr %s.addr, align 8
  %call15 = call ptr @quote(ptr noundef %15)
  call void (i32, i32, ptr, ...) @error(i32 noundef 1, i32 noundef 0, ptr noundef %call14, ptr noundef %call15) #24
  unreachable

sw.epilog:                                        ; preds = %if.end10, %if.end
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @add_field(i32 noundef %file, i64 noundef %field) #3 {
entry:
  %file.addr = alloca i32, align 4
  %field.addr = alloca i64, align 8
  %o = alloca ptr, align 8
  store i32 %file, ptr %file.addr, align 4
  store i64 %field, ptr %field.addr, align 8
  %0 = load i32, ptr %file.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, ptr %file.addr, align 4
  %cmp1 = icmp eq i32 %1, 1
  br i1 %cmp1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i32, ptr %file.addr, align 4
  %cmp3 = icmp eq i32 %2, 2
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false2
  call void @__assert_fail(ptr noundef @.str.59, ptr noundef @.str.60, i32 noundef 826, ptr noundef @__PRETTY_FUNCTION__.add_field) #22
  unreachable

if.end:                                           ; preds = %if.then
  %3 = load i32, ptr %file.addr, align 4
  %cmp4 = icmp ne i32 %3, 0
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %if.end
  %4 = load i64, ptr %field.addr, align 8
  %cmp6 = icmp eq i64 %4, 0
  br i1 %cmp6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %lor.lhs.false5, %if.end
  br label %if.end9

if.else8:                                         ; preds = %lor.lhs.false5
  call void @__assert_fail(ptr noundef @.str.61, ptr noundef @.str.60, i32 noundef 827, ptr noundef @__PRETTY_FUNCTION__.add_field) #22
  unreachable

if.end9:                                          ; preds = %if.then7
  %call = call noalias nonnull ptr @xmalloc(i64 noundef 24) #27
  store ptr %call, ptr %o, align 8
  %5 = load i32, ptr %file.addr, align 4
  %6 = load ptr, ptr %o, align 8
  %file10 = getelementptr inbounds %struct.outlist, ptr %6, i32 0, i32 0
  store i32 %5, ptr %file10, align 8
  %7 = load i64, ptr %field.addr, align 8
  %8 = load ptr, ptr %o, align 8
  %field11 = getelementptr inbounds %struct.outlist, ptr %8, i32 0, i32 1
  store i64 %7, ptr %field11, align 8
  %9 = load ptr, ptr %o, align 8
  %next = getelementptr inbounds %struct.outlist, ptr %9, i32 0, i32 2
  store ptr null, ptr %next, align 8
  %10 = load ptr, ptr %o, align 8
  %11 = load ptr, ptr @outlist_end, align 8
  %next12 = getelementptr inbounds %struct.outlist, ptr %11, i32 0, i32 2
  store ptr %10, ptr %next12, align 8
  %12 = load ptr, ptr %o, align 8
  store ptr %12, ptr @outlist_end, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(ptr noundef, ptr noundef, i32 noundef, ptr noundef) #4

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local i32 @c_strcasecmp(ptr noundef %s1, ptr noundef %s2) #10 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca ptr, align 8
  %s2.addr = alloca ptr, align 8
  %p1 = alloca ptr, align 8
  %p2 = alloca ptr, align 8
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  store ptr %s1, ptr %s1.addr, align 8
  store ptr %s2, ptr %s2.addr, align 8
  %0 = load ptr, ptr %s1.addr, align 8
  store ptr %0, ptr %p1, align 8
  %1 = load ptr, ptr %s2.addr, align 8
  store ptr %1, ptr %p2, align 8
  %2 = load ptr, ptr %p1, align 8
  %3 = load ptr, ptr %p2, align 8
  %cmp = icmp eq ptr %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %4 = load ptr, ptr %p1, align 8
  %5 = load i8, ptr %4, align 1
  %conv = zext i8 %5 to i32
  %call = call i32 @c_tolower(i32 noundef %conv)
  %conv1 = trunc i32 %call to i8
  store i8 %conv1, ptr %c1, align 1
  %6 = load ptr, ptr %p2, align 8
  %7 = load i8, ptr %6, align 1
  %conv2 = zext i8 %7 to i32
  %call3 = call i32 @c_tolower(i32 noundef %conv2)
  %conv4 = trunc i32 %call3 to i8
  store i8 %conv4, ptr %c2, align 1
  %8 = load i8, ptr %c1, align 1
  %conv5 = zext i8 %8 to i32
  %cmp6 = icmp eq i32 %conv5, 0
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %do.body
  br label %do.end

if.end9:                                          ; preds = %do.body
  %9 = load ptr, ptr %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %9, i32 1
  store ptr %incdec.ptr, ptr %p1, align 8
  %10 = load ptr, ptr %p2, align 8
  %incdec.ptr10 = getelementptr inbounds i8, ptr %10, i32 1
  store ptr %incdec.ptr10, ptr %p2, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end9
  %11 = load i8, ptr %c1, align 1
  %conv11 = zext i8 %11 to i32
  %12 = load i8, ptr %c2, align 1
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv11, %conv12
  br i1 %cmp13, label %do.body, label %do.end, !llvm.loop !26

do.end:                                           ; preds = %do.cond, %if.then8
  %13 = load i8, ptr %c1, align 1
  %conv15 = zext i8 %13 to i32
  %14 = load i8, ptr %c2, align 1
  %conv16 = zext i8 %14 to i32
  %sub = sub nsw i32 %conv15, %conv16
  store i32 %sub, ptr %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %15 = load i32, ptr %retval, align 4
  ret i32 %15
}

declare i32 @c_tolower(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @clone_quoting_options(ptr noundef %o) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %e = alloca i32, align 4
  %p = alloca ptr, align 8
  store ptr %o, ptr %o.addr, align 8
  %call = call ptr @__errno_location() #26
  %0 = load i32, ptr %call, align 4
  store i32 %0, ptr %e, align 4
  %1 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  %call1 = call noalias nonnull ptr @xmemdup(ptr noundef %cond, i64 noundef 56) #28
  store ptr %call1, ptr %p, align 8
  %3 = load i32, ptr %e, align 4
  %call2 = call ptr @__errno_location() #26
  store i32 %3, ptr %call2, align 4
  %4 = load ptr, ptr %p, align 8
  ret ptr %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @get_quoting_style(ptr noundef %o) #3 {
entry:
  %o.addr = alloca ptr, align 8
  store ptr %o, ptr %o.addr, align 8
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ @default_quoting_options, %cond.false ]
  %style = getelementptr inbounds %struct.quoting_options, ptr %cond, i32 0, i32 0
  %2 = load i32, ptr %style, align 8
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_quoting_style(ptr noundef %o, i32 noundef %s) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %s.addr = alloca i32, align 4
  store ptr %o, ptr %o.addr, align 8
  store i32 %s, ptr %s.addr, align 4
  %0 = load i32, ptr %s.addr, align 4
  %1 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  %style = getelementptr inbounds %struct.quoting_options, ptr %cond, i32 0, i32 0
  store i32 %0, ptr %style, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_char_quoting(ptr noundef %o, i8 noundef signext %c, i32 noundef %i) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %c.addr = alloca i8, align 1
  %i.addr = alloca i32, align 4
  %uc = alloca i8, align 1
  %p = alloca ptr, align 8
  %shift = alloca i32, align 4
  %r = alloca i32, align 4
  store ptr %o, ptr %o.addr, align 8
  store i8 %c, ptr %c.addr, align 1
  store i32 %i, ptr %i.addr, align 4
  %0 = load i8, ptr %c.addr, align 1
  store i8 %0, ptr %uc, align 1
  %1 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %2, %cond.true ], [ @default_quoting_options, %cond.false ]
  %quote_these_too = getelementptr inbounds %struct.quoting_options, ptr %cond, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], ptr %quote_these_too, i64 0, i64 0
  %3 = load i8, ptr %uc, align 1
  %conv = zext i8 %3 to i64
  %div = udiv i64 %conv, 32
  %add.ptr = getelementptr inbounds i32, ptr %arraydecay, i64 %div
  store ptr %add.ptr, ptr %p, align 8
  %4 = load i8, ptr %uc, align 1
  %conv1 = zext i8 %4 to i64
  %rem = urem i64 %conv1, 32
  %conv2 = trunc i64 %rem to i32
  store i32 %conv2, ptr %shift, align 4
  %5 = load ptr, ptr %p, align 8
  %6 = load i32, ptr %5, align 4
  %7 = load i32, ptr %shift, align 4
  %shr = lshr i32 %6, %7
  %and = and i32 %shr, 1
  store i32 %and, ptr %r, align 4
  %8 = load i32, ptr %i.addr, align 4
  %and3 = and i32 %8, 1
  %9 = load i32, ptr %r, align 4
  %xor = xor i32 %and3, %9
  %10 = load i32, ptr %shift, align 4
  %shl = shl i32 %xor, %10
  %11 = load ptr, ptr %p, align 8
  %12 = load i32, ptr %11, align 4
  %xor4 = xor i32 %12, %shl
  store i32 %xor4, ptr %11, align 4
  %13 = load i32, ptr %r, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_quoting_flags(ptr noundef %o, i32 noundef %i) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %i.addr = alloca i32, align 4
  %r = alloca i32, align 4
  store ptr %o, ptr %o.addr, align 8
  store i32 %i, ptr %i.addr, align 4
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store ptr @default_quoting_options, ptr %o.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %o.addr, align 8
  %flags = getelementptr inbounds %struct.quoting_options, ptr %1, i32 0, i32 1
  %2 = load i32, ptr %flags, align 4
  store i32 %2, ptr %r, align 4
  %3 = load i32, ptr %i.addr, align 4
  %4 = load ptr, ptr %o.addr, align 8
  %flags1 = getelementptr inbounds %struct.quoting_options, ptr %4, i32 0, i32 1
  store i32 %3, ptr %flags1, align 4
  %5 = load i32, ptr %r, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_custom_quoting(ptr noundef %o, ptr noundef %left_quote, ptr noundef %right_quote) #3 {
entry:
  %o.addr = alloca ptr, align 8
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  store ptr %o, ptr %o.addr, align 8
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store ptr @default_quoting_options, ptr %o.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %o.addr, align 8
  %style = getelementptr inbounds %struct.quoting_options, ptr %1, i32 0, i32 0
  store i32 10, ptr %style, align 8
  %2 = load ptr, ptr %left_quote.addr, align 8
  %tobool1 = icmp ne ptr %2, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %if.end
  %3 = load ptr, ptr %right_quote.addr, align 8
  %tobool2 = icmp ne ptr %3, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  call void @abort() #22
  unreachable

if.end4:                                          ; preds = %lor.lhs.false
  %4 = load ptr, ptr %left_quote.addr, align 8
  %5 = load ptr, ptr %o.addr, align 8
  %left_quote5 = getelementptr inbounds %struct.quoting_options, ptr %5, i32 0, i32 3
  store ptr %4, ptr %left_quote5, align 8
  %6 = load ptr, ptr %right_quote.addr, align 8
  %7 = load ptr, ptr %o.addr, align 8
  %right_quote6 = getelementptr inbounds %struct.quoting_options, ptr %7, i32 0, i32 4
  store ptr %6, ptr %right_quote6, align 8
  ret void
}

; Function Attrs: noreturn nounwind
declare void @abort() #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @quotearg_buffer(ptr noundef %buffer, i64 noundef %buffersize, ptr noundef %arg, i64 noundef %argsize, ptr noundef %o) #3 {
entry:
  %buffer.addr = alloca ptr, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %e = alloca i32, align 4
  %r = alloca i64, align 8
  store ptr %buffer, ptr %buffer.addr, align 8
  store i64 %buffersize, ptr %buffersize.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store ptr %o, ptr %o.addr, align 8
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ @default_quoting_options, %cond.false ]
  store ptr %cond, ptr %p, align 8
  %call = call ptr @__errno_location() #26
  %2 = load i32, ptr %call, align 4
  store i32 %2, ptr %e, align 4
  %3 = load ptr, ptr %buffer.addr, align 8
  %4 = load i64, ptr %buffersize.addr, align 8
  %5 = load ptr, ptr %arg.addr, align 8
  %6 = load i64, ptr %argsize.addr, align 8
  %7 = load ptr, ptr %p, align 8
  %style = getelementptr inbounds %struct.quoting_options, ptr %7, i32 0, i32 0
  %8 = load i32, ptr %style, align 8
  %9 = load ptr, ptr %p, align 8
  %flags = getelementptr inbounds %struct.quoting_options, ptr %9, i32 0, i32 1
  %10 = load i32, ptr %flags, align 4
  %11 = load ptr, ptr %p, align 8
  %quote_these_too = getelementptr inbounds %struct.quoting_options, ptr %11, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], ptr %quote_these_too, i64 0, i64 0
  %12 = load ptr, ptr %p, align 8
  %left_quote = getelementptr inbounds %struct.quoting_options, ptr %12, i32 0, i32 3
  %13 = load ptr, ptr %left_quote, align 8
  %14 = load ptr, ptr %p, align 8
  %right_quote = getelementptr inbounds %struct.quoting_options, ptr %14, i32 0, i32 4
  %15 = load ptr, ptr %right_quote, align 8
  %call1 = call i64 @quotearg_buffer_restyled(ptr noundef %3, i64 noundef %4, ptr noundef %5, i64 noundef %6, i32 noundef %8, i32 noundef %10, ptr noundef %arraydecay, ptr noundef %13, ptr noundef %15)
  store i64 %call1, ptr %r, align 8
  %16 = load i32, ptr %e, align 4
  %call2 = call ptr @__errno_location() #26
  store i32 %16, ptr %call2, align 4
  %17 = load i64, ptr %r, align 8
  ret i64 %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(ptr noundef %buffer, i64 noundef %buffersize, ptr noundef %arg, i64 noundef %argsize, i32 noundef %quoting_style, i32 noundef %flags, ptr noundef %quote_these_too, ptr noundef %left_quote, ptr noundef %right_quote) #3 {
entry:
  %retval = alloca i64, align 8
  %buffer.addr = alloca ptr, align 8
  %buffersize.addr = alloca i64, align 8
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %quoting_style.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %quote_these_too.addr = alloca ptr, align 8
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %orig_buffersize = alloca i64, align 8
  %quote_string = alloca ptr, align 8
  %quote_string_len = alloca i64, align 8
  %backslash_escapes = alloca i8, align 1
  %unibyte_locale = alloca i8, align 1
  %elide_outer_quotes = alloca i8, align 1
  %encountered_single_quote = alloca i8, align 1
  %all_c_and_shell_quote_compat = alloca i8, align 1
  %pending_shell_escape_end = alloca i8, align 1
  %c = alloca i8, align 1
  %esc = alloca i8, align 1
  %is_right_quote = alloca i8, align 1
  %escaping = alloca i8, align 1
  %c_and_shell_quote_compat = alloca i8, align 1
  %m = alloca i64, align 8
  %printable = alloca i8, align 1
  %mbstate = alloca %struct.__mbstate_t, align 4
  %w = alloca i32, align 4
  %bytes = alloca i64, align 8
  %j = alloca i64, align 8
  %ilim = alloca i64, align 8
  store ptr %buffer, ptr %buffer.addr, align 8
  store i64 %buffersize, ptr %buffersize.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store i32 %quoting_style, ptr %quoting_style.addr, align 4
  store i32 %flags, ptr %flags.addr, align 4
  store ptr %quote_these_too, ptr %quote_these_too.addr, align 8
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store i64 0, ptr %len, align 8
  store i64 0, ptr %orig_buffersize, align 8
  store ptr null, ptr %quote_string, align 8
  store i64 0, ptr %quote_string_len, align 8
  store i8 0, ptr %backslash_escapes, align 1
  %call = call i64 @__ctype_get_mb_cur_max() #21
  %cmp = icmp eq i64 %call, 1
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, ptr %unibyte_locale, align 1
  %0 = load i32, ptr %flags.addr, align 4
  %and = and i32 %0, 2
  %cmp1 = icmp ne i32 %and, 0
  %frombool2 = zext i1 %cmp1 to i8
  store i8 %frombool2, ptr %elide_outer_quotes, align 1
  store i8 0, ptr %encountered_single_quote, align 1
  store i8 1, ptr %all_c_and_shell_quote_compat, align 1
  br label %process_input

process_input:                                    ; preds = %if.then674, %entry
  store i8 0, ptr %pending_shell_escape_end, align 1
  %1 = load i32, ptr %quoting_style.addr, align 4
  switch i32 %1, label %sw.default [
    i32 6, label %sw.bb
    i32 5, label %sw.bb3
    i32 7, label %sw.bb7
    i32 8, label %sw.bb8
    i32 9, label %sw.bb8
    i32 10, label %sw.bb8
    i32 3, label %sw.bb26
    i32 1, label %sw.bb27
    i32 4, label %sw.bb28
    i32 2, label %sw.bb32
    i32 0, label %sw.bb43
  ]

sw.bb:                                            ; preds = %process_input
  store i32 5, ptr %quoting_style.addr, align 4
  store i8 1, ptr %elide_outer_quotes, align 1
  br label %sw.bb3

sw.bb3:                                           ; preds = %sw.bb, %process_input
  %2 = load i8, ptr %elide_outer_quotes, align 1
  %tobool = trunc i8 %2 to i1
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %sw.bb3
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load i64, ptr %len, align 8
  %4 = load i64, ptr %buffersize.addr, align 8
  %cmp4 = icmp ult i64 %3, %4
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %do.body
  %5 = load ptr, ptr %buffer.addr, align 8
  %6 = load i64, ptr %len, align 8
  %arrayidx = getelementptr inbounds i8, ptr %5, i64 %6
  store i8 34, ptr %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then5, %do.body
  %7 = load i64, ptr %len, align 8
  %inc = add i64 %7, 1
  store i64 %inc, ptr %len, align 8
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end6

if.end6:                                          ; preds = %do.end, %sw.bb3
  store i8 1, ptr %backslash_escapes, align 1
  store ptr @.str.10.77, ptr %quote_string, align 8
  store i64 1, ptr %quote_string_len, align 8
  br label %sw.epilog

sw.bb7:                                           ; preds = %process_input
  store i8 1, ptr %backslash_escapes, align 1
  store i8 0, ptr %elide_outer_quotes, align 1
  br label %sw.epilog

sw.bb8:                                           ; preds = %process_input, %process_input, %process_input
  %8 = load i32, ptr %quoting_style.addr, align 4
  %cmp9 = icmp ne i32 %8, 10
  br i1 %cmp9, label %if.then10, label %if.end13

if.then10:                                        ; preds = %sw.bb8
  %9 = load i32, ptr %quoting_style.addr, align 4
  %call11 = call ptr @gettext_quote(ptr noundef @.str.11.78, i32 noundef %9)
  store ptr %call11, ptr %left_quote.addr, align 8
  %10 = load i32, ptr %quoting_style.addr, align 4
  %call12 = call ptr @gettext_quote(ptr noundef @.str.12.79, i32 noundef %10)
  store ptr %call12, ptr %right_quote.addr, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %sw.bb8
  %11 = load i8, ptr %elide_outer_quotes, align 1
  %tobool14 = trunc i8 %11 to i1
  br i1 %tobool14, label %if.end24, label %if.then15

if.then15:                                        ; preds = %if.end13
  %12 = load ptr, ptr %left_quote.addr, align 8
  store ptr %12, ptr %quote_string, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then15
  %13 = load ptr, ptr %quote_string, align 8
  %14 = load i8, ptr %13, align 1
  %tobool16 = icmp ne i8 %14, 0
  br i1 %tobool16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body17

do.body17:                                        ; preds = %for.body
  %15 = load i64, ptr %len, align 8
  %16 = load i64, ptr %buffersize.addr, align 8
  %cmp18 = icmp ult i64 %15, %16
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %do.body17
  %17 = load ptr, ptr %quote_string, align 8
  %18 = load i8, ptr %17, align 1
  %19 = load ptr, ptr %buffer.addr, align 8
  %20 = load i64, ptr %len, align 8
  %arrayidx20 = getelementptr inbounds i8, ptr %19, i64 %20
  store i8 %18, ptr %arrayidx20, align 1
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %do.body17
  %21 = load i64, ptr %len, align 8
  %inc22 = add i64 %21, 1
  store i64 %inc22, ptr %len, align 8
  br label %do.end23

do.end23:                                         ; preds = %if.end21
  br label %for.inc

for.inc:                                          ; preds = %do.end23
  %22 = load ptr, ptr %quote_string, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %22, i32 1
  store ptr %incdec.ptr, ptr %quote_string, align 8
  br label %for.cond, !llvm.loop !27

for.end:                                          ; preds = %for.cond
  br label %if.end24

if.end24:                                         ; preds = %for.end, %if.end13
  store i8 1, ptr %backslash_escapes, align 1
  %23 = load ptr, ptr %right_quote.addr, align 8
  store ptr %23, ptr %quote_string, align 8
  %24 = load ptr, ptr %quote_string, align 8
  %call25 = call i64 @strlen(ptr noundef %24) #23
  store i64 %call25, ptr %quote_string_len, align 8
  br label %sw.epilog

sw.bb26:                                          ; preds = %process_input
  store i8 1, ptr %backslash_escapes, align 1
  br label %sw.bb27

sw.bb27:                                          ; preds = %sw.bb26, %process_input
  store i8 1, ptr %elide_outer_quotes, align 1
  br label %sw.bb28

sw.bb28:                                          ; preds = %sw.bb27, %process_input
  %25 = load i8, ptr %elide_outer_quotes, align 1
  %tobool29 = trunc i8 %25 to i1
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %sw.bb28
  store i8 1, ptr %backslash_escapes, align 1
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %sw.bb28
  br label %sw.bb32

sw.bb32:                                          ; preds = %if.end31, %process_input
  store i32 2, ptr %quoting_style.addr, align 4
  %26 = load i8, ptr %elide_outer_quotes, align 1
  %tobool33 = trunc i8 %26 to i1
  br i1 %tobool33, label %if.end42, label %if.then34

if.then34:                                        ; preds = %sw.bb32
  br label %do.body35

do.body35:                                        ; preds = %if.then34
  %27 = load i64, ptr %len, align 8
  %28 = load i64, ptr %buffersize.addr, align 8
  %cmp36 = icmp ult i64 %27, %28
  br i1 %cmp36, label %if.then37, label %if.end39

if.then37:                                        ; preds = %do.body35
  %29 = load ptr, ptr %buffer.addr, align 8
  %30 = load i64, ptr %len, align 8
  %arrayidx38 = getelementptr inbounds i8, ptr %29, i64 %30
  store i8 39, ptr %arrayidx38, align 1
  br label %if.end39

if.end39:                                         ; preds = %if.then37, %do.body35
  %31 = load i64, ptr %len, align 8
  %inc40 = add i64 %31, 1
  store i64 %inc40, ptr %len, align 8
  br label %do.end41

do.end41:                                         ; preds = %if.end39
  br label %if.end42

if.end42:                                         ; preds = %do.end41, %sw.bb32
  store ptr @.str.12.79, ptr %quote_string, align 8
  store i64 1, ptr %quote_string_len, align 8
  br label %sw.epilog

sw.bb43:                                          ; preds = %process_input
  store i8 0, ptr %elide_outer_quotes, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %process_input
  call void @abort() #22
  unreachable

sw.epilog:                                        ; preds = %sw.bb43, %if.end42, %if.end24, %sw.bb7, %if.end6
  store i64 0, ptr %i, align 8
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc646, %sw.epilog
  %32 = load i64, ptr %argsize.addr, align 8
  %cmp45 = icmp eq i64 %32, -1
  br i1 %cmp45, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond44
  %33 = load ptr, ptr %arg.addr, align 8
  %34 = load i64, ptr %i, align 8
  %arrayidx46 = getelementptr inbounds i8, ptr %33, i64 %34
  %35 = load i8, ptr %arrayidx46, align 1
  %conv = sext i8 %35 to i32
  %cmp47 = icmp eq i32 %conv, 0
  %conv48 = zext i1 %cmp47 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond44
  %36 = load i64, ptr %i, align 8
  %37 = load i64, ptr %argsize.addr, align 8
  %cmp49 = icmp eq i64 %36, %37
  %conv50 = zext i1 %cmp49 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv48, %cond.true ], [ %conv50, %cond.false ]
  %tobool51 = icmp ne i32 %cond, 0
  %lnot = xor i1 %tobool51, true
  br i1 %lnot, label %for.body52, label %for.end648

for.body52:                                       ; preds = %cond.end
  store i8 0, ptr %is_right_quote, align 1
  store i8 0, ptr %escaping, align 1
  store i8 0, ptr %c_and_shell_quote_compat, align 1
  %38 = load i8, ptr %backslash_escapes, align 1
  %tobool53 = trunc i8 %38 to i1
  br i1 %tobool53, label %land.lhs.true, label %if.end80

land.lhs.true:                                    ; preds = %for.body52
  %39 = load i32, ptr %quoting_style.addr, align 4
  %cmp55 = icmp ne i32 %39, 2
  br i1 %cmp55, label %land.lhs.true57, label %if.end80

land.lhs.true57:                                  ; preds = %land.lhs.true
  %40 = load i64, ptr %quote_string_len, align 8
  %tobool58 = icmp ne i64 %40, 0
  br i1 %tobool58, label %land.lhs.true59, label %if.end80

land.lhs.true59:                                  ; preds = %land.lhs.true57
  %41 = load i64, ptr %i, align 8
  %42 = load i64, ptr %quote_string_len, align 8
  %add = add i64 %41, %42
  %43 = load i64, ptr %argsize.addr, align 8
  %cmp60 = icmp eq i64 %43, -1
  br i1 %cmp60, label %land.lhs.true62, label %cond.false67

land.lhs.true62:                                  ; preds = %land.lhs.true59
  %44 = load i64, ptr %quote_string_len, align 8
  %cmp63 = icmp ult i64 1, %44
  br i1 %cmp63, label %cond.true65, label %cond.false67

cond.true65:                                      ; preds = %land.lhs.true62
  %45 = load ptr, ptr %arg.addr, align 8
  %call66 = call i64 @strlen(ptr noundef %45) #23
  store i64 %call66, ptr %argsize.addr, align 8
  br label %cond.end68

cond.false67:                                     ; preds = %land.lhs.true62, %land.lhs.true59
  %46 = load i64, ptr %argsize.addr, align 8
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi i64 [ %call66, %cond.true65 ], [ %46, %cond.false67 ]
  %cmp70 = icmp ule i64 %add, %cond69
  br i1 %cmp70, label %land.lhs.true72, label %if.end80

land.lhs.true72:                                  ; preds = %cond.end68
  %47 = load ptr, ptr %arg.addr, align 8
  %48 = load i64, ptr %i, align 8
  %add.ptr = getelementptr inbounds i8, ptr %47, i64 %48
  %49 = load ptr, ptr %quote_string, align 8
  %50 = load i64, ptr %quote_string_len, align 8
  %call73 = call i32 @memcmp(ptr noundef %add.ptr, ptr noundef %49, i64 noundef %50) #23
  %cmp74 = icmp eq i32 %call73, 0
  br i1 %cmp74, label %if.then76, label %if.end80

if.then76:                                        ; preds = %land.lhs.true72
  %51 = load i8, ptr %elide_outer_quotes, align 1
  %tobool77 = trunc i8 %51 to i1
  br i1 %tobool77, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.then76
  br label %force_outer_quoting_style

if.end79:                                         ; preds = %if.then76
  store i8 1, ptr %is_right_quote, align 1
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %land.lhs.true72, %cond.end68, %land.lhs.true57, %land.lhs.true, %for.body52
  %52 = load ptr, ptr %arg.addr, align 8
  %53 = load i64, ptr %i, align 8
  %arrayidx81 = getelementptr inbounds i8, ptr %52, i64 %53
  %54 = load i8, ptr %arrayidx81, align 1
  store i8 %54, ptr %c, align 1
  %55 = load i8, ptr %c, align 1
  %conv82 = zext i8 %55 to i32
  switch i32 %conv82, label %sw.default333 [
    i32 0, label %sw.bb83
    i32 63, label %sw.bb170
    i32 7, label %sw.bb234
    i32 8, label %sw.bb235
    i32 12, label %sw.bb236
    i32 10, label %sw.bb237
    i32 13, label %sw.bb238
    i32 9, label %sw.bb239
    i32 11, label %sw.bb240
    i32 92, label %sw.bb241
    i32 123, label %sw.bb268
    i32 125, label %sw.bb268
    i32 35, label %sw.bb281
    i32 126, label %sw.bb281
    i32 32, label %sw.bb286
    i32 33, label %sw.bb287
    i32 34, label %sw.bb287
    i32 36, label %sw.bb287
    i32 38, label %sw.bb287
    i32 40, label %sw.bb287
    i32 41, label %sw.bb287
    i32 42, label %sw.bb287
    i32 59, label %sw.bb287
    i32 60, label %sw.bb287
    i32 61, label %sw.bb287
    i32 62, label %sw.bb287
    i32 91, label %sw.bb287
    i32 94, label %sw.bb287
    i32 96, label %sw.bb287
    i32 124, label %sw.bb287
    i32 39, label %sw.bb295
    i32 37, label %sw.bb332
    i32 43, label %sw.bb332
    i32 44, label %sw.bb332
    i32 45, label %sw.bb332
    i32 46, label %sw.bb332
    i32 47, label %sw.bb332
    i32 48, label %sw.bb332
    i32 49, label %sw.bb332
    i32 50, label %sw.bb332
    i32 51, label %sw.bb332
    i32 52, label %sw.bb332
    i32 53, label %sw.bb332
    i32 54, label %sw.bb332
    i32 55, label %sw.bb332
    i32 56, label %sw.bb332
    i32 57, label %sw.bb332
    i32 58, label %sw.bb332
    i32 65, label %sw.bb332
    i32 66, label %sw.bb332
    i32 67, label %sw.bb332
    i32 68, label %sw.bb332
    i32 69, label %sw.bb332
    i32 70, label %sw.bb332
    i32 71, label %sw.bb332
    i32 72, label %sw.bb332
    i32 73, label %sw.bb332
    i32 74, label %sw.bb332
    i32 75, label %sw.bb332
    i32 76, label %sw.bb332
    i32 77, label %sw.bb332
    i32 78, label %sw.bb332
    i32 79, label %sw.bb332
    i32 80, label %sw.bb332
    i32 81, label %sw.bb332
    i32 82, label %sw.bb332
    i32 83, label %sw.bb332
    i32 84, label %sw.bb332
    i32 85, label %sw.bb332
    i32 86, label %sw.bb332
    i32 87, label %sw.bb332
    i32 88, label %sw.bb332
    i32 89, label %sw.bb332
    i32 90, label %sw.bb332
    i32 93, label %sw.bb332
    i32 95, label %sw.bb332
    i32 97, label %sw.bb332
    i32 98, label %sw.bb332
    i32 99, label %sw.bb332
    i32 100, label %sw.bb332
    i32 101, label %sw.bb332
    i32 102, label %sw.bb332
    i32 103, label %sw.bb332
    i32 104, label %sw.bb332
    i32 105, label %sw.bb332
    i32 106, label %sw.bb332
    i32 107, label %sw.bb332
    i32 108, label %sw.bb332
    i32 109, label %sw.bb332
    i32 110, label %sw.bb332
    i32 111, label %sw.bb332
    i32 112, label %sw.bb332
    i32 113, label %sw.bb332
    i32 114, label %sw.bb332
    i32 115, label %sw.bb332
    i32 116, label %sw.bb332
    i32 117, label %sw.bb332
    i32 118, label %sw.bb332
    i32 119, label %sw.bb332
    i32 120, label %sw.bb332
    i32 121, label %sw.bb332
    i32 122, label %sw.bb332
  ]

sw.bb83:                                          ; preds = %if.end80
  %56 = load i8, ptr %backslash_escapes, align 1
  %tobool84 = trunc i8 %56 to i1
  br i1 %tobool84, label %if.then85, label %if.else

if.then85:                                        ; preds = %sw.bb83
  br label %do.body86

do.body86:                                        ; preds = %if.then85
  %57 = load i8, ptr %elide_outer_quotes, align 1
  %tobool87 = trunc i8 %57 to i1
  br i1 %tobool87, label %if.then88, label %if.end89

if.then88:                                        ; preds = %do.body86
  br label %force_outer_quoting_style

if.end89:                                         ; preds = %do.body86
  store i8 1, ptr %escaping, align 1
  %58 = load i32, ptr %quoting_style.addr, align 4
  %cmp90 = icmp eq i32 %58, 2
  br i1 %cmp90, label %land.lhs.true92, label %if.end119

land.lhs.true92:                                  ; preds = %if.end89
  %59 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool93 = trunc i8 %59 to i1
  br i1 %tobool93, label %if.end119, label %if.then94

if.then94:                                        ; preds = %land.lhs.true92
  br label %do.body95

do.body95:                                        ; preds = %if.then94
  %60 = load i64, ptr %len, align 8
  %61 = load i64, ptr %buffersize.addr, align 8
  %cmp96 = icmp ult i64 %60, %61
  br i1 %cmp96, label %if.then98, label %if.end100

if.then98:                                        ; preds = %do.body95
  %62 = load ptr, ptr %buffer.addr, align 8
  %63 = load i64, ptr %len, align 8
  %arrayidx99 = getelementptr inbounds i8, ptr %62, i64 %63
  store i8 39, ptr %arrayidx99, align 1
  br label %if.end100

if.end100:                                        ; preds = %if.then98, %do.body95
  %64 = load i64, ptr %len, align 8
  %inc101 = add i64 %64, 1
  store i64 %inc101, ptr %len, align 8
  br label %do.end102

do.end102:                                        ; preds = %if.end100
  br label %do.body103

do.body103:                                       ; preds = %do.end102
  %65 = load i64, ptr %len, align 8
  %66 = load i64, ptr %buffersize.addr, align 8
  %cmp104 = icmp ult i64 %65, %66
  br i1 %cmp104, label %if.then106, label %if.end108

if.then106:                                       ; preds = %do.body103
  %67 = load ptr, ptr %buffer.addr, align 8
  %68 = load i64, ptr %len, align 8
  %arrayidx107 = getelementptr inbounds i8, ptr %67, i64 %68
  store i8 36, ptr %arrayidx107, align 1
  br label %if.end108

if.end108:                                        ; preds = %if.then106, %do.body103
  %69 = load i64, ptr %len, align 8
  %inc109 = add i64 %69, 1
  store i64 %inc109, ptr %len, align 8
  br label %do.end110

do.end110:                                        ; preds = %if.end108
  br label %do.body111

do.body111:                                       ; preds = %do.end110
  %70 = load i64, ptr %len, align 8
  %71 = load i64, ptr %buffersize.addr, align 8
  %cmp112 = icmp ult i64 %70, %71
  br i1 %cmp112, label %if.then114, label %if.end116

if.then114:                                       ; preds = %do.body111
  %72 = load ptr, ptr %buffer.addr, align 8
  %73 = load i64, ptr %len, align 8
  %arrayidx115 = getelementptr inbounds i8, ptr %72, i64 %73
  store i8 39, ptr %arrayidx115, align 1
  br label %if.end116

if.end116:                                        ; preds = %if.then114, %do.body111
  %74 = load i64, ptr %len, align 8
  %inc117 = add i64 %74, 1
  store i64 %inc117, ptr %len, align 8
  br label %do.end118

do.end118:                                        ; preds = %if.end116
  store i8 1, ptr %pending_shell_escape_end, align 1
  br label %if.end119

if.end119:                                        ; preds = %do.end118, %land.lhs.true92, %if.end89
  br label %do.body120

do.body120:                                       ; preds = %if.end119
  %75 = load i64, ptr %len, align 8
  %76 = load i64, ptr %buffersize.addr, align 8
  %cmp121 = icmp ult i64 %75, %76
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %do.body120
  %77 = load ptr, ptr %buffer.addr, align 8
  %78 = load i64, ptr %len, align 8
  %arrayidx124 = getelementptr inbounds i8, ptr %77, i64 %78
  store i8 92, ptr %arrayidx124, align 1
  br label %if.end125

if.end125:                                        ; preds = %if.then123, %do.body120
  %79 = load i64, ptr %len, align 8
  %inc126 = add i64 %79, 1
  store i64 %inc126, ptr %len, align 8
  br label %do.end127

do.end127:                                        ; preds = %if.end125
  br label %do.end128

do.end128:                                        ; preds = %do.end127
  %80 = load i32, ptr %quoting_style.addr, align 4
  %cmp129 = icmp ne i32 %80, 2
  br i1 %cmp129, label %land.lhs.true131, label %if.end164

land.lhs.true131:                                 ; preds = %do.end128
  %81 = load i64, ptr %i, align 8
  %add132 = add i64 %81, 1
  %82 = load i64, ptr %argsize.addr, align 8
  %cmp133 = icmp ult i64 %add132, %82
  br i1 %cmp133, label %land.lhs.true135, label %if.end164

land.lhs.true135:                                 ; preds = %land.lhs.true131
  %83 = load ptr, ptr %arg.addr, align 8
  %84 = load i64, ptr %i, align 8
  %add136 = add i64 %84, 1
  %arrayidx137 = getelementptr inbounds i8, ptr %83, i64 %add136
  %85 = load i8, ptr %arrayidx137, align 1
  %conv138 = sext i8 %85 to i32
  %cmp139 = icmp sle i32 48, %conv138
  br i1 %cmp139, label %land.lhs.true141, label %if.end164

land.lhs.true141:                                 ; preds = %land.lhs.true135
  %86 = load ptr, ptr %arg.addr, align 8
  %87 = load i64, ptr %i, align 8
  %add142 = add i64 %87, 1
  %arrayidx143 = getelementptr inbounds i8, ptr %86, i64 %add142
  %88 = load i8, ptr %arrayidx143, align 1
  %conv144 = sext i8 %88 to i32
  %cmp145 = icmp sle i32 %conv144, 57
  br i1 %cmp145, label %if.then147, label %if.end164

if.then147:                                       ; preds = %land.lhs.true141
  br label %do.body148

do.body148:                                       ; preds = %if.then147
  %89 = load i64, ptr %len, align 8
  %90 = load i64, ptr %buffersize.addr, align 8
  %cmp149 = icmp ult i64 %89, %90
  br i1 %cmp149, label %if.then151, label %if.end153

if.then151:                                       ; preds = %do.body148
  %91 = load ptr, ptr %buffer.addr, align 8
  %92 = load i64, ptr %len, align 8
  %arrayidx152 = getelementptr inbounds i8, ptr %91, i64 %92
  store i8 48, ptr %arrayidx152, align 1
  br label %if.end153

if.end153:                                        ; preds = %if.then151, %do.body148
  %93 = load i64, ptr %len, align 8
  %inc154 = add i64 %93, 1
  store i64 %inc154, ptr %len, align 8
  br label %do.end155

do.end155:                                        ; preds = %if.end153
  br label %do.body156

do.body156:                                       ; preds = %do.end155
  %94 = load i64, ptr %len, align 8
  %95 = load i64, ptr %buffersize.addr, align 8
  %cmp157 = icmp ult i64 %94, %95
  br i1 %cmp157, label %if.then159, label %if.end161

if.then159:                                       ; preds = %do.body156
  %96 = load ptr, ptr %buffer.addr, align 8
  %97 = load i64, ptr %len, align 8
  %arrayidx160 = getelementptr inbounds i8, ptr %96, i64 %97
  store i8 48, ptr %arrayidx160, align 1
  br label %if.end161

if.end161:                                        ; preds = %if.then159, %do.body156
  %98 = load i64, ptr %len, align 8
  %inc162 = add i64 %98, 1
  store i64 %inc162, ptr %len, align 8
  br label %do.end163

do.end163:                                        ; preds = %if.end161
  br label %if.end164

if.end164:                                        ; preds = %do.end163, %land.lhs.true141, %land.lhs.true135, %land.lhs.true131, %do.end128
  store i8 48, ptr %c, align 1
  br label %if.end169

if.else:                                          ; preds = %sw.bb83
  %99 = load i32, ptr %flags.addr, align 4
  %and165 = and i32 %99, 1
  %tobool166 = icmp ne i32 %and165, 0
  br i1 %tobool166, label %if.then167, label %if.end168

if.then167:                                       ; preds = %if.else
  br label %for.inc646

if.end168:                                        ; preds = %if.else
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %if.end164
  br label %sw.epilog546

sw.bb170:                                         ; preds = %if.end80
  %100 = load i32, ptr %quoting_style.addr, align 4
  switch i32 %100, label %sw.epilog233 [
    i32 2, label %sw.bb171
    i32 5, label %sw.bb175
  ]

sw.bb171:                                         ; preds = %sw.bb170
  %101 = load i8, ptr %elide_outer_quotes, align 1
  %tobool172 = trunc i8 %101 to i1
  br i1 %tobool172, label %if.then173, label %if.end174

if.then173:                                       ; preds = %sw.bb171
  br label %force_outer_quoting_style

if.end174:                                        ; preds = %sw.bb171
  br label %sw.epilog233

sw.bb175:                                         ; preds = %sw.bb170
  %102 = load i32, ptr %flags.addr, align 4
  %and176 = and i32 %102, 4
  %tobool177 = icmp ne i32 %and176, 0
  br i1 %tobool177, label %land.lhs.true178, label %if.end232

land.lhs.true178:                                 ; preds = %sw.bb175
  %103 = load i64, ptr %i, align 8
  %add179 = add i64 %103, 2
  %104 = load i64, ptr %argsize.addr, align 8
  %cmp180 = icmp ult i64 %add179, %104
  br i1 %cmp180, label %land.lhs.true182, label %if.end232

land.lhs.true182:                                 ; preds = %land.lhs.true178
  %105 = load ptr, ptr %arg.addr, align 8
  %106 = load i64, ptr %i, align 8
  %add183 = add i64 %106, 1
  %arrayidx184 = getelementptr inbounds i8, ptr %105, i64 %add183
  %107 = load i8, ptr %arrayidx184, align 1
  %conv185 = sext i8 %107 to i32
  %cmp186 = icmp eq i32 %conv185, 63
  br i1 %cmp186, label %if.then188, label %if.end232

if.then188:                                       ; preds = %land.lhs.true182
  %108 = load ptr, ptr %arg.addr, align 8
  %109 = load i64, ptr %i, align 8
  %add189 = add i64 %109, 2
  %arrayidx190 = getelementptr inbounds i8, ptr %108, i64 %add189
  %110 = load i8, ptr %arrayidx190, align 1
  %conv191 = sext i8 %110 to i32
  switch i32 %conv191, label %sw.epilog231 [
    i32 33, label %sw.bb192
    i32 39, label %sw.bb192
    i32 40, label %sw.bb192
    i32 41, label %sw.bb192
    i32 45, label %sw.bb192
    i32 47, label %sw.bb192
    i32 60, label %sw.bb192
    i32 61, label %sw.bb192
    i32 62, label %sw.bb192
  ]

sw.bb192:                                         ; preds = %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188, %if.then188
  %111 = load i8, ptr %elide_outer_quotes, align 1
  %tobool193 = trunc i8 %111 to i1
  br i1 %tobool193, label %if.then194, label %if.end195

if.then194:                                       ; preds = %sw.bb192
  br label %force_outer_quoting_style

if.end195:                                        ; preds = %sw.bb192
  %112 = load ptr, ptr %arg.addr, align 8
  %113 = load i64, ptr %i, align 8
  %add196 = add i64 %113, 2
  %arrayidx197 = getelementptr inbounds i8, ptr %112, i64 %add196
  %114 = load i8, ptr %arrayidx197, align 1
  store i8 %114, ptr %c, align 1
  %115 = load i64, ptr %i, align 8
  %add198 = add i64 %115, 2
  store i64 %add198, ptr %i, align 8
  br label %do.body199

do.body199:                                       ; preds = %if.end195
  %116 = load i64, ptr %len, align 8
  %117 = load i64, ptr %buffersize.addr, align 8
  %cmp200 = icmp ult i64 %116, %117
  br i1 %cmp200, label %if.then202, label %if.end204

if.then202:                                       ; preds = %do.body199
  %118 = load ptr, ptr %buffer.addr, align 8
  %119 = load i64, ptr %len, align 8
  %arrayidx203 = getelementptr inbounds i8, ptr %118, i64 %119
  store i8 63, ptr %arrayidx203, align 1
  br label %if.end204

if.end204:                                        ; preds = %if.then202, %do.body199
  %120 = load i64, ptr %len, align 8
  %inc205 = add i64 %120, 1
  store i64 %inc205, ptr %len, align 8
  br label %do.end206

do.end206:                                        ; preds = %if.end204
  br label %do.body207

do.body207:                                       ; preds = %do.end206
  %121 = load i64, ptr %len, align 8
  %122 = load i64, ptr %buffersize.addr, align 8
  %cmp208 = icmp ult i64 %121, %122
  br i1 %cmp208, label %if.then210, label %if.end212

if.then210:                                       ; preds = %do.body207
  %123 = load ptr, ptr %buffer.addr, align 8
  %124 = load i64, ptr %len, align 8
  %arrayidx211 = getelementptr inbounds i8, ptr %123, i64 %124
  store i8 34, ptr %arrayidx211, align 1
  br label %if.end212

if.end212:                                        ; preds = %if.then210, %do.body207
  %125 = load i64, ptr %len, align 8
  %inc213 = add i64 %125, 1
  store i64 %inc213, ptr %len, align 8
  br label %do.end214

do.end214:                                        ; preds = %if.end212
  br label %do.body215

do.body215:                                       ; preds = %do.end214
  %126 = load i64, ptr %len, align 8
  %127 = load i64, ptr %buffersize.addr, align 8
  %cmp216 = icmp ult i64 %126, %127
  br i1 %cmp216, label %if.then218, label %if.end220

if.then218:                                       ; preds = %do.body215
  %128 = load ptr, ptr %buffer.addr, align 8
  %129 = load i64, ptr %len, align 8
  %arrayidx219 = getelementptr inbounds i8, ptr %128, i64 %129
  store i8 34, ptr %arrayidx219, align 1
  br label %if.end220

if.end220:                                        ; preds = %if.then218, %do.body215
  %130 = load i64, ptr %len, align 8
  %inc221 = add i64 %130, 1
  store i64 %inc221, ptr %len, align 8
  br label %do.end222

do.end222:                                        ; preds = %if.end220
  br label %do.body223

do.body223:                                       ; preds = %do.end222
  %131 = load i64, ptr %len, align 8
  %132 = load i64, ptr %buffersize.addr, align 8
  %cmp224 = icmp ult i64 %131, %132
  br i1 %cmp224, label %if.then226, label %if.end228

if.then226:                                       ; preds = %do.body223
  %133 = load ptr, ptr %buffer.addr, align 8
  %134 = load i64, ptr %len, align 8
  %arrayidx227 = getelementptr inbounds i8, ptr %133, i64 %134
  store i8 63, ptr %arrayidx227, align 1
  br label %if.end228

if.end228:                                        ; preds = %if.then226, %do.body223
  %135 = load i64, ptr %len, align 8
  %inc229 = add i64 %135, 1
  store i64 %inc229, ptr %len, align 8
  br label %do.end230

do.end230:                                        ; preds = %if.end228
  br label %sw.epilog231

sw.epilog231:                                     ; preds = %do.end230, %if.then188
  br label %if.end232

if.end232:                                        ; preds = %sw.epilog231, %land.lhs.true182, %land.lhs.true178, %sw.bb175
  br label %sw.epilog233

sw.epilog233:                                     ; preds = %if.end232, %if.end174, %sw.bb170
  br label %sw.epilog546

sw.bb234:                                         ; preds = %if.end80
  store i8 97, ptr %esc, align 1
  br label %c_escape

sw.bb235:                                         ; preds = %if.end80
  store i8 98, ptr %esc, align 1
  br label %c_escape

sw.bb236:                                         ; preds = %if.end80
  store i8 102, ptr %esc, align 1
  br label %c_escape

sw.bb237:                                         ; preds = %if.end80
  store i8 110, ptr %esc, align 1
  br label %c_and_shell_escape

sw.bb238:                                         ; preds = %if.end80
  store i8 114, ptr %esc, align 1
  br label %c_and_shell_escape

sw.bb239:                                         ; preds = %if.end80
  store i8 116, ptr %esc, align 1
  br label %c_and_shell_escape

sw.bb240:                                         ; preds = %if.end80
  store i8 118, ptr %esc, align 1
  br label %c_escape

sw.bb241:                                         ; preds = %if.end80
  %136 = load i8, ptr %c, align 1
  store i8 %136, ptr %esc, align 1
  %137 = load i32, ptr %quoting_style.addr, align 4
  %cmp242 = icmp eq i32 %137, 2
  br i1 %cmp242, label %if.then244, label %if.end248

if.then244:                                       ; preds = %sw.bb241
  %138 = load i8, ptr %elide_outer_quotes, align 1
  %tobool245 = trunc i8 %138 to i1
  br i1 %tobool245, label %if.then246, label %if.end247

if.then246:                                       ; preds = %if.then244
  br label %force_outer_quoting_style

if.end247:                                        ; preds = %if.then244
  br label %store_c

if.end248:                                        ; preds = %sw.bb241
  %139 = load i8, ptr %backslash_escapes, align 1
  %tobool249 = trunc i8 %139 to i1
  br i1 %tobool249, label %land.lhs.true251, label %if.end257

land.lhs.true251:                                 ; preds = %if.end248
  %140 = load i8, ptr %elide_outer_quotes, align 1
  %tobool252 = trunc i8 %140 to i1
  br i1 %tobool252, label %land.lhs.true254, label %if.end257

land.lhs.true254:                                 ; preds = %land.lhs.true251
  %141 = load i64, ptr %quote_string_len, align 8
  %tobool255 = icmp ne i64 %141, 0
  br i1 %tobool255, label %if.then256, label %if.end257

if.then256:                                       ; preds = %land.lhs.true254
  br label %store_c

if.end257:                                        ; preds = %land.lhs.true254, %land.lhs.true251, %if.end248
  br label %c_and_shell_escape

c_and_shell_escape:                               ; preds = %if.end257, %sw.bb239, %sw.bb238, %sw.bb237
  %142 = load i32, ptr %quoting_style.addr, align 4
  %cmp258 = icmp eq i32 %142, 2
  br i1 %cmp258, label %land.lhs.true260, label %if.end264

land.lhs.true260:                                 ; preds = %c_and_shell_escape
  %143 = load i8, ptr %elide_outer_quotes, align 1
  %tobool261 = trunc i8 %143 to i1
  br i1 %tobool261, label %if.then263, label %if.end264

if.then263:                                       ; preds = %land.lhs.true260
  br label %force_outer_quoting_style

if.end264:                                        ; preds = %land.lhs.true260, %c_and_shell_escape
  br label %c_escape

c_escape:                                         ; preds = %if.end264, %sw.bb240, %sw.bb236, %sw.bb235, %sw.bb234
  %144 = load i8, ptr %backslash_escapes, align 1
  %tobool265 = trunc i8 %144 to i1
  br i1 %tobool265, label %if.then266, label %if.end267

if.then266:                                       ; preds = %c_escape
  %145 = load i8, ptr %esc, align 1
  store i8 %145, ptr %c, align 1
  br label %store_escape

if.end267:                                        ; preds = %c_escape
  br label %sw.epilog546

sw.bb268:                                         ; preds = %if.end80, %if.end80
  %146 = load i64, ptr %argsize.addr, align 8
  %cmp269 = icmp eq i64 %146, -1
  br i1 %cmp269, label %cond.true271, label %cond.false276

cond.true271:                                     ; preds = %sw.bb268
  %147 = load ptr, ptr %arg.addr, align 8
  %arrayidx272 = getelementptr inbounds i8, ptr %147, i64 1
  %148 = load i8, ptr %arrayidx272, align 1
  %conv273 = sext i8 %148 to i32
  %cmp274 = icmp eq i32 %conv273, 0
  br i1 %cmp274, label %if.end280, label %if.then279

cond.false276:                                    ; preds = %sw.bb268
  %149 = load i64, ptr %argsize.addr, align 8
  %cmp277 = icmp eq i64 %149, 1
  br i1 %cmp277, label %if.end280, label %if.then279

if.then279:                                       ; preds = %cond.false276, %cond.true271
  br label %sw.epilog546

if.end280:                                        ; preds = %cond.false276, %cond.true271
  br label %sw.bb281

sw.bb281:                                         ; preds = %if.end280, %if.end80, %if.end80
  %150 = load i64, ptr %i, align 8
  %cmp282 = icmp ne i64 %150, 0
  br i1 %cmp282, label %if.then284, label %if.end285

if.then284:                                       ; preds = %sw.bb281
  br label %sw.epilog546

if.end285:                                        ; preds = %sw.bb281
  br label %sw.bb286

sw.bb286:                                         ; preds = %if.end285, %if.end80
  store i8 1, ptr %c_and_shell_quote_compat, align 1
  br label %sw.bb287

sw.bb287:                                         ; preds = %sw.bb286, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  %151 = load i32, ptr %quoting_style.addr, align 4
  %cmp288 = icmp eq i32 %151, 2
  br i1 %cmp288, label %land.lhs.true290, label %if.end294

land.lhs.true290:                                 ; preds = %sw.bb287
  %152 = load i8, ptr %elide_outer_quotes, align 1
  %tobool291 = trunc i8 %152 to i1
  br i1 %tobool291, label %if.then293, label %if.end294

if.then293:                                       ; preds = %land.lhs.true290
  br label %force_outer_quoting_style

if.end294:                                        ; preds = %land.lhs.true290, %sw.bb287
  br label %sw.epilog546

sw.bb295:                                         ; preds = %if.end80
  store i8 1, ptr %encountered_single_quote, align 1
  store i8 1, ptr %c_and_shell_quote_compat, align 1
  %153 = load i32, ptr %quoting_style.addr, align 4
  %cmp296 = icmp eq i32 %153, 2
  br i1 %cmp296, label %if.then298, label %if.end331

if.then298:                                       ; preds = %sw.bb295
  %154 = load i8, ptr %elide_outer_quotes, align 1
  %tobool299 = trunc i8 %154 to i1
  br i1 %tobool299, label %if.then300, label %if.end301

if.then300:                                       ; preds = %if.then298
  br label %force_outer_quoting_style

if.end301:                                        ; preds = %if.then298
  %155 = load i64, ptr %buffersize.addr, align 8
  %tobool302 = icmp ne i64 %155, 0
  br i1 %tobool302, label %land.lhs.true303, label %if.end306

land.lhs.true303:                                 ; preds = %if.end301
  %156 = load i64, ptr %orig_buffersize, align 8
  %tobool304 = icmp ne i64 %156, 0
  br i1 %tobool304, label %if.end306, label %if.then305

if.then305:                                       ; preds = %land.lhs.true303
  %157 = load i64, ptr %buffersize.addr, align 8
  store i64 %157, ptr %orig_buffersize, align 8
  store i64 0, ptr %buffersize.addr, align 8
  br label %if.end306

if.end306:                                        ; preds = %if.then305, %land.lhs.true303, %if.end301
  br label %do.body307

do.body307:                                       ; preds = %if.end306
  %158 = load i64, ptr %len, align 8
  %159 = load i64, ptr %buffersize.addr, align 8
  %cmp308 = icmp ult i64 %158, %159
  br i1 %cmp308, label %if.then310, label %if.end312

if.then310:                                       ; preds = %do.body307
  %160 = load ptr, ptr %buffer.addr, align 8
  %161 = load i64, ptr %len, align 8
  %arrayidx311 = getelementptr inbounds i8, ptr %160, i64 %161
  store i8 39, ptr %arrayidx311, align 1
  br label %if.end312

if.end312:                                        ; preds = %if.then310, %do.body307
  %162 = load i64, ptr %len, align 8
  %inc313 = add i64 %162, 1
  store i64 %inc313, ptr %len, align 8
  br label %do.end314

do.end314:                                        ; preds = %if.end312
  br label %do.body315

do.body315:                                       ; preds = %do.end314
  %163 = load i64, ptr %len, align 8
  %164 = load i64, ptr %buffersize.addr, align 8
  %cmp316 = icmp ult i64 %163, %164
  br i1 %cmp316, label %if.then318, label %if.end320

if.then318:                                       ; preds = %do.body315
  %165 = load ptr, ptr %buffer.addr, align 8
  %166 = load i64, ptr %len, align 8
  %arrayidx319 = getelementptr inbounds i8, ptr %165, i64 %166
  store i8 92, ptr %arrayidx319, align 1
  br label %if.end320

if.end320:                                        ; preds = %if.then318, %do.body315
  %167 = load i64, ptr %len, align 8
  %inc321 = add i64 %167, 1
  store i64 %inc321, ptr %len, align 8
  br label %do.end322

do.end322:                                        ; preds = %if.end320
  br label %do.body323

do.body323:                                       ; preds = %do.end322
  %168 = load i64, ptr %len, align 8
  %169 = load i64, ptr %buffersize.addr, align 8
  %cmp324 = icmp ult i64 %168, %169
  br i1 %cmp324, label %if.then326, label %if.end328

if.then326:                                       ; preds = %do.body323
  %170 = load ptr, ptr %buffer.addr, align 8
  %171 = load i64, ptr %len, align 8
  %arrayidx327 = getelementptr inbounds i8, ptr %170, i64 %171
  store i8 39, ptr %arrayidx327, align 1
  br label %if.end328

if.end328:                                        ; preds = %if.then326, %do.body323
  %172 = load i64, ptr %len, align 8
  %inc329 = add i64 %172, 1
  store i64 %inc329, ptr %len, align 8
  br label %do.end330

do.end330:                                        ; preds = %if.end328
  store i8 0, ptr %pending_shell_escape_end, align 1
  br label %if.end331

if.end331:                                        ; preds = %do.end330, %sw.bb295
  br label %sw.epilog546

sw.bb332:                                         ; preds = %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80, %if.end80
  store i8 1, ptr %c_and_shell_quote_compat, align 1
  br label %sw.epilog546

sw.default333:                                    ; preds = %if.end80
  %173 = load i8, ptr %unibyte_locale, align 1
  %tobool334 = trunc i8 %173 to i1
  br i1 %tobool334, label %if.then335, label %if.else344

if.then335:                                       ; preds = %sw.default333
  store i64 1, ptr %m, align 8
  %call336 = call ptr @__ctype_b_loc() #26
  %174 = load ptr, ptr %call336, align 8
  %175 = load i8, ptr %c, align 1
  %conv337 = zext i8 %175 to i32
  %idxprom = sext i32 %conv337 to i64
  %arrayidx338 = getelementptr inbounds i16, ptr %174, i64 %idxprom
  %176 = load i16, ptr %arrayidx338, align 2
  %conv339 = zext i16 %176 to i32
  %and340 = and i32 %conv339, 16384
  %cmp341 = icmp ne i32 %and340, 0
  %frombool343 = zext i1 %cmp341 to i8
  store i8 %frombool343, ptr %printable, align 1
  br label %if.end404

if.else344:                                       ; preds = %sw.default333
  call void @mbszero(ptr noundef %mbstate)
  store i64 0, ptr %m, align 8
  store i8 1, ptr %printable, align 1
  %177 = load i64, ptr %argsize.addr, align 8
  %cmp345 = icmp eq i64 %177, -1
  br i1 %cmp345, label %if.then347, label %if.end349

if.then347:                                       ; preds = %if.else344
  %178 = load ptr, ptr %arg.addr, align 8
  %call348 = call i64 @strlen(ptr noundef %178) #23
  store i64 %call348, ptr %argsize.addr, align 8
  br label %if.end349

if.end349:                                        ; preds = %if.then347, %if.else344
  br label %for.cond350

for.cond350:                                      ; preds = %if.end349
  %179 = load ptr, ptr %arg.addr, align 8
  %180 = load i64, ptr %i, align 8
  %181 = load i64, ptr %m, align 8
  %add351 = add i64 %180, %181
  %arrayidx352 = getelementptr inbounds i8, ptr %179, i64 %add351
  %182 = load i64, ptr %argsize.addr, align 8
  %183 = load i64, ptr %i, align 8
  %184 = load i64, ptr %m, align 8
  %add353 = add i64 %183, %184
  %sub = sub i64 %182, %add353
  %call354 = call i64 @rpl_mbrtoc32(ptr noundef %w, ptr noundef %arrayidx352, i64 noundef %sub, ptr noundef %mbstate)
  store i64 %call354, ptr %bytes, align 8
  %185 = load i64, ptr %bytes, align 8
  %cmp355 = icmp eq i64 %185, 0
  br i1 %cmp355, label %if.then357, label %if.else358

if.then357:                                       ; preds = %for.cond350
  br label %for.end403

if.else358:                                       ; preds = %for.cond350
  %186 = load i64, ptr %bytes, align 8
  %cmp359 = icmp eq i64 %186, -1
  br i1 %cmp359, label %if.then361, label %if.else362

if.then361:                                       ; preds = %if.else358
  store i8 0, ptr %printable, align 1
  br label %for.end403

if.else362:                                       ; preds = %if.else358
  %187 = load i64, ptr %bytes, align 8
  %cmp363 = icmp eq i64 %187, -2
  br i1 %cmp363, label %if.then365, label %if.else374

if.then365:                                       ; preds = %if.else362
  store i8 0, ptr %printable, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then365
  %188 = load i64, ptr %i, align 8
  %189 = load i64, ptr %m, align 8
  %add366 = add i64 %188, %189
  %190 = load i64, ptr %argsize.addr, align 8
  %cmp367 = icmp ult i64 %add366, %190
  br i1 %cmp367, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %191 = load ptr, ptr %arg.addr, align 8
  %192 = load i64, ptr %i, align 8
  %193 = load i64, ptr %m, align 8
  %add369 = add i64 %192, %193
  %arrayidx370 = getelementptr inbounds i8, ptr %191, i64 %add369
  %194 = load i8, ptr %arrayidx370, align 1
  %conv371 = sext i8 %194 to i32
  %tobool372 = icmp ne i32 %conv371, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %195 = phi i1 [ false, %while.cond ], [ %tobool372, %land.rhs ]
  br i1 %195, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %196 = load i64, ptr %m, align 8
  %inc373 = add i64 %196, 1
  store i64 %inc373, ptr %m, align 8
  br label %while.cond, !llvm.loop !28

while.end:                                        ; preds = %land.end
  br label %for.end403

if.else374:                                       ; preds = %if.else362
  %197 = load i8, ptr %elide_outer_quotes, align 1
  %tobool375 = trunc i8 %197 to i1
  br i1 %tobool375, label %land.lhs.true377, label %if.end394

land.lhs.true377:                                 ; preds = %if.else374
  %198 = load i32, ptr %quoting_style.addr, align 4
  %cmp378 = icmp eq i32 %198, 2
  br i1 %cmp378, label %if.then380, label %if.end394

if.then380:                                       ; preds = %land.lhs.true377
  store i64 1, ptr %j, align 8
  br label %for.cond381

for.cond381:                                      ; preds = %for.inc391, %if.then380
  %199 = load i64, ptr %j, align 8
  %200 = load i64, ptr %bytes, align 8
  %cmp382 = icmp ult i64 %199, %200
  br i1 %cmp382, label %for.body384, label %for.end393

for.body384:                                      ; preds = %for.cond381
  %201 = load ptr, ptr %arg.addr, align 8
  %202 = load i64, ptr %i, align 8
  %203 = load i64, ptr %m, align 8
  %add385 = add i64 %202, %203
  %204 = load i64, ptr %j, align 8
  %add386 = add i64 %add385, %204
  %arrayidx387 = getelementptr inbounds i8, ptr %201, i64 %add386
  %205 = load i8, ptr %arrayidx387, align 1
  %conv388 = sext i8 %205 to i32
  switch i32 %conv388, label %sw.epilog390 [
    i32 91, label %sw.bb389
    i32 92, label %sw.bb389
    i32 94, label %sw.bb389
    i32 96, label %sw.bb389
    i32 124, label %sw.bb389
  ]

sw.bb389:                                         ; preds = %for.body384, %for.body384, %for.body384, %for.body384, %for.body384
  br label %force_outer_quoting_style

sw.epilog390:                                     ; preds = %for.body384
  br label %for.inc391

for.inc391:                                       ; preds = %sw.epilog390
  %206 = load i64, ptr %j, align 8
  %inc392 = add i64 %206, 1
  store i64 %inc392, ptr %j, align 8
  br label %for.cond381, !llvm.loop !29

for.end393:                                       ; preds = %for.cond381
  br label %if.end394

if.end394:                                        ; preds = %for.end393, %land.lhs.true377, %if.else374
  %207 = load i32, ptr %w, align 4
  %call395 = call i32 @c32isprint(i32 noundef %207)
  %tobool396 = icmp ne i32 %call395, 0
  br i1 %tobool396, label %if.end398, label %if.then397

if.then397:                                       ; preds = %if.end394
  store i8 0, ptr %printable, align 1
  br label %if.end398

if.end398:                                        ; preds = %if.then397, %if.end394
  %208 = load i64, ptr %bytes, align 8
  %209 = load i64, ptr %m, align 8
  %add399 = add i64 %209, %208
  store i64 %add399, ptr %m, align 8
  br label %if.end400

if.end400:                                        ; preds = %if.end398
  br label %if.end401

if.end401:                                        ; preds = %if.end400
  br label %if.end402

if.end402:                                        ; preds = %if.end401
  br label %for.end403

for.end403:                                       ; preds = %if.end402, %while.end, %if.then361, %if.then357
  br label %if.end404

if.end404:                                        ; preds = %for.end403, %if.then335
  %210 = load i8, ptr %printable, align 1
  %tobool405 = trunc i8 %210 to i1
  %frombool406 = zext i1 %tobool405 to i8
  store i8 %frombool406, ptr %c_and_shell_quote_compat, align 1
  %211 = load i64, ptr %m, align 8
  %cmp407 = icmp ult i64 1, %211
  br i1 %cmp407, label %if.then413, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end404
  %212 = load i8, ptr %backslash_escapes, align 1
  %tobool409 = trunc i8 %212 to i1
  br i1 %tobool409, label %land.lhs.true411, label %if.end545

land.lhs.true411:                                 ; preds = %lor.lhs.false
  %213 = load i8, ptr %printable, align 1
  %tobool412 = trunc i8 %213 to i1
  br i1 %tobool412, label %if.end545, label %if.then413

if.then413:                                       ; preds = %land.lhs.true411, %if.end404
  %214 = load i64, ptr %i, align 8
  %215 = load i64, ptr %m, align 8
  %add414 = add i64 %214, %215
  store i64 %add414, ptr %ilim, align 8
  br label %for.cond415

for.cond415:                                      ; preds = %do.end541, %if.then413
  %216 = load i8, ptr %backslash_escapes, align 1
  %tobool416 = trunc i8 %216 to i1
  br i1 %tobool416, label %land.lhs.true418, label %if.else492

land.lhs.true418:                                 ; preds = %for.cond415
  %217 = load i8, ptr %printable, align 1
  %tobool419 = trunc i8 %217 to i1
  br i1 %tobool419, label %if.else492, label %if.then420

if.then420:                                       ; preds = %land.lhs.true418
  br label %do.body421

do.body421:                                       ; preds = %if.then420
  %218 = load i8, ptr %elide_outer_quotes, align 1
  %tobool422 = trunc i8 %218 to i1
  br i1 %tobool422, label %if.then423, label %if.end424

if.then423:                                       ; preds = %do.body421
  br label %force_outer_quoting_style

if.end424:                                        ; preds = %do.body421
  store i8 1, ptr %escaping, align 1
  %219 = load i32, ptr %quoting_style.addr, align 4
  %cmp425 = icmp eq i32 %219, 2
  br i1 %cmp425, label %land.lhs.true427, label %if.end454

land.lhs.true427:                                 ; preds = %if.end424
  %220 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool428 = trunc i8 %220 to i1
  br i1 %tobool428, label %if.end454, label %if.then429

if.then429:                                       ; preds = %land.lhs.true427
  br label %do.body430

do.body430:                                       ; preds = %if.then429
  %221 = load i64, ptr %len, align 8
  %222 = load i64, ptr %buffersize.addr, align 8
  %cmp431 = icmp ult i64 %221, %222
  br i1 %cmp431, label %if.then433, label %if.end435

if.then433:                                       ; preds = %do.body430
  %223 = load ptr, ptr %buffer.addr, align 8
  %224 = load i64, ptr %len, align 8
  %arrayidx434 = getelementptr inbounds i8, ptr %223, i64 %224
  store i8 39, ptr %arrayidx434, align 1
  br label %if.end435

if.end435:                                        ; preds = %if.then433, %do.body430
  %225 = load i64, ptr %len, align 8
  %inc436 = add i64 %225, 1
  store i64 %inc436, ptr %len, align 8
  br label %do.end437

do.end437:                                        ; preds = %if.end435
  br label %do.body438

do.body438:                                       ; preds = %do.end437
  %226 = load i64, ptr %len, align 8
  %227 = load i64, ptr %buffersize.addr, align 8
  %cmp439 = icmp ult i64 %226, %227
  br i1 %cmp439, label %if.then441, label %if.end443

if.then441:                                       ; preds = %do.body438
  %228 = load ptr, ptr %buffer.addr, align 8
  %229 = load i64, ptr %len, align 8
  %arrayidx442 = getelementptr inbounds i8, ptr %228, i64 %229
  store i8 36, ptr %arrayidx442, align 1
  br label %if.end443

if.end443:                                        ; preds = %if.then441, %do.body438
  %230 = load i64, ptr %len, align 8
  %inc444 = add i64 %230, 1
  store i64 %inc444, ptr %len, align 8
  br label %do.end445

do.end445:                                        ; preds = %if.end443
  br label %do.body446

do.body446:                                       ; preds = %do.end445
  %231 = load i64, ptr %len, align 8
  %232 = load i64, ptr %buffersize.addr, align 8
  %cmp447 = icmp ult i64 %231, %232
  br i1 %cmp447, label %if.then449, label %if.end451

if.then449:                                       ; preds = %do.body446
  %233 = load ptr, ptr %buffer.addr, align 8
  %234 = load i64, ptr %len, align 8
  %arrayidx450 = getelementptr inbounds i8, ptr %233, i64 %234
  store i8 39, ptr %arrayidx450, align 1
  br label %if.end451

if.end451:                                        ; preds = %if.then449, %do.body446
  %235 = load i64, ptr %len, align 8
  %inc452 = add i64 %235, 1
  store i64 %inc452, ptr %len, align 8
  br label %do.end453

do.end453:                                        ; preds = %if.end451
  store i8 1, ptr %pending_shell_escape_end, align 1
  br label %if.end454

if.end454:                                        ; preds = %do.end453, %land.lhs.true427, %if.end424
  br label %do.body455

do.body455:                                       ; preds = %if.end454
  %236 = load i64, ptr %len, align 8
  %237 = load i64, ptr %buffersize.addr, align 8
  %cmp456 = icmp ult i64 %236, %237
  br i1 %cmp456, label %if.then458, label %if.end460

if.then458:                                       ; preds = %do.body455
  %238 = load ptr, ptr %buffer.addr, align 8
  %239 = load i64, ptr %len, align 8
  %arrayidx459 = getelementptr inbounds i8, ptr %238, i64 %239
  store i8 92, ptr %arrayidx459, align 1
  br label %if.end460

if.end460:                                        ; preds = %if.then458, %do.body455
  %240 = load i64, ptr %len, align 8
  %inc461 = add i64 %240, 1
  store i64 %inc461, ptr %len, align 8
  br label %do.end462

do.end462:                                        ; preds = %if.end460
  br label %do.end463

do.end463:                                        ; preds = %do.end462
  br label %do.body464

do.body464:                                       ; preds = %do.end463
  %241 = load i64, ptr %len, align 8
  %242 = load i64, ptr %buffersize.addr, align 8
  %cmp465 = icmp ult i64 %241, %242
  br i1 %cmp465, label %if.then467, label %if.end472

if.then467:                                       ; preds = %do.body464
  %243 = load i8, ptr %c, align 1
  %conv468 = zext i8 %243 to i32
  %shr = ashr i32 %conv468, 6
  %add469 = add nsw i32 48, %shr
  %conv470 = trunc i32 %add469 to i8
  %244 = load ptr, ptr %buffer.addr, align 8
  %245 = load i64, ptr %len, align 8
  %arrayidx471 = getelementptr inbounds i8, ptr %244, i64 %245
  store i8 %conv470, ptr %arrayidx471, align 1
  br label %if.end472

if.end472:                                        ; preds = %if.then467, %do.body464
  %246 = load i64, ptr %len, align 8
  %inc473 = add i64 %246, 1
  store i64 %inc473, ptr %len, align 8
  br label %do.end474

do.end474:                                        ; preds = %if.end472
  br label %do.body475

do.body475:                                       ; preds = %do.end474
  %247 = load i64, ptr %len, align 8
  %248 = load i64, ptr %buffersize.addr, align 8
  %cmp476 = icmp ult i64 %247, %248
  br i1 %cmp476, label %if.then478, label %if.end485

if.then478:                                       ; preds = %do.body475
  %249 = load i8, ptr %c, align 1
  %conv479 = zext i8 %249 to i32
  %shr480 = ashr i32 %conv479, 3
  %and481 = and i32 %shr480, 7
  %add482 = add nsw i32 48, %and481
  %conv483 = trunc i32 %add482 to i8
  %250 = load ptr, ptr %buffer.addr, align 8
  %251 = load i64, ptr %len, align 8
  %arrayidx484 = getelementptr inbounds i8, ptr %250, i64 %251
  store i8 %conv483, ptr %arrayidx484, align 1
  br label %if.end485

if.end485:                                        ; preds = %if.then478, %do.body475
  %252 = load i64, ptr %len, align 8
  %inc486 = add i64 %252, 1
  store i64 %inc486, ptr %len, align 8
  br label %do.end487

do.end487:                                        ; preds = %if.end485
  %253 = load i8, ptr %c, align 1
  %conv488 = zext i8 %253 to i32
  %and489 = and i32 %conv488, 7
  %add490 = add nsw i32 48, %and489
  %conv491 = trunc i32 %add490 to i8
  store i8 %conv491, ptr %c, align 1
  br label %if.end504

if.else492:                                       ; preds = %land.lhs.true418, %for.cond415
  %254 = load i8, ptr %is_right_quote, align 1
  %tobool493 = trunc i8 %254 to i1
  br i1 %tobool493, label %if.then494, label %if.end503

if.then494:                                       ; preds = %if.else492
  br label %do.body495

do.body495:                                       ; preds = %if.then494
  %255 = load i64, ptr %len, align 8
  %256 = load i64, ptr %buffersize.addr, align 8
  %cmp496 = icmp ult i64 %255, %256
  br i1 %cmp496, label %if.then498, label %if.end500

if.then498:                                       ; preds = %do.body495
  %257 = load ptr, ptr %buffer.addr, align 8
  %258 = load i64, ptr %len, align 8
  %arrayidx499 = getelementptr inbounds i8, ptr %257, i64 %258
  store i8 92, ptr %arrayidx499, align 1
  br label %if.end500

if.end500:                                        ; preds = %if.then498, %do.body495
  %259 = load i64, ptr %len, align 8
  %inc501 = add i64 %259, 1
  store i64 %inc501, ptr %len, align 8
  br label %do.end502

do.end502:                                        ; preds = %if.end500
  store i8 0, ptr %is_right_quote, align 1
  br label %if.end503

if.end503:                                        ; preds = %do.end502, %if.else492
  br label %if.end504

if.end504:                                        ; preds = %if.end503, %do.end487
  %260 = load i64, ptr %ilim, align 8
  %261 = load i64, ptr %i, align 8
  %add505 = add i64 %261, 1
  %cmp506 = icmp ule i64 %260, %add505
  br i1 %cmp506, label %if.then508, label %if.end509

if.then508:                                       ; preds = %if.end504
  br label %for.end544

if.end509:                                        ; preds = %if.end504
  br label %do.body510

do.body510:                                       ; preds = %if.end509
  %262 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool511 = trunc i8 %262 to i1
  br i1 %tobool511, label %land.lhs.true513, label %if.end532

land.lhs.true513:                                 ; preds = %do.body510
  %263 = load i8, ptr %escaping, align 1
  %tobool514 = trunc i8 %263 to i1
  br i1 %tobool514, label %if.end532, label %if.then515

if.then515:                                       ; preds = %land.lhs.true513
  br label %do.body516

do.body516:                                       ; preds = %if.then515
  %264 = load i64, ptr %len, align 8
  %265 = load i64, ptr %buffersize.addr, align 8
  %cmp517 = icmp ult i64 %264, %265
  br i1 %cmp517, label %if.then519, label %if.end521

if.then519:                                       ; preds = %do.body516
  %266 = load ptr, ptr %buffer.addr, align 8
  %267 = load i64, ptr %len, align 8
  %arrayidx520 = getelementptr inbounds i8, ptr %266, i64 %267
  store i8 39, ptr %arrayidx520, align 1
  br label %if.end521

if.end521:                                        ; preds = %if.then519, %do.body516
  %268 = load i64, ptr %len, align 8
  %inc522 = add i64 %268, 1
  store i64 %inc522, ptr %len, align 8
  br label %do.end523

do.end523:                                        ; preds = %if.end521
  br label %do.body524

do.body524:                                       ; preds = %do.end523
  %269 = load i64, ptr %len, align 8
  %270 = load i64, ptr %buffersize.addr, align 8
  %cmp525 = icmp ult i64 %269, %270
  br i1 %cmp525, label %if.then527, label %if.end529

if.then527:                                       ; preds = %do.body524
  %271 = load ptr, ptr %buffer.addr, align 8
  %272 = load i64, ptr %len, align 8
  %arrayidx528 = getelementptr inbounds i8, ptr %271, i64 %272
  store i8 39, ptr %arrayidx528, align 1
  br label %if.end529

if.end529:                                        ; preds = %if.then527, %do.body524
  %273 = load i64, ptr %len, align 8
  %inc530 = add i64 %273, 1
  store i64 %inc530, ptr %len, align 8
  br label %do.end531

do.end531:                                        ; preds = %if.end529
  store i8 0, ptr %pending_shell_escape_end, align 1
  br label %if.end532

if.end532:                                        ; preds = %do.end531, %land.lhs.true513, %do.body510
  br label %do.end533

do.end533:                                        ; preds = %if.end532
  br label %do.body534

do.body534:                                       ; preds = %do.end533
  %274 = load i64, ptr %len, align 8
  %275 = load i64, ptr %buffersize.addr, align 8
  %cmp535 = icmp ult i64 %274, %275
  br i1 %cmp535, label %if.then537, label %if.end539

if.then537:                                       ; preds = %do.body534
  %276 = load i8, ptr %c, align 1
  %277 = load ptr, ptr %buffer.addr, align 8
  %278 = load i64, ptr %len, align 8
  %arrayidx538 = getelementptr inbounds i8, ptr %277, i64 %278
  store i8 %276, ptr %arrayidx538, align 1
  br label %if.end539

if.end539:                                        ; preds = %if.then537, %do.body534
  %279 = load i64, ptr %len, align 8
  %inc540 = add i64 %279, 1
  store i64 %inc540, ptr %len, align 8
  br label %do.end541

do.end541:                                        ; preds = %if.end539
  %280 = load ptr, ptr %arg.addr, align 8
  %281 = load i64, ptr %i, align 8
  %inc542 = add i64 %281, 1
  store i64 %inc542, ptr %i, align 8
  %arrayidx543 = getelementptr inbounds i8, ptr %280, i64 %inc542
  %282 = load i8, ptr %arrayidx543, align 1
  store i8 %282, ptr %c, align 1
  br label %for.cond415

for.end544:                                       ; preds = %if.then508
  br label %store_c

if.end545:                                        ; preds = %land.lhs.true411, %lor.lhs.false
  br label %sw.epilog546

sw.epilog546:                                     ; preds = %if.end545, %sw.bb332, %if.end331, %if.end294, %if.then284, %if.then279, %if.end267, %sw.epilog233, %if.end169
  %283 = load i8, ptr %backslash_escapes, align 1
  %tobool547 = trunc i8 %283 to i1
  br i1 %tobool547, label %land.lhs.true549, label %lor.lhs.false552

land.lhs.true549:                                 ; preds = %sw.epilog546
  %284 = load i32, ptr %quoting_style.addr, align 4
  %cmp550 = icmp ne i32 %284, 2
  br i1 %cmp550, label %land.lhs.true555, label %lor.lhs.false552

lor.lhs.false552:                                 ; preds = %land.lhs.true549, %sw.epilog546
  %285 = load i8, ptr %elide_outer_quotes, align 1
  %tobool553 = trunc i8 %285 to i1
  br i1 %tobool553, label %land.lhs.true555, label %land.lhs.true564

land.lhs.true555:                                 ; preds = %lor.lhs.false552, %land.lhs.true549
  %286 = load ptr, ptr %quote_these_too.addr, align 8
  %tobool556 = icmp ne ptr %286, null
  br i1 %tobool556, label %land.lhs.true557, label %land.lhs.true564

land.lhs.true557:                                 ; preds = %land.lhs.true555
  %287 = load ptr, ptr %quote_these_too.addr, align 8
  %288 = load i8, ptr %c, align 1
  %conv558 = zext i8 %288 to i64
  %div = udiv i64 %conv558, 32
  %arrayidx559 = getelementptr inbounds i32, ptr %287, i64 %div
  %289 = load i32, ptr %arrayidx559, align 4
  %290 = load i8, ptr %c, align 1
  %conv560 = zext i8 %290 to i64
  %rem = urem i64 %conv560, 32
  %sh_prom = trunc i64 %rem to i32
  %shr561 = lshr i32 %289, %sh_prom
  %and562 = and i32 %shr561, 1
  %tobool563 = icmp ne i32 %and562, 0
  br i1 %tobool563, label %if.end567, label %land.lhs.true564

land.lhs.true564:                                 ; preds = %land.lhs.true557, %land.lhs.true555, %lor.lhs.false552
  %291 = load i8, ptr %is_right_quote, align 1
  %tobool565 = trunc i8 %291 to i1
  br i1 %tobool565, label %if.end567, label %if.then566

if.then566:                                       ; preds = %land.lhs.true564
  br label %store_c

if.end567:                                        ; preds = %land.lhs.true564, %land.lhs.true557
  br label %store_escape

store_escape:                                     ; preds = %if.end567, %if.then266
  br label %do.body568

do.body568:                                       ; preds = %store_escape
  %292 = load i8, ptr %elide_outer_quotes, align 1
  %tobool569 = trunc i8 %292 to i1
  br i1 %tobool569, label %if.then570, label %if.end571

if.then570:                                       ; preds = %do.body568
  br label %force_outer_quoting_style

if.end571:                                        ; preds = %do.body568
  store i8 1, ptr %escaping, align 1
  %293 = load i32, ptr %quoting_style.addr, align 4
  %cmp572 = icmp eq i32 %293, 2
  br i1 %cmp572, label %land.lhs.true574, label %if.end601

land.lhs.true574:                                 ; preds = %if.end571
  %294 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool575 = trunc i8 %294 to i1
  br i1 %tobool575, label %if.end601, label %if.then576

if.then576:                                       ; preds = %land.lhs.true574
  br label %do.body577

do.body577:                                       ; preds = %if.then576
  %295 = load i64, ptr %len, align 8
  %296 = load i64, ptr %buffersize.addr, align 8
  %cmp578 = icmp ult i64 %295, %296
  br i1 %cmp578, label %if.then580, label %if.end582

if.then580:                                       ; preds = %do.body577
  %297 = load ptr, ptr %buffer.addr, align 8
  %298 = load i64, ptr %len, align 8
  %arrayidx581 = getelementptr inbounds i8, ptr %297, i64 %298
  store i8 39, ptr %arrayidx581, align 1
  br label %if.end582

if.end582:                                        ; preds = %if.then580, %do.body577
  %299 = load i64, ptr %len, align 8
  %inc583 = add i64 %299, 1
  store i64 %inc583, ptr %len, align 8
  br label %do.end584

do.end584:                                        ; preds = %if.end582
  br label %do.body585

do.body585:                                       ; preds = %do.end584
  %300 = load i64, ptr %len, align 8
  %301 = load i64, ptr %buffersize.addr, align 8
  %cmp586 = icmp ult i64 %300, %301
  br i1 %cmp586, label %if.then588, label %if.end590

if.then588:                                       ; preds = %do.body585
  %302 = load ptr, ptr %buffer.addr, align 8
  %303 = load i64, ptr %len, align 8
  %arrayidx589 = getelementptr inbounds i8, ptr %302, i64 %303
  store i8 36, ptr %arrayidx589, align 1
  br label %if.end590

if.end590:                                        ; preds = %if.then588, %do.body585
  %304 = load i64, ptr %len, align 8
  %inc591 = add i64 %304, 1
  store i64 %inc591, ptr %len, align 8
  br label %do.end592

do.end592:                                        ; preds = %if.end590
  br label %do.body593

do.body593:                                       ; preds = %do.end592
  %305 = load i64, ptr %len, align 8
  %306 = load i64, ptr %buffersize.addr, align 8
  %cmp594 = icmp ult i64 %305, %306
  br i1 %cmp594, label %if.then596, label %if.end598

if.then596:                                       ; preds = %do.body593
  %307 = load ptr, ptr %buffer.addr, align 8
  %308 = load i64, ptr %len, align 8
  %arrayidx597 = getelementptr inbounds i8, ptr %307, i64 %308
  store i8 39, ptr %arrayidx597, align 1
  br label %if.end598

if.end598:                                        ; preds = %if.then596, %do.body593
  %309 = load i64, ptr %len, align 8
  %inc599 = add i64 %309, 1
  store i64 %inc599, ptr %len, align 8
  br label %do.end600

do.end600:                                        ; preds = %if.end598
  store i8 1, ptr %pending_shell_escape_end, align 1
  br label %if.end601

if.end601:                                        ; preds = %do.end600, %land.lhs.true574, %if.end571
  br label %do.body602

do.body602:                                       ; preds = %if.end601
  %310 = load i64, ptr %len, align 8
  %311 = load i64, ptr %buffersize.addr, align 8
  %cmp603 = icmp ult i64 %310, %311
  br i1 %cmp603, label %if.then605, label %if.end607

if.then605:                                       ; preds = %do.body602
  %312 = load ptr, ptr %buffer.addr, align 8
  %313 = load i64, ptr %len, align 8
  %arrayidx606 = getelementptr inbounds i8, ptr %312, i64 %313
  store i8 92, ptr %arrayidx606, align 1
  br label %if.end607

if.end607:                                        ; preds = %if.then605, %do.body602
  %314 = load i64, ptr %len, align 8
  %inc608 = add i64 %314, 1
  store i64 %inc608, ptr %len, align 8
  br label %do.end609

do.end609:                                        ; preds = %if.end607
  br label %do.end610

do.end610:                                        ; preds = %do.end609
  br label %store_c

store_c:                                          ; preds = %do.end610, %if.then566, %for.end544, %if.then256, %if.end247
  br label %do.body611

do.body611:                                       ; preds = %store_c
  %315 = load i8, ptr %pending_shell_escape_end, align 1
  %tobool612 = trunc i8 %315 to i1
  br i1 %tobool612, label %land.lhs.true614, label %if.end633

land.lhs.true614:                                 ; preds = %do.body611
  %316 = load i8, ptr %escaping, align 1
  %tobool615 = trunc i8 %316 to i1
  br i1 %tobool615, label %if.end633, label %if.then616

if.then616:                                       ; preds = %land.lhs.true614
  br label %do.body617

do.body617:                                       ; preds = %if.then616
  %317 = load i64, ptr %len, align 8
  %318 = load i64, ptr %buffersize.addr, align 8
  %cmp618 = icmp ult i64 %317, %318
  br i1 %cmp618, label %if.then620, label %if.end622

if.then620:                                       ; preds = %do.body617
  %319 = load ptr, ptr %buffer.addr, align 8
  %320 = load i64, ptr %len, align 8
  %arrayidx621 = getelementptr inbounds i8, ptr %319, i64 %320
  store i8 39, ptr %arrayidx621, align 1
  br label %if.end622

if.end622:                                        ; preds = %if.then620, %do.body617
  %321 = load i64, ptr %len, align 8
  %inc623 = add i64 %321, 1
  store i64 %inc623, ptr %len, align 8
  br label %do.end624

do.end624:                                        ; preds = %if.end622
  br label %do.body625

do.body625:                                       ; preds = %do.end624
  %322 = load i64, ptr %len, align 8
  %323 = load i64, ptr %buffersize.addr, align 8
  %cmp626 = icmp ult i64 %322, %323
  br i1 %cmp626, label %if.then628, label %if.end630

if.then628:                                       ; preds = %do.body625
  %324 = load ptr, ptr %buffer.addr, align 8
  %325 = load i64, ptr %len, align 8
  %arrayidx629 = getelementptr inbounds i8, ptr %324, i64 %325
  store i8 39, ptr %arrayidx629, align 1
  br label %if.end630

if.end630:                                        ; preds = %if.then628, %do.body625
  %326 = load i64, ptr %len, align 8
  %inc631 = add i64 %326, 1
  store i64 %inc631, ptr %len, align 8
  br label %do.end632

do.end632:                                        ; preds = %if.end630
  store i8 0, ptr %pending_shell_escape_end, align 1
  br label %if.end633

if.end633:                                        ; preds = %do.end632, %land.lhs.true614, %do.body611
  br label %do.end634

do.end634:                                        ; preds = %if.end633
  br label %do.body635

do.body635:                                       ; preds = %do.end634
  %327 = load i64, ptr %len, align 8
  %328 = load i64, ptr %buffersize.addr, align 8
  %cmp636 = icmp ult i64 %327, %328
  br i1 %cmp636, label %if.then638, label %if.end640

if.then638:                                       ; preds = %do.body635
  %329 = load i8, ptr %c, align 1
  %330 = load ptr, ptr %buffer.addr, align 8
  %331 = load i64, ptr %len, align 8
  %arrayidx639 = getelementptr inbounds i8, ptr %330, i64 %331
  store i8 %329, ptr %arrayidx639, align 1
  br label %if.end640

if.end640:                                        ; preds = %if.then638, %do.body635
  %332 = load i64, ptr %len, align 8
  %inc641 = add i64 %332, 1
  store i64 %inc641, ptr %len, align 8
  br label %do.end642

do.end642:                                        ; preds = %if.end640
  %333 = load i8, ptr %c_and_shell_quote_compat, align 1
  %tobool643 = trunc i8 %333 to i1
  br i1 %tobool643, label %if.end645, label %if.then644

if.then644:                                       ; preds = %do.end642
  store i8 0, ptr %all_c_and_shell_quote_compat, align 1
  br label %if.end645

if.end645:                                        ; preds = %if.then644, %do.end642
  br label %for.inc646

for.inc646:                                       ; preds = %if.end645, %if.then167
  %334 = load i64, ptr %i, align 8
  %inc647 = add i64 %334, 1
  store i64 %inc647, ptr %i, align 8
  br label %for.cond44, !llvm.loop !30

for.end648:                                       ; preds = %cond.end
  %335 = load i64, ptr %len, align 8
  %cmp649 = icmp eq i64 %335, 0
  br i1 %cmp649, label %land.lhs.true651, label %if.end658

land.lhs.true651:                                 ; preds = %for.end648
  %336 = load i32, ptr %quoting_style.addr, align 4
  %cmp652 = icmp eq i32 %336, 2
  br i1 %cmp652, label %land.lhs.true654, label %if.end658

land.lhs.true654:                                 ; preds = %land.lhs.true651
  %337 = load i8, ptr %elide_outer_quotes, align 1
  %tobool655 = trunc i8 %337 to i1
  br i1 %tobool655, label %if.then657, label %if.end658

if.then657:                                       ; preds = %land.lhs.true654
  br label %force_outer_quoting_style

if.end658:                                        ; preds = %land.lhs.true654, %land.lhs.true651, %for.end648
  %338 = load i32, ptr %quoting_style.addr, align 4
  %cmp659 = icmp eq i32 %338, 2
  br i1 %cmp659, label %land.lhs.true661, label %if.end677

land.lhs.true661:                                 ; preds = %if.end658
  %339 = load i8, ptr %elide_outer_quotes, align 1
  %tobool662 = trunc i8 %339 to i1
  br i1 %tobool662, label %if.end677, label %land.lhs.true663

land.lhs.true663:                                 ; preds = %land.lhs.true661
  %340 = load i8, ptr %encountered_single_quote, align 1
  %tobool664 = trunc i8 %340 to i1
  br i1 %tobool664, label %if.then666, label %if.end677

if.then666:                                       ; preds = %land.lhs.true663
  %341 = load i8, ptr %all_c_and_shell_quote_compat, align 1
  %tobool667 = trunc i8 %341 to i1
  br i1 %tobool667, label %if.then668, label %if.else670

if.then668:                                       ; preds = %if.then666
  %342 = load ptr, ptr %buffer.addr, align 8
  %343 = load i64, ptr %orig_buffersize, align 8
  %344 = load ptr, ptr %arg.addr, align 8
  %345 = load i64, ptr %argsize.addr, align 8
  %346 = load i32, ptr %flags.addr, align 4
  %347 = load ptr, ptr %quote_these_too.addr, align 8
  %348 = load ptr, ptr %left_quote.addr, align 8
  %349 = load ptr, ptr %right_quote.addr, align 8
  %call669 = call i64 @quotearg_buffer_restyled(ptr noundef %342, i64 noundef %343, ptr noundef %344, i64 noundef %345, i32 noundef 5, i32 noundef %346, ptr noundef %347, ptr noundef %348, ptr noundef %349)
  store i64 %call669, ptr %retval, align 8
  br label %return

if.else670:                                       ; preds = %if.then666
  %350 = load i64, ptr %buffersize.addr, align 8
  %tobool671 = icmp ne i64 %350, 0
  br i1 %tobool671, label %if.end675, label %land.lhs.true672

land.lhs.true672:                                 ; preds = %if.else670
  %351 = load i64, ptr %orig_buffersize, align 8
  %tobool673 = icmp ne i64 %351, 0
  br i1 %tobool673, label %if.then674, label %if.end675

if.then674:                                       ; preds = %land.lhs.true672
  %352 = load i64, ptr %orig_buffersize, align 8
  store i64 %352, ptr %buffersize.addr, align 8
  store i64 0, ptr %len, align 8
  br label %process_input

if.end675:                                        ; preds = %land.lhs.true672, %if.else670
  br label %if.end676

if.end676:                                        ; preds = %if.end675
  br label %if.end677

if.end677:                                        ; preds = %if.end676, %land.lhs.true663, %land.lhs.true661, %if.end658
  %353 = load ptr, ptr %quote_string, align 8
  %tobool678 = icmp ne ptr %353, null
  br i1 %tobool678, label %land.lhs.true679, label %if.end696

land.lhs.true679:                                 ; preds = %if.end677
  %354 = load i8, ptr %elide_outer_quotes, align 1
  %tobool680 = trunc i8 %354 to i1
  br i1 %tobool680, label %if.end696, label %if.then681

if.then681:                                       ; preds = %land.lhs.true679
  br label %for.cond682

for.cond682:                                      ; preds = %for.inc693, %if.then681
  %355 = load ptr, ptr %quote_string, align 8
  %356 = load i8, ptr %355, align 1
  %tobool683 = icmp ne i8 %356, 0
  br i1 %tobool683, label %for.body684, label %for.end695

for.body684:                                      ; preds = %for.cond682
  br label %do.body685

do.body685:                                       ; preds = %for.body684
  %357 = load i64, ptr %len, align 8
  %358 = load i64, ptr %buffersize.addr, align 8
  %cmp686 = icmp ult i64 %357, %358
  br i1 %cmp686, label %if.then688, label %if.end690

if.then688:                                       ; preds = %do.body685
  %359 = load ptr, ptr %quote_string, align 8
  %360 = load i8, ptr %359, align 1
  %361 = load ptr, ptr %buffer.addr, align 8
  %362 = load i64, ptr %len, align 8
  %arrayidx689 = getelementptr inbounds i8, ptr %361, i64 %362
  store i8 %360, ptr %arrayidx689, align 1
  br label %if.end690

if.end690:                                        ; preds = %if.then688, %do.body685
  %363 = load i64, ptr %len, align 8
  %inc691 = add i64 %363, 1
  store i64 %inc691, ptr %len, align 8
  br label %do.end692

do.end692:                                        ; preds = %if.end690
  br label %for.inc693

for.inc693:                                       ; preds = %do.end692
  %364 = load ptr, ptr %quote_string, align 8
  %incdec.ptr694 = getelementptr inbounds i8, ptr %364, i32 1
  store ptr %incdec.ptr694, ptr %quote_string, align 8
  br label %for.cond682, !llvm.loop !31

for.end695:                                       ; preds = %for.cond682
  br label %if.end696

if.end696:                                        ; preds = %for.end695, %land.lhs.true679, %if.end677
  %365 = load i64, ptr %len, align 8
  %366 = load i64, ptr %buffersize.addr, align 8
  %cmp697 = icmp ult i64 %365, %366
  br i1 %cmp697, label %if.then699, label %if.end701

if.then699:                                       ; preds = %if.end696
  %367 = load ptr, ptr %buffer.addr, align 8
  %368 = load i64, ptr %len, align 8
  %arrayidx700 = getelementptr inbounds i8, ptr %367, i64 %368
  store i8 0, ptr %arrayidx700, align 1
  br label %if.end701

if.end701:                                        ; preds = %if.then699, %if.end696
  %369 = load i64, ptr %len, align 8
  store i64 %369, ptr %retval, align 8
  br label %return

force_outer_quoting_style:                        ; preds = %if.then657, %if.then570, %if.then423, %sw.bb389, %if.then300, %if.then293, %if.then263, %if.then246, %if.then194, %if.then173, %if.then88, %if.then78
  %370 = load i32, ptr %quoting_style.addr, align 4
  %cmp702 = icmp eq i32 %370, 2
  br i1 %cmp702, label %land.lhs.true704, label %if.end708

land.lhs.true704:                                 ; preds = %force_outer_quoting_style
  %371 = load i8, ptr %backslash_escapes, align 1
  %tobool705 = trunc i8 %371 to i1
  br i1 %tobool705, label %if.then707, label %if.end708

if.then707:                                       ; preds = %land.lhs.true704
  store i32 4, ptr %quoting_style.addr, align 4
  br label %if.end708

if.end708:                                        ; preds = %if.then707, %land.lhs.true704, %force_outer_quoting_style
  %372 = load ptr, ptr %buffer.addr, align 8
  %373 = load i64, ptr %buffersize.addr, align 8
  %374 = load ptr, ptr %arg.addr, align 8
  %375 = load i64, ptr %argsize.addr, align 8
  %376 = load i32, ptr %quoting_style.addr, align 4
  %377 = load i32, ptr %flags.addr, align 4
  %and709 = and i32 %377, -3
  %378 = load ptr, ptr %left_quote.addr, align 8
  %379 = load ptr, ptr %right_quote.addr, align 8
  %call710 = call i64 @quotearg_buffer_restyled(ptr noundef %372, i64 noundef %373, ptr noundef %374, i64 noundef %375, i32 noundef %376, i32 noundef %and709, ptr noundef null, ptr noundef %378, ptr noundef %379)
  store i64 %call710, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end708, %if.end701, %if.then668
  %380 = load i64, ptr %retval, align 8
  ret i64 %380
}

; Function Attrs: nounwind
declare i64 @__ctype_get_mb_cur_max() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @gettext_quote(ptr noundef %msgid, i32 noundef %s) #3 {
entry:
  %retval = alloca ptr, align 8
  %msgid.addr = alloca ptr, align 8
  %s.addr = alloca i32, align 4
  %translation = alloca ptr, align 8
  %locale_code = alloca ptr, align 8
  store ptr %msgid, ptr %msgid.addr, align 8
  store i32 %s, ptr %s.addr, align 4
  %0 = load ptr, ptr %msgid.addr, align 8
  %call = call ptr @dgettext(ptr noundef @.str.13.80, ptr noundef %0) #21
  store ptr %call, ptr %translation, align 8
  %1 = load ptr, ptr %translation, align 8
  %2 = load ptr, ptr %msgid.addr, align 8
  %cmp = icmp ne ptr %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load ptr, ptr %translation, align 8
  store ptr %3, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call ptr @locale_charset()
  store ptr %call1, ptr %locale_code, align 8
  %4 = load ptr, ptr %locale_code, align 8
  %call2 = call i32 @c_strcasecmp(ptr noundef %4, ptr noundef @.str.14.81) #23
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.end
  %5 = load ptr, ptr %msgid.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %5, i64 0
  %6 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp5 = icmp eq i32 %conv, 96
  %7 = zext i1 %cmp5 to i64
  %cond = select i1 %cmp5, ptr @.str.15.82, ptr @.str.16.83
  store ptr %cond, ptr %retval, align 8
  br label %return

if.end7:                                          ; preds = %if.end
  %8 = load ptr, ptr %locale_code, align 8
  %call8 = call i32 @c_strcasecmp(ptr noundef %8, ptr noundef @.str.17.84) #23
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then11, label %if.end17

if.then11:                                        ; preds = %if.end7
  %9 = load ptr, ptr %msgid.addr, align 8
  %arrayidx12 = getelementptr inbounds i8, ptr %9, i64 0
  %10 = load i8, ptr %arrayidx12, align 1
  %conv13 = sext i8 %10 to i32
  %cmp14 = icmp eq i32 %conv13, 96
  %11 = zext i1 %cmp14 to i64
  %cond16 = select i1 %cmp14, ptr @.str.18.85, ptr @.str.19.86
  store ptr %cond16, ptr %retval, align 8
  br label %return

if.end17:                                         ; preds = %if.end7
  %12 = load i32, ptr %s.addr, align 4
  %cmp18 = icmp eq i32 %12, 9
  %13 = zext i1 %cmp18 to i64
  %cond20 = select i1 %cmp18, ptr @.str.10.77, ptr @.str.12.79
  store ptr %cond20, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end17, %if.then11, %if.then4, %if.then
  %14 = load ptr, ptr %retval, align 8
  ret ptr %14
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strlen(ptr noundef) #6

; Function Attrs: nounwind willreturn memory(none)
declare ptr @__ctype_b_loc() #8

declare void @mbszero(ptr noundef) #2

declare i32 @c32isprint(i32 noundef) #2

; Function Attrs: nounwind
declare ptr @dgettext(ptr noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @quotearg_alloc(ptr noundef %arg, i64 noundef %argsize, ptr noundef %o) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %o.addr = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store ptr %o, ptr %o.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i64, ptr %argsize.addr, align 8
  %2 = load ptr, ptr %o.addr, align 8
  %call = call noalias nonnull ptr @quotearg_alloc_mem(ptr noundef %0, i64 noundef %1, ptr noundef null, ptr noundef %2)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @quotearg_alloc_mem(ptr noundef %arg, i64 noundef %argsize, ptr noundef %size, ptr noundef %o) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %size.addr = alloca ptr, align 8
  %o.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %e = alloca i32, align 4
  %flags = alloca i32, align 4
  %bufsize = alloca i64, align 8
  %buf = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store ptr %size, ptr %size.addr, align 8
  store ptr %o, ptr %o.addr, align 8
  %0 = load ptr, ptr %o.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %o.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ @default_quoting_options, %cond.false ]
  store ptr %cond, ptr %p, align 8
  %call = call ptr @__errno_location() #26
  %2 = load i32, ptr %call, align 4
  store i32 %2, ptr %e, align 4
  %3 = load ptr, ptr %p, align 8
  %flags1 = getelementptr inbounds %struct.quoting_options, ptr %3, i32 0, i32 1
  %4 = load i32, ptr %flags1, align 4
  %5 = load ptr, ptr %size.addr, align 8
  %tobool2 = icmp ne ptr %5, null
  %6 = zext i1 %tobool2 to i64
  %cond3 = select i1 %tobool2, i32 0, i32 1
  %or = or i32 %4, %cond3
  store i32 %or, ptr %flags, align 4
  %7 = load ptr, ptr %arg.addr, align 8
  %8 = load i64, ptr %argsize.addr, align 8
  %9 = load ptr, ptr %p, align 8
  %style = getelementptr inbounds %struct.quoting_options, ptr %9, i32 0, i32 0
  %10 = load i32, ptr %style, align 8
  %11 = load i32, ptr %flags, align 4
  %12 = load ptr, ptr %p, align 8
  %quote_these_too = getelementptr inbounds %struct.quoting_options, ptr %12, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], ptr %quote_these_too, i64 0, i64 0
  %13 = load ptr, ptr %p, align 8
  %left_quote = getelementptr inbounds %struct.quoting_options, ptr %13, i32 0, i32 3
  %14 = load ptr, ptr %left_quote, align 8
  %15 = load ptr, ptr %p, align 8
  %right_quote = getelementptr inbounds %struct.quoting_options, ptr %15, i32 0, i32 4
  %16 = load ptr, ptr %right_quote, align 8
  %call4 = call i64 @quotearg_buffer_restyled(ptr noundef null, i64 noundef 0, ptr noundef %7, i64 noundef %8, i32 noundef %10, i32 noundef %11, ptr noundef %arraydecay, ptr noundef %14, ptr noundef %16)
  %add = add i64 %call4, 1
  store i64 %add, ptr %bufsize, align 8
  %17 = load i64, ptr %bufsize, align 8
  %call5 = call noalias nonnull ptr @xcharalloc(i64 noundef %17) #27
  store ptr %call5, ptr %buf, align 8
  %18 = load ptr, ptr %buf, align 8
  %19 = load i64, ptr %bufsize, align 8
  %20 = load ptr, ptr %arg.addr, align 8
  %21 = load i64, ptr %argsize.addr, align 8
  %22 = load ptr, ptr %p, align 8
  %style6 = getelementptr inbounds %struct.quoting_options, ptr %22, i32 0, i32 0
  %23 = load i32, ptr %style6, align 8
  %24 = load i32, ptr %flags, align 4
  %25 = load ptr, ptr %p, align 8
  %quote_these_too7 = getelementptr inbounds %struct.quoting_options, ptr %25, i32 0, i32 2
  %arraydecay8 = getelementptr inbounds [8 x i32], ptr %quote_these_too7, i64 0, i64 0
  %26 = load ptr, ptr %p, align 8
  %left_quote9 = getelementptr inbounds %struct.quoting_options, ptr %26, i32 0, i32 3
  %27 = load ptr, ptr %left_quote9, align 8
  %28 = load ptr, ptr %p, align 8
  %right_quote10 = getelementptr inbounds %struct.quoting_options, ptr %28, i32 0, i32 4
  %29 = load ptr, ptr %right_quote10, align 8
  %call11 = call i64 @quotearg_buffer_restyled(ptr noundef %18, i64 noundef %19, ptr noundef %20, i64 noundef %21, i32 noundef %23, i32 noundef %24, ptr noundef %arraydecay8, ptr noundef %27, ptr noundef %29)
  %30 = load i32, ptr %e, align 4
  %call12 = call ptr @__errno_location() #26
  store i32 %30, ptr %call12, align 4
  %31 = load ptr, ptr %size.addr, align 8
  %tobool13 = icmp ne ptr %31, null
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %32 = load i64, ptr %bufsize, align 8
  %sub = sub i64 %32, 1
  %33 = load ptr, ptr %size.addr, align 8
  store i64 %sub, ptr %33, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %34 = load ptr, ptr %buf, align 8
  ret ptr %34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @quotearg_free() #3 {
entry:
  %sv = alloca ptr, align 8
  %i = alloca i32, align 4
  %0 = load ptr, ptr @slotvec, align 8
  store ptr %0, ptr %sv, align 8
  store i32 1, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, ptr %i, align 4
  %2 = load i32, ptr @nslots, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %sv, align 8
  %4 = load i32, ptr %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds %struct.slotvec, ptr %3, i64 %idxprom
  %val = getelementptr inbounds %struct.slotvec, ptr %arrayidx, i32 0, i32 1
  %5 = load ptr, ptr %val, align 8
  call void @free(ptr noundef %5) #21
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond, !llvm.loop !32

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %sv, align 8
  %arrayidx1 = getelementptr inbounds %struct.slotvec, ptr %7, i64 0
  %val2 = getelementptr inbounds %struct.slotvec, ptr %arrayidx1, i32 0, i32 1
  %8 = load ptr, ptr %val2, align 8
  %cmp3 = icmp ne ptr %8, @slot0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %9 = load ptr, ptr %sv, align 8
  %arrayidx4 = getelementptr inbounds %struct.slotvec, ptr %9, i64 0
  %val5 = getelementptr inbounds %struct.slotvec, ptr %arrayidx4, i32 0, i32 1
  %10 = load ptr, ptr %val5, align 8
  call void @free(ptr noundef %10) #21
  store i64 256, ptr @slotvec0, align 8
  store ptr @slot0, ptr getelementptr inbounds (%struct.slotvec, ptr @slotvec0, i32 0, i32 1), align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %11 = load ptr, ptr %sv, align 8
  %cmp6 = icmp ne ptr %11, @slotvec0
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  %12 = load ptr, ptr %sv, align 8
  call void @free(ptr noundef %12) #21
  store ptr @slotvec0, ptr @slotvec, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  store i32 1, ptr @nslots, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n(i32 noundef %n, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %0, ptr noundef %1, i64 noundef -1, ptr noundef @default_quoting_options)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @quotearg_n_options(i32 noundef %n, ptr noundef %arg, i64 noundef %argsize, ptr noundef %options) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %options.addr = alloca ptr, align 8
  %e = alloca i32, align 4
  %sv = alloca ptr, align 8
  %nslots_max = alloca i32, align 4
  %preallocated = alloca i8, align 1
  %new_nslots = alloca i64, align 8
  %size = alloca i64, align 8
  %val = alloca ptr, align 8
  %flags = alloca i32, align 4
  %qsize = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store ptr %options, ptr %options.addr, align 8
  %call = call ptr @__errno_location() #26
  %0 = load i32, ptr %call, align 4
  store i32 %0, ptr %e, align 4
  %1 = load ptr, ptr @slotvec, align 8
  store ptr %1, ptr %sv, align 8
  store i32 2147483647, ptr %nslots_max, align 4
  %2 = load i32, ptr %n.addr, align 4
  %cmp = icmp sle i32 0, %2
  br i1 %cmp, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, ptr %n.addr, align 4
  %4 = load i32, ptr %nslots_max, align 4
  %cmp1 = icmp slt i32 %3, %4
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  call void @abort() #22
  unreachable

if.end:                                           ; preds = %land.lhs.true
  %5 = load i32, ptr @nslots, align 4
  %6 = load i32, ptr %n.addr, align 4
  %cmp2 = icmp sle i32 %5, %6
  br i1 %cmp2, label %if.then3, label %if.end15

if.then3:                                         ; preds = %if.end
  %7 = load ptr, ptr %sv, align 8
  %cmp4 = icmp eq ptr %7, @slotvec0
  %frombool = zext i1 %cmp4 to i8
  store i8 %frombool, ptr %preallocated, align 1
  %8 = load i32, ptr @nslots, align 4
  %conv = sext i32 %8 to i64
  store i64 %conv, ptr %new_nslots, align 8
  %9 = load i8, ptr %preallocated, align 1
  %tobool = trunc i8 %9 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  %10 = load ptr, ptr %sv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ null, %cond.true ], [ %10, %cond.false ]
  %11 = load i32, ptr %n.addr, align 4
  %12 = load i32, ptr @nslots, align 4
  %sub = sub nsw i32 %11, %12
  %add = add nsw i32 %sub, 1
  %conv6 = sext i32 %add to i64
  %13 = load i32, ptr %nslots_max, align 4
  %conv7 = sext i32 %13 to i64
  %call8 = call nonnull ptr @xpalloc(ptr noundef %cond, ptr noundef %new_nslots, i64 noundef %conv6, i64 noundef %conv7, i64 noundef 16)
  store ptr %call8, ptr %sv, align 8
  store ptr %call8, ptr @slotvec, align 8
  %14 = load i8, ptr %preallocated, align 1
  %tobool9 = trunc i8 %14 to i1
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %cond.end
  %15 = load ptr, ptr %sv, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %15, ptr align 8 @slotvec0, i64 16, i1 false)
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %cond.end
  %16 = load ptr, ptr %sv, align 8
  %17 = load i32, ptr @nslots, align 4
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds %struct.slotvec, ptr %16, i64 %idx.ext
  %18 = load i64, ptr %new_nslots, align 8
  %19 = load i32, ptr @nslots, align 4
  %conv12 = sext i32 %19 to i64
  %sub13 = sub nsw i64 %18, %conv12
  %mul = mul i64 %sub13, 16
  call void @llvm.memset.p0.i64(ptr align 8 %add.ptr, i8 0, i64 %mul, i1 false)
  %20 = load i64, ptr %new_nslots, align 8
  %conv14 = trunc i64 %20 to i32
  store i32 %conv14, ptr @nslots, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.end11, %if.end
  %21 = load ptr, ptr %sv, align 8
  %22 = load i32, ptr %n.addr, align 4
  %idxprom = sext i32 %22 to i64
  %arrayidx = getelementptr inbounds %struct.slotvec, ptr %21, i64 %idxprom
  %size16 = getelementptr inbounds %struct.slotvec, ptr %arrayidx, i32 0, i32 0
  %23 = load i64, ptr %size16, align 8
  store i64 %23, ptr %size, align 8
  %24 = load ptr, ptr %sv, align 8
  %25 = load i32, ptr %n.addr, align 4
  %idxprom17 = sext i32 %25 to i64
  %arrayidx18 = getelementptr inbounds %struct.slotvec, ptr %24, i64 %idxprom17
  %val19 = getelementptr inbounds %struct.slotvec, ptr %arrayidx18, i32 0, i32 1
  %26 = load ptr, ptr %val19, align 8
  store ptr %26, ptr %val, align 8
  %27 = load ptr, ptr %options.addr, align 8
  %flags20 = getelementptr inbounds %struct.quoting_options, ptr %27, i32 0, i32 1
  %28 = load i32, ptr %flags20, align 4
  %or = or i32 %28, 1
  store i32 %or, ptr %flags, align 4
  %29 = load ptr, ptr %val, align 8
  %30 = load i64, ptr %size, align 8
  %31 = load ptr, ptr %arg.addr, align 8
  %32 = load i64, ptr %argsize.addr, align 8
  %33 = load ptr, ptr %options.addr, align 8
  %style = getelementptr inbounds %struct.quoting_options, ptr %33, i32 0, i32 0
  %34 = load i32, ptr %style, align 8
  %35 = load i32, ptr %flags, align 4
  %36 = load ptr, ptr %options.addr, align 8
  %quote_these_too = getelementptr inbounds %struct.quoting_options, ptr %36, i32 0, i32 2
  %arraydecay = getelementptr inbounds [8 x i32], ptr %quote_these_too, i64 0, i64 0
  %37 = load ptr, ptr %options.addr, align 8
  %left_quote = getelementptr inbounds %struct.quoting_options, ptr %37, i32 0, i32 3
  %38 = load ptr, ptr %left_quote, align 8
  %39 = load ptr, ptr %options.addr, align 8
  %right_quote = getelementptr inbounds %struct.quoting_options, ptr %39, i32 0, i32 4
  %40 = load ptr, ptr %right_quote, align 8
  %call21 = call i64 @quotearg_buffer_restyled(ptr noundef %29, i64 noundef %30, ptr noundef %31, i64 noundef %32, i32 noundef %34, i32 noundef %35, ptr noundef %arraydecay, ptr noundef %38, ptr noundef %40)
  store i64 %call21, ptr %qsize, align 8
  %41 = load i64, ptr %size, align 8
  %42 = load i64, ptr %qsize, align 8
  %cmp22 = icmp ule i64 %41, %42
  br i1 %cmp22, label %if.then24, label %if.end43

if.then24:                                        ; preds = %if.end15
  %43 = load i64, ptr %qsize, align 8
  %add25 = add i64 %43, 1
  store i64 %add25, ptr %size, align 8
  %44 = load ptr, ptr %sv, align 8
  %45 = load i32, ptr %n.addr, align 4
  %idxprom26 = sext i32 %45 to i64
  %arrayidx27 = getelementptr inbounds %struct.slotvec, ptr %44, i64 %idxprom26
  %size28 = getelementptr inbounds %struct.slotvec, ptr %arrayidx27, i32 0, i32 0
  store i64 %add25, ptr %size28, align 8
  %46 = load ptr, ptr %val, align 8
  %cmp29 = icmp ne ptr %46, @slot0
  br i1 %cmp29, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.then24
  %47 = load ptr, ptr %val, align 8
  call void @free(ptr noundef %47) #21
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.then24
  %48 = load i64, ptr %size, align 8
  %call33 = call noalias nonnull ptr @xcharalloc(i64 noundef %48) #27
  store ptr %call33, ptr %val, align 8
  %49 = load ptr, ptr %sv, align 8
  %50 = load i32, ptr %n.addr, align 4
  %idxprom34 = sext i32 %50 to i64
  %arrayidx35 = getelementptr inbounds %struct.slotvec, ptr %49, i64 %idxprom34
  %val36 = getelementptr inbounds %struct.slotvec, ptr %arrayidx35, i32 0, i32 1
  store ptr %call33, ptr %val36, align 8
  %51 = load ptr, ptr %val, align 8
  %52 = load i64, ptr %size, align 8
  %53 = load ptr, ptr %arg.addr, align 8
  %54 = load i64, ptr %argsize.addr, align 8
  %55 = load ptr, ptr %options.addr, align 8
  %style37 = getelementptr inbounds %struct.quoting_options, ptr %55, i32 0, i32 0
  %56 = load i32, ptr %style37, align 8
  %57 = load i32, ptr %flags, align 4
  %58 = load ptr, ptr %options.addr, align 8
  %quote_these_too38 = getelementptr inbounds %struct.quoting_options, ptr %58, i32 0, i32 2
  %arraydecay39 = getelementptr inbounds [8 x i32], ptr %quote_these_too38, i64 0, i64 0
  %59 = load ptr, ptr %options.addr, align 8
  %left_quote40 = getelementptr inbounds %struct.quoting_options, ptr %59, i32 0, i32 3
  %60 = load ptr, ptr %left_quote40, align 8
  %61 = load ptr, ptr %options.addr, align 8
  %right_quote41 = getelementptr inbounds %struct.quoting_options, ptr %61, i32 0, i32 4
  %62 = load ptr, ptr %right_quote41, align 8
  %call42 = call i64 @quotearg_buffer_restyled(ptr noundef %51, i64 noundef %52, ptr noundef %53, i64 noundef %54, i32 noundef %56, i32 noundef %57, ptr noundef %arraydecay39, ptr noundef %60, ptr noundef %62)
  br label %if.end43

if.end43:                                         ; preds = %if.end32, %if.end15
  %63 = load i32, ptr %e, align 4
  %call44 = call ptr @__errno_location() #26
  store i32 %63, ptr %call44, align 4
  %64 = load ptr, ptr %val, align 8
  ret ptr %64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_mem(i32 noundef %n, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %2 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %0, ptr noundef %1, i64 noundef %2, ptr noundef @default_quoting_options)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg(ptr noundef %arg) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n(i32 noundef 0, ptr noundef %0)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_mem(ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_mem(i32 noundef 0, ptr noundef %0, i64 noundef %1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_style(i32 noundef %n, i32 noundef %s, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, ptr %n.addr, align 4
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  call void @quoting_options_from_style(ptr dead_on_unwind writable sret(%struct.quoting_options) align 8 %o, i32 noundef %0)
  %1 = load i32, ptr %n.addr, align 4
  %2 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %1, ptr noundef %2, i64 noundef -1, ptr noundef %o)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(ptr dead_on_unwind noalias writable sret(%struct.quoting_options) align 8 %agg.result, i32 noundef %style) #3 {
entry:
  %style.addr = alloca i32, align 4
  store i32 %style, ptr %style.addr, align 4
  call void @llvm.memset.p0.i64(ptr align 8 %agg.result, i8 0, i64 56, i1 false)
  %0 = load i32, ptr %style.addr, align 4
  %cmp = icmp eq i32 %0, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @abort() #22
  unreachable

if.end:                                           ; preds = %entry
  %1 = load i32, ptr %style.addr, align 4
  %style1 = getelementptr inbounds %struct.quoting_options, ptr %agg.result, i32 0, i32 0
  store i32 %1, ptr %style1, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_style_mem(i32 noundef %n, i32 noundef %s, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, ptr %n.addr, align 4
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  call void @quoting_options_from_style(ptr dead_on_unwind writable sret(%struct.quoting_options) align 8 %o, i32 noundef %0)
  %1 = load i32, ptr %n.addr, align 4
  %2 = load ptr, ptr %arg.addr, align 8
  %3 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %1, ptr noundef %2, i64 noundef %3, ptr noundef %o)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_style(i32 noundef %s, ptr noundef %arg) #3 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_style(i32 noundef 0, i32 noundef %0, ptr noundef %1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_style_mem(i32 noundef %s, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %2 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_style_mem(i32 noundef 0, i32 noundef %0, ptr noundef %1, i64 noundef %2)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_char_mem(ptr noundef %arg, i64 noundef %argsize, i8 noundef signext %ch) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %ch.addr = alloca i8, align 1
  %options = alloca %struct.quoting_options, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  store i8 %ch, ptr %ch.addr, align 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %options, ptr align 8 @default_quoting_options, i64 56, i1 false)
  %0 = load i8, ptr %ch.addr, align 1
  %call = call i32 @set_char_quoting(ptr noundef %options, i8 noundef signext %0, i32 noundef 1)
  %1 = load ptr, ptr %arg.addr, align 8
  %2 = load i64, ptr %argsize.addr, align 8
  %call1 = call ptr @quotearg_n_options(i32 noundef 0, ptr noundef %1, i64 noundef %2, ptr noundef %options)
  ret ptr %call1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_char(ptr noundef %arg, i8 noundef signext %ch) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %ch.addr = alloca i8, align 1
  store ptr %arg, ptr %arg.addr, align 8
  store i8 %ch, ptr %ch.addr, align 1
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i8, ptr %ch.addr, align 1
  %call = call ptr @quotearg_char_mem(ptr noundef %0, i64 noundef -1, i8 noundef signext %1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_colon(ptr noundef %arg) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_char(ptr noundef %0, i8 noundef signext 58)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_colon_mem(ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_char_mem(ptr noundef %0, i64 noundef %1, i8 noundef signext 58)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_style_colon(i32 noundef %n, i32 noundef %s, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %options = alloca %struct.quoting_options, align 8
  %tmp = alloca %struct.quoting_options, align 8
  store i32 %n, ptr %n.addr, align 4
  store i32 %s, ptr %s.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %s.addr, align 4
  call void @quoting_options_from_style(ptr dead_on_unwind writable sret(%struct.quoting_options) align 8 %tmp, i32 noundef %0)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %options, ptr align 8 %tmp, i64 56, i1 false)
  %call = call i32 @set_char_quoting(ptr noundef %options, i8 noundef signext 58, i32 noundef 1)
  %1 = load i32, ptr %n.addr, align 4
  %2 = load ptr, ptr %arg.addr, align 8
  %call1 = call ptr @quotearg_n_options(i32 noundef %1, ptr noundef %2, i64 noundef -1, ptr noundef %options)
  ret ptr %call1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_custom(i32 noundef %n, ptr noundef %left_quote, ptr noundef %right_quote, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %left_quote.addr, align 8
  %2 = load ptr, ptr %right_quote.addr, align 8
  %3 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_custom_mem(i32 noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, i64 noundef -1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_n_custom_mem(i32 noundef %n, ptr noundef %left_quote, ptr noundef %right_quote, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %n.addr = alloca i32, align 4
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  %o = alloca %struct.quoting_options, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %o, ptr align 8 @default_quoting_options, i64 56, i1 false)
  %0 = load ptr, ptr %left_quote.addr, align 8
  %1 = load ptr, ptr %right_quote.addr, align 8
  call void @set_custom_quoting(ptr noundef %o, ptr noundef %0, ptr noundef %1)
  %2 = load i32, ptr %n.addr, align 4
  %3 = load ptr, ptr %arg.addr, align 8
  %4 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %2, ptr noundef %3, i64 noundef %4, ptr noundef %o)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_custom(ptr noundef %left_quote, ptr noundef %right_quote, ptr noundef %arg) #3 {
entry:
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %left_quote.addr, align 8
  %1 = load ptr, ptr %right_quote.addr, align 8
  %2 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quotearg_n_custom(i32 noundef 0, ptr noundef %0, ptr noundef %1, ptr noundef %2)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quotearg_custom_mem(ptr noundef %left_quote, ptr noundef %right_quote, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %left_quote.addr = alloca ptr, align 8
  %right_quote.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store ptr %left_quote, ptr %left_quote.addr, align 8
  store ptr %right_quote, ptr %right_quote.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load ptr, ptr %left_quote.addr, align 8
  %1 = load ptr, ptr %right_quote.addr, align 8
  %2 = load ptr, ptr %arg.addr, align 8
  %3 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_custom_mem(i32 noundef 0, ptr noundef %0, ptr noundef %1, ptr noundef %2, i64 noundef %3)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quote_n_mem(i32 noundef %n, ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %2 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quotearg_n_options(i32 noundef %0, ptr noundef %1, i64 noundef %2, ptr noundef @quote_quoting_options)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quote_mem(ptr noundef %arg, i64 noundef %argsize) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  %argsize.addr = alloca i64, align 8
  store ptr %arg, ptr %arg.addr, align 8
  store i64 %argsize, ptr %argsize.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %1 = load i64, ptr %argsize.addr, align 8
  %call = call ptr @quote_n_mem(i32 noundef 0, ptr noundef %0, i64 noundef %1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quote_n(i32 noundef %n, ptr noundef %arg) #3 {
entry:
  %n.addr = alloca i32, align 4
  %arg.addr = alloca ptr, align 8
  store i32 %n, ptr %n.addr, align 4
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load i32, ptr %n.addr, align 4
  %1 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quote_n_mem(i32 noundef %0, ptr noundef %1, i64 noundef -1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @quote(ptr noundef %arg) #3 {
entry:
  %arg.addr = alloca ptr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %arg.addr, align 8
  %call = call ptr @quote_n(i32 noundef 0, ptr noundef %0)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout_set_file_name(ptr noundef %file) #3 {
entry:
  %file.addr = alloca ptr, align 8
  store ptr %file, ptr %file.addr, align 8
  %0 = load ptr, ptr %file.addr, align 8
  store ptr %0, ptr @file_name, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout_set_ignore_EPIPE(i1 noundef zeroext %ignore) #3 {
entry:
  %ignore.addr = alloca i8, align 1
  %frombool = zext i1 %ignore to i8
  store i8 %frombool, ptr %ignore.addr, align 1
  %0 = load i8, ptr %ignore.addr, align 1
  %tobool = trunc i8 %0 to i1
  %frombool1 = zext i1 %tobool to i8
  store i8 %frombool1, ptr @ignore_EPIPE, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdout() #3 {
entry:
  %write_error = alloca ptr, align 8
  %0 = load ptr, ptr @stdout, align 8
  %call = call i32 @close_stream(ptr noundef %0)
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, ptr @ignore_EPIPE, align 1
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %land.lhs.true1, label %if.then

land.lhs.true1:                                   ; preds = %land.lhs.true
  %call2 = call ptr @__errno_location() #26
  %2 = load i32, ptr %call2, align 4
  %cmp3 = icmp eq i32 %2, 32
  br i1 %cmp3, label %if.end10, label %if.then

if.then:                                          ; preds = %land.lhs.true1, %land.lhs.true
  %call4 = call ptr @dgettext(ptr noundef @.str.95, ptr noundef @.str.1.96) #21
  store ptr %call4, ptr %write_error, align 8
  %3 = load ptr, ptr @file_name, align 8
  %tobool5 = icmp ne ptr %3, null
  br i1 %tobool5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then
  %call7 = call ptr @__errno_location() #26
  %4 = load i32, ptr %call7, align 4
  %5 = load ptr, ptr @file_name, align 8
  %call8 = call ptr @quotearg_colon(ptr noundef %5)
  %6 = load ptr, ptr %write_error, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %4, ptr noundef @.str.2.97, ptr noundef %call8, ptr noundef %6) #24
  br label %if.end

if.else:                                          ; preds = %if.then
  %call9 = call ptr @__errno_location() #26
  %7 = load i32, ptr %call9, align 4
  %8 = load ptr, ptr %write_error, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %7, ptr noundef @.str.3.98, ptr noundef %8) #24
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  %9 = load volatile i32, ptr @exit_failure, align 4
  call void @_exit(i32 noundef %9) #25
  unreachable

if.end10:                                         ; preds = %land.lhs.true1, %entry
  %10 = load ptr, ptr @stderr, align 8
  %call11 = call i32 @close_stream(ptr noundef %10)
  %cmp12 = icmp ne i32 %call11, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end10
  %11 = load volatile i32, ptr @exit_failure, align 4
  call void @_exit(i32 noundef %11) #25
  unreachable

if.end14:                                         ; preds = %if.end10
  ret void
}

; Function Attrs: noreturn
declare void @_exit(i32 noundef) #11

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @close_stream(ptr noundef %stream) #3 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca ptr, align 8
  %some_pending = alloca i8, align 1
  %prev_fail = alloca i8, align 1
  %fclose_fail = alloca i8, align 1
  store ptr %stream, ptr %stream.addr, align 8
  %0 = load ptr, ptr %stream.addr, align 8
  %call = call i64 @__fpending(ptr noundef %0) #21
  %cmp = icmp ne i64 %call, 0
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, ptr %some_pending, align 1
  %1 = load ptr, ptr %stream.addr, align 8
  %call1 = call i32 @ferror_unlocked(ptr noundef %1) #21
  %cmp2 = icmp ne i32 %call1, 0
  %frombool3 = zext i1 %cmp2 to i8
  store i8 %frombool3, ptr %prev_fail, align 1
  %2 = load ptr, ptr %stream.addr, align 8
  %call4 = call i32 @rpl_fclose(ptr noundef %2)
  %cmp5 = icmp ne i32 %call4, 0
  %frombool6 = zext i1 %cmp5 to i8
  store i8 %frombool6, ptr %fclose_fail, align 1
  %3 = load i8, ptr %prev_fail, align 1
  %tobool = trunc i8 %3 to i1
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i8, ptr %fclose_fail, align 1
  %tobool7 = trunc i8 %4 to i1
  br i1 %tobool7, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load i8, ptr %some_pending, align 1
  %tobool8 = trunc i8 %5 to i1
  br i1 %tobool8, label %if.then, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %land.lhs.true
  %call10 = call ptr @__errno_location() #26
  %6 = load i32, ptr %call10, align 4
  %cmp11 = icmp ne i32 %6, 9
  br i1 %cmp11, label %if.then, label %if.end15

if.then:                                          ; preds = %lor.lhs.false9, %land.lhs.true, %entry
  %7 = load i8, ptr %fclose_fail, align 1
  %tobool12 = trunc i8 %7 to i1
  br i1 %tobool12, label %if.end, label %if.then13

if.then13:                                        ; preds = %if.then
  %call14 = call ptr @__errno_location() #26
  store i32 0, ptr %call14, align 4
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.then
  store i32 -1, ptr %retval, align 4
  br label %return

if.end15:                                         ; preds = %lor.lhs.false9, %lor.lhs.false
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end15, %if.end
  %8 = load i32, ptr %retval, align 4
  ret i32 %8
}

; Function Attrs: nounwind
declare i64 @__fpending(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @dup_safer(i32 noundef %fd) #3 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  %0 = load i32, ptr %fd.addr, align 4
  %call = call i32 (i32, i32, ...) @rpl_fcntl(i32 noundef %0, i32 noundef 0, i32 noundef 3)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_arn(ptr noundef %stream, ptr noundef %command_name, ptr noundef %package, ptr noundef %version, ptr noundef %authors, i64 noundef %n_authors) #3 {
entry:
  %stream.addr = alloca ptr, align 8
  %command_name.addr = alloca ptr, align 8
  %package.addr = alloca ptr, align 8
  %version.addr = alloca ptr, align 8
  %authors.addr = alloca ptr, align 8
  %n_authors.addr = alloca i64, align 8
  store ptr %stream, ptr %stream.addr, align 8
  store ptr %command_name, ptr %command_name.addr, align 8
  store ptr %package, ptr %package.addr, align 8
  store ptr %version, ptr %version.addr, align 8
  store ptr %authors, ptr %authors.addr, align 8
  store i64 %n_authors, ptr %n_authors.addr, align 8
  %0 = load ptr, ptr %command_name.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %stream.addr, align 8
  %2 = load ptr, ptr %command_name.addr, align 8
  %3 = load ptr, ptr %package.addr, align 8
  %4 = load ptr, ptr %version.addr, align 8
  %call = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %1, ptr noundef @.str.101, ptr noundef %2, ptr noundef %3, ptr noundef %4)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load ptr, ptr %stream.addr, align 8
  %6 = load ptr, ptr %package.addr, align 8
  %7 = load ptr, ptr %version.addr, align 8
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %5, ptr noundef @.str.1.102, ptr noundef %6, ptr noundef %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load ptr, ptr %stream.addr, align 8
  %call2 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.3.104) #21
  %call3 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %8, ptr noundef @version_etc_copyright, ptr noundef %call2, i32 noundef 2025)
  %9 = load ptr, ptr %stream.addr, align 8
  %call4 = call i32 @fputs_unlocked(ptr noundef @.str.4.105, ptr noundef %9)
  %10 = load ptr, ptr %stream.addr, align 8
  %call5 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.5.106) #21
  %call6 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %10, ptr noundef %call5, ptr noundef @.str.6.107)
  %11 = load ptr, ptr %stream.addr, align 8
  %call7 = call i32 @fputs_unlocked(ptr noundef @.str.4.105, ptr noundef %11)
  %12 = load i64, ptr %n_authors.addr, align 8
  switch i64 %12, label %sw.default [
    i64 0, label %sw.bb
    i64 1, label %sw.bb8
    i64 2, label %sw.bb11
    i64 3, label %sw.bb16
    i64 4, label %sw.bb22
    i64 5, label %sw.bb29
    i64 6, label %sw.bb37
    i64 7, label %sw.bb46
    i64 8, label %sw.bb56
    i64 9, label %sw.bb67
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb8:                                           ; preds = %if.end
  %13 = load ptr, ptr %stream.addr, align 8
  %call9 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.7.108) #21
  %14 = load ptr, ptr %authors.addr, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %14, i64 0
  %15 = load ptr, ptr %arrayidx, align 8
  %call10 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %13, ptr noundef %call9, ptr noundef %15)
  br label %sw.epilog

sw.bb11:                                          ; preds = %if.end
  %16 = load ptr, ptr %stream.addr, align 8
  %call12 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.8.109) #21
  %17 = load ptr, ptr %authors.addr, align 8
  %arrayidx13 = getelementptr inbounds ptr, ptr %17, i64 0
  %18 = load ptr, ptr %arrayidx13, align 8
  %19 = load ptr, ptr %authors.addr, align 8
  %arrayidx14 = getelementptr inbounds ptr, ptr %19, i64 1
  %20 = load ptr, ptr %arrayidx14, align 8
  %call15 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %16, ptr noundef %call12, ptr noundef %18, ptr noundef %20)
  br label %sw.epilog

sw.bb16:                                          ; preds = %if.end
  %21 = load ptr, ptr %stream.addr, align 8
  %call17 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.9.110) #21
  %22 = load ptr, ptr %authors.addr, align 8
  %arrayidx18 = getelementptr inbounds ptr, ptr %22, i64 0
  %23 = load ptr, ptr %arrayidx18, align 8
  %24 = load ptr, ptr %authors.addr, align 8
  %arrayidx19 = getelementptr inbounds ptr, ptr %24, i64 1
  %25 = load ptr, ptr %arrayidx19, align 8
  %26 = load ptr, ptr %authors.addr, align 8
  %arrayidx20 = getelementptr inbounds ptr, ptr %26, i64 2
  %27 = load ptr, ptr %arrayidx20, align 8
  %call21 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %21, ptr noundef %call17, ptr noundef %23, ptr noundef %25, ptr noundef %27)
  br label %sw.epilog

sw.bb22:                                          ; preds = %if.end
  %28 = load ptr, ptr %stream.addr, align 8
  %call23 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.10.111) #21
  %29 = load ptr, ptr %authors.addr, align 8
  %arrayidx24 = getelementptr inbounds ptr, ptr %29, i64 0
  %30 = load ptr, ptr %arrayidx24, align 8
  %31 = load ptr, ptr %authors.addr, align 8
  %arrayidx25 = getelementptr inbounds ptr, ptr %31, i64 1
  %32 = load ptr, ptr %arrayidx25, align 8
  %33 = load ptr, ptr %authors.addr, align 8
  %arrayidx26 = getelementptr inbounds ptr, ptr %33, i64 2
  %34 = load ptr, ptr %arrayidx26, align 8
  %35 = load ptr, ptr %authors.addr, align 8
  %arrayidx27 = getelementptr inbounds ptr, ptr %35, i64 3
  %36 = load ptr, ptr %arrayidx27, align 8
  %call28 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %28, ptr noundef %call23, ptr noundef %30, ptr noundef %32, ptr noundef %34, ptr noundef %36)
  br label %sw.epilog

sw.bb29:                                          ; preds = %if.end
  %37 = load ptr, ptr %stream.addr, align 8
  %call30 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.11.112) #21
  %38 = load ptr, ptr %authors.addr, align 8
  %arrayidx31 = getelementptr inbounds ptr, ptr %38, i64 0
  %39 = load ptr, ptr %arrayidx31, align 8
  %40 = load ptr, ptr %authors.addr, align 8
  %arrayidx32 = getelementptr inbounds ptr, ptr %40, i64 1
  %41 = load ptr, ptr %arrayidx32, align 8
  %42 = load ptr, ptr %authors.addr, align 8
  %arrayidx33 = getelementptr inbounds ptr, ptr %42, i64 2
  %43 = load ptr, ptr %arrayidx33, align 8
  %44 = load ptr, ptr %authors.addr, align 8
  %arrayidx34 = getelementptr inbounds ptr, ptr %44, i64 3
  %45 = load ptr, ptr %arrayidx34, align 8
  %46 = load ptr, ptr %authors.addr, align 8
  %arrayidx35 = getelementptr inbounds ptr, ptr %46, i64 4
  %47 = load ptr, ptr %arrayidx35, align 8
  %call36 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %37, ptr noundef %call30, ptr noundef %39, ptr noundef %41, ptr noundef %43, ptr noundef %45, ptr noundef %47)
  br label %sw.epilog

sw.bb37:                                          ; preds = %if.end
  %48 = load ptr, ptr %stream.addr, align 8
  %call38 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.12.113) #21
  %49 = load ptr, ptr %authors.addr, align 8
  %arrayidx39 = getelementptr inbounds ptr, ptr %49, i64 0
  %50 = load ptr, ptr %arrayidx39, align 8
  %51 = load ptr, ptr %authors.addr, align 8
  %arrayidx40 = getelementptr inbounds ptr, ptr %51, i64 1
  %52 = load ptr, ptr %arrayidx40, align 8
  %53 = load ptr, ptr %authors.addr, align 8
  %arrayidx41 = getelementptr inbounds ptr, ptr %53, i64 2
  %54 = load ptr, ptr %arrayidx41, align 8
  %55 = load ptr, ptr %authors.addr, align 8
  %arrayidx42 = getelementptr inbounds ptr, ptr %55, i64 3
  %56 = load ptr, ptr %arrayidx42, align 8
  %57 = load ptr, ptr %authors.addr, align 8
  %arrayidx43 = getelementptr inbounds ptr, ptr %57, i64 4
  %58 = load ptr, ptr %arrayidx43, align 8
  %59 = load ptr, ptr %authors.addr, align 8
  %arrayidx44 = getelementptr inbounds ptr, ptr %59, i64 5
  %60 = load ptr, ptr %arrayidx44, align 8
  %call45 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %48, ptr noundef %call38, ptr noundef %50, ptr noundef %52, ptr noundef %54, ptr noundef %56, ptr noundef %58, ptr noundef %60)
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.end
  %61 = load ptr, ptr %stream.addr, align 8
  %call47 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.13.114) #21
  %62 = load ptr, ptr %authors.addr, align 8
  %arrayidx48 = getelementptr inbounds ptr, ptr %62, i64 0
  %63 = load ptr, ptr %arrayidx48, align 8
  %64 = load ptr, ptr %authors.addr, align 8
  %arrayidx49 = getelementptr inbounds ptr, ptr %64, i64 1
  %65 = load ptr, ptr %arrayidx49, align 8
  %66 = load ptr, ptr %authors.addr, align 8
  %arrayidx50 = getelementptr inbounds ptr, ptr %66, i64 2
  %67 = load ptr, ptr %arrayidx50, align 8
  %68 = load ptr, ptr %authors.addr, align 8
  %arrayidx51 = getelementptr inbounds ptr, ptr %68, i64 3
  %69 = load ptr, ptr %arrayidx51, align 8
  %70 = load ptr, ptr %authors.addr, align 8
  %arrayidx52 = getelementptr inbounds ptr, ptr %70, i64 4
  %71 = load ptr, ptr %arrayidx52, align 8
  %72 = load ptr, ptr %authors.addr, align 8
  %arrayidx53 = getelementptr inbounds ptr, ptr %72, i64 5
  %73 = load ptr, ptr %arrayidx53, align 8
  %74 = load ptr, ptr %authors.addr, align 8
  %arrayidx54 = getelementptr inbounds ptr, ptr %74, i64 6
  %75 = load ptr, ptr %arrayidx54, align 8
  %call55 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %61, ptr noundef %call47, ptr noundef %63, ptr noundef %65, ptr noundef %67, ptr noundef %69, ptr noundef %71, ptr noundef %73, ptr noundef %75)
  br label %sw.epilog

sw.bb56:                                          ; preds = %if.end
  %76 = load ptr, ptr %stream.addr, align 8
  %call57 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.14.115) #21
  %77 = load ptr, ptr %authors.addr, align 8
  %arrayidx58 = getelementptr inbounds ptr, ptr %77, i64 0
  %78 = load ptr, ptr %arrayidx58, align 8
  %79 = load ptr, ptr %authors.addr, align 8
  %arrayidx59 = getelementptr inbounds ptr, ptr %79, i64 1
  %80 = load ptr, ptr %arrayidx59, align 8
  %81 = load ptr, ptr %authors.addr, align 8
  %arrayidx60 = getelementptr inbounds ptr, ptr %81, i64 2
  %82 = load ptr, ptr %arrayidx60, align 8
  %83 = load ptr, ptr %authors.addr, align 8
  %arrayidx61 = getelementptr inbounds ptr, ptr %83, i64 3
  %84 = load ptr, ptr %arrayidx61, align 8
  %85 = load ptr, ptr %authors.addr, align 8
  %arrayidx62 = getelementptr inbounds ptr, ptr %85, i64 4
  %86 = load ptr, ptr %arrayidx62, align 8
  %87 = load ptr, ptr %authors.addr, align 8
  %arrayidx63 = getelementptr inbounds ptr, ptr %87, i64 5
  %88 = load ptr, ptr %arrayidx63, align 8
  %89 = load ptr, ptr %authors.addr, align 8
  %arrayidx64 = getelementptr inbounds ptr, ptr %89, i64 6
  %90 = load ptr, ptr %arrayidx64, align 8
  %91 = load ptr, ptr %authors.addr, align 8
  %arrayidx65 = getelementptr inbounds ptr, ptr %91, i64 7
  %92 = load ptr, ptr %arrayidx65, align 8
  %call66 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %76, ptr noundef %call57, ptr noundef %78, ptr noundef %80, ptr noundef %82, ptr noundef %84, ptr noundef %86, ptr noundef %88, ptr noundef %90, ptr noundef %92)
  br label %sw.epilog

sw.bb67:                                          ; preds = %if.end
  %93 = load ptr, ptr %stream.addr, align 8
  %call68 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.15.116) #21
  %94 = load ptr, ptr %authors.addr, align 8
  %arrayidx69 = getelementptr inbounds ptr, ptr %94, i64 0
  %95 = load ptr, ptr %arrayidx69, align 8
  %96 = load ptr, ptr %authors.addr, align 8
  %arrayidx70 = getelementptr inbounds ptr, ptr %96, i64 1
  %97 = load ptr, ptr %arrayidx70, align 8
  %98 = load ptr, ptr %authors.addr, align 8
  %arrayidx71 = getelementptr inbounds ptr, ptr %98, i64 2
  %99 = load ptr, ptr %arrayidx71, align 8
  %100 = load ptr, ptr %authors.addr, align 8
  %arrayidx72 = getelementptr inbounds ptr, ptr %100, i64 3
  %101 = load ptr, ptr %arrayidx72, align 8
  %102 = load ptr, ptr %authors.addr, align 8
  %arrayidx73 = getelementptr inbounds ptr, ptr %102, i64 4
  %103 = load ptr, ptr %arrayidx73, align 8
  %104 = load ptr, ptr %authors.addr, align 8
  %arrayidx74 = getelementptr inbounds ptr, ptr %104, i64 5
  %105 = load ptr, ptr %arrayidx74, align 8
  %106 = load ptr, ptr %authors.addr, align 8
  %arrayidx75 = getelementptr inbounds ptr, ptr %106, i64 6
  %107 = load ptr, ptr %arrayidx75, align 8
  %108 = load ptr, ptr %authors.addr, align 8
  %arrayidx76 = getelementptr inbounds ptr, ptr %108, i64 7
  %109 = load ptr, ptr %arrayidx76, align 8
  %110 = load ptr, ptr %authors.addr, align 8
  %arrayidx77 = getelementptr inbounds ptr, ptr %110, i64 8
  %111 = load ptr, ptr %arrayidx77, align 8
  %call78 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %93, ptr noundef %call68, ptr noundef %95, ptr noundef %97, ptr noundef %99, ptr noundef %101, ptr noundef %103, ptr noundef %105, ptr noundef %107, ptr noundef %109, ptr noundef %111)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %112 = load ptr, ptr %stream.addr, align 8
  %call79 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.16.117) #21
  %113 = load ptr, ptr %authors.addr, align 8
  %arrayidx80 = getelementptr inbounds ptr, ptr %113, i64 0
  %114 = load ptr, ptr %arrayidx80, align 8
  %115 = load ptr, ptr %authors.addr, align 8
  %arrayidx81 = getelementptr inbounds ptr, ptr %115, i64 1
  %116 = load ptr, ptr %arrayidx81, align 8
  %117 = load ptr, ptr %authors.addr, align 8
  %arrayidx82 = getelementptr inbounds ptr, ptr %117, i64 2
  %118 = load ptr, ptr %arrayidx82, align 8
  %119 = load ptr, ptr %authors.addr, align 8
  %arrayidx83 = getelementptr inbounds ptr, ptr %119, i64 3
  %120 = load ptr, ptr %arrayidx83, align 8
  %121 = load ptr, ptr %authors.addr, align 8
  %arrayidx84 = getelementptr inbounds ptr, ptr %121, i64 4
  %122 = load ptr, ptr %arrayidx84, align 8
  %123 = load ptr, ptr %authors.addr, align 8
  %arrayidx85 = getelementptr inbounds ptr, ptr %123, i64 5
  %124 = load ptr, ptr %arrayidx85, align 8
  %125 = load ptr, ptr %authors.addr, align 8
  %arrayidx86 = getelementptr inbounds ptr, ptr %125, i64 6
  %126 = load ptr, ptr %arrayidx86, align 8
  %127 = load ptr, ptr %authors.addr, align 8
  %arrayidx87 = getelementptr inbounds ptr, ptr %127, i64 7
  %128 = load ptr, ptr %arrayidx87, align 8
  %129 = load ptr, ptr %authors.addr, align 8
  %arrayidx88 = getelementptr inbounds ptr, ptr %129, i64 8
  %130 = load ptr, ptr %arrayidx88, align 8
  %call89 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %112, ptr noundef %call79, ptr noundef %114, ptr noundef %116, ptr noundef %118, ptr noundef %120, ptr noundef %122, ptr noundef %124, ptr noundef %126, ptr noundef %128, ptr noundef %130)
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb67, %sw.bb56, %sw.bb46, %sw.bb37, %sw.bb29, %sw.bb22, %sw.bb16, %sw.bb11, %sw.bb8, %sw.bb
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_ar(ptr noundef %stream, ptr noundef %command_name, ptr noundef %package, ptr noundef %version, ptr noundef %authors) #3 {
entry:
  %stream.addr = alloca ptr, align 8
  %command_name.addr = alloca ptr, align 8
  %package.addr = alloca ptr, align 8
  %version.addr = alloca ptr, align 8
  %authors.addr = alloca ptr, align 8
  %n_authors = alloca i64, align 8
  store ptr %stream, ptr %stream.addr, align 8
  store ptr %command_name, ptr %command_name.addr, align 8
  store ptr %package, ptr %package.addr, align 8
  store ptr %version, ptr %version.addr, align 8
  store ptr %authors, ptr %authors.addr, align 8
  store i64 0, ptr %n_authors, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load ptr, ptr %authors.addr, align 8
  %1 = load i64, ptr %n_authors, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %0, i64 %1
  %2 = load ptr, ptr %arrayidx, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i64, ptr %n_authors, align 8
  %inc = add i64 %3, 1
  store i64 %inc, ptr %n_authors, align 8
  br label %for.cond, !llvm.loop !33

for.end:                                          ; preds = %for.cond
  %4 = load ptr, ptr %stream.addr, align 8
  %5 = load ptr, ptr %command_name.addr, align 8
  %6 = load ptr, ptr %package.addr, align 8
  %7 = load ptr, ptr %version.addr, align 8
  %8 = load ptr, ptr %authors.addr, align 8
  %9 = load i64, ptr %n_authors, align 8
  call void @version_etc_arn(ptr noundef %4, ptr noundef %5, ptr noundef %6, ptr noundef %7, ptr noundef %8, i64 noundef %9)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc_va(ptr noundef %stream, ptr noundef %command_name, ptr noundef %package, ptr noundef %version, ptr noundef %authors) #3 {
entry:
  %stream.addr = alloca ptr, align 8
  %command_name.addr = alloca ptr, align 8
  %package.addr = alloca ptr, align 8
  %version.addr = alloca ptr, align 8
  %authors.addr = alloca ptr, align 8
  %n_authors = alloca i64, align 8
  %authtab = alloca [10 x ptr], align 16
  store ptr %stream, ptr %stream.addr, align 8
  store ptr %command_name, ptr %command_name.addr, align 8
  store ptr %package, ptr %package.addr, align 8
  store ptr %version, ptr %version.addr, align 8
  store ptr %authors, ptr %authors.addr, align 8
  store i64 0, ptr %n_authors, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, ptr %n_authors, align 8
  %cmp = icmp ult i64 %0, 10
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %1 = load ptr, ptr %authors.addr, align 8
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, ptr %1, i32 0, i32 0
  %gp_offset = load i32, ptr %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %land.rhs
  %2 = getelementptr inbounds %struct.__va_list_tag, ptr %1, i32 0, i32 3
  %reg_save_area = load ptr, ptr %2, align 8
  %3 = getelementptr i8, ptr %reg_save_area, i32 %gp_offset
  %4 = add i32 %gp_offset, 8
  store i32 %4, ptr %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %land.rhs
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, ptr %1, i32 0, i32 2
  %overflow_arg_area = load ptr, ptr %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8, ptr %overflow_arg_area, i32 8
  store ptr %overflow_arg_area.next, ptr %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi ptr [ %3, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %5 = load ptr, ptr %vaarg.addr, align 8
  %6 = load i64, ptr %n_authors, align 8
  %arrayidx = getelementptr inbounds [10 x ptr], ptr %authtab, i64 0, i64 %6
  store ptr %5, ptr %arrayidx, align 8
  %cmp1 = icmp ne ptr %5, null
  br label %land.end

land.end:                                         ; preds = %vaarg.end, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %cmp1, %vaarg.end ]
  br i1 %7, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i64, ptr %n_authors, align 8
  %inc = add i64 %8, 1
  store i64 %inc, ptr %n_authors, align 8
  br label %for.cond, !llvm.loop !34

for.end:                                          ; preds = %land.end
  %9 = load ptr, ptr %stream.addr, align 8
  %10 = load ptr, ptr %command_name.addr, align 8
  %11 = load ptr, ptr %package.addr, align 8
  %12 = load ptr, ptr %version.addr, align 8
  %arraydecay = getelementptr inbounds [10 x ptr], ptr %authtab, i64 0, i64 0
  %13 = load i64, ptr %n_authors, align 8
  call void @version_etc_arn(ptr noundef %9, ptr noundef %10, ptr noundef %11, ptr noundef %12, ptr noundef %arraydecay, i64 noundef %13)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @version_etc(ptr noundef %stream, ptr noundef %command_name, ptr noundef %package, ptr noundef %version, ...) #3 {
entry:
  %stream.addr = alloca ptr, align 8
  %command_name.addr = alloca ptr, align 8
  %package.addr = alloca ptr, align 8
  %version.addr = alloca ptr, align 8
  %authors = alloca [1 x %struct.__va_list_tag], align 16
  store ptr %stream, ptr %stream.addr, align 8
  store ptr %command_name, ptr %command_name.addr, align 8
  store ptr %package, ptr %package.addr, align 8
  store ptr %version, ptr %version.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %authors, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load ptr, ptr %stream.addr, align 8
  %1 = load ptr, ptr %command_name.addr, align 8
  %2 = load ptr, ptr %package.addr, align 8
  %3 = load ptr, ptr %version.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %authors, i64 0, i64 0
  call void @version_etc_va(ptr noundef %0, ptr noundef %1, ptr noundef %2, ptr noundef %3, ptr noundef %arraydecay1)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %authors, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay2)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr) #12

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr) #12

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @emit_bug_reporting_address() #3 {
entry:
  %0 = load ptr, ptr @stdout, align 8
  %call = call i32 @fputs_unlocked(ptr noundef @.str.4.105, ptr noundef %0)
  %call1 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.17.120) #21
  %call2 = call i32 (ptr, ...) @printf(ptr noundef %call1, ptr noundef @.str.18.121)
  %call3 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.19.122) #21
  %call4 = call i32 (ptr, ...) @printf(ptr noundef %call3, ptr noundef @.str.20.123, ptr noundef @.str.21.124)
  %call5 = call ptr @dgettext(ptr noundef @.str.2.103, ptr noundef @.str.22.125) #21
  %call6 = call i32 (ptr, ...) @printf(ptr noundef %call5, ptr noundef @.str.23.126)
  ret void
}

; Function Attrs: cold noinline nounwind optnone uwtable
define dso_local void @verror(i32 noundef %status, i32 noundef %errnum, ptr noundef %message, ptr noundef %args) #13 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  call void @flush_stdout()
  %0 = load ptr, ptr @error_print_progname, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @error_print_progname, align 8
  call void %1()
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load ptr, ptr @stderr, align 8
  %call = call ptr @getprogname() #23
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef @.str.127, ptr noundef %call)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i32, ptr %status.addr, align 4
  %4 = load i32, ptr %errnum.addr, align 4
  %5 = load ptr, ptr %message.addr, align 8
  %6 = load ptr, ptr %args.addr, align 8
  call void @error_tail(i32 noundef %3, i32 noundef %4, ptr noundef %5, ptr noundef %6)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @flush_stdout() #3 {
entry:
  %stdout_fd = alloca i32, align 4
  store i32 1, ptr %stdout_fd, align 4
  %0 = load i32, ptr %stdout_fd, align 4
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr %stdout_fd, align 4
  %call = call i32 @is_open(i32 noundef %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load ptr, ptr @stdout, align 8
  %call1 = call i32 @fflush_unlocked(ptr noundef %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @error_tail(i32 noundef %status, i32 noundef %errnum, ptr noundef nonnull %message, ptr noundef %args) #3 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  %0 = load ptr, ptr @stderr, align 8
  %1 = load ptr, ptr %message.addr, align 8
  %2 = load ptr, ptr %args.addr, align 8
  %call = call i32 @vfprintf(ptr noundef %0, ptr noundef %1, ptr noundef %2)
  %3 = load i32, ptr @error_message_count, align 4
  %inc = add i32 %3, 1
  store i32 %inc, ptr @error_message_count, align 4
  %4 = load i32, ptr %errnum.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, ptr %errnum.addr, align 4
  call void @print_errno_message(i32 noundef %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load ptr, ptr @stderr, align 8
  %call1 = call i32 @putc_unlocked(i32 noundef 10, ptr noundef %6)
  %7 = load ptr, ptr @stderr, align 8
  %call2 = call i32 @fflush_unlocked(ptr noundef %7)
  %8 = load i32, ptr %status.addr, align 4
  %tobool3 = icmp ne i32 %8, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %9 = load i32, ptr %status.addr, align 4
  call void @exit(i32 noundef %9) #22
  unreachable

if.end5:                                          ; preds = %if.end
  ret void
}

declare i32 @vfprintf(ptr noundef, ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_errno_message(i32 noundef %errnum) #3 {
entry:
  %errnum.addr = alloca i32, align 4
  %s = alloca ptr, align 8
  %errbuf = alloca [1024 x i8], align 16
  store i32 %errnum, ptr %errnum.addr, align 4
  %0 = load i32, ptr %errnum.addr, align 4
  %arraydecay = getelementptr inbounds [1024 x i8], ptr %errbuf, i64 0, i64 0
  %call = call ptr @strerror_r(i32 noundef %0, ptr noundef %arraydecay, i64 noundef 1024) #21
  store ptr %call, ptr %s, align 8
  %1 = load ptr, ptr %s, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call ptr @dgettext(ptr noundef @.str.4.128, ptr noundef @.str.5.129) #21
  store ptr %call1, ptr %s, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load ptr, ptr @stderr, align 8
  %3 = load ptr, ptr %s, align 8
  %call2 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef @.str.6.130, ptr noundef %3)
  ret void
}

declare i32 @putc_unlocked(i32 noundef, ptr noundef) #2

; Function Attrs: nounwind
declare ptr @strerror_r(i32 noundef, ptr noundef, i64 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @is_open(i32 noundef %fd) #3 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  %0 = load i32, ptr %fd.addr, align 4
  %call = call i32 (i32, i32, ...) @fcntl(i32 noundef %0, i32 noundef 3)
  %cmp = icmp sle i32 0, %call
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i32 @fcntl(i32 noundef, i32 noundef, ...) #2

; Function Attrs: cold noinline nounwind optnone uwtable
define dso_local void @error(i32 noundef %status, i32 noundef %errnum, ptr noundef %message, ...) #13 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load i32, ptr %status.addr, align 4
  %1 = load i32, ptr %errnum.addr, align 4
  %2 = load ptr, ptr %message.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @verror(i32 noundef %0, i32 noundef %1, ptr noundef %2, ptr noundef %arraydecay1) #24
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay2)
  ret void
}

; Function Attrs: cold noinline nounwind optnone uwtable
define dso_local void @verror_at_line(i32 noundef %status, i32 noundef %errnum, ptr noundef %file_name, i32 noundef %line_number, ptr noundef %message, ptr noundef %args) #13 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %file_name.addr = alloca ptr, align 8
  %line_number.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %file_name, ptr %file_name.addr, align 8
  store i32 %line_number, ptr %line_number.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  %0 = load i32, ptr @error_one_per_line, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %1 = load i32, ptr @verror_at_line.old_line_number, align 4
  %2 = load i32, ptr %line_number.addr, align 4
  %cmp = icmp eq i32 %1, %2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %3 = load ptr, ptr %file_name.addr, align 8
  %4 = load ptr, ptr @verror_at_line.old_file_name, align 8
  %cmp1 = icmp eq ptr %3, %4
  br i1 %cmp1, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load ptr, ptr @verror_at_line.old_file_name, align 8
  %cmp2 = icmp ne ptr %5, null
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %6 = load ptr, ptr %file_name.addr, align 8
  %cmp4 = icmp ne ptr %6, null
  br i1 %cmp4, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true3
  %7 = load ptr, ptr @verror_at_line.old_file_name, align 8
  %8 = load ptr, ptr %file_name.addr, align 8
  %call = call i32 @strcmp(ptr noundef %7, ptr noundef %8) #23
  %cmp6 = icmp eq i32 %call, 0
  br i1 %cmp6, label %if.then7, label %if.end

if.then7:                                         ; preds = %land.lhs.true5, %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true5, %land.lhs.true3, %lor.lhs.false, %if.then
  %9 = load ptr, ptr %file_name.addr, align 8
  store ptr %9, ptr @verror_at_line.old_file_name, align 8
  %10 = load i32, ptr %line_number.addr, align 4
  store i32 %10, ptr @verror_at_line.old_line_number, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.end, %entry
  call void @flush_stdout()
  %11 = load ptr, ptr @error_print_progname, align 8
  %tobool9 = icmp ne ptr %11, null
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end8
  %12 = load ptr, ptr @error_print_progname, align 8
  call void %12()
  br label %if.end13

if.else:                                          ; preds = %if.end8
  %13 = load ptr, ptr @stderr, align 8
  %call11 = call ptr @getprogname() #23
  %call12 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %13, ptr noundef @.str.1.133, ptr noundef %call11)
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then10
  %14 = load ptr, ptr @stderr, align 8
  %15 = load ptr, ptr %file_name.addr, align 8
  %cmp14 = icmp ne ptr %15, null
  %16 = zext i1 %cmp14 to i64
  %cond = select i1 %cmp14, ptr @.str.2.134, ptr @.str.3.135
  %17 = load ptr, ptr %file_name.addr, align 8
  %18 = load i32, ptr %line_number.addr, align 4
  %call15 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %14, ptr noundef %cond, ptr noundef %17, i32 noundef %18)
  %19 = load i32, ptr %status.addr, align 4
  %20 = load i32, ptr %errnum.addr, align 4
  %21 = load ptr, ptr %message.addr, align 8
  %22 = load ptr, ptr %args.addr, align 8
  call void @error_tail(i32 noundef %19, i32 noundef %20, ptr noundef %21, ptr noundef %22)
  br label %return

return:                                           ; preds = %if.end13, %if.then7
  ret void
}

; Function Attrs: cold noinline nounwind optnone uwtable
define dso_local void @error_at_line(i32 noundef %status, i32 noundef %errnum, ptr noundef %file_name, i32 noundef %line_number, ptr noundef %message, ...) #13 {
entry:
  %status.addr = alloca i32, align 4
  %errnum.addr = alloca i32, align 4
  %file_name.addr = alloca ptr, align 8
  %line_number.addr = alloca i32, align 4
  %message.addr = alloca ptr, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %status, ptr %status.addr, align 4
  store i32 %errnum, ptr %errnum.addr, align 4
  store ptr %file_name, ptr %file_name.addr, align 8
  store i32 %line_number, ptr %line_number.addr, align 4
  store ptr %message, ptr %message.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load i32, ptr %status.addr, align 4
  %1 = load i32, ptr %errnum.addr, align 4
  %2 = load ptr, ptr %file_name.addr, align 8
  %3 = load i32, ptr %line_number.addr, align 4
  %4 = load ptr, ptr %message.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @verror_at_line(i32 noundef %0, i32 noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %arraydecay1) #24
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %ap, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fdadvise(i32 noundef %fd, i64 noundef %offset, i64 noundef %len, i32 noundef %advice) #3 {
entry:
  %fd.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %advice.addr = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  store i64 %offset, ptr %offset.addr, align 8
  store i64 %len, ptr %len.addr, align 8
  store i32 %advice, ptr %advice.addr, align 4
  %0 = load i32, ptr %fd.addr, align 4
  %1 = load i64, ptr %offset.addr, align 8
  %2 = load i64, ptr %len.addr, align 8
  %3 = load i32, ptr %advice.addr, align 4
  %call = call i32 @posix_fadvise(i32 noundef %0, i64 noundef %1, i64 noundef %2, i32 noundef %3) #21
  ret void
}

; Function Attrs: nounwind
declare i32 @posix_fadvise(i32 noundef, i64 noundef, i64 noundef, i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fadvise(ptr noundef %fp, i32 noundef %advice) #3 {
entry:
  %fp.addr = alloca ptr, align 8
  %advice.addr = alloca i32, align 4
  store ptr %fp, ptr %fp.addr, align 8
  store i32 %advice, ptr %advice.addr, align 4
  %0 = load ptr, ptr %fp.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %fp.addr, align 8
  %call = call i32 @fileno(ptr noundef %1) #21
  %2 = load i32, ptr %advice.addr, align 4
  call void @fdadvise(i32 noundef %call, i64 noundef 0, i64 noundef 0, i32 noundef %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare i32 @fileno(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @fopen_safer(ptr noundef nonnull %file, ptr noundef nonnull %mode) #3 {
entry:
  %retval = alloca ptr, align 8
  %file.addr = alloca ptr, align 8
  %mode.addr = alloca ptr, align 8
  %fp = alloca ptr, align 8
  %fd = alloca i32, align 4
  %f = alloca i32, align 4
  %e = alloca i32, align 4
  %e15 = alloca i32, align 4
  store ptr %file, ptr %file.addr, align 8
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load ptr, ptr %file.addr, align 8
  %1 = load ptr, ptr %mode.addr, align 8
  %call = call noalias ptr @rpl_fopen(ptr noundef %0, ptr noundef %1)
  store ptr %call, ptr %fp, align 8
  %2 = load ptr, ptr %fp, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.then, label %if.end21

if.then:                                          ; preds = %entry
  %3 = load ptr, ptr %fp, align 8
  %call1 = call i32 @fileno(ptr noundef %3) #21
  store i32 %call1, ptr %fd, align 4
  %4 = load i32, ptr %fd, align 4
  %cmp = icmp sle i32 0, %4
  br i1 %cmp, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.then
  %5 = load i32, ptr %fd, align 4
  %cmp2 = icmp sle i32 %5, 2
  br i1 %cmp2, label %if.then3, label %if.end20

if.then3:                                         ; preds = %land.lhs.true
  %6 = load i32, ptr %fd, align 4
  %call4 = call i32 @dup_safer(i32 noundef %6)
  store i32 %call4, ptr %f, align 4
  %7 = load i32, ptr %f, align 4
  %cmp5 = icmp slt i32 %7, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then3
  %call7 = call ptr @__errno_location() #26
  %8 = load i32, ptr %call7, align 4
  store i32 %8, ptr %e, align 4
  %9 = load ptr, ptr %fp, align 8
  %call8 = call i32 @rpl_fclose(ptr noundef %9)
  %10 = load i32, ptr %e, align 4
  %call9 = call ptr @__errno_location() #26
  store i32 %10, ptr %call9, align 4
  store ptr null, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then3
  %11 = load ptr, ptr %fp, align 8
  %call10 = call i32 @rpl_fclose(ptr noundef %11)
  %cmp11 = icmp ne i32 %call10, 0
  br i1 %cmp11, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %12 = load i32, ptr %f, align 4
  %13 = load ptr, ptr %mode.addr, align 8
  %call12 = call noalias ptr @fdopen(i32 noundef %12, ptr noundef %13) #21
  store ptr %call12, ptr %fp, align 8
  %tobool13 = icmp ne ptr %call12, null
  br i1 %tobool13, label %if.end19, label %if.then14

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  %call16 = call ptr @__errno_location() #26
  %14 = load i32, ptr %call16, align 4
  store i32 %14, ptr %e15, align 4
  %15 = load i32, ptr %f, align 4
  %call17 = call i32 @close(i32 noundef %15)
  %16 = load i32, ptr %e15, align 4
  %call18 = call ptr @__errno_location() #26
  store i32 %16, ptr %call18, align 4
  store ptr null, ptr %retval, align 8
  br label %return

if.end19:                                         ; preds = %lor.lhs.false
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %land.lhs.true, %if.then
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %entry
  %17 = load ptr, ptr %fp, align 8
  store ptr %17, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end21, %if.then14, %if.then6
  %18 = load ptr, ptr %retval, align 8
  ret ptr %18
}

; Function Attrs: nounwind
declare noalias ptr @fdopen(i32 noundef, ptr noundef) #1

declare i32 @close(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fpurge(ptr noundef nonnull %fp) #3 {
entry:
  %fp.addr = alloca ptr, align 8
  store ptr %fp, ptr %fp.addr, align 8
  %0 = load ptr, ptr %fp.addr, align 8
  call void @__fpurge(ptr noundef %0) #21
  ret i32 0
}

; Function Attrs: nounwind
declare void @__fpurge(ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @initbuffer(ptr noundef %linebuffer) #3 {
entry:
  %linebuffer.addr = alloca ptr, align 8
  store ptr %linebuffer, ptr %linebuffer.addr, align 8
  %0 = load ptr, ptr %linebuffer.addr, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %0, i8 0, i64 24, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @readlinebuffer(ptr noundef %linebuffer, ptr noundef %stream) #3 {
entry:
  %linebuffer.addr = alloca ptr, align 8
  %stream.addr = alloca ptr, align 8
  store ptr %linebuffer, ptr %linebuffer.addr, align 8
  store ptr %stream, ptr %stream.addr, align 8
  %0 = load ptr, ptr %linebuffer.addr, align 8
  %1 = load ptr, ptr %stream.addr, align 8
  %call = call ptr @readlinebuffer_delim(ptr noundef %0, ptr noundef %1, i8 noundef signext 10)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @readlinebuffer_delim(ptr noundef %linebuffer, ptr noundef %stream, i8 noundef signext %delimiter) #3 {
entry:
  %retval = alloca ptr, align 8
  %linebuffer.addr = alloca ptr, align 8
  %stream.addr = alloca ptr, align 8
  %delimiter.addr = alloca i8, align 1
  %c = alloca i32, align 4
  %buffer = alloca ptr, align 8
  %p = alloca ptr, align 8
  %end = alloca ptr, align 8
  %oldsize = alloca i64, align 8
  store ptr %linebuffer, ptr %linebuffer.addr, align 8
  store ptr %stream, ptr %stream.addr, align 8
  store i8 %delimiter, ptr %delimiter.addr, align 1
  %0 = load ptr, ptr %linebuffer.addr, align 8
  %buffer1 = getelementptr inbounds %struct.seq, ptr %0, i32 0, i32 2
  %1 = load ptr, ptr %buffer1, align 8
  store ptr %1, ptr %buffer, align 8
  %2 = load ptr, ptr %linebuffer.addr, align 8
  %buffer2 = getelementptr inbounds %struct.seq, ptr %2, i32 0, i32 2
  %3 = load ptr, ptr %buffer2, align 8
  store ptr %3, ptr %p, align 8
  %4 = load ptr, ptr %buffer, align 8
  %5 = load ptr, ptr %linebuffer.addr, align 8
  %size = getelementptr inbounds %struct.seq, ptr %5, i32 0, i32 0
  %6 = load i64, ptr %size, align 8
  %add.ptr = getelementptr inbounds i8, ptr %4, i64 %6
  store ptr %add.ptr, ptr %end, align 8
  %7 = load ptr, ptr %stream.addr, align 8
  %call = call i32 @feof_unlocked(ptr noundef %7) #21
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %8 = load ptr, ptr %stream.addr, align 8
  %call3 = call i32 @getc_unlocked(ptr noundef %8)
  store i32 %call3, ptr %c, align 4
  %9 = load i32, ptr %c, align 4
  %cmp = icmp eq i32 %9, -1
  br i1 %cmp, label %if.then4, label %if.end16

if.then4:                                         ; preds = %do.body
  %10 = load ptr, ptr %p, align 8
  %11 = load ptr, ptr %buffer, align 8
  %cmp5 = icmp eq ptr %10, %11
  br i1 %cmp5, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then4
  %12 = load ptr, ptr %stream.addr, align 8
  %call6 = call i32 @ferror_unlocked(ptr noundef %12) #21
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %lor.lhs.false, %if.then4
  store ptr null, ptr %retval, align 8
  br label %return

if.end9:                                          ; preds = %lor.lhs.false
  %13 = load ptr, ptr %p, align 8
  %arrayidx = getelementptr inbounds i8, ptr %13, i64 -1
  %14 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %14 to i32
  %15 = load i8, ptr %delimiter.addr, align 1
  %conv10 = sext i8 %15 to i32
  %cmp11 = icmp eq i32 %conv, %conv10
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end9
  br label %do.end

if.end14:                                         ; preds = %if.end9
  %16 = load i8, ptr %delimiter.addr, align 1
  %conv15 = sext i8 %16 to i32
  store i32 %conv15, ptr %c, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.end14, %do.body
  %17 = load ptr, ptr %p, align 8
  %18 = load ptr, ptr %end, align 8
  %cmp17 = icmp eq ptr %17, %18
  br i1 %cmp17, label %if.then19, label %if.end27

if.then19:                                        ; preds = %if.end16
  %19 = load ptr, ptr %linebuffer.addr, align 8
  %size20 = getelementptr inbounds %struct.seq, ptr %19, i32 0, i32 0
  %20 = load i64, ptr %size20, align 8
  store i64 %20, ptr %oldsize, align 8
  %21 = load ptr, ptr %buffer, align 8
  %22 = load ptr, ptr %linebuffer.addr, align 8
  %size21 = getelementptr inbounds %struct.seq, ptr %22, i32 0, i32 0
  %call22 = call nonnull ptr @xpalloc(ptr noundef %21, ptr noundef %size21, i64 noundef 1, i64 noundef -1, i64 noundef 1)
  store ptr %call22, ptr %buffer, align 8
  %23 = load ptr, ptr %buffer, align 8
  %24 = load i64, ptr %oldsize, align 8
  %add.ptr23 = getelementptr inbounds i8, ptr %23, i64 %24
  store ptr %add.ptr23, ptr %p, align 8
  %25 = load ptr, ptr %buffer, align 8
  %26 = load ptr, ptr %linebuffer.addr, align 8
  %buffer24 = getelementptr inbounds %struct.seq, ptr %26, i32 0, i32 2
  store ptr %25, ptr %buffer24, align 8
  %27 = load ptr, ptr %buffer, align 8
  %28 = load ptr, ptr %linebuffer.addr, align 8
  %size25 = getelementptr inbounds %struct.seq, ptr %28, i32 0, i32 0
  %29 = load i64, ptr %size25, align 8
  %add.ptr26 = getelementptr inbounds i8, ptr %27, i64 %29
  store ptr %add.ptr26, ptr %end, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.then19, %if.end16
  %30 = load i32, ptr %c, align 4
  %conv28 = trunc i32 %30 to i8
  %31 = load ptr, ptr %p, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %31, i32 1
  store ptr %incdec.ptr, ptr %p, align 8
  store i8 %conv28, ptr %31, align 1
  br label %do.cond

do.cond:                                          ; preds = %if.end27
  %32 = load i32, ptr %c, align 4
  %33 = load i8, ptr %delimiter.addr, align 1
  %conv29 = sext i8 %33 to i32
  %cmp30 = icmp ne i32 %32, %conv29
  br i1 %cmp30, label %do.body, label %do.end, !llvm.loop !35

do.end:                                           ; preds = %do.cond, %if.then13
  %34 = load ptr, ptr %p, align 8
  %35 = load ptr, ptr %buffer, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %34 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %35 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %36 = load ptr, ptr %linebuffer.addr, align 8
  %length = getelementptr inbounds %struct.seq, ptr %36, i32 0, i32 1
  store i64 %sub.ptr.sub, ptr %length, align 8
  %37 = load ptr, ptr %linebuffer.addr, align 8
  store ptr %37, ptr %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then8, %if.then
  %38 = load ptr, ptr %retval, align 8
  ret ptr %38
}

; Function Attrs: nounwind
declare i32 @feof_unlocked(ptr noundef) #1

declare i32 @getc_unlocked(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @freebuffer(ptr noundef %linebuffer) #3 {
entry:
  %linebuffer.addr = alloca ptr, align 8
  store ptr %linebuffer, ptr %linebuffer.addr, align 8
  %0 = load ptr, ptr %linebuffer.addr, align 8
  %buffer = getelementptr inbounds %struct.seq, ptr %0, i32 0, i32 2
  %1 = load ptr, ptr %buffer, align 8
  call void @free(ptr noundef %1) #21
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fseterr(ptr noundef %fp) #3 {
entry:
  %fp.addr = alloca ptr, align 8
  store ptr %fp, ptr %fp.addr, align 8
  %0 = load ptr, ptr %fp.addr, align 8
  %_flags = getelementptr inbounds %struct._IO_FILE, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %_flags, align 8
  %or = or i32 %1, 32
  store i32 %or, ptr %_flags, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local ptr @getprogname() #10 {
entry:
  %0 = load ptr, ptr @program_invocation_short_name, align 8
  ret ptr %0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @hard_locale(i32 noundef %category) #3 {
entry:
  %retval = alloca i1, align 1
  %category.addr = alloca i32, align 4
  %locale = alloca [257 x i8], align 16
  store i32 %category, ptr %category.addr, align 4
  %0 = load i32, ptr %category.addr, align 4
  %arraydecay = getelementptr inbounds [257 x i8], ptr %locale, i64 0, i64 0
  %call = call i32 @setlocale_null_r(i32 noundef %0, ptr noundef %arraydecay, i64 noundef 257)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %arraydecay1 = getelementptr inbounds [257 x i8], ptr %locale, i64 0, i64 0
  %call2 = call i32 @strcmp(ptr noundef %arraydecay1, ptr noundef @.str.148) #23
  %cmp = icmp eq i32 %call2, 0
  br i1 %cmp, label %if.end7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %arraydecay3 = getelementptr inbounds [257 x i8], ptr %locale, i64 0, i64 0
  %call4 = call i32 @strcmp(ptr noundef %arraydecay3, ptr noundef @.str.1.149) #23
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %lor.lhs.false
  store i1 true, ptr %retval, align 1
  br label %return

if.end7:                                          ; preds = %lor.lhs.false, %if.end
  store i1 false, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end7, %if.then6, %if.then
  %1 = load i1, ptr %retval, align 1
  ret i1 %1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @locale_charset() #3 {
entry:
  %codeset = alloca ptr, align 8
  %call = call ptr @rpl_nl_langinfo(i32 noundef 14)
  store ptr %call, ptr %codeset, align 8
  %0 = load ptr, ptr %codeset, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr @.str.152, ptr %codeset, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %codeset, align 8
  %arrayidx = getelementptr inbounds i8, ptr %1, i64 0
  %2 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store ptr @.str.1.153, ptr %codeset, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %3 = load ptr, ptr %codeset, align 8
  ret ptr %3
}

declare ptr @rpl_nl_langinfo(i32 noundef) #2

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local i32 @memcasecmp(ptr noundef %vs1, ptr noundef %vs2, i64 noundef %n) #10 {
entry:
  %retval = alloca i32, align 4
  %vs1.addr = alloca ptr, align 8
  %vs2.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %s1 = alloca ptr, align 8
  %s2 = alloca ptr, align 8
  %u1 = alloca i8, align 1
  %u2 = alloca i8, align 1
  %U1 = alloca i32, align 4
  %U2 = alloca i32, align 4
  %diff = alloca i32, align 4
  store ptr %vs1, ptr %vs1.addr, align 8
  store ptr %vs2, ptr %vs2.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  %0 = load ptr, ptr %vs1.addr, align 8
  store ptr %0, ptr %s1, align 8
  %1 = load ptr, ptr %vs2.addr, align 8
  store ptr %1, ptr %s2, align 8
  store i64 0, ptr %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, ptr %i, align 8
  %3 = load i64, ptr %n.addr, align 8
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load ptr, ptr %s1, align 8
  %5 = load i64, ptr %i, align 8
  %arrayidx = getelementptr inbounds i8, ptr %4, i64 %5
  %6 = load i8, ptr %arrayidx, align 1
  store i8 %6, ptr %u1, align 1
  %7 = load ptr, ptr %s2, align 8
  %8 = load i64, ptr %i, align 8
  %arrayidx1 = getelementptr inbounds i8, ptr %7, i64 %8
  %9 = load i8, ptr %arrayidx1, align 1
  store i8 %9, ptr %u2, align 1
  %10 = load i8, ptr %u1, align 1
  %conv = zext i8 %10 to i32
  %call = call i32 @toupper(i32 noundef %conv) #23
  store i32 %call, ptr %U1, align 4
  %11 = load i8, ptr %u2, align 1
  %conv2 = zext i8 %11 to i32
  %call3 = call i32 @toupper(i32 noundef %conv2) #23
  store i32 %call3, ptr %U2, align 4
  %12 = load i32, ptr %U1, align 4
  %13 = load i32, ptr %U2, align 4
  %sub = sub nsw i32 %12, %13
  store i32 %sub, ptr %diff, align 4
  %14 = load i32, ptr %diff, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %15 = load i32, ptr %diff, align 4
  store i32 %15, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i64, ptr %i, align 8
  %inc = add i64 %16, 1
  store i64 %inc, ptr %i, align 8
  br label %for.cond, !llvm.loop !36

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, ptr %retval, align 4
  ret i32 %17
}

; Function Attrs: nounwind willreturn memory(read)
declare i32 @toupper(i32 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @memcoll(ptr noundef %s1, i64 noundef %s1len, ptr noundef %s2, i64 noundef %s2len) #3 {
entry:
  %s1.addr = alloca ptr, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca ptr, align 8
  %s2len.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  %n1 = alloca i8, align 1
  %n2 = alloca i8, align 1
  store ptr %s1, ptr %s1.addr, align 8
  store i64 %s1len, ptr %s1len.addr, align 8
  store ptr %s2, ptr %s2.addr, align 8
  store i64 %s2len, ptr %s2len.addr, align 8
  %0 = load i64, ptr %s1len.addr, align 8
  %1 = load i64, ptr %s2len.addr, align 8
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load ptr, ptr %s1.addr, align 8
  %3 = load ptr, ptr %s2.addr, align 8
  %4 = load i64, ptr %s1len.addr, align 8
  %call = call i32 @memcmp(ptr noundef %2, ptr noundef %3, i64 noundef %4) #23
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %call2 = call ptr @__errno_location() #26
  store i32 0, ptr %call2, align 4
  store i32 0, ptr %diff, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load ptr, ptr %s1.addr, align 8
  %6 = load i64, ptr %s1len.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %5, i64 %6
  %7 = load i8, ptr %arrayidx, align 1
  store i8 %7, ptr %n1, align 1
  %8 = load ptr, ptr %s2.addr, align 8
  %9 = load i64, ptr %s2len.addr, align 8
  %arrayidx3 = getelementptr inbounds i8, ptr %8, i64 %9
  %10 = load i8, ptr %arrayidx3, align 1
  store i8 %10, ptr %n2, align 1
  %11 = load ptr, ptr %s1.addr, align 8
  %12 = load i64, ptr %s1len.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, ptr %11, i64 %12
  store i8 0, ptr %arrayidx4, align 1
  %13 = load ptr, ptr %s2.addr, align 8
  %14 = load i64, ptr %s2len.addr, align 8
  %arrayidx5 = getelementptr inbounds i8, ptr %13, i64 %14
  store i8 0, ptr %arrayidx5, align 1
  %15 = load ptr, ptr %s1.addr, align 8
  %16 = load i64, ptr %s1len.addr, align 8
  %add = add i64 %16, 1
  %17 = load ptr, ptr %s2.addr, align 8
  %18 = load i64, ptr %s2len.addr, align 8
  %add6 = add i64 %18, 1
  %call7 = call i32 @strcoll_loop(ptr noundef %15, i64 noundef %add, ptr noundef %17, i64 noundef %add6)
  store i32 %call7, ptr %diff, align 4
  %19 = load i8, ptr %n1, align 1
  %20 = load ptr, ptr %s1.addr, align 8
  %21 = load i64, ptr %s1len.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, ptr %20, i64 %21
  store i8 %19, ptr %arrayidx8, align 1
  %22 = load i8, ptr %n2, align 1
  %23 = load ptr, ptr %s2.addr, align 8
  %24 = load i64, ptr %s2len.addr, align 8
  %arrayidx9 = getelementptr inbounds i8, ptr %23, i64 %24
  store i8 %22, ptr %arrayidx9, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %25 = load i32, ptr %diff, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @strcoll_loop(ptr noundef %s1, i64 noundef %s1size, ptr noundef %s2, i64 noundef %s2size) #3 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca ptr, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca ptr, align 8
  %s2size.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  %size1 = alloca i64, align 8
  %size2 = alloca i64, align 8
  store ptr %s1, ptr %s1.addr, align 8
  store i64 %s1size, ptr %s1size.addr, align 8
  store ptr %s2, ptr %s2.addr, align 8
  store i64 %s2size, ptr %s2size.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end14, %entry
  %call = call ptr @__errno_location() #26
  store i32 0, ptr %call, align 4
  %0 = load ptr, ptr %s1.addr, align 8
  %1 = load ptr, ptr %s2.addr, align 8
  %call1 = call i32 @strcoll(ptr noundef %0, ptr noundef %1) #23
  store i32 %call1, ptr %diff, align 4
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %call2 = call ptr @__errno_location() #26
  %2 = load i32, ptr %call2, align 4
  %tobool3 = icmp ne i32 %2, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %3 = phi i1 [ true, %while.cond ], [ %tobool3, %lor.rhs ]
  %lnot = xor i1 %3, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %lor.end
  %4 = load ptr, ptr %s1.addr, align 8
  %call4 = call i64 @strlen(ptr noundef %4) #23
  %add = add i64 %call4, 1
  store i64 %add, ptr %size1, align 8
  %5 = load ptr, ptr %s2.addr, align 8
  %call5 = call i64 @strlen(ptr noundef %5) #23
  %add6 = add i64 %call5, 1
  store i64 %add6, ptr %size2, align 8
  %6 = load i64, ptr %size1, align 8
  %7 = load ptr, ptr %s1.addr, align 8
  %add.ptr = getelementptr inbounds i8, ptr %7, i64 %6
  store ptr %add.ptr, ptr %s1.addr, align 8
  %8 = load i64, ptr %size2, align 8
  %9 = load ptr, ptr %s2.addr, align 8
  %add.ptr7 = getelementptr inbounds i8, ptr %9, i64 %8
  store ptr %add.ptr7, ptr %s2.addr, align 8
  %10 = load i64, ptr %size1, align 8
  %11 = load i64, ptr %s1size.addr, align 8
  %sub = sub i64 %11, %10
  store i64 %sub, ptr %s1size.addr, align 8
  %12 = load i64, ptr %size2, align 8
  %13 = load i64, ptr %s2size.addr, align 8
  %sub8 = sub i64 %13, %12
  store i64 %sub8, ptr %s2size.addr, align 8
  %14 = load i64, ptr %s1size.addr, align 8
  %cmp = icmp eq i64 %14, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %15 = load i64, ptr %s2size.addr, align 8
  %cmp9 = icmp ne i64 %15, 0
  %conv = zext i1 %cmp9 to i32
  %sub10 = sub nsw i32 0, %conv
  store i32 %sub10, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %16 = load i64, ptr %s2size.addr, align 8
  %cmp11 = icmp eq i64 %16, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  store i32 1, ptr %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end
  br label %while.cond, !llvm.loop !37

while.end:                                        ; preds = %lor.end
  %17 = load i32, ptr %diff, align 4
  store i32 %17, ptr %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then13, %if.then
  %18 = load i32, ptr %retval, align 4
  ret i32 %18
}

; Function Attrs: nounwind willreturn memory(read)
declare i32 @strcoll(ptr noundef, ptr noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @memcoll0(ptr noundef %s1, i64 noundef %s1size, ptr noundef %s2, i64 noundef %s2size) #3 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca ptr, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca ptr, align 8
  %s2size.addr = alloca i64, align 8
  store ptr %s1, ptr %s1.addr, align 8
  store i64 %s1size, ptr %s1size.addr, align 8
  store ptr %s2, ptr %s2.addr, align 8
  store i64 %s2size, ptr %s2size.addr, align 8
  %0 = load i64, ptr %s1size.addr, align 8
  %1 = load i64, ptr %s2size.addr, align 8
  %cmp = icmp eq i64 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load ptr, ptr %s1.addr, align 8
  %3 = load ptr, ptr %s2.addr, align 8
  %4 = load i64, ptr %s1size.addr, align 8
  %call = call i32 @memcmp(ptr noundef %2, ptr noundef %3, i64 noundef %4) #23
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %call2 = call ptr @__errno_location() #26
  store i32 0, ptr %call2, align 4
  store i32 0, ptr %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load ptr, ptr %s1.addr, align 8
  %6 = load i64, ptr %s1size.addr, align 8
  %7 = load ptr, ptr %s2.addr, align 8
  %8 = load i64, ptr %s2size.addr, align 8
  %call3 = call i32 @strcoll_loop(ptr noundef %5, i64 noundef %6, ptr noundef %7, i64 noundef %8)
  store i32 %call3, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, ptr %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @printf_fetchargs(ptr noundef %args, ptr noundef %a) #3 {
entry:
  %retval = alloca i32, align 4
  %args.addr = alloca ptr, align 8
  %a.addr = alloca ptr, align 8
  %i = alloca i64, align 8
  %ap = alloca ptr, align 8
  store ptr %args, ptr %args.addr, align 8
  store ptr %a, ptr %a.addr, align 8
  store i64 0, ptr %i, align 8
  %0 = load ptr, ptr %a.addr, align 8
  %arg = getelementptr inbounds %struct.arguments, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %arg, align 8
  %arrayidx = getelementptr inbounds %struct.argument, ptr %1, i64 0
  store ptr %arrayidx, ptr %ap, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, ptr %i, align 8
  %3 = load ptr, ptr %a.addr, align 8
  %count = getelementptr inbounds %struct.arguments, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %count, align 16
  %cmp = icmp ult i64 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load ptr, ptr %ap, align 8
  %type = getelementptr inbounds %struct.argument, ptr %5, i32 0, i32 0
  %6 = load i32, ptr %type, align 16
  switch i32 %6, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb16
    i32 4, label %sw.bb30
    i32 5, label %sw.bb44
    i32 6, label %sw.bb57
    i32 7, label %sw.bb70
    i32 8, label %sw.bb83
    i32 9, label %sw.bb96
    i32 10, label %sw.bb109
    i32 11, label %sw.bb122
    i32 12, label %sw.bb136
    i32 13, label %sw.bb150
    i32 14, label %sw.bb164
    i32 15, label %sw.bb178
    i32 16, label %sw.bb191
    i32 17, label %sw.bb204
    i32 18, label %sw.bb217
    i32 19, label %sw.bb230
    i32 20, label %sw.bb244
    i32 21, label %sw.bb258
    i32 22, label %sw.bb271
    i32 23, label %sw.bb284
    i32 24, label %sw.bb297
    i32 25, label %sw.bb310
    i32 26, label %sw.bb323
    i32 27, label %sw.bb336
    i32 28, label %sw.bb346
    i32 29, label %sw.bb351
    i32 30, label %sw.bb364
    i32 31, label %sw.bb377
    i32 32, label %sw.bb394
    i32 33, label %sw.bb413
    i32 34, label %sw.bb426
    i32 35, label %sw.bb439
    i32 36, label %sw.bb452
    i32 37, label %sw.bb465
    i32 38, label %sw.bb478
    i32 39, label %sw.bb491
    i32 40, label %sw.bb504
    i32 41, label %sw.bb517
    i32 42, label %sw.bb530
    i32 43, label %sw.bb543
    i32 44, label %sw.bb556
    i32 45, label %sw.bb569
    i32 46, label %sw.bb582
    i32 0, label %sw.bb595
  ]

sw.bb:                                            ; preds = %for.body
  %7 = load ptr, ptr %args.addr, align 8
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, ptr %7, i32 0, i32 0
  %gp_offset = load i32, ptr %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb
  %8 = getelementptr inbounds %struct.__va_list_tag, ptr %7, i32 0, i32 3
  %reg_save_area = load ptr, ptr %8, align 8
  %9 = getelementptr i8, ptr %reg_save_area, i32 %gp_offset
  %10 = add i32 %gp_offset, 8
  store i32 %10, ptr %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, ptr %7, i32 0, i32 2
  %overflow_arg_area = load ptr, ptr %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8, ptr %overflow_arg_area, i32 8
  store ptr %overflow_arg_area.next, ptr %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi ptr [ %9, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %11 = load i32, ptr %vaarg.addr, align 4
  %conv = trunc i32 %11 to i8
  %12 = load ptr, ptr %ap, align 8
  %a1 = getelementptr inbounds %struct.argument, ptr %12, i32 0, i32 1
  store i8 %conv, ptr %a1, align 16
  br label %sw.epilog

sw.bb2:                                           ; preds = %for.body
  %13 = load ptr, ptr %args.addr, align 8
  %gp_offset_p3 = getelementptr inbounds %struct.__va_list_tag, ptr %13, i32 0, i32 0
  %gp_offset4 = load i32, ptr %gp_offset_p3, align 8
  %fits_in_gp5 = icmp ule i32 %gp_offset4, 40
  br i1 %fits_in_gp5, label %vaarg.in_reg6, label %vaarg.in_mem8

vaarg.in_reg6:                                    ; preds = %sw.bb2
  %14 = getelementptr inbounds %struct.__va_list_tag, ptr %13, i32 0, i32 3
  %reg_save_area7 = load ptr, ptr %14, align 8
  %15 = getelementptr i8, ptr %reg_save_area7, i32 %gp_offset4
  %16 = add i32 %gp_offset4, 8
  store i32 %16, ptr %gp_offset_p3, align 8
  br label %vaarg.end12

vaarg.in_mem8:                                    ; preds = %sw.bb2
  %overflow_arg_area_p9 = getelementptr inbounds %struct.__va_list_tag, ptr %13, i32 0, i32 2
  %overflow_arg_area10 = load ptr, ptr %overflow_arg_area_p9, align 8
  %overflow_arg_area.next11 = getelementptr i8, ptr %overflow_arg_area10, i32 8
  store ptr %overflow_arg_area.next11, ptr %overflow_arg_area_p9, align 8
  br label %vaarg.end12

vaarg.end12:                                      ; preds = %vaarg.in_mem8, %vaarg.in_reg6
  %vaarg.addr13 = phi ptr [ %15, %vaarg.in_reg6 ], [ %overflow_arg_area10, %vaarg.in_mem8 ]
  %17 = load i32, ptr %vaarg.addr13, align 4
  %conv14 = trunc i32 %17 to i8
  %18 = load ptr, ptr %ap, align 8
  %a15 = getelementptr inbounds %struct.argument, ptr %18, i32 0, i32 1
  store i8 %conv14, ptr %a15, align 16
  br label %sw.epilog

sw.bb16:                                          ; preds = %for.body
  %19 = load ptr, ptr %args.addr, align 8
  %gp_offset_p17 = getelementptr inbounds %struct.__va_list_tag, ptr %19, i32 0, i32 0
  %gp_offset18 = load i32, ptr %gp_offset_p17, align 8
  %fits_in_gp19 = icmp ule i32 %gp_offset18, 40
  br i1 %fits_in_gp19, label %vaarg.in_reg20, label %vaarg.in_mem22

vaarg.in_reg20:                                   ; preds = %sw.bb16
  %20 = getelementptr inbounds %struct.__va_list_tag, ptr %19, i32 0, i32 3
  %reg_save_area21 = load ptr, ptr %20, align 8
  %21 = getelementptr i8, ptr %reg_save_area21, i32 %gp_offset18
  %22 = add i32 %gp_offset18, 8
  store i32 %22, ptr %gp_offset_p17, align 8
  br label %vaarg.end26

vaarg.in_mem22:                                   ; preds = %sw.bb16
  %overflow_arg_area_p23 = getelementptr inbounds %struct.__va_list_tag, ptr %19, i32 0, i32 2
  %overflow_arg_area24 = load ptr, ptr %overflow_arg_area_p23, align 8
  %overflow_arg_area.next25 = getelementptr i8, ptr %overflow_arg_area24, i32 8
  store ptr %overflow_arg_area.next25, ptr %overflow_arg_area_p23, align 8
  br label %vaarg.end26

vaarg.end26:                                      ; preds = %vaarg.in_mem22, %vaarg.in_reg20
  %vaarg.addr27 = phi ptr [ %21, %vaarg.in_reg20 ], [ %overflow_arg_area24, %vaarg.in_mem22 ]
  %23 = load i32, ptr %vaarg.addr27, align 4
  %conv28 = trunc i32 %23 to i16
  %24 = load ptr, ptr %ap, align 8
  %a29 = getelementptr inbounds %struct.argument, ptr %24, i32 0, i32 1
  store i16 %conv28, ptr %a29, align 16
  br label %sw.epilog

sw.bb30:                                          ; preds = %for.body
  %25 = load ptr, ptr %args.addr, align 8
  %gp_offset_p31 = getelementptr inbounds %struct.__va_list_tag, ptr %25, i32 0, i32 0
  %gp_offset32 = load i32, ptr %gp_offset_p31, align 8
  %fits_in_gp33 = icmp ule i32 %gp_offset32, 40
  br i1 %fits_in_gp33, label %vaarg.in_reg34, label %vaarg.in_mem36

vaarg.in_reg34:                                   ; preds = %sw.bb30
  %26 = getelementptr inbounds %struct.__va_list_tag, ptr %25, i32 0, i32 3
  %reg_save_area35 = load ptr, ptr %26, align 8
  %27 = getelementptr i8, ptr %reg_save_area35, i32 %gp_offset32
  %28 = add i32 %gp_offset32, 8
  store i32 %28, ptr %gp_offset_p31, align 8
  br label %vaarg.end40

vaarg.in_mem36:                                   ; preds = %sw.bb30
  %overflow_arg_area_p37 = getelementptr inbounds %struct.__va_list_tag, ptr %25, i32 0, i32 2
  %overflow_arg_area38 = load ptr, ptr %overflow_arg_area_p37, align 8
  %overflow_arg_area.next39 = getelementptr i8, ptr %overflow_arg_area38, i32 8
  store ptr %overflow_arg_area.next39, ptr %overflow_arg_area_p37, align 8
  br label %vaarg.end40

vaarg.end40:                                      ; preds = %vaarg.in_mem36, %vaarg.in_reg34
  %vaarg.addr41 = phi ptr [ %27, %vaarg.in_reg34 ], [ %overflow_arg_area38, %vaarg.in_mem36 ]
  %29 = load i32, ptr %vaarg.addr41, align 4
  %conv42 = trunc i32 %29 to i16
  %30 = load ptr, ptr %ap, align 8
  %a43 = getelementptr inbounds %struct.argument, ptr %30, i32 0, i32 1
  store i16 %conv42, ptr %a43, align 16
  br label %sw.epilog

sw.bb44:                                          ; preds = %for.body
  %31 = load ptr, ptr %args.addr, align 8
  %gp_offset_p45 = getelementptr inbounds %struct.__va_list_tag, ptr %31, i32 0, i32 0
  %gp_offset46 = load i32, ptr %gp_offset_p45, align 8
  %fits_in_gp47 = icmp ule i32 %gp_offset46, 40
  br i1 %fits_in_gp47, label %vaarg.in_reg48, label %vaarg.in_mem50

vaarg.in_reg48:                                   ; preds = %sw.bb44
  %32 = getelementptr inbounds %struct.__va_list_tag, ptr %31, i32 0, i32 3
  %reg_save_area49 = load ptr, ptr %32, align 8
  %33 = getelementptr i8, ptr %reg_save_area49, i32 %gp_offset46
  %34 = add i32 %gp_offset46, 8
  store i32 %34, ptr %gp_offset_p45, align 8
  br label %vaarg.end54

vaarg.in_mem50:                                   ; preds = %sw.bb44
  %overflow_arg_area_p51 = getelementptr inbounds %struct.__va_list_tag, ptr %31, i32 0, i32 2
  %overflow_arg_area52 = load ptr, ptr %overflow_arg_area_p51, align 8
  %overflow_arg_area.next53 = getelementptr i8, ptr %overflow_arg_area52, i32 8
  store ptr %overflow_arg_area.next53, ptr %overflow_arg_area_p51, align 8
  br label %vaarg.end54

vaarg.end54:                                      ; preds = %vaarg.in_mem50, %vaarg.in_reg48
  %vaarg.addr55 = phi ptr [ %33, %vaarg.in_reg48 ], [ %overflow_arg_area52, %vaarg.in_mem50 ]
  %35 = load i32, ptr %vaarg.addr55, align 4
  %36 = load ptr, ptr %ap, align 8
  %a56 = getelementptr inbounds %struct.argument, ptr %36, i32 0, i32 1
  store i32 %35, ptr %a56, align 16
  br label %sw.epilog

sw.bb57:                                          ; preds = %for.body
  %37 = load ptr, ptr %args.addr, align 8
  %gp_offset_p58 = getelementptr inbounds %struct.__va_list_tag, ptr %37, i32 0, i32 0
  %gp_offset59 = load i32, ptr %gp_offset_p58, align 8
  %fits_in_gp60 = icmp ule i32 %gp_offset59, 40
  br i1 %fits_in_gp60, label %vaarg.in_reg61, label %vaarg.in_mem63

vaarg.in_reg61:                                   ; preds = %sw.bb57
  %38 = getelementptr inbounds %struct.__va_list_tag, ptr %37, i32 0, i32 3
  %reg_save_area62 = load ptr, ptr %38, align 8
  %39 = getelementptr i8, ptr %reg_save_area62, i32 %gp_offset59
  %40 = add i32 %gp_offset59, 8
  store i32 %40, ptr %gp_offset_p58, align 8
  br label %vaarg.end67

vaarg.in_mem63:                                   ; preds = %sw.bb57
  %overflow_arg_area_p64 = getelementptr inbounds %struct.__va_list_tag, ptr %37, i32 0, i32 2
  %overflow_arg_area65 = load ptr, ptr %overflow_arg_area_p64, align 8
  %overflow_arg_area.next66 = getelementptr i8, ptr %overflow_arg_area65, i32 8
  store ptr %overflow_arg_area.next66, ptr %overflow_arg_area_p64, align 8
  br label %vaarg.end67

vaarg.end67:                                      ; preds = %vaarg.in_mem63, %vaarg.in_reg61
  %vaarg.addr68 = phi ptr [ %39, %vaarg.in_reg61 ], [ %overflow_arg_area65, %vaarg.in_mem63 ]
  %41 = load i32, ptr %vaarg.addr68, align 4
  %42 = load ptr, ptr %ap, align 8
  %a69 = getelementptr inbounds %struct.argument, ptr %42, i32 0, i32 1
  store i32 %41, ptr %a69, align 16
  br label %sw.epilog

sw.bb70:                                          ; preds = %for.body
  %43 = load ptr, ptr %args.addr, align 8
  %gp_offset_p71 = getelementptr inbounds %struct.__va_list_tag, ptr %43, i32 0, i32 0
  %gp_offset72 = load i32, ptr %gp_offset_p71, align 8
  %fits_in_gp73 = icmp ule i32 %gp_offset72, 40
  br i1 %fits_in_gp73, label %vaarg.in_reg74, label %vaarg.in_mem76

vaarg.in_reg74:                                   ; preds = %sw.bb70
  %44 = getelementptr inbounds %struct.__va_list_tag, ptr %43, i32 0, i32 3
  %reg_save_area75 = load ptr, ptr %44, align 8
  %45 = getelementptr i8, ptr %reg_save_area75, i32 %gp_offset72
  %46 = add i32 %gp_offset72, 8
  store i32 %46, ptr %gp_offset_p71, align 8
  br label %vaarg.end80

vaarg.in_mem76:                                   ; preds = %sw.bb70
  %overflow_arg_area_p77 = getelementptr inbounds %struct.__va_list_tag, ptr %43, i32 0, i32 2
  %overflow_arg_area78 = load ptr, ptr %overflow_arg_area_p77, align 8
  %overflow_arg_area.next79 = getelementptr i8, ptr %overflow_arg_area78, i32 8
  store ptr %overflow_arg_area.next79, ptr %overflow_arg_area_p77, align 8
  br label %vaarg.end80

vaarg.end80:                                      ; preds = %vaarg.in_mem76, %vaarg.in_reg74
  %vaarg.addr81 = phi ptr [ %45, %vaarg.in_reg74 ], [ %overflow_arg_area78, %vaarg.in_mem76 ]
  %47 = load i64, ptr %vaarg.addr81, align 8
  %48 = load ptr, ptr %ap, align 8
  %a82 = getelementptr inbounds %struct.argument, ptr %48, i32 0, i32 1
  store i64 %47, ptr %a82, align 16
  br label %sw.epilog

sw.bb83:                                          ; preds = %for.body
  %49 = load ptr, ptr %args.addr, align 8
  %gp_offset_p84 = getelementptr inbounds %struct.__va_list_tag, ptr %49, i32 0, i32 0
  %gp_offset85 = load i32, ptr %gp_offset_p84, align 8
  %fits_in_gp86 = icmp ule i32 %gp_offset85, 40
  br i1 %fits_in_gp86, label %vaarg.in_reg87, label %vaarg.in_mem89

vaarg.in_reg87:                                   ; preds = %sw.bb83
  %50 = getelementptr inbounds %struct.__va_list_tag, ptr %49, i32 0, i32 3
  %reg_save_area88 = load ptr, ptr %50, align 8
  %51 = getelementptr i8, ptr %reg_save_area88, i32 %gp_offset85
  %52 = add i32 %gp_offset85, 8
  store i32 %52, ptr %gp_offset_p84, align 8
  br label %vaarg.end93

vaarg.in_mem89:                                   ; preds = %sw.bb83
  %overflow_arg_area_p90 = getelementptr inbounds %struct.__va_list_tag, ptr %49, i32 0, i32 2
  %overflow_arg_area91 = load ptr, ptr %overflow_arg_area_p90, align 8
  %overflow_arg_area.next92 = getelementptr i8, ptr %overflow_arg_area91, i32 8
  store ptr %overflow_arg_area.next92, ptr %overflow_arg_area_p90, align 8
  br label %vaarg.end93

vaarg.end93:                                      ; preds = %vaarg.in_mem89, %vaarg.in_reg87
  %vaarg.addr94 = phi ptr [ %51, %vaarg.in_reg87 ], [ %overflow_arg_area91, %vaarg.in_mem89 ]
  %53 = load i64, ptr %vaarg.addr94, align 8
  %54 = load ptr, ptr %ap, align 8
  %a95 = getelementptr inbounds %struct.argument, ptr %54, i32 0, i32 1
  store i64 %53, ptr %a95, align 16
  br label %sw.epilog

sw.bb96:                                          ; preds = %for.body
  %55 = load ptr, ptr %args.addr, align 8
  %gp_offset_p97 = getelementptr inbounds %struct.__va_list_tag, ptr %55, i32 0, i32 0
  %gp_offset98 = load i32, ptr %gp_offset_p97, align 8
  %fits_in_gp99 = icmp ule i32 %gp_offset98, 40
  br i1 %fits_in_gp99, label %vaarg.in_reg100, label %vaarg.in_mem102

vaarg.in_reg100:                                  ; preds = %sw.bb96
  %56 = getelementptr inbounds %struct.__va_list_tag, ptr %55, i32 0, i32 3
  %reg_save_area101 = load ptr, ptr %56, align 8
  %57 = getelementptr i8, ptr %reg_save_area101, i32 %gp_offset98
  %58 = add i32 %gp_offset98, 8
  store i32 %58, ptr %gp_offset_p97, align 8
  br label %vaarg.end106

vaarg.in_mem102:                                  ; preds = %sw.bb96
  %overflow_arg_area_p103 = getelementptr inbounds %struct.__va_list_tag, ptr %55, i32 0, i32 2
  %overflow_arg_area104 = load ptr, ptr %overflow_arg_area_p103, align 8
  %overflow_arg_area.next105 = getelementptr i8, ptr %overflow_arg_area104, i32 8
  store ptr %overflow_arg_area.next105, ptr %overflow_arg_area_p103, align 8
  br label %vaarg.end106

vaarg.end106:                                     ; preds = %vaarg.in_mem102, %vaarg.in_reg100
  %vaarg.addr107 = phi ptr [ %57, %vaarg.in_reg100 ], [ %overflow_arg_area104, %vaarg.in_mem102 ]
  %59 = load i64, ptr %vaarg.addr107, align 8
  %60 = load ptr, ptr %ap, align 8
  %a108 = getelementptr inbounds %struct.argument, ptr %60, i32 0, i32 1
  store i64 %59, ptr %a108, align 16
  br label %sw.epilog

sw.bb109:                                         ; preds = %for.body
  %61 = load ptr, ptr %args.addr, align 8
  %gp_offset_p110 = getelementptr inbounds %struct.__va_list_tag, ptr %61, i32 0, i32 0
  %gp_offset111 = load i32, ptr %gp_offset_p110, align 8
  %fits_in_gp112 = icmp ule i32 %gp_offset111, 40
  br i1 %fits_in_gp112, label %vaarg.in_reg113, label %vaarg.in_mem115

vaarg.in_reg113:                                  ; preds = %sw.bb109
  %62 = getelementptr inbounds %struct.__va_list_tag, ptr %61, i32 0, i32 3
  %reg_save_area114 = load ptr, ptr %62, align 8
  %63 = getelementptr i8, ptr %reg_save_area114, i32 %gp_offset111
  %64 = add i32 %gp_offset111, 8
  store i32 %64, ptr %gp_offset_p110, align 8
  br label %vaarg.end119

vaarg.in_mem115:                                  ; preds = %sw.bb109
  %overflow_arg_area_p116 = getelementptr inbounds %struct.__va_list_tag, ptr %61, i32 0, i32 2
  %overflow_arg_area117 = load ptr, ptr %overflow_arg_area_p116, align 8
  %overflow_arg_area.next118 = getelementptr i8, ptr %overflow_arg_area117, i32 8
  store ptr %overflow_arg_area.next118, ptr %overflow_arg_area_p116, align 8
  br label %vaarg.end119

vaarg.end119:                                     ; preds = %vaarg.in_mem115, %vaarg.in_reg113
  %vaarg.addr120 = phi ptr [ %63, %vaarg.in_reg113 ], [ %overflow_arg_area117, %vaarg.in_mem115 ]
  %65 = load i64, ptr %vaarg.addr120, align 8
  %66 = load ptr, ptr %ap, align 8
  %a121 = getelementptr inbounds %struct.argument, ptr %66, i32 0, i32 1
  store i64 %65, ptr %a121, align 16
  br label %sw.epilog

sw.bb122:                                         ; preds = %for.body
  %67 = load ptr, ptr %args.addr, align 8
  %gp_offset_p123 = getelementptr inbounds %struct.__va_list_tag, ptr %67, i32 0, i32 0
  %gp_offset124 = load i32, ptr %gp_offset_p123, align 8
  %fits_in_gp125 = icmp ule i32 %gp_offset124, 40
  br i1 %fits_in_gp125, label %vaarg.in_reg126, label %vaarg.in_mem128

vaarg.in_reg126:                                  ; preds = %sw.bb122
  %68 = getelementptr inbounds %struct.__va_list_tag, ptr %67, i32 0, i32 3
  %reg_save_area127 = load ptr, ptr %68, align 8
  %69 = getelementptr i8, ptr %reg_save_area127, i32 %gp_offset124
  %70 = add i32 %gp_offset124, 8
  store i32 %70, ptr %gp_offset_p123, align 8
  br label %vaarg.end132

vaarg.in_mem128:                                  ; preds = %sw.bb122
  %overflow_arg_area_p129 = getelementptr inbounds %struct.__va_list_tag, ptr %67, i32 0, i32 2
  %overflow_arg_area130 = load ptr, ptr %overflow_arg_area_p129, align 8
  %overflow_arg_area.next131 = getelementptr i8, ptr %overflow_arg_area130, i32 8
  store ptr %overflow_arg_area.next131, ptr %overflow_arg_area_p129, align 8
  br label %vaarg.end132

vaarg.end132:                                     ; preds = %vaarg.in_mem128, %vaarg.in_reg126
  %vaarg.addr133 = phi ptr [ %69, %vaarg.in_reg126 ], [ %overflow_arg_area130, %vaarg.in_mem128 ]
  %71 = load i32, ptr %vaarg.addr133, align 4
  %conv134 = trunc i32 %71 to i8
  %72 = load ptr, ptr %ap, align 8
  %a135 = getelementptr inbounds %struct.argument, ptr %72, i32 0, i32 1
  store i8 %conv134, ptr %a135, align 16
  br label %sw.epilog

sw.bb136:                                         ; preds = %for.body
  %73 = load ptr, ptr %args.addr, align 8
  %gp_offset_p137 = getelementptr inbounds %struct.__va_list_tag, ptr %73, i32 0, i32 0
  %gp_offset138 = load i32, ptr %gp_offset_p137, align 8
  %fits_in_gp139 = icmp ule i32 %gp_offset138, 40
  br i1 %fits_in_gp139, label %vaarg.in_reg140, label %vaarg.in_mem142

vaarg.in_reg140:                                  ; preds = %sw.bb136
  %74 = getelementptr inbounds %struct.__va_list_tag, ptr %73, i32 0, i32 3
  %reg_save_area141 = load ptr, ptr %74, align 8
  %75 = getelementptr i8, ptr %reg_save_area141, i32 %gp_offset138
  %76 = add i32 %gp_offset138, 8
  store i32 %76, ptr %gp_offset_p137, align 8
  br label %vaarg.end146

vaarg.in_mem142:                                  ; preds = %sw.bb136
  %overflow_arg_area_p143 = getelementptr inbounds %struct.__va_list_tag, ptr %73, i32 0, i32 2
  %overflow_arg_area144 = load ptr, ptr %overflow_arg_area_p143, align 8
  %overflow_arg_area.next145 = getelementptr i8, ptr %overflow_arg_area144, i32 8
  store ptr %overflow_arg_area.next145, ptr %overflow_arg_area_p143, align 8
  br label %vaarg.end146

vaarg.end146:                                     ; preds = %vaarg.in_mem142, %vaarg.in_reg140
  %vaarg.addr147 = phi ptr [ %75, %vaarg.in_reg140 ], [ %overflow_arg_area144, %vaarg.in_mem142 ]
  %77 = load i32, ptr %vaarg.addr147, align 4
  %conv148 = trunc i32 %77 to i8
  %78 = load ptr, ptr %ap, align 8
  %a149 = getelementptr inbounds %struct.argument, ptr %78, i32 0, i32 1
  store i8 %conv148, ptr %a149, align 16
  br label %sw.epilog

sw.bb150:                                         ; preds = %for.body
  %79 = load ptr, ptr %args.addr, align 8
  %gp_offset_p151 = getelementptr inbounds %struct.__va_list_tag, ptr %79, i32 0, i32 0
  %gp_offset152 = load i32, ptr %gp_offset_p151, align 8
  %fits_in_gp153 = icmp ule i32 %gp_offset152, 40
  br i1 %fits_in_gp153, label %vaarg.in_reg154, label %vaarg.in_mem156

vaarg.in_reg154:                                  ; preds = %sw.bb150
  %80 = getelementptr inbounds %struct.__va_list_tag, ptr %79, i32 0, i32 3
  %reg_save_area155 = load ptr, ptr %80, align 8
  %81 = getelementptr i8, ptr %reg_save_area155, i32 %gp_offset152
  %82 = add i32 %gp_offset152, 8
  store i32 %82, ptr %gp_offset_p151, align 8
  br label %vaarg.end160

vaarg.in_mem156:                                  ; preds = %sw.bb150
  %overflow_arg_area_p157 = getelementptr inbounds %struct.__va_list_tag, ptr %79, i32 0, i32 2
  %overflow_arg_area158 = load ptr, ptr %overflow_arg_area_p157, align 8
  %overflow_arg_area.next159 = getelementptr i8, ptr %overflow_arg_area158, i32 8
  store ptr %overflow_arg_area.next159, ptr %overflow_arg_area_p157, align 8
  br label %vaarg.end160

vaarg.end160:                                     ; preds = %vaarg.in_mem156, %vaarg.in_reg154
  %vaarg.addr161 = phi ptr [ %81, %vaarg.in_reg154 ], [ %overflow_arg_area158, %vaarg.in_mem156 ]
  %83 = load i32, ptr %vaarg.addr161, align 4
  %conv162 = trunc i32 %83 to i16
  %84 = load ptr, ptr %ap, align 8
  %a163 = getelementptr inbounds %struct.argument, ptr %84, i32 0, i32 1
  store i16 %conv162, ptr %a163, align 16
  br label %sw.epilog

sw.bb164:                                         ; preds = %for.body
  %85 = load ptr, ptr %args.addr, align 8
  %gp_offset_p165 = getelementptr inbounds %struct.__va_list_tag, ptr %85, i32 0, i32 0
  %gp_offset166 = load i32, ptr %gp_offset_p165, align 8
  %fits_in_gp167 = icmp ule i32 %gp_offset166, 40
  br i1 %fits_in_gp167, label %vaarg.in_reg168, label %vaarg.in_mem170

vaarg.in_reg168:                                  ; preds = %sw.bb164
  %86 = getelementptr inbounds %struct.__va_list_tag, ptr %85, i32 0, i32 3
  %reg_save_area169 = load ptr, ptr %86, align 8
  %87 = getelementptr i8, ptr %reg_save_area169, i32 %gp_offset166
  %88 = add i32 %gp_offset166, 8
  store i32 %88, ptr %gp_offset_p165, align 8
  br label %vaarg.end174

vaarg.in_mem170:                                  ; preds = %sw.bb164
  %overflow_arg_area_p171 = getelementptr inbounds %struct.__va_list_tag, ptr %85, i32 0, i32 2
  %overflow_arg_area172 = load ptr, ptr %overflow_arg_area_p171, align 8
  %overflow_arg_area.next173 = getelementptr i8, ptr %overflow_arg_area172, i32 8
  store ptr %overflow_arg_area.next173, ptr %overflow_arg_area_p171, align 8
  br label %vaarg.end174

vaarg.end174:                                     ; preds = %vaarg.in_mem170, %vaarg.in_reg168
  %vaarg.addr175 = phi ptr [ %87, %vaarg.in_reg168 ], [ %overflow_arg_area172, %vaarg.in_mem170 ]
  %89 = load i32, ptr %vaarg.addr175, align 4
  %conv176 = trunc i32 %89 to i16
  %90 = load ptr, ptr %ap, align 8
  %a177 = getelementptr inbounds %struct.argument, ptr %90, i32 0, i32 1
  store i16 %conv176, ptr %a177, align 16
  br label %sw.epilog

sw.bb178:                                         ; preds = %for.body
  %91 = load ptr, ptr %args.addr, align 8
  %gp_offset_p179 = getelementptr inbounds %struct.__va_list_tag, ptr %91, i32 0, i32 0
  %gp_offset180 = load i32, ptr %gp_offset_p179, align 8
  %fits_in_gp181 = icmp ule i32 %gp_offset180, 40
  br i1 %fits_in_gp181, label %vaarg.in_reg182, label %vaarg.in_mem184

vaarg.in_reg182:                                  ; preds = %sw.bb178
  %92 = getelementptr inbounds %struct.__va_list_tag, ptr %91, i32 0, i32 3
  %reg_save_area183 = load ptr, ptr %92, align 8
  %93 = getelementptr i8, ptr %reg_save_area183, i32 %gp_offset180
  %94 = add i32 %gp_offset180, 8
  store i32 %94, ptr %gp_offset_p179, align 8
  br label %vaarg.end188

vaarg.in_mem184:                                  ; preds = %sw.bb178
  %overflow_arg_area_p185 = getelementptr inbounds %struct.__va_list_tag, ptr %91, i32 0, i32 2
  %overflow_arg_area186 = load ptr, ptr %overflow_arg_area_p185, align 8
  %overflow_arg_area.next187 = getelementptr i8, ptr %overflow_arg_area186, i32 8
  store ptr %overflow_arg_area.next187, ptr %overflow_arg_area_p185, align 8
  br label %vaarg.end188

vaarg.end188:                                     ; preds = %vaarg.in_mem184, %vaarg.in_reg182
  %vaarg.addr189 = phi ptr [ %93, %vaarg.in_reg182 ], [ %overflow_arg_area186, %vaarg.in_mem184 ]
  %95 = load i32, ptr %vaarg.addr189, align 4
  %96 = load ptr, ptr %ap, align 8
  %a190 = getelementptr inbounds %struct.argument, ptr %96, i32 0, i32 1
  store i32 %95, ptr %a190, align 16
  br label %sw.epilog

sw.bb191:                                         ; preds = %for.body
  %97 = load ptr, ptr %args.addr, align 8
  %gp_offset_p192 = getelementptr inbounds %struct.__va_list_tag, ptr %97, i32 0, i32 0
  %gp_offset193 = load i32, ptr %gp_offset_p192, align 8
  %fits_in_gp194 = icmp ule i32 %gp_offset193, 40
  br i1 %fits_in_gp194, label %vaarg.in_reg195, label %vaarg.in_mem197

vaarg.in_reg195:                                  ; preds = %sw.bb191
  %98 = getelementptr inbounds %struct.__va_list_tag, ptr %97, i32 0, i32 3
  %reg_save_area196 = load ptr, ptr %98, align 8
  %99 = getelementptr i8, ptr %reg_save_area196, i32 %gp_offset193
  %100 = add i32 %gp_offset193, 8
  store i32 %100, ptr %gp_offset_p192, align 8
  br label %vaarg.end201

vaarg.in_mem197:                                  ; preds = %sw.bb191
  %overflow_arg_area_p198 = getelementptr inbounds %struct.__va_list_tag, ptr %97, i32 0, i32 2
  %overflow_arg_area199 = load ptr, ptr %overflow_arg_area_p198, align 8
  %overflow_arg_area.next200 = getelementptr i8, ptr %overflow_arg_area199, i32 8
  store ptr %overflow_arg_area.next200, ptr %overflow_arg_area_p198, align 8
  br label %vaarg.end201

vaarg.end201:                                     ; preds = %vaarg.in_mem197, %vaarg.in_reg195
  %vaarg.addr202 = phi ptr [ %99, %vaarg.in_reg195 ], [ %overflow_arg_area199, %vaarg.in_mem197 ]
  %101 = load i32, ptr %vaarg.addr202, align 4
  %102 = load ptr, ptr %ap, align 8
  %a203 = getelementptr inbounds %struct.argument, ptr %102, i32 0, i32 1
  store i32 %101, ptr %a203, align 16
  br label %sw.epilog

sw.bb204:                                         ; preds = %for.body
  %103 = load ptr, ptr %args.addr, align 8
  %gp_offset_p205 = getelementptr inbounds %struct.__va_list_tag, ptr %103, i32 0, i32 0
  %gp_offset206 = load i32, ptr %gp_offset_p205, align 8
  %fits_in_gp207 = icmp ule i32 %gp_offset206, 40
  br i1 %fits_in_gp207, label %vaarg.in_reg208, label %vaarg.in_mem210

vaarg.in_reg208:                                  ; preds = %sw.bb204
  %104 = getelementptr inbounds %struct.__va_list_tag, ptr %103, i32 0, i32 3
  %reg_save_area209 = load ptr, ptr %104, align 8
  %105 = getelementptr i8, ptr %reg_save_area209, i32 %gp_offset206
  %106 = add i32 %gp_offset206, 8
  store i32 %106, ptr %gp_offset_p205, align 8
  br label %vaarg.end214

vaarg.in_mem210:                                  ; preds = %sw.bb204
  %overflow_arg_area_p211 = getelementptr inbounds %struct.__va_list_tag, ptr %103, i32 0, i32 2
  %overflow_arg_area212 = load ptr, ptr %overflow_arg_area_p211, align 8
  %overflow_arg_area.next213 = getelementptr i8, ptr %overflow_arg_area212, i32 8
  store ptr %overflow_arg_area.next213, ptr %overflow_arg_area_p211, align 8
  br label %vaarg.end214

vaarg.end214:                                     ; preds = %vaarg.in_mem210, %vaarg.in_reg208
  %vaarg.addr215 = phi ptr [ %105, %vaarg.in_reg208 ], [ %overflow_arg_area212, %vaarg.in_mem210 ]
  %107 = load i64, ptr %vaarg.addr215, align 8
  %108 = load ptr, ptr %ap, align 8
  %a216 = getelementptr inbounds %struct.argument, ptr %108, i32 0, i32 1
  store i64 %107, ptr %a216, align 16
  br label %sw.epilog

sw.bb217:                                         ; preds = %for.body
  %109 = load ptr, ptr %args.addr, align 8
  %gp_offset_p218 = getelementptr inbounds %struct.__va_list_tag, ptr %109, i32 0, i32 0
  %gp_offset219 = load i32, ptr %gp_offset_p218, align 8
  %fits_in_gp220 = icmp ule i32 %gp_offset219, 40
  br i1 %fits_in_gp220, label %vaarg.in_reg221, label %vaarg.in_mem223

vaarg.in_reg221:                                  ; preds = %sw.bb217
  %110 = getelementptr inbounds %struct.__va_list_tag, ptr %109, i32 0, i32 3
  %reg_save_area222 = load ptr, ptr %110, align 8
  %111 = getelementptr i8, ptr %reg_save_area222, i32 %gp_offset219
  %112 = add i32 %gp_offset219, 8
  store i32 %112, ptr %gp_offset_p218, align 8
  br label %vaarg.end227

vaarg.in_mem223:                                  ; preds = %sw.bb217
  %overflow_arg_area_p224 = getelementptr inbounds %struct.__va_list_tag, ptr %109, i32 0, i32 2
  %overflow_arg_area225 = load ptr, ptr %overflow_arg_area_p224, align 8
  %overflow_arg_area.next226 = getelementptr i8, ptr %overflow_arg_area225, i32 8
  store ptr %overflow_arg_area.next226, ptr %overflow_arg_area_p224, align 8
  br label %vaarg.end227

vaarg.end227:                                     ; preds = %vaarg.in_mem223, %vaarg.in_reg221
  %vaarg.addr228 = phi ptr [ %111, %vaarg.in_reg221 ], [ %overflow_arg_area225, %vaarg.in_mem223 ]
  %113 = load i64, ptr %vaarg.addr228, align 8
  %114 = load ptr, ptr %ap, align 8
  %a229 = getelementptr inbounds %struct.argument, ptr %114, i32 0, i32 1
  store i64 %113, ptr %a229, align 16
  br label %sw.epilog

sw.bb230:                                         ; preds = %for.body
  %115 = load ptr, ptr %args.addr, align 8
  %gp_offset_p231 = getelementptr inbounds %struct.__va_list_tag, ptr %115, i32 0, i32 0
  %gp_offset232 = load i32, ptr %gp_offset_p231, align 8
  %fits_in_gp233 = icmp ule i32 %gp_offset232, 40
  br i1 %fits_in_gp233, label %vaarg.in_reg234, label %vaarg.in_mem236

vaarg.in_reg234:                                  ; preds = %sw.bb230
  %116 = getelementptr inbounds %struct.__va_list_tag, ptr %115, i32 0, i32 3
  %reg_save_area235 = load ptr, ptr %116, align 8
  %117 = getelementptr i8, ptr %reg_save_area235, i32 %gp_offset232
  %118 = add i32 %gp_offset232, 8
  store i32 %118, ptr %gp_offset_p231, align 8
  br label %vaarg.end240

vaarg.in_mem236:                                  ; preds = %sw.bb230
  %overflow_arg_area_p237 = getelementptr inbounds %struct.__va_list_tag, ptr %115, i32 0, i32 2
  %overflow_arg_area238 = load ptr, ptr %overflow_arg_area_p237, align 8
  %overflow_arg_area.next239 = getelementptr i8, ptr %overflow_arg_area238, i32 8
  store ptr %overflow_arg_area.next239, ptr %overflow_arg_area_p237, align 8
  br label %vaarg.end240

vaarg.end240:                                     ; preds = %vaarg.in_mem236, %vaarg.in_reg234
  %vaarg.addr241 = phi ptr [ %117, %vaarg.in_reg234 ], [ %overflow_arg_area238, %vaarg.in_mem236 ]
  %119 = load i32, ptr %vaarg.addr241, align 4
  %conv242 = trunc i32 %119 to i8
  %120 = load ptr, ptr %ap, align 8
  %a243 = getelementptr inbounds %struct.argument, ptr %120, i32 0, i32 1
  store i8 %conv242, ptr %a243, align 16
  br label %sw.epilog

sw.bb244:                                         ; preds = %for.body
  %121 = load ptr, ptr %args.addr, align 8
  %gp_offset_p245 = getelementptr inbounds %struct.__va_list_tag, ptr %121, i32 0, i32 0
  %gp_offset246 = load i32, ptr %gp_offset_p245, align 8
  %fits_in_gp247 = icmp ule i32 %gp_offset246, 40
  br i1 %fits_in_gp247, label %vaarg.in_reg248, label %vaarg.in_mem250

vaarg.in_reg248:                                  ; preds = %sw.bb244
  %122 = getelementptr inbounds %struct.__va_list_tag, ptr %121, i32 0, i32 3
  %reg_save_area249 = load ptr, ptr %122, align 8
  %123 = getelementptr i8, ptr %reg_save_area249, i32 %gp_offset246
  %124 = add i32 %gp_offset246, 8
  store i32 %124, ptr %gp_offset_p245, align 8
  br label %vaarg.end254

vaarg.in_mem250:                                  ; preds = %sw.bb244
  %overflow_arg_area_p251 = getelementptr inbounds %struct.__va_list_tag, ptr %121, i32 0, i32 2
  %overflow_arg_area252 = load ptr, ptr %overflow_arg_area_p251, align 8
  %overflow_arg_area.next253 = getelementptr i8, ptr %overflow_arg_area252, i32 8
  store ptr %overflow_arg_area.next253, ptr %overflow_arg_area_p251, align 8
  br label %vaarg.end254

vaarg.end254:                                     ; preds = %vaarg.in_mem250, %vaarg.in_reg248
  %vaarg.addr255 = phi ptr [ %123, %vaarg.in_reg248 ], [ %overflow_arg_area252, %vaarg.in_mem250 ]
  %125 = load i32, ptr %vaarg.addr255, align 4
  %conv256 = trunc i32 %125 to i8
  %126 = load ptr, ptr %ap, align 8
  %a257 = getelementptr inbounds %struct.argument, ptr %126, i32 0, i32 1
  store i8 %conv256, ptr %a257, align 16
  br label %sw.epilog

sw.bb258:                                         ; preds = %for.body
  %127 = load ptr, ptr %args.addr, align 8
  %gp_offset_p259 = getelementptr inbounds %struct.__va_list_tag, ptr %127, i32 0, i32 0
  %gp_offset260 = load i32, ptr %gp_offset_p259, align 8
  %fits_in_gp261 = icmp ule i32 %gp_offset260, 40
  br i1 %fits_in_gp261, label %vaarg.in_reg262, label %vaarg.in_mem264

vaarg.in_reg262:                                  ; preds = %sw.bb258
  %128 = getelementptr inbounds %struct.__va_list_tag, ptr %127, i32 0, i32 3
  %reg_save_area263 = load ptr, ptr %128, align 8
  %129 = getelementptr i8, ptr %reg_save_area263, i32 %gp_offset260
  %130 = add i32 %gp_offset260, 8
  store i32 %130, ptr %gp_offset_p259, align 8
  br label %vaarg.end268

vaarg.in_mem264:                                  ; preds = %sw.bb258
  %overflow_arg_area_p265 = getelementptr inbounds %struct.__va_list_tag, ptr %127, i32 0, i32 2
  %overflow_arg_area266 = load ptr, ptr %overflow_arg_area_p265, align 8
  %overflow_arg_area.next267 = getelementptr i8, ptr %overflow_arg_area266, i32 8
  store ptr %overflow_arg_area.next267, ptr %overflow_arg_area_p265, align 8
  br label %vaarg.end268

vaarg.end268:                                     ; preds = %vaarg.in_mem264, %vaarg.in_reg262
  %vaarg.addr269 = phi ptr [ %129, %vaarg.in_reg262 ], [ %overflow_arg_area266, %vaarg.in_mem264 ]
  %131 = load i64, ptr %vaarg.addr269, align 8
  %132 = load ptr, ptr %ap, align 8
  %a270 = getelementptr inbounds %struct.argument, ptr %132, i32 0, i32 1
  store i64 %131, ptr %a270, align 16
  br label %sw.epilog

sw.bb271:                                         ; preds = %for.body
  %133 = load ptr, ptr %args.addr, align 8
  %gp_offset_p272 = getelementptr inbounds %struct.__va_list_tag, ptr %133, i32 0, i32 0
  %gp_offset273 = load i32, ptr %gp_offset_p272, align 8
  %fits_in_gp274 = icmp ule i32 %gp_offset273, 40
  br i1 %fits_in_gp274, label %vaarg.in_reg275, label %vaarg.in_mem277

vaarg.in_reg275:                                  ; preds = %sw.bb271
  %134 = getelementptr inbounds %struct.__va_list_tag, ptr %133, i32 0, i32 3
  %reg_save_area276 = load ptr, ptr %134, align 8
  %135 = getelementptr i8, ptr %reg_save_area276, i32 %gp_offset273
  %136 = add i32 %gp_offset273, 8
  store i32 %136, ptr %gp_offset_p272, align 8
  br label %vaarg.end281

vaarg.in_mem277:                                  ; preds = %sw.bb271
  %overflow_arg_area_p278 = getelementptr inbounds %struct.__va_list_tag, ptr %133, i32 0, i32 2
  %overflow_arg_area279 = load ptr, ptr %overflow_arg_area_p278, align 8
  %overflow_arg_area.next280 = getelementptr i8, ptr %overflow_arg_area279, i32 8
  store ptr %overflow_arg_area.next280, ptr %overflow_arg_area_p278, align 8
  br label %vaarg.end281

vaarg.end281:                                     ; preds = %vaarg.in_mem277, %vaarg.in_reg275
  %vaarg.addr282 = phi ptr [ %135, %vaarg.in_reg275 ], [ %overflow_arg_area279, %vaarg.in_mem277 ]
  %137 = load i64, ptr %vaarg.addr282, align 8
  %138 = load ptr, ptr %ap, align 8
  %a283 = getelementptr inbounds %struct.argument, ptr %138, i32 0, i32 1
  store i64 %137, ptr %a283, align 16
  br label %sw.epilog

sw.bb284:                                         ; preds = %for.body
  %139 = load ptr, ptr %args.addr, align 8
  %gp_offset_p285 = getelementptr inbounds %struct.__va_list_tag, ptr %139, i32 0, i32 0
  %gp_offset286 = load i32, ptr %gp_offset_p285, align 8
  %fits_in_gp287 = icmp ule i32 %gp_offset286, 40
  br i1 %fits_in_gp287, label %vaarg.in_reg288, label %vaarg.in_mem290

vaarg.in_reg288:                                  ; preds = %sw.bb284
  %140 = getelementptr inbounds %struct.__va_list_tag, ptr %139, i32 0, i32 3
  %reg_save_area289 = load ptr, ptr %140, align 8
  %141 = getelementptr i8, ptr %reg_save_area289, i32 %gp_offset286
  %142 = add i32 %gp_offset286, 8
  store i32 %142, ptr %gp_offset_p285, align 8
  br label %vaarg.end294

vaarg.in_mem290:                                  ; preds = %sw.bb284
  %overflow_arg_area_p291 = getelementptr inbounds %struct.__va_list_tag, ptr %139, i32 0, i32 2
  %overflow_arg_area292 = load ptr, ptr %overflow_arg_area_p291, align 8
  %overflow_arg_area.next293 = getelementptr i8, ptr %overflow_arg_area292, i32 8
  store ptr %overflow_arg_area.next293, ptr %overflow_arg_area_p291, align 8
  br label %vaarg.end294

vaarg.end294:                                     ; preds = %vaarg.in_mem290, %vaarg.in_reg288
  %vaarg.addr295 = phi ptr [ %141, %vaarg.in_reg288 ], [ %overflow_arg_area292, %vaarg.in_mem290 ]
  %143 = load i64, ptr %vaarg.addr295, align 8
  %144 = load ptr, ptr %ap, align 8
  %a296 = getelementptr inbounds %struct.argument, ptr %144, i32 0, i32 1
  store i64 %143, ptr %a296, align 16
  br label %sw.epilog

sw.bb297:                                         ; preds = %for.body
  %145 = load ptr, ptr %args.addr, align 8
  %gp_offset_p298 = getelementptr inbounds %struct.__va_list_tag, ptr %145, i32 0, i32 0
  %gp_offset299 = load i32, ptr %gp_offset_p298, align 8
  %fits_in_gp300 = icmp ule i32 %gp_offset299, 40
  br i1 %fits_in_gp300, label %vaarg.in_reg301, label %vaarg.in_mem303

vaarg.in_reg301:                                  ; preds = %sw.bb297
  %146 = getelementptr inbounds %struct.__va_list_tag, ptr %145, i32 0, i32 3
  %reg_save_area302 = load ptr, ptr %146, align 8
  %147 = getelementptr i8, ptr %reg_save_area302, i32 %gp_offset299
  %148 = add i32 %gp_offset299, 8
  store i32 %148, ptr %gp_offset_p298, align 8
  br label %vaarg.end307

vaarg.in_mem303:                                  ; preds = %sw.bb297
  %overflow_arg_area_p304 = getelementptr inbounds %struct.__va_list_tag, ptr %145, i32 0, i32 2
  %overflow_arg_area305 = load ptr, ptr %overflow_arg_area_p304, align 8
  %overflow_arg_area.next306 = getelementptr i8, ptr %overflow_arg_area305, i32 8
  store ptr %overflow_arg_area.next306, ptr %overflow_arg_area_p304, align 8
  br label %vaarg.end307

vaarg.end307:                                     ; preds = %vaarg.in_mem303, %vaarg.in_reg301
  %vaarg.addr308 = phi ptr [ %147, %vaarg.in_reg301 ], [ %overflow_arg_area305, %vaarg.in_mem303 ]
  %149 = load i64, ptr %vaarg.addr308, align 8
  %150 = load ptr, ptr %ap, align 8
  %a309 = getelementptr inbounds %struct.argument, ptr %150, i32 0, i32 1
  store i64 %149, ptr %a309, align 16
  br label %sw.epilog

sw.bb310:                                         ; preds = %for.body
  %151 = load ptr, ptr %args.addr, align 8
  %gp_offset_p311 = getelementptr inbounds %struct.__va_list_tag, ptr %151, i32 0, i32 0
  %gp_offset312 = load i32, ptr %gp_offset_p311, align 8
  %fits_in_gp313 = icmp ule i32 %gp_offset312, 40
  br i1 %fits_in_gp313, label %vaarg.in_reg314, label %vaarg.in_mem316

vaarg.in_reg314:                                  ; preds = %sw.bb310
  %152 = getelementptr inbounds %struct.__va_list_tag, ptr %151, i32 0, i32 3
  %reg_save_area315 = load ptr, ptr %152, align 8
  %153 = getelementptr i8, ptr %reg_save_area315, i32 %gp_offset312
  %154 = add i32 %gp_offset312, 8
  store i32 %154, ptr %gp_offset_p311, align 8
  br label %vaarg.end320

vaarg.in_mem316:                                  ; preds = %sw.bb310
  %overflow_arg_area_p317 = getelementptr inbounds %struct.__va_list_tag, ptr %151, i32 0, i32 2
  %overflow_arg_area318 = load ptr, ptr %overflow_arg_area_p317, align 8
  %overflow_arg_area.next319 = getelementptr i8, ptr %overflow_arg_area318, i32 8
  store ptr %overflow_arg_area.next319, ptr %overflow_arg_area_p317, align 8
  br label %vaarg.end320

vaarg.end320:                                     ; preds = %vaarg.in_mem316, %vaarg.in_reg314
  %vaarg.addr321 = phi ptr [ %153, %vaarg.in_reg314 ], [ %overflow_arg_area318, %vaarg.in_mem316 ]
  %155 = load i64, ptr %vaarg.addr321, align 8
  %156 = load ptr, ptr %ap, align 8
  %a322 = getelementptr inbounds %struct.argument, ptr %156, i32 0, i32 1
  store i64 %155, ptr %a322, align 16
  br label %sw.epilog

sw.bb323:                                         ; preds = %for.body
  %157 = load ptr, ptr %args.addr, align 8
  %gp_offset_p324 = getelementptr inbounds %struct.__va_list_tag, ptr %157, i32 0, i32 0
  %gp_offset325 = load i32, ptr %gp_offset_p324, align 8
  %fits_in_gp326 = icmp ule i32 %gp_offset325, 40
  br i1 %fits_in_gp326, label %vaarg.in_reg327, label %vaarg.in_mem329

vaarg.in_reg327:                                  ; preds = %sw.bb323
  %158 = getelementptr inbounds %struct.__va_list_tag, ptr %157, i32 0, i32 3
  %reg_save_area328 = load ptr, ptr %158, align 8
  %159 = getelementptr i8, ptr %reg_save_area328, i32 %gp_offset325
  %160 = add i32 %gp_offset325, 8
  store i32 %160, ptr %gp_offset_p324, align 8
  br label %vaarg.end333

vaarg.in_mem329:                                  ; preds = %sw.bb323
  %overflow_arg_area_p330 = getelementptr inbounds %struct.__va_list_tag, ptr %157, i32 0, i32 2
  %overflow_arg_area331 = load ptr, ptr %overflow_arg_area_p330, align 8
  %overflow_arg_area.next332 = getelementptr i8, ptr %overflow_arg_area331, i32 8
  store ptr %overflow_arg_area.next332, ptr %overflow_arg_area_p330, align 8
  br label %vaarg.end333

vaarg.end333:                                     ; preds = %vaarg.in_mem329, %vaarg.in_reg327
  %vaarg.addr334 = phi ptr [ %159, %vaarg.in_reg327 ], [ %overflow_arg_area331, %vaarg.in_mem329 ]
  %161 = load i64, ptr %vaarg.addr334, align 8
  %162 = load ptr, ptr %ap, align 8
  %a335 = getelementptr inbounds %struct.argument, ptr %162, i32 0, i32 1
  store i64 %161, ptr %a335, align 16
  br label %sw.epilog

sw.bb336:                                         ; preds = %for.body
  %163 = load ptr, ptr %args.addr, align 8
  %fp_offset_p = getelementptr inbounds %struct.__va_list_tag, ptr %163, i32 0, i32 1
  %fp_offset = load i32, ptr %fp_offset_p, align 4
  %fits_in_fp = icmp ule i32 %fp_offset, 160
  br i1 %fits_in_fp, label %vaarg.in_reg337, label %vaarg.in_mem339

vaarg.in_reg337:                                  ; preds = %sw.bb336
  %164 = getelementptr inbounds %struct.__va_list_tag, ptr %163, i32 0, i32 3
  %reg_save_area338 = load ptr, ptr %164, align 8
  %165 = getelementptr i8, ptr %reg_save_area338, i32 %fp_offset
  %166 = add i32 %fp_offset, 16
  store i32 %166, ptr %fp_offset_p, align 4
  br label %vaarg.end343

vaarg.in_mem339:                                  ; preds = %sw.bb336
  %overflow_arg_area_p340 = getelementptr inbounds %struct.__va_list_tag, ptr %163, i32 0, i32 2
  %overflow_arg_area341 = load ptr, ptr %overflow_arg_area_p340, align 8
  %overflow_arg_area.next342 = getelementptr i8, ptr %overflow_arg_area341, i32 8
  store ptr %overflow_arg_area.next342, ptr %overflow_arg_area_p340, align 8
  br label %vaarg.end343

vaarg.end343:                                     ; preds = %vaarg.in_mem339, %vaarg.in_reg337
  %vaarg.addr344 = phi ptr [ %165, %vaarg.in_reg337 ], [ %overflow_arg_area341, %vaarg.in_mem339 ]
  %167 = load double, ptr %vaarg.addr344, align 8
  %168 = load ptr, ptr %ap, align 8
  %a345 = getelementptr inbounds %struct.argument, ptr %168, i32 0, i32 1
  store double %167, ptr %a345, align 16
  br label %sw.epilog

sw.bb346:                                         ; preds = %for.body
  %169 = load ptr, ptr %args.addr, align 8
  %overflow_arg_area_p347 = getelementptr inbounds %struct.__va_list_tag, ptr %169, i32 0, i32 2
  %overflow_arg_area348 = load ptr, ptr %overflow_arg_area_p347, align 8
  %170 = getelementptr inbounds i8, ptr %overflow_arg_area348, i32 15
  %overflow_arg_area348.aligned = call ptr @llvm.ptrmask.p0.i64(ptr %170, i64 -16)
  %overflow_arg_area.next349 = getelementptr i8, ptr %overflow_arg_area348.aligned, i32 16
  store ptr %overflow_arg_area.next349, ptr %overflow_arg_area_p347, align 8
  %171 = load x86_fp80, ptr %overflow_arg_area348.aligned, align 16
  %172 = load ptr, ptr %ap, align 8
  %a350 = getelementptr inbounds %struct.argument, ptr %172, i32 0, i32 1
  store x86_fp80 %171, ptr %a350, align 16
  br label %sw.epilog

sw.bb351:                                         ; preds = %for.body
  %173 = load ptr, ptr %args.addr, align 8
  %gp_offset_p352 = getelementptr inbounds %struct.__va_list_tag, ptr %173, i32 0, i32 0
  %gp_offset353 = load i32, ptr %gp_offset_p352, align 8
  %fits_in_gp354 = icmp ule i32 %gp_offset353, 40
  br i1 %fits_in_gp354, label %vaarg.in_reg355, label %vaarg.in_mem357

vaarg.in_reg355:                                  ; preds = %sw.bb351
  %174 = getelementptr inbounds %struct.__va_list_tag, ptr %173, i32 0, i32 3
  %reg_save_area356 = load ptr, ptr %174, align 8
  %175 = getelementptr i8, ptr %reg_save_area356, i32 %gp_offset353
  %176 = add i32 %gp_offset353, 8
  store i32 %176, ptr %gp_offset_p352, align 8
  br label %vaarg.end361

vaarg.in_mem357:                                  ; preds = %sw.bb351
  %overflow_arg_area_p358 = getelementptr inbounds %struct.__va_list_tag, ptr %173, i32 0, i32 2
  %overflow_arg_area359 = load ptr, ptr %overflow_arg_area_p358, align 8
  %overflow_arg_area.next360 = getelementptr i8, ptr %overflow_arg_area359, i32 8
  store ptr %overflow_arg_area.next360, ptr %overflow_arg_area_p358, align 8
  br label %vaarg.end361

vaarg.end361:                                     ; preds = %vaarg.in_mem357, %vaarg.in_reg355
  %vaarg.addr362 = phi ptr [ %175, %vaarg.in_reg355 ], [ %overflow_arg_area359, %vaarg.in_mem357 ]
  %177 = load i32, ptr %vaarg.addr362, align 4
  %178 = load ptr, ptr %ap, align 8
  %a363 = getelementptr inbounds %struct.argument, ptr %178, i32 0, i32 1
  store i32 %177, ptr %a363, align 16
  br label %sw.epilog

sw.bb364:                                         ; preds = %for.body
  %179 = load ptr, ptr %args.addr, align 8
  %gp_offset_p365 = getelementptr inbounds %struct.__va_list_tag, ptr %179, i32 0, i32 0
  %gp_offset366 = load i32, ptr %gp_offset_p365, align 8
  %fits_in_gp367 = icmp ule i32 %gp_offset366, 40
  br i1 %fits_in_gp367, label %vaarg.in_reg368, label %vaarg.in_mem370

vaarg.in_reg368:                                  ; preds = %sw.bb364
  %180 = getelementptr inbounds %struct.__va_list_tag, ptr %179, i32 0, i32 3
  %reg_save_area369 = load ptr, ptr %180, align 8
  %181 = getelementptr i8, ptr %reg_save_area369, i32 %gp_offset366
  %182 = add i32 %gp_offset366, 8
  store i32 %182, ptr %gp_offset_p365, align 8
  br label %vaarg.end374

vaarg.in_mem370:                                  ; preds = %sw.bb364
  %overflow_arg_area_p371 = getelementptr inbounds %struct.__va_list_tag, ptr %179, i32 0, i32 2
  %overflow_arg_area372 = load ptr, ptr %overflow_arg_area_p371, align 8
  %overflow_arg_area.next373 = getelementptr i8, ptr %overflow_arg_area372, i32 8
  store ptr %overflow_arg_area.next373, ptr %overflow_arg_area_p371, align 8
  br label %vaarg.end374

vaarg.end374:                                     ; preds = %vaarg.in_mem370, %vaarg.in_reg368
  %vaarg.addr375 = phi ptr [ %181, %vaarg.in_reg368 ], [ %overflow_arg_area372, %vaarg.in_mem370 ]
  %183 = load i32, ptr %vaarg.addr375, align 4
  %184 = load ptr, ptr %ap, align 8
  %a376 = getelementptr inbounds %struct.argument, ptr %184, i32 0, i32 1
  store i32 %183, ptr %a376, align 16
  br label %sw.epilog

sw.bb377:                                         ; preds = %for.body
  %185 = load ptr, ptr %args.addr, align 8
  %gp_offset_p378 = getelementptr inbounds %struct.__va_list_tag, ptr %185, i32 0, i32 0
  %gp_offset379 = load i32, ptr %gp_offset_p378, align 8
  %fits_in_gp380 = icmp ule i32 %gp_offset379, 40
  br i1 %fits_in_gp380, label %vaarg.in_reg381, label %vaarg.in_mem383

vaarg.in_reg381:                                  ; preds = %sw.bb377
  %186 = getelementptr inbounds %struct.__va_list_tag, ptr %185, i32 0, i32 3
  %reg_save_area382 = load ptr, ptr %186, align 8
  %187 = getelementptr i8, ptr %reg_save_area382, i32 %gp_offset379
  %188 = add i32 %gp_offset379, 8
  store i32 %188, ptr %gp_offset_p378, align 8
  br label %vaarg.end387

vaarg.in_mem383:                                  ; preds = %sw.bb377
  %overflow_arg_area_p384 = getelementptr inbounds %struct.__va_list_tag, ptr %185, i32 0, i32 2
  %overflow_arg_area385 = load ptr, ptr %overflow_arg_area_p384, align 8
  %overflow_arg_area.next386 = getelementptr i8, ptr %overflow_arg_area385, i32 8
  store ptr %overflow_arg_area.next386, ptr %overflow_arg_area_p384, align 8
  br label %vaarg.end387

vaarg.end387:                                     ; preds = %vaarg.in_mem383, %vaarg.in_reg381
  %vaarg.addr388 = phi ptr [ %187, %vaarg.in_reg381 ], [ %overflow_arg_area385, %vaarg.in_mem383 ]
  %189 = load ptr, ptr %vaarg.addr388, align 8
  %190 = load ptr, ptr %ap, align 8
  %a389 = getelementptr inbounds %struct.argument, ptr %190, i32 0, i32 1
  store ptr %189, ptr %a389, align 16
  %191 = load ptr, ptr %ap, align 8
  %a390 = getelementptr inbounds %struct.argument, ptr %191, i32 0, i32 1
  %192 = load ptr, ptr %a390, align 16
  %cmp391 = icmp eq ptr %192, null
  br i1 %cmp391, label %if.then, label %if.end

if.then:                                          ; preds = %vaarg.end387
  %193 = load ptr, ptr %ap, align 8
  %a393 = getelementptr inbounds %struct.argument, ptr %193, i32 0, i32 1
  store ptr @.str.156, ptr %a393, align 16
  br label %if.end

if.end:                                           ; preds = %if.then, %vaarg.end387
  br label %sw.epilog

sw.bb394:                                         ; preds = %for.body
  %194 = load ptr, ptr %args.addr, align 8
  %gp_offset_p395 = getelementptr inbounds %struct.__va_list_tag, ptr %194, i32 0, i32 0
  %gp_offset396 = load i32, ptr %gp_offset_p395, align 8
  %fits_in_gp397 = icmp ule i32 %gp_offset396, 40
  br i1 %fits_in_gp397, label %vaarg.in_reg398, label %vaarg.in_mem400

vaarg.in_reg398:                                  ; preds = %sw.bb394
  %195 = getelementptr inbounds %struct.__va_list_tag, ptr %194, i32 0, i32 3
  %reg_save_area399 = load ptr, ptr %195, align 8
  %196 = getelementptr i8, ptr %reg_save_area399, i32 %gp_offset396
  %197 = add i32 %gp_offset396, 8
  store i32 %197, ptr %gp_offset_p395, align 8
  br label %vaarg.end404

vaarg.in_mem400:                                  ; preds = %sw.bb394
  %overflow_arg_area_p401 = getelementptr inbounds %struct.__va_list_tag, ptr %194, i32 0, i32 2
  %overflow_arg_area402 = load ptr, ptr %overflow_arg_area_p401, align 8
  %overflow_arg_area.next403 = getelementptr i8, ptr %overflow_arg_area402, i32 8
  store ptr %overflow_arg_area.next403, ptr %overflow_arg_area_p401, align 8
  br label %vaarg.end404

vaarg.end404:                                     ; preds = %vaarg.in_mem400, %vaarg.in_reg398
  %vaarg.addr405 = phi ptr [ %196, %vaarg.in_reg398 ], [ %overflow_arg_area402, %vaarg.in_mem400 ]
  %198 = load ptr, ptr %vaarg.addr405, align 8
  %199 = load ptr, ptr %ap, align 8
  %a406 = getelementptr inbounds %struct.argument, ptr %199, i32 0, i32 1
  store ptr %198, ptr %a406, align 16
  %200 = load ptr, ptr %ap, align 8
  %a407 = getelementptr inbounds %struct.argument, ptr %200, i32 0, i32 1
  %201 = load ptr, ptr %a407, align 16
  %cmp408 = icmp eq ptr %201, null
  br i1 %cmp408, label %if.then410, label %if.end412

if.then410:                                       ; preds = %vaarg.end404
  %202 = load ptr, ptr %ap, align 8
  %a411 = getelementptr inbounds %struct.argument, ptr %202, i32 0, i32 1
  store ptr @printf_fetchargs.wide_null_string, ptr %a411, align 16
  br label %if.end412

if.end412:                                        ; preds = %if.then410, %vaarg.end404
  br label %sw.epilog

sw.bb413:                                         ; preds = %for.body
  %203 = load ptr, ptr %args.addr, align 8
  %gp_offset_p414 = getelementptr inbounds %struct.__va_list_tag, ptr %203, i32 0, i32 0
  %gp_offset415 = load i32, ptr %gp_offset_p414, align 8
  %fits_in_gp416 = icmp ule i32 %gp_offset415, 40
  br i1 %fits_in_gp416, label %vaarg.in_reg417, label %vaarg.in_mem419

vaarg.in_reg417:                                  ; preds = %sw.bb413
  %204 = getelementptr inbounds %struct.__va_list_tag, ptr %203, i32 0, i32 3
  %reg_save_area418 = load ptr, ptr %204, align 8
  %205 = getelementptr i8, ptr %reg_save_area418, i32 %gp_offset415
  %206 = add i32 %gp_offset415, 8
  store i32 %206, ptr %gp_offset_p414, align 8
  br label %vaarg.end423

vaarg.in_mem419:                                  ; preds = %sw.bb413
  %overflow_arg_area_p420 = getelementptr inbounds %struct.__va_list_tag, ptr %203, i32 0, i32 2
  %overflow_arg_area421 = load ptr, ptr %overflow_arg_area_p420, align 8
  %overflow_arg_area.next422 = getelementptr i8, ptr %overflow_arg_area421, i32 8
  store ptr %overflow_arg_area.next422, ptr %overflow_arg_area_p420, align 8
  br label %vaarg.end423

vaarg.end423:                                     ; preds = %vaarg.in_mem419, %vaarg.in_reg417
  %vaarg.addr424 = phi ptr [ %205, %vaarg.in_reg417 ], [ %overflow_arg_area421, %vaarg.in_mem419 ]
  %207 = load ptr, ptr %vaarg.addr424, align 8
  %208 = load ptr, ptr %ap, align 8
  %a425 = getelementptr inbounds %struct.argument, ptr %208, i32 0, i32 1
  store ptr %207, ptr %a425, align 16
  br label %sw.epilog

sw.bb426:                                         ; preds = %for.body
  %209 = load ptr, ptr %args.addr, align 8
  %gp_offset_p427 = getelementptr inbounds %struct.__va_list_tag, ptr %209, i32 0, i32 0
  %gp_offset428 = load i32, ptr %gp_offset_p427, align 8
  %fits_in_gp429 = icmp ule i32 %gp_offset428, 40
  br i1 %fits_in_gp429, label %vaarg.in_reg430, label %vaarg.in_mem432

vaarg.in_reg430:                                  ; preds = %sw.bb426
  %210 = getelementptr inbounds %struct.__va_list_tag, ptr %209, i32 0, i32 3
  %reg_save_area431 = load ptr, ptr %210, align 8
  %211 = getelementptr i8, ptr %reg_save_area431, i32 %gp_offset428
  %212 = add i32 %gp_offset428, 8
  store i32 %212, ptr %gp_offset_p427, align 8
  br label %vaarg.end436

vaarg.in_mem432:                                  ; preds = %sw.bb426
  %overflow_arg_area_p433 = getelementptr inbounds %struct.__va_list_tag, ptr %209, i32 0, i32 2
  %overflow_arg_area434 = load ptr, ptr %overflow_arg_area_p433, align 8
  %overflow_arg_area.next435 = getelementptr i8, ptr %overflow_arg_area434, i32 8
  store ptr %overflow_arg_area.next435, ptr %overflow_arg_area_p433, align 8
  br label %vaarg.end436

vaarg.end436:                                     ; preds = %vaarg.in_mem432, %vaarg.in_reg430
  %vaarg.addr437 = phi ptr [ %211, %vaarg.in_reg430 ], [ %overflow_arg_area434, %vaarg.in_mem432 ]
  %213 = load ptr, ptr %vaarg.addr437, align 8
  %214 = load ptr, ptr %ap, align 8
  %a438 = getelementptr inbounds %struct.argument, ptr %214, i32 0, i32 1
  store ptr %213, ptr %a438, align 16
  br label %sw.epilog

sw.bb439:                                         ; preds = %for.body
  %215 = load ptr, ptr %args.addr, align 8
  %gp_offset_p440 = getelementptr inbounds %struct.__va_list_tag, ptr %215, i32 0, i32 0
  %gp_offset441 = load i32, ptr %gp_offset_p440, align 8
  %fits_in_gp442 = icmp ule i32 %gp_offset441, 40
  br i1 %fits_in_gp442, label %vaarg.in_reg443, label %vaarg.in_mem445

vaarg.in_reg443:                                  ; preds = %sw.bb439
  %216 = getelementptr inbounds %struct.__va_list_tag, ptr %215, i32 0, i32 3
  %reg_save_area444 = load ptr, ptr %216, align 8
  %217 = getelementptr i8, ptr %reg_save_area444, i32 %gp_offset441
  %218 = add i32 %gp_offset441, 8
  store i32 %218, ptr %gp_offset_p440, align 8
  br label %vaarg.end449

vaarg.in_mem445:                                  ; preds = %sw.bb439
  %overflow_arg_area_p446 = getelementptr inbounds %struct.__va_list_tag, ptr %215, i32 0, i32 2
  %overflow_arg_area447 = load ptr, ptr %overflow_arg_area_p446, align 8
  %overflow_arg_area.next448 = getelementptr i8, ptr %overflow_arg_area447, i32 8
  store ptr %overflow_arg_area.next448, ptr %overflow_arg_area_p446, align 8
  br label %vaarg.end449

vaarg.end449:                                     ; preds = %vaarg.in_mem445, %vaarg.in_reg443
  %vaarg.addr450 = phi ptr [ %217, %vaarg.in_reg443 ], [ %overflow_arg_area447, %vaarg.in_mem445 ]
  %219 = load ptr, ptr %vaarg.addr450, align 8
  %220 = load ptr, ptr %ap, align 8
  %a451 = getelementptr inbounds %struct.argument, ptr %220, i32 0, i32 1
  store ptr %219, ptr %a451, align 16
  br label %sw.epilog

sw.bb452:                                         ; preds = %for.body
  %221 = load ptr, ptr %args.addr, align 8
  %gp_offset_p453 = getelementptr inbounds %struct.__va_list_tag, ptr %221, i32 0, i32 0
  %gp_offset454 = load i32, ptr %gp_offset_p453, align 8
  %fits_in_gp455 = icmp ule i32 %gp_offset454, 40
  br i1 %fits_in_gp455, label %vaarg.in_reg456, label %vaarg.in_mem458

vaarg.in_reg456:                                  ; preds = %sw.bb452
  %222 = getelementptr inbounds %struct.__va_list_tag, ptr %221, i32 0, i32 3
  %reg_save_area457 = load ptr, ptr %222, align 8
  %223 = getelementptr i8, ptr %reg_save_area457, i32 %gp_offset454
  %224 = add i32 %gp_offset454, 8
  store i32 %224, ptr %gp_offset_p453, align 8
  br label %vaarg.end462

vaarg.in_mem458:                                  ; preds = %sw.bb452
  %overflow_arg_area_p459 = getelementptr inbounds %struct.__va_list_tag, ptr %221, i32 0, i32 2
  %overflow_arg_area460 = load ptr, ptr %overflow_arg_area_p459, align 8
  %overflow_arg_area.next461 = getelementptr i8, ptr %overflow_arg_area460, i32 8
  store ptr %overflow_arg_area.next461, ptr %overflow_arg_area_p459, align 8
  br label %vaarg.end462

vaarg.end462:                                     ; preds = %vaarg.in_mem458, %vaarg.in_reg456
  %vaarg.addr463 = phi ptr [ %223, %vaarg.in_reg456 ], [ %overflow_arg_area460, %vaarg.in_mem458 ]
  %225 = load ptr, ptr %vaarg.addr463, align 8
  %226 = load ptr, ptr %ap, align 8
  %a464 = getelementptr inbounds %struct.argument, ptr %226, i32 0, i32 1
  store ptr %225, ptr %a464, align 16
  br label %sw.epilog

sw.bb465:                                         ; preds = %for.body
  %227 = load ptr, ptr %args.addr, align 8
  %gp_offset_p466 = getelementptr inbounds %struct.__va_list_tag, ptr %227, i32 0, i32 0
  %gp_offset467 = load i32, ptr %gp_offset_p466, align 8
  %fits_in_gp468 = icmp ule i32 %gp_offset467, 40
  br i1 %fits_in_gp468, label %vaarg.in_reg469, label %vaarg.in_mem471

vaarg.in_reg469:                                  ; preds = %sw.bb465
  %228 = getelementptr inbounds %struct.__va_list_tag, ptr %227, i32 0, i32 3
  %reg_save_area470 = load ptr, ptr %228, align 8
  %229 = getelementptr i8, ptr %reg_save_area470, i32 %gp_offset467
  %230 = add i32 %gp_offset467, 8
  store i32 %230, ptr %gp_offset_p466, align 8
  br label %vaarg.end475

vaarg.in_mem471:                                  ; preds = %sw.bb465
  %overflow_arg_area_p472 = getelementptr inbounds %struct.__va_list_tag, ptr %227, i32 0, i32 2
  %overflow_arg_area473 = load ptr, ptr %overflow_arg_area_p472, align 8
  %overflow_arg_area.next474 = getelementptr i8, ptr %overflow_arg_area473, i32 8
  store ptr %overflow_arg_area.next474, ptr %overflow_arg_area_p472, align 8
  br label %vaarg.end475

vaarg.end475:                                     ; preds = %vaarg.in_mem471, %vaarg.in_reg469
  %vaarg.addr476 = phi ptr [ %229, %vaarg.in_reg469 ], [ %overflow_arg_area473, %vaarg.in_mem471 ]
  %231 = load ptr, ptr %vaarg.addr476, align 8
  %232 = load ptr, ptr %ap, align 8
  %a477 = getelementptr inbounds %struct.argument, ptr %232, i32 0, i32 1
  store ptr %231, ptr %a477, align 16
  br label %sw.epilog

sw.bb478:                                         ; preds = %for.body
  %233 = load ptr, ptr %args.addr, align 8
  %gp_offset_p479 = getelementptr inbounds %struct.__va_list_tag, ptr %233, i32 0, i32 0
  %gp_offset480 = load i32, ptr %gp_offset_p479, align 8
  %fits_in_gp481 = icmp ule i32 %gp_offset480, 40
  br i1 %fits_in_gp481, label %vaarg.in_reg482, label %vaarg.in_mem484

vaarg.in_reg482:                                  ; preds = %sw.bb478
  %234 = getelementptr inbounds %struct.__va_list_tag, ptr %233, i32 0, i32 3
  %reg_save_area483 = load ptr, ptr %234, align 8
  %235 = getelementptr i8, ptr %reg_save_area483, i32 %gp_offset480
  %236 = add i32 %gp_offset480, 8
  store i32 %236, ptr %gp_offset_p479, align 8
  br label %vaarg.end488

vaarg.in_mem484:                                  ; preds = %sw.bb478
  %overflow_arg_area_p485 = getelementptr inbounds %struct.__va_list_tag, ptr %233, i32 0, i32 2
  %overflow_arg_area486 = load ptr, ptr %overflow_arg_area_p485, align 8
  %overflow_arg_area.next487 = getelementptr i8, ptr %overflow_arg_area486, i32 8
  store ptr %overflow_arg_area.next487, ptr %overflow_arg_area_p485, align 8
  br label %vaarg.end488

vaarg.end488:                                     ; preds = %vaarg.in_mem484, %vaarg.in_reg482
  %vaarg.addr489 = phi ptr [ %235, %vaarg.in_reg482 ], [ %overflow_arg_area486, %vaarg.in_mem484 ]
  %237 = load ptr, ptr %vaarg.addr489, align 8
  %238 = load ptr, ptr %ap, align 8
  %a490 = getelementptr inbounds %struct.argument, ptr %238, i32 0, i32 1
  store ptr %237, ptr %a490, align 16
  br label %sw.epilog

sw.bb491:                                         ; preds = %for.body
  %239 = load ptr, ptr %args.addr, align 8
  %gp_offset_p492 = getelementptr inbounds %struct.__va_list_tag, ptr %239, i32 0, i32 0
  %gp_offset493 = load i32, ptr %gp_offset_p492, align 8
  %fits_in_gp494 = icmp ule i32 %gp_offset493, 40
  br i1 %fits_in_gp494, label %vaarg.in_reg495, label %vaarg.in_mem497

vaarg.in_reg495:                                  ; preds = %sw.bb491
  %240 = getelementptr inbounds %struct.__va_list_tag, ptr %239, i32 0, i32 3
  %reg_save_area496 = load ptr, ptr %240, align 8
  %241 = getelementptr i8, ptr %reg_save_area496, i32 %gp_offset493
  %242 = add i32 %gp_offset493, 8
  store i32 %242, ptr %gp_offset_p492, align 8
  br label %vaarg.end501

vaarg.in_mem497:                                  ; preds = %sw.bb491
  %overflow_arg_area_p498 = getelementptr inbounds %struct.__va_list_tag, ptr %239, i32 0, i32 2
  %overflow_arg_area499 = load ptr, ptr %overflow_arg_area_p498, align 8
  %overflow_arg_area.next500 = getelementptr i8, ptr %overflow_arg_area499, i32 8
  store ptr %overflow_arg_area.next500, ptr %overflow_arg_area_p498, align 8
  br label %vaarg.end501

vaarg.end501:                                     ; preds = %vaarg.in_mem497, %vaarg.in_reg495
  %vaarg.addr502 = phi ptr [ %241, %vaarg.in_reg495 ], [ %overflow_arg_area499, %vaarg.in_mem497 ]
  %243 = load ptr, ptr %vaarg.addr502, align 8
  %244 = load ptr, ptr %ap, align 8
  %a503 = getelementptr inbounds %struct.argument, ptr %244, i32 0, i32 1
  store ptr %243, ptr %a503, align 16
  br label %sw.epilog

sw.bb504:                                         ; preds = %for.body
  %245 = load ptr, ptr %args.addr, align 8
  %gp_offset_p505 = getelementptr inbounds %struct.__va_list_tag, ptr %245, i32 0, i32 0
  %gp_offset506 = load i32, ptr %gp_offset_p505, align 8
  %fits_in_gp507 = icmp ule i32 %gp_offset506, 40
  br i1 %fits_in_gp507, label %vaarg.in_reg508, label %vaarg.in_mem510

vaarg.in_reg508:                                  ; preds = %sw.bb504
  %246 = getelementptr inbounds %struct.__va_list_tag, ptr %245, i32 0, i32 3
  %reg_save_area509 = load ptr, ptr %246, align 8
  %247 = getelementptr i8, ptr %reg_save_area509, i32 %gp_offset506
  %248 = add i32 %gp_offset506, 8
  store i32 %248, ptr %gp_offset_p505, align 8
  br label %vaarg.end514

vaarg.in_mem510:                                  ; preds = %sw.bb504
  %overflow_arg_area_p511 = getelementptr inbounds %struct.__va_list_tag, ptr %245, i32 0, i32 2
  %overflow_arg_area512 = load ptr, ptr %overflow_arg_area_p511, align 8
  %overflow_arg_area.next513 = getelementptr i8, ptr %overflow_arg_area512, i32 8
  store ptr %overflow_arg_area.next513, ptr %overflow_arg_area_p511, align 8
  br label %vaarg.end514

vaarg.end514:                                     ; preds = %vaarg.in_mem510, %vaarg.in_reg508
  %vaarg.addr515 = phi ptr [ %247, %vaarg.in_reg508 ], [ %overflow_arg_area512, %vaarg.in_mem510 ]
  %249 = load ptr, ptr %vaarg.addr515, align 8
  %250 = load ptr, ptr %ap, align 8
  %a516 = getelementptr inbounds %struct.argument, ptr %250, i32 0, i32 1
  store ptr %249, ptr %a516, align 16
  br label %sw.epilog

sw.bb517:                                         ; preds = %for.body
  %251 = load ptr, ptr %args.addr, align 8
  %gp_offset_p518 = getelementptr inbounds %struct.__va_list_tag, ptr %251, i32 0, i32 0
  %gp_offset519 = load i32, ptr %gp_offset_p518, align 8
  %fits_in_gp520 = icmp ule i32 %gp_offset519, 40
  br i1 %fits_in_gp520, label %vaarg.in_reg521, label %vaarg.in_mem523

vaarg.in_reg521:                                  ; preds = %sw.bb517
  %252 = getelementptr inbounds %struct.__va_list_tag, ptr %251, i32 0, i32 3
  %reg_save_area522 = load ptr, ptr %252, align 8
  %253 = getelementptr i8, ptr %reg_save_area522, i32 %gp_offset519
  %254 = add i32 %gp_offset519, 8
  store i32 %254, ptr %gp_offset_p518, align 8
  br label %vaarg.end527

vaarg.in_mem523:                                  ; preds = %sw.bb517
  %overflow_arg_area_p524 = getelementptr inbounds %struct.__va_list_tag, ptr %251, i32 0, i32 2
  %overflow_arg_area525 = load ptr, ptr %overflow_arg_area_p524, align 8
  %overflow_arg_area.next526 = getelementptr i8, ptr %overflow_arg_area525, i32 8
  store ptr %overflow_arg_area.next526, ptr %overflow_arg_area_p524, align 8
  br label %vaarg.end527

vaarg.end527:                                     ; preds = %vaarg.in_mem523, %vaarg.in_reg521
  %vaarg.addr528 = phi ptr [ %253, %vaarg.in_reg521 ], [ %overflow_arg_area525, %vaarg.in_mem523 ]
  %255 = load ptr, ptr %vaarg.addr528, align 8
  %256 = load ptr, ptr %ap, align 8
  %a529 = getelementptr inbounds %struct.argument, ptr %256, i32 0, i32 1
  store ptr %255, ptr %a529, align 16
  br label %sw.epilog

sw.bb530:                                         ; preds = %for.body
  %257 = load ptr, ptr %args.addr, align 8
  %gp_offset_p531 = getelementptr inbounds %struct.__va_list_tag, ptr %257, i32 0, i32 0
  %gp_offset532 = load i32, ptr %gp_offset_p531, align 8
  %fits_in_gp533 = icmp ule i32 %gp_offset532, 40
  br i1 %fits_in_gp533, label %vaarg.in_reg534, label %vaarg.in_mem536

vaarg.in_reg534:                                  ; preds = %sw.bb530
  %258 = getelementptr inbounds %struct.__va_list_tag, ptr %257, i32 0, i32 3
  %reg_save_area535 = load ptr, ptr %258, align 8
  %259 = getelementptr i8, ptr %reg_save_area535, i32 %gp_offset532
  %260 = add i32 %gp_offset532, 8
  store i32 %260, ptr %gp_offset_p531, align 8
  br label %vaarg.end540

vaarg.in_mem536:                                  ; preds = %sw.bb530
  %overflow_arg_area_p537 = getelementptr inbounds %struct.__va_list_tag, ptr %257, i32 0, i32 2
  %overflow_arg_area538 = load ptr, ptr %overflow_arg_area_p537, align 8
  %overflow_arg_area.next539 = getelementptr i8, ptr %overflow_arg_area538, i32 8
  store ptr %overflow_arg_area.next539, ptr %overflow_arg_area_p537, align 8
  br label %vaarg.end540

vaarg.end540:                                     ; preds = %vaarg.in_mem536, %vaarg.in_reg534
  %vaarg.addr541 = phi ptr [ %259, %vaarg.in_reg534 ], [ %overflow_arg_area538, %vaarg.in_mem536 ]
  %261 = load ptr, ptr %vaarg.addr541, align 8
  %262 = load ptr, ptr %ap, align 8
  %a542 = getelementptr inbounds %struct.argument, ptr %262, i32 0, i32 1
  store ptr %261, ptr %a542, align 16
  br label %sw.epilog

sw.bb543:                                         ; preds = %for.body
  %263 = load ptr, ptr %args.addr, align 8
  %gp_offset_p544 = getelementptr inbounds %struct.__va_list_tag, ptr %263, i32 0, i32 0
  %gp_offset545 = load i32, ptr %gp_offset_p544, align 8
  %fits_in_gp546 = icmp ule i32 %gp_offset545, 40
  br i1 %fits_in_gp546, label %vaarg.in_reg547, label %vaarg.in_mem549

vaarg.in_reg547:                                  ; preds = %sw.bb543
  %264 = getelementptr inbounds %struct.__va_list_tag, ptr %263, i32 0, i32 3
  %reg_save_area548 = load ptr, ptr %264, align 8
  %265 = getelementptr i8, ptr %reg_save_area548, i32 %gp_offset545
  %266 = add i32 %gp_offset545, 8
  store i32 %266, ptr %gp_offset_p544, align 8
  br label %vaarg.end553

vaarg.in_mem549:                                  ; preds = %sw.bb543
  %overflow_arg_area_p550 = getelementptr inbounds %struct.__va_list_tag, ptr %263, i32 0, i32 2
  %overflow_arg_area551 = load ptr, ptr %overflow_arg_area_p550, align 8
  %overflow_arg_area.next552 = getelementptr i8, ptr %overflow_arg_area551, i32 8
  store ptr %overflow_arg_area.next552, ptr %overflow_arg_area_p550, align 8
  br label %vaarg.end553

vaarg.end553:                                     ; preds = %vaarg.in_mem549, %vaarg.in_reg547
  %vaarg.addr554 = phi ptr [ %265, %vaarg.in_reg547 ], [ %overflow_arg_area551, %vaarg.in_mem549 ]
  %267 = load ptr, ptr %vaarg.addr554, align 8
  %268 = load ptr, ptr %ap, align 8
  %a555 = getelementptr inbounds %struct.argument, ptr %268, i32 0, i32 1
  store ptr %267, ptr %a555, align 16
  br label %sw.epilog

sw.bb556:                                         ; preds = %for.body
  %269 = load ptr, ptr %args.addr, align 8
  %gp_offset_p557 = getelementptr inbounds %struct.__va_list_tag, ptr %269, i32 0, i32 0
  %gp_offset558 = load i32, ptr %gp_offset_p557, align 8
  %fits_in_gp559 = icmp ule i32 %gp_offset558, 40
  br i1 %fits_in_gp559, label %vaarg.in_reg560, label %vaarg.in_mem562

vaarg.in_reg560:                                  ; preds = %sw.bb556
  %270 = getelementptr inbounds %struct.__va_list_tag, ptr %269, i32 0, i32 3
  %reg_save_area561 = load ptr, ptr %270, align 8
  %271 = getelementptr i8, ptr %reg_save_area561, i32 %gp_offset558
  %272 = add i32 %gp_offset558, 8
  store i32 %272, ptr %gp_offset_p557, align 8
  br label %vaarg.end566

vaarg.in_mem562:                                  ; preds = %sw.bb556
  %overflow_arg_area_p563 = getelementptr inbounds %struct.__va_list_tag, ptr %269, i32 0, i32 2
  %overflow_arg_area564 = load ptr, ptr %overflow_arg_area_p563, align 8
  %overflow_arg_area.next565 = getelementptr i8, ptr %overflow_arg_area564, i32 8
  store ptr %overflow_arg_area.next565, ptr %overflow_arg_area_p563, align 8
  br label %vaarg.end566

vaarg.end566:                                     ; preds = %vaarg.in_mem562, %vaarg.in_reg560
  %vaarg.addr567 = phi ptr [ %271, %vaarg.in_reg560 ], [ %overflow_arg_area564, %vaarg.in_mem562 ]
  %273 = load ptr, ptr %vaarg.addr567, align 8
  %274 = load ptr, ptr %ap, align 8
  %a568 = getelementptr inbounds %struct.argument, ptr %274, i32 0, i32 1
  store ptr %273, ptr %a568, align 16
  br label %sw.epilog

sw.bb569:                                         ; preds = %for.body
  %275 = load ptr, ptr %args.addr, align 8
  %gp_offset_p570 = getelementptr inbounds %struct.__va_list_tag, ptr %275, i32 0, i32 0
  %gp_offset571 = load i32, ptr %gp_offset_p570, align 8
  %fits_in_gp572 = icmp ule i32 %gp_offset571, 40
  br i1 %fits_in_gp572, label %vaarg.in_reg573, label %vaarg.in_mem575

vaarg.in_reg573:                                  ; preds = %sw.bb569
  %276 = getelementptr inbounds %struct.__va_list_tag, ptr %275, i32 0, i32 3
  %reg_save_area574 = load ptr, ptr %276, align 8
  %277 = getelementptr i8, ptr %reg_save_area574, i32 %gp_offset571
  %278 = add i32 %gp_offset571, 8
  store i32 %278, ptr %gp_offset_p570, align 8
  br label %vaarg.end579

vaarg.in_mem575:                                  ; preds = %sw.bb569
  %overflow_arg_area_p576 = getelementptr inbounds %struct.__va_list_tag, ptr %275, i32 0, i32 2
  %overflow_arg_area577 = load ptr, ptr %overflow_arg_area_p576, align 8
  %overflow_arg_area.next578 = getelementptr i8, ptr %overflow_arg_area577, i32 8
  store ptr %overflow_arg_area.next578, ptr %overflow_arg_area_p576, align 8
  br label %vaarg.end579

vaarg.end579:                                     ; preds = %vaarg.in_mem575, %vaarg.in_reg573
  %vaarg.addr580 = phi ptr [ %277, %vaarg.in_reg573 ], [ %overflow_arg_area577, %vaarg.in_mem575 ]
  %279 = load ptr, ptr %vaarg.addr580, align 8
  %280 = load ptr, ptr %ap, align 8
  %a581 = getelementptr inbounds %struct.argument, ptr %280, i32 0, i32 1
  store ptr %279, ptr %a581, align 16
  br label %sw.epilog

sw.bb582:                                         ; preds = %for.body
  %281 = load ptr, ptr %args.addr, align 8
  %gp_offset_p583 = getelementptr inbounds %struct.__va_list_tag, ptr %281, i32 0, i32 0
  %gp_offset584 = load i32, ptr %gp_offset_p583, align 8
  %fits_in_gp585 = icmp ule i32 %gp_offset584, 40
  br i1 %fits_in_gp585, label %vaarg.in_reg586, label %vaarg.in_mem588

vaarg.in_reg586:                                  ; preds = %sw.bb582
  %282 = getelementptr inbounds %struct.__va_list_tag, ptr %281, i32 0, i32 3
  %reg_save_area587 = load ptr, ptr %282, align 8
  %283 = getelementptr i8, ptr %reg_save_area587, i32 %gp_offset584
  %284 = add i32 %gp_offset584, 8
  store i32 %284, ptr %gp_offset_p583, align 8
  br label %vaarg.end592

vaarg.in_mem588:                                  ; preds = %sw.bb582
  %overflow_arg_area_p589 = getelementptr inbounds %struct.__va_list_tag, ptr %281, i32 0, i32 2
  %overflow_arg_area590 = load ptr, ptr %overflow_arg_area_p589, align 8
  %overflow_arg_area.next591 = getelementptr i8, ptr %overflow_arg_area590, i32 8
  store ptr %overflow_arg_area.next591, ptr %overflow_arg_area_p589, align 8
  br label %vaarg.end592

vaarg.end592:                                     ; preds = %vaarg.in_mem588, %vaarg.in_reg586
  %vaarg.addr593 = phi ptr [ %283, %vaarg.in_reg586 ], [ %overflow_arg_area590, %vaarg.in_mem588 ]
  %285 = load ptr, ptr %vaarg.addr593, align 8
  %286 = load ptr, ptr %ap, align 8
  %a594 = getelementptr inbounds %struct.argument, ptr %286, i32 0, i32 1
  store ptr %285, ptr %a594, align 16
  br label %sw.epilog

sw.bb595:                                         ; preds = %for.body
  store i32 -1, ptr %retval, align 4
  br label %return

sw.default:                                       ; preds = %for.body
  call void @abort() #22
  unreachable

sw.epilog:                                        ; preds = %vaarg.end592, %vaarg.end579, %vaarg.end566, %vaarg.end553, %vaarg.end540, %vaarg.end527, %vaarg.end514, %vaarg.end501, %vaarg.end488, %vaarg.end475, %vaarg.end462, %vaarg.end449, %vaarg.end436, %vaarg.end423, %if.end412, %if.end, %vaarg.end374, %vaarg.end361, %sw.bb346, %vaarg.end343, %vaarg.end333, %vaarg.end320, %vaarg.end307, %vaarg.end294, %vaarg.end281, %vaarg.end268, %vaarg.end254, %vaarg.end240, %vaarg.end227, %vaarg.end214, %vaarg.end201, %vaarg.end188, %vaarg.end174, %vaarg.end160, %vaarg.end146, %vaarg.end132, %vaarg.end119, %vaarg.end106, %vaarg.end93, %vaarg.end80, %vaarg.end67, %vaarg.end54, %vaarg.end40, %vaarg.end26, %vaarg.end12, %vaarg.end
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %287 = load i64, ptr %i, align 8
  %inc = add i64 %287, 1
  store i64 %inc, ptr %i, align 8
  %288 = load ptr, ptr %ap, align 8
  %incdec.ptr = getelementptr inbounds %struct.argument, ptr %288, i32 1
  store ptr %incdec.ptr, ptr %ap, align 8
  br label %for.cond, !llvm.loop !38

for.end:                                          ; preds = %for.cond
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %sw.bb595
  %289 = load i32, ptr %retval, align 4
  ret i32 %289
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare ptr @llvm.ptrmask.p0.i64(ptr, i64) #14

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @printf_parse(ptr noundef %format, ptr noundef %d, ptr noundef %a) #3 {
entry:
  %retval = alloca i32, align 4
  %format.addr = alloca ptr, align 8
  %d.addr = alloca ptr, align 8
  %a.addr = alloca ptr, align 8
  %cp = alloca ptr, align 8
  %arg_posn = alloca i64, align 8
  %d_allocated = alloca i64, align 8
  %a_allocated = alloca i64, align 8
  %max_width_length = alloca i64, align 8
  %max_precision_length = alloca i64, align 8
  %c = alloca i8, align 1
  %arg_index = alloca i64, align 8
  %dp = alloca ptr, align 8
  %np = alloca ptr, align 8
  %n = alloca i64, align 8
  %np138 = alloca ptr, align 8
  %n156 = alloca i64, align 8
  %n205 = alloca i64, align 8
  %memory_size = alloca i64, align 8
  %memory = alloca ptr, align 8
  %width_length = alloca i64, align 8
  %np345 = alloca ptr, align 8
  %n363 = alloca i64, align 8
  %n413 = alloca i64, align 8
  %memory_size418 = alloca i64, align 8
  %memory419 = alloca ptr, align 8
  %precision_length = alloca i64, align 8
  %type528 = alloca i32, align 4
  %signed_type = alloca i32, align 4
  %unsigned_type = alloca i32, align 4
  %pointer_type = alloca i32, align 4
  %floatingpoint_type = alloca i32, align 4
  %n736 = alloca i64, align 8
  %memory_size741 = alloca i64, align 8
  %memory742 = alloca ptr, align 8
  %memory_size830 = alloca i64, align 8
  %memory831 = alloca ptr, align 8
  store ptr %format, ptr %format.addr, align 8
  store ptr %d, ptr %d.addr, align 8
  store ptr %a, ptr %a.addr, align 8
  %0 = load ptr, ptr %format.addr, align 8
  store ptr %0, ptr %cp, align 8
  store i64 0, ptr %arg_posn, align 8
  store i64 0, ptr %max_width_length, align 8
  store i64 0, ptr %max_precision_length, align 8
  %1 = load ptr, ptr %d.addr, align 8
  %count = getelementptr inbounds %struct.char_directives, ptr %1, i32 0, i32 0
  store i64 0, ptr %count, align 8
  store i64 7, ptr %d_allocated, align 8
  %2 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir = getelementptr inbounds %struct.char_directives, ptr %2, i32 0, i32 4
  %arraydecay = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir, i64 0, i64 0
  %3 = load ptr, ptr %d.addr, align 8
  %dir = getelementptr inbounds %struct.char_directives, ptr %3, i32 0, i32 1
  store ptr %arraydecay, ptr %dir, align 8
  %4 = load ptr, ptr %a.addr, align 8
  %count1 = getelementptr inbounds %struct.arguments, ptr %4, i32 0, i32 0
  store i64 0, ptr %count1, align 16
  store i64 7, ptr %a_allocated, align 8
  %5 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg = getelementptr inbounds %struct.arguments, ptr %5, i32 0, i32 2
  %arraydecay2 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg, i64 0, i64 0
  %6 = load ptr, ptr %a.addr, align 8
  %arg = getelementptr inbounds %struct.arguments, ptr %6, i32 0, i32 1
  store ptr %arraydecay2, ptr %arg, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end878, %entry
  %7 = load ptr, ptr %cp, align 8
  %8 = load i8, ptr %7, align 1
  %conv = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end879

while.body:                                       ; preds = %while.cond
  %9 = load ptr, ptr %cp, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %9, i32 1
  store ptr %incdec.ptr, ptr %cp, align 8
  %10 = load i8, ptr %9, align 1
  store i8 %10, ptr %c, align 1
  %11 = load i8, ptr %c, align 1
  %conv4 = sext i8 %11 to i32
  %cmp5 = icmp eq i32 %conv4, 37
  br i1 %cmp5, label %if.then, label %if.end878

if.then:                                          ; preds = %while.body
  store i64 -1, ptr %arg_index, align 8
  %12 = load ptr, ptr %d.addr, align 8
  %dir7 = getelementptr inbounds %struct.char_directives, ptr %12, i32 0, i32 1
  %13 = load ptr, ptr %dir7, align 8
  %14 = load ptr, ptr %d.addr, align 8
  %count8 = getelementptr inbounds %struct.char_directives, ptr %14, i32 0, i32 0
  %15 = load i64, ptr %count8, align 8
  %arrayidx = getelementptr inbounds %struct.char_directive, ptr %13, i64 %15
  store ptr %arrayidx, ptr %dp, align 8
  %16 = load ptr, ptr %cp, align 8
  %add.ptr = getelementptr inbounds i8, ptr %16, i64 -1
  %17 = load ptr, ptr %dp, align 8
  %dir_start = getelementptr inbounds %struct.char_directive, ptr %17, i32 0, i32 0
  store ptr %add.ptr, ptr %dir_start, align 8
  %18 = load ptr, ptr %dp, align 8
  %flags = getelementptr inbounds %struct.char_directive, ptr %18, i32 0, i32 2
  store i32 0, ptr %flags, align 8
  %19 = load ptr, ptr %dp, align 8
  %width_start = getelementptr inbounds %struct.char_directive, ptr %19, i32 0, i32 3
  store ptr null, ptr %width_start, align 8
  %20 = load ptr, ptr %dp, align 8
  %width_end = getelementptr inbounds %struct.char_directive, ptr %20, i32 0, i32 4
  store ptr null, ptr %width_end, align 8
  %21 = load ptr, ptr %dp, align 8
  %width_arg_index = getelementptr inbounds %struct.char_directive, ptr %21, i32 0, i32 5
  store i64 -1, ptr %width_arg_index, align 8
  %22 = load ptr, ptr %dp, align 8
  %precision_start = getelementptr inbounds %struct.char_directive, ptr %22, i32 0, i32 6
  store ptr null, ptr %precision_start, align 8
  %23 = load ptr, ptr %dp, align 8
  %precision_end = getelementptr inbounds %struct.char_directive, ptr %23, i32 0, i32 7
  store ptr null, ptr %precision_end, align 8
  %24 = load ptr, ptr %dp, align 8
  %precision_arg_index = getelementptr inbounds %struct.char_directive, ptr %24, i32 0, i32 8
  store i64 -1, ptr %precision_arg_index, align 8
  %25 = load ptr, ptr %dp, align 8
  %arg_index9 = getelementptr inbounds %struct.char_directive, ptr %25, i32 0, i32 10
  store i64 -1, ptr %arg_index9, align 8
  %26 = load ptr, ptr %cp, align 8
  %27 = load i8, ptr %26, align 1
  %conv10 = sext i8 %27 to i32
  %cmp11 = icmp sge i32 %conv10, 48
  br i1 %cmp11, label %land.lhs.true, label %if.end55

land.lhs.true:                                    ; preds = %if.then
  %28 = load ptr, ptr %cp, align 8
  %29 = load i8, ptr %28, align 1
  %conv13 = sext i8 %29 to i32
  %cmp14 = icmp sle i32 %conv13, 57
  br i1 %cmp14, label %if.then16, label %if.end55

if.then16:                                        ; preds = %land.lhs.true
  %30 = load ptr, ptr %cp, align 8
  store ptr %30, ptr %np, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then16
  %31 = load ptr, ptr %np, align 8
  %32 = load i8, ptr %31, align 1
  %conv17 = sext i8 %32 to i32
  %cmp18 = icmp sge i32 %conv17, 48
  br i1 %cmp18, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %33 = load ptr, ptr %np, align 8
  %34 = load i8, ptr %33, align 1
  %conv20 = sext i8 %34 to i32
  %cmp21 = icmp sle i32 %conv20, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %35 = phi i1 [ false, %for.cond ], [ %cmp21, %land.rhs ]
  br i1 %35, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %36 = load ptr, ptr %np, align 8
  %incdec.ptr23 = getelementptr inbounds i8, ptr %36, i32 1
  store ptr %incdec.ptr23, ptr %np, align 8
  br label %for.cond, !llvm.loop !39

for.end:                                          ; preds = %land.end
  %37 = load ptr, ptr %np, align 8
  %38 = load i8, ptr %37, align 1
  %conv24 = sext i8 %38 to i32
  %cmp25 = icmp eq i32 %conv24, 36
  br i1 %cmp25, label %if.then27, label %if.end54

if.then27:                                        ; preds = %for.end
  store i64 0, ptr %n, align 8
  %39 = load ptr, ptr %cp, align 8
  store ptr %39, ptr %np, align 8
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc42, %if.then27
  %40 = load ptr, ptr %np, align 8
  %41 = load i8, ptr %40, align 1
  %conv29 = sext i8 %41 to i32
  %cmp30 = icmp sge i32 %conv29, 48
  br i1 %cmp30, label %land.rhs32, label %land.end36

land.rhs32:                                       ; preds = %for.cond28
  %42 = load ptr, ptr %np, align 8
  %43 = load i8, ptr %42, align 1
  %conv33 = sext i8 %43 to i32
  %cmp34 = icmp sle i32 %conv33, 57
  br label %land.end36

land.end36:                                       ; preds = %land.rhs32, %for.cond28
  %44 = phi i1 [ false, %for.cond28 ], [ %cmp34, %land.rhs32 ]
  br i1 %44, label %for.body37, label %for.end44

for.body37:                                       ; preds = %land.end36
  %45 = load i64, ptr %n, align 8
  %cmp38 = icmp ule i64 %45, 1844674407370955161
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body37
  %46 = load i64, ptr %n, align 8
  %mul = mul i64 %46, 10
  br label %cond.end

cond.false:                                       ; preds = %for.body37
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %mul, %cond.true ], [ -1, %cond.false ]
  %47 = load ptr, ptr %np, align 8
  %48 = load i8, ptr %47, align 1
  %conv40 = sext i8 %48 to i32
  %sub = sub nsw i32 %conv40, 48
  %conv41 = sext i32 %sub to i64
  %call = call i64 @xsum(i64 noundef %cond, i64 noundef %conv41) #23
  store i64 %call, ptr %n, align 8
  br label %for.inc42

for.inc42:                                        ; preds = %cond.end
  %49 = load ptr, ptr %np, align 8
  %incdec.ptr43 = getelementptr inbounds i8, ptr %49, i32 1
  store ptr %incdec.ptr43, ptr %np, align 8
  br label %for.cond28, !llvm.loop !40

for.end44:                                        ; preds = %land.end36
  %50 = load i64, ptr %n, align 8
  %cmp45 = icmp eq i64 %50, 0
  br i1 %cmp45, label %if.then47, label %if.end

if.then47:                                        ; preds = %for.end44
  br label %error

if.end:                                           ; preds = %for.end44
  %51 = load i64, ptr %n, align 8
  %cmp48 = icmp eq i64 %51, -1
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.end
  br label %error

if.end51:                                         ; preds = %if.end
  %52 = load i64, ptr %n, align 8
  %sub52 = sub i64 %52, 1
  store i64 %sub52, ptr %arg_index, align 8
  %53 = load ptr, ptr %np, align 8
  %add.ptr53 = getelementptr inbounds i8, ptr %53, i64 1
  store ptr %add.ptr53, ptr %cp, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.end51, %for.end
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %land.lhs.true, %if.then
  br label %for.cond56

for.cond56:                                       ; preds = %if.end117, %if.end55
  %54 = load ptr, ptr %cp, align 8
  %55 = load i8, ptr %54, align 1
  %conv57 = sext i8 %55 to i32
  %cmp58 = icmp eq i32 %conv57, 39
  br i1 %cmp58, label %if.then60, label %if.else

if.then60:                                        ; preds = %for.cond56
  %56 = load ptr, ptr %dp, align 8
  %flags61 = getelementptr inbounds %struct.char_directive, ptr %56, i32 0, i32 2
  %57 = load i32, ptr %flags61, align 8
  %or = or i32 %57, 1
  store i32 %or, ptr %flags61, align 8
  %58 = load ptr, ptr %cp, align 8
  %incdec.ptr62 = getelementptr inbounds i8, ptr %58, i32 1
  store ptr %incdec.ptr62, ptr %cp, align 8
  br label %if.end117

if.else:                                          ; preds = %for.cond56
  %59 = load ptr, ptr %cp, align 8
  %60 = load i8, ptr %59, align 1
  %conv63 = sext i8 %60 to i32
  %cmp64 = icmp eq i32 %conv63, 45
  br i1 %cmp64, label %if.then66, label %if.else70

if.then66:                                        ; preds = %if.else
  %61 = load ptr, ptr %dp, align 8
  %flags67 = getelementptr inbounds %struct.char_directive, ptr %61, i32 0, i32 2
  %62 = load i32, ptr %flags67, align 8
  %or68 = or i32 %62, 2
  store i32 %or68, ptr %flags67, align 8
  %63 = load ptr, ptr %cp, align 8
  %incdec.ptr69 = getelementptr inbounds i8, ptr %63, i32 1
  store ptr %incdec.ptr69, ptr %cp, align 8
  br label %if.end116

if.else70:                                        ; preds = %if.else
  %64 = load ptr, ptr %cp, align 8
  %65 = load i8, ptr %64, align 1
  %conv71 = sext i8 %65 to i32
  %cmp72 = icmp eq i32 %conv71, 43
  br i1 %cmp72, label %if.then74, label %if.else78

if.then74:                                        ; preds = %if.else70
  %66 = load ptr, ptr %dp, align 8
  %flags75 = getelementptr inbounds %struct.char_directive, ptr %66, i32 0, i32 2
  %67 = load i32, ptr %flags75, align 8
  %or76 = or i32 %67, 4
  store i32 %or76, ptr %flags75, align 8
  %68 = load ptr, ptr %cp, align 8
  %incdec.ptr77 = getelementptr inbounds i8, ptr %68, i32 1
  store ptr %incdec.ptr77, ptr %cp, align 8
  br label %if.end115

if.else78:                                        ; preds = %if.else70
  %69 = load ptr, ptr %cp, align 8
  %70 = load i8, ptr %69, align 1
  %conv79 = sext i8 %70 to i32
  %cmp80 = icmp eq i32 %conv79, 32
  br i1 %cmp80, label %if.then82, label %if.else86

if.then82:                                        ; preds = %if.else78
  %71 = load ptr, ptr %dp, align 8
  %flags83 = getelementptr inbounds %struct.char_directive, ptr %71, i32 0, i32 2
  %72 = load i32, ptr %flags83, align 8
  %or84 = or i32 %72, 8
  store i32 %or84, ptr %flags83, align 8
  %73 = load ptr, ptr %cp, align 8
  %incdec.ptr85 = getelementptr inbounds i8, ptr %73, i32 1
  store ptr %incdec.ptr85, ptr %cp, align 8
  br label %if.end114

if.else86:                                        ; preds = %if.else78
  %74 = load ptr, ptr %cp, align 8
  %75 = load i8, ptr %74, align 1
  %conv87 = sext i8 %75 to i32
  %cmp88 = icmp eq i32 %conv87, 35
  br i1 %cmp88, label %if.then90, label %if.else94

if.then90:                                        ; preds = %if.else86
  %76 = load ptr, ptr %dp, align 8
  %flags91 = getelementptr inbounds %struct.char_directive, ptr %76, i32 0, i32 2
  %77 = load i32, ptr %flags91, align 8
  %or92 = or i32 %77, 16
  store i32 %or92, ptr %flags91, align 8
  %78 = load ptr, ptr %cp, align 8
  %incdec.ptr93 = getelementptr inbounds i8, ptr %78, i32 1
  store ptr %incdec.ptr93, ptr %cp, align 8
  br label %if.end113

if.else94:                                        ; preds = %if.else86
  %79 = load ptr, ptr %cp, align 8
  %80 = load i8, ptr %79, align 1
  %conv95 = sext i8 %80 to i32
  %cmp96 = icmp eq i32 %conv95, 48
  br i1 %cmp96, label %if.then98, label %if.else102

if.then98:                                        ; preds = %if.else94
  %81 = load ptr, ptr %dp, align 8
  %flags99 = getelementptr inbounds %struct.char_directive, ptr %81, i32 0, i32 2
  %82 = load i32, ptr %flags99, align 8
  %or100 = or i32 %82, 32
  store i32 %or100, ptr %flags99, align 8
  %83 = load ptr, ptr %cp, align 8
  %incdec.ptr101 = getelementptr inbounds i8, ptr %83, i32 1
  store ptr %incdec.ptr101, ptr %cp, align 8
  br label %if.end112

if.else102:                                       ; preds = %if.else94
  %84 = load ptr, ptr %cp, align 8
  %85 = load i8, ptr %84, align 1
  %conv103 = sext i8 %85 to i32
  %cmp104 = icmp eq i32 %conv103, 73
  br i1 %cmp104, label %if.then106, label %if.else110

if.then106:                                       ; preds = %if.else102
  %86 = load ptr, ptr %dp, align 8
  %flags107 = getelementptr inbounds %struct.char_directive, ptr %86, i32 0, i32 2
  %87 = load i32, ptr %flags107, align 8
  %or108 = or i32 %87, 64
  store i32 %or108, ptr %flags107, align 8
  %88 = load ptr, ptr %cp, align 8
  %incdec.ptr109 = getelementptr inbounds i8, ptr %88, i32 1
  store ptr %incdec.ptr109, ptr %cp, align 8
  br label %if.end111

if.else110:                                       ; preds = %if.else102
  br label %for.end118

if.end111:                                        ; preds = %if.then106
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %if.then98
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.then90
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then82
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.then74
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.then66
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.then60
  br label %for.cond56

for.end118:                                       ; preds = %if.else110
  %89 = load ptr, ptr %cp, align 8
  %90 = load i8, ptr %89, align 1
  %conv119 = sext i8 %90 to i32
  %cmp120 = icmp eq i32 %conv119, 42
  br i1 %cmp120, label %if.then122, label %if.else288

if.then122:                                       ; preds = %for.end118
  %91 = load ptr, ptr %cp, align 8
  %92 = load ptr, ptr %dp, align 8
  %width_start123 = getelementptr inbounds %struct.char_directive, ptr %92, i32 0, i32 3
  store ptr %91, ptr %width_start123, align 8
  %93 = load ptr, ptr %cp, align 8
  %incdec.ptr124 = getelementptr inbounds i8, ptr %93, i32 1
  store ptr %incdec.ptr124, ptr %cp, align 8
  %94 = load ptr, ptr %cp, align 8
  %95 = load ptr, ptr %dp, align 8
  %width_end125 = getelementptr inbounds %struct.char_directive, ptr %95, i32 0, i32 4
  store ptr %94, ptr %width_end125, align 8
  %96 = load i64, ptr %max_width_length, align 8
  %cmp126 = icmp ult i64 %96, 1
  br i1 %cmp126, label %if.then128, label %if.end129

if.then128:                                       ; preds = %if.then122
  store i64 1, ptr %max_width_length, align 8
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %if.then122
  %97 = load ptr, ptr %cp, align 8
  %98 = load i8, ptr %97, align 1
  %conv130 = sext i8 %98 to i32
  %cmp131 = icmp sge i32 %conv130, 48
  br i1 %cmp131, label %land.lhs.true133, label %if.end193

land.lhs.true133:                                 ; preds = %if.end129
  %99 = load ptr, ptr %cp, align 8
  %100 = load i8, ptr %99, align 1
  %conv134 = sext i8 %100 to i32
  %cmp135 = icmp sle i32 %conv134, 57
  br i1 %cmp135, label %if.then137, label %if.end193

if.then137:                                       ; preds = %land.lhs.true133
  %101 = load ptr, ptr %cp, align 8
  store ptr %101, ptr %np138, align 8
  br label %for.cond139

for.cond139:                                      ; preds = %for.inc149, %if.then137
  %102 = load ptr, ptr %np138, align 8
  %103 = load i8, ptr %102, align 1
  %conv140 = sext i8 %103 to i32
  %cmp141 = icmp sge i32 %conv140, 48
  br i1 %cmp141, label %land.rhs143, label %land.end147

land.rhs143:                                      ; preds = %for.cond139
  %104 = load ptr, ptr %np138, align 8
  %105 = load i8, ptr %104, align 1
  %conv144 = sext i8 %105 to i32
  %cmp145 = icmp sle i32 %conv144, 57
  br label %land.end147

land.end147:                                      ; preds = %land.rhs143, %for.cond139
  %106 = phi i1 [ false, %for.cond139 ], [ %cmp145, %land.rhs143 ]
  br i1 %106, label %for.body148, label %for.end151

for.body148:                                      ; preds = %land.end147
  br label %for.inc149

for.inc149:                                       ; preds = %for.body148
  %107 = load ptr, ptr %np138, align 8
  %incdec.ptr150 = getelementptr inbounds i8, ptr %107, i32 1
  store ptr %incdec.ptr150, ptr %np138, align 8
  br label %for.cond139, !llvm.loop !41

for.end151:                                       ; preds = %land.end147
  %108 = load ptr, ptr %np138, align 8
  %109 = load i8, ptr %108, align 1
  %conv152 = sext i8 %109 to i32
  %cmp153 = icmp eq i32 %conv152, 36
  br i1 %cmp153, label %if.then155, label %if.end192

if.then155:                                       ; preds = %for.end151
  store i64 0, ptr %n156, align 8
  %110 = load ptr, ptr %cp, align 8
  store ptr %110, ptr %np138, align 8
  br label %for.cond157

for.cond157:                                      ; preds = %for.inc178, %if.then155
  %111 = load ptr, ptr %np138, align 8
  %112 = load i8, ptr %111, align 1
  %conv158 = sext i8 %112 to i32
  %cmp159 = icmp sge i32 %conv158, 48
  br i1 %cmp159, label %land.rhs161, label %land.end165

land.rhs161:                                      ; preds = %for.cond157
  %113 = load ptr, ptr %np138, align 8
  %114 = load i8, ptr %113, align 1
  %conv162 = sext i8 %114 to i32
  %cmp163 = icmp sle i32 %conv162, 57
  br label %land.end165

land.end165:                                      ; preds = %land.rhs161, %for.cond157
  %115 = phi i1 [ false, %for.cond157 ], [ %cmp163, %land.rhs161 ]
  br i1 %115, label %for.body166, label %for.end180

for.body166:                                      ; preds = %land.end165
  %116 = load i64, ptr %n156, align 8
  %cmp167 = icmp ule i64 %116, 1844674407370955161
  br i1 %cmp167, label %cond.true169, label %cond.false171

cond.true169:                                     ; preds = %for.body166
  %117 = load i64, ptr %n156, align 8
  %mul170 = mul i64 %117, 10
  br label %cond.end172

cond.false171:                                    ; preds = %for.body166
  br label %cond.end172

cond.end172:                                      ; preds = %cond.false171, %cond.true169
  %cond173 = phi i64 [ %mul170, %cond.true169 ], [ -1, %cond.false171 ]
  %118 = load ptr, ptr %np138, align 8
  %119 = load i8, ptr %118, align 1
  %conv174 = sext i8 %119 to i32
  %sub175 = sub nsw i32 %conv174, 48
  %conv176 = sext i32 %sub175 to i64
  %call177 = call i64 @xsum(i64 noundef %cond173, i64 noundef %conv176) #23
  store i64 %call177, ptr %n156, align 8
  br label %for.inc178

for.inc178:                                       ; preds = %cond.end172
  %120 = load ptr, ptr %np138, align 8
  %incdec.ptr179 = getelementptr inbounds i8, ptr %120, i32 1
  store ptr %incdec.ptr179, ptr %np138, align 8
  br label %for.cond157, !llvm.loop !42

for.end180:                                       ; preds = %land.end165
  %121 = load i64, ptr %n156, align 8
  %cmp181 = icmp eq i64 %121, 0
  br i1 %cmp181, label %if.then183, label %if.end184

if.then183:                                       ; preds = %for.end180
  br label %error

if.end184:                                        ; preds = %for.end180
  %122 = load i64, ptr %n156, align 8
  %cmp185 = icmp eq i64 %122, -1
  br i1 %cmp185, label %if.then187, label %if.end188

if.then187:                                       ; preds = %if.end184
  br label %error

if.end188:                                        ; preds = %if.end184
  %123 = load i64, ptr %n156, align 8
  %sub189 = sub i64 %123, 1
  %124 = load ptr, ptr %dp, align 8
  %width_arg_index190 = getelementptr inbounds %struct.char_directive, ptr %124, i32 0, i32 5
  store i64 %sub189, ptr %width_arg_index190, align 8
  %125 = load ptr, ptr %np138, align 8
  %add.ptr191 = getelementptr inbounds i8, ptr %125, i64 1
  store ptr %add.ptr191, ptr %cp, align 8
  br label %if.end192

if.end192:                                        ; preds = %if.end188, %for.end151
  br label %if.end193

if.end193:                                        ; preds = %if.end192, %land.lhs.true133, %if.end129
  %126 = load ptr, ptr %dp, align 8
  %width_arg_index194 = getelementptr inbounds %struct.char_directive, ptr %126, i32 0, i32 5
  %127 = load i64, ptr %width_arg_index194, align 8
  %cmp195 = icmp eq i64 %127, -1
  br i1 %cmp195, label %if.then197, label %if.end204

if.then197:                                       ; preds = %if.end193
  %128 = load i64, ptr %arg_posn, align 8
  %inc = add i64 %128, 1
  store i64 %inc, ptr %arg_posn, align 8
  %129 = load ptr, ptr %dp, align 8
  %width_arg_index198 = getelementptr inbounds %struct.char_directive, ptr %129, i32 0, i32 5
  store i64 %128, ptr %width_arg_index198, align 8
  %130 = load ptr, ptr %dp, align 8
  %width_arg_index199 = getelementptr inbounds %struct.char_directive, ptr %130, i32 0, i32 5
  %131 = load i64, ptr %width_arg_index199, align 8
  %cmp200 = icmp eq i64 %131, -1
  br i1 %cmp200, label %if.then202, label %if.end203

if.then202:                                       ; preds = %if.then197
  br label %error

if.end203:                                        ; preds = %if.then197
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %if.end193
  %132 = load ptr, ptr %dp, align 8
  %width_arg_index206 = getelementptr inbounds %struct.char_directive, ptr %132, i32 0, i32 5
  %133 = load i64, ptr %width_arg_index206, align 8
  store i64 %133, ptr %n205, align 8
  %134 = load i64, ptr %n205, align 8
  %135 = load i64, ptr %a_allocated, align 8
  %cmp207 = icmp uge i64 %134, %135
  br i1 %cmp207, label %if.then209, label %if.end260

if.then209:                                       ; preds = %if.end204
  %136 = load i64, ptr %a_allocated, align 8
  %cmp210 = icmp ule i64 %136, 9223372036854775807
  br i1 %cmp210, label %cond.true212, label %cond.false214

cond.true212:                                     ; preds = %if.then209
  %137 = load i64, ptr %a_allocated, align 8
  %mul213 = mul i64 %137, 2
  br label %cond.end215

cond.false214:                                    ; preds = %if.then209
  br label %cond.end215

cond.end215:                                      ; preds = %cond.false214, %cond.true212
  %cond216 = phi i64 [ %mul213, %cond.true212 ], [ -1, %cond.false214 ]
  store i64 %cond216, ptr %a_allocated, align 8
  %138 = load i64, ptr %a_allocated, align 8
  %139 = load i64, ptr %n205, align 8
  %cmp217 = icmp ule i64 %138, %139
  br i1 %cmp217, label %if.then219, label %if.end221

if.then219:                                       ; preds = %cond.end215
  %140 = load i64, ptr %n205, align 8
  %call220 = call i64 @xsum(i64 noundef %140, i64 noundef 1) #23
  store i64 %call220, ptr %a_allocated, align 8
  br label %if.end221

if.end221:                                        ; preds = %if.then219, %cond.end215
  %141 = load i64, ptr %a_allocated, align 8
  %cmp222 = icmp ule i64 %141, 576460752303423487
  br i1 %cmp222, label %cond.true224, label %cond.false226

cond.true224:                                     ; preds = %if.end221
  %142 = load i64, ptr %a_allocated, align 8
  %mul225 = mul i64 %142, 32
  br label %cond.end227

cond.false226:                                    ; preds = %if.end221
  br label %cond.end227

cond.end227:                                      ; preds = %cond.false226, %cond.true224
  %cond228 = phi i64 [ %mul225, %cond.true224 ], [ -1, %cond.false226 ]
  store i64 %cond228, ptr %memory_size, align 8
  %143 = load i64, ptr %memory_size, align 8
  %cmp229 = icmp eq i64 %143, -1
  br i1 %cmp229, label %if.then231, label %if.end232

if.then231:                                       ; preds = %cond.end227
  br label %out_of_memory

if.end232:                                        ; preds = %cond.end227
  %144 = load ptr, ptr %a.addr, align 8
  %arg233 = getelementptr inbounds %struct.arguments, ptr %144, i32 0, i32 1
  %145 = load ptr, ptr %arg233, align 8
  %146 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg234 = getelementptr inbounds %struct.arguments, ptr %146, i32 0, i32 2
  %arraydecay235 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg234, i64 0, i64 0
  %cmp236 = icmp ne ptr %145, %arraydecay235
  br i1 %cmp236, label %cond.true238, label %cond.false241

cond.true238:                                     ; preds = %if.end232
  %147 = load ptr, ptr %a.addr, align 8
  %arg239 = getelementptr inbounds %struct.arguments, ptr %147, i32 0, i32 1
  %148 = load ptr, ptr %arg239, align 8
  %149 = load i64, ptr %memory_size, align 8
  %call240 = call ptr @rpl_realloc(ptr noundef %148, i64 noundef %149)
  br label %cond.end243

cond.false241:                                    ; preds = %if.end232
  %150 = load i64, ptr %memory_size, align 8
  %call242 = call noalias ptr @malloc(i64 noundef %150) #29
  br label %cond.end243

cond.end243:                                      ; preds = %cond.false241, %cond.true238
  %cond244 = phi ptr [ %call240, %cond.true238 ], [ %call242, %cond.false241 ]
  store ptr %cond244, ptr %memory, align 8
  %151 = load ptr, ptr %memory, align 8
  %cmp245 = icmp eq ptr %151, null
  br i1 %cmp245, label %if.then247, label %if.end248

if.then247:                                       ; preds = %cond.end243
  br label %out_of_memory

if.end248:                                        ; preds = %cond.end243
  %152 = load ptr, ptr %a.addr, align 8
  %arg249 = getelementptr inbounds %struct.arguments, ptr %152, i32 0, i32 1
  %153 = load ptr, ptr %arg249, align 8
  %154 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg250 = getelementptr inbounds %struct.arguments, ptr %154, i32 0, i32 2
  %arraydecay251 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg250, i64 0, i64 0
  %cmp252 = icmp eq ptr %153, %arraydecay251
  br i1 %cmp252, label %if.then254, label %if.end258

if.then254:                                       ; preds = %if.end248
  %155 = load ptr, ptr %memory, align 8
  %156 = load ptr, ptr %a.addr, align 8
  %arg255 = getelementptr inbounds %struct.arguments, ptr %156, i32 0, i32 1
  %157 = load ptr, ptr %arg255, align 8
  %158 = load ptr, ptr %a.addr, align 8
  %count256 = getelementptr inbounds %struct.arguments, ptr %158, i32 0, i32 0
  %159 = load i64, ptr %count256, align 16
  %mul257 = mul i64 %159, 32
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %155, ptr align 16 %157, i64 %mul257, i1 false)
  br label %if.end258

if.end258:                                        ; preds = %if.then254, %if.end248
  %160 = load ptr, ptr %memory, align 8
  %161 = load ptr, ptr %a.addr, align 8
  %arg259 = getelementptr inbounds %struct.arguments, ptr %161, i32 0, i32 1
  store ptr %160, ptr %arg259, align 8
  br label %if.end260

if.end260:                                        ; preds = %if.end258, %if.end204
  br label %while.cond261

while.cond261:                                    ; preds = %while.body265, %if.end260
  %162 = load ptr, ptr %a.addr, align 8
  %count262 = getelementptr inbounds %struct.arguments, ptr %162, i32 0, i32 0
  %163 = load i64, ptr %count262, align 16
  %164 = load i64, ptr %n205, align 8
  %cmp263 = icmp ule i64 %163, %164
  br i1 %cmp263, label %while.body265, label %while.end

while.body265:                                    ; preds = %while.cond261
  %165 = load ptr, ptr %a.addr, align 8
  %arg266 = getelementptr inbounds %struct.arguments, ptr %165, i32 0, i32 1
  %166 = load ptr, ptr %arg266, align 8
  %167 = load ptr, ptr %a.addr, align 8
  %count267 = getelementptr inbounds %struct.arguments, ptr %167, i32 0, i32 0
  %168 = load i64, ptr %count267, align 16
  %inc268 = add i64 %168, 1
  store i64 %inc268, ptr %count267, align 16
  %arrayidx269 = getelementptr inbounds %struct.argument, ptr %166, i64 %168
  %type = getelementptr inbounds %struct.argument, ptr %arrayidx269, i32 0, i32 0
  store i32 0, ptr %type, align 16
  br label %while.cond261, !llvm.loop !43

while.end:                                        ; preds = %while.cond261
  %169 = load ptr, ptr %a.addr, align 8
  %arg270 = getelementptr inbounds %struct.arguments, ptr %169, i32 0, i32 1
  %170 = load ptr, ptr %arg270, align 8
  %171 = load i64, ptr %n205, align 8
  %arrayidx271 = getelementptr inbounds %struct.argument, ptr %170, i64 %171
  %type272 = getelementptr inbounds %struct.argument, ptr %arrayidx271, i32 0, i32 0
  %172 = load i32, ptr %type272, align 16
  %cmp273 = icmp eq i32 %172, 0
  br i1 %cmp273, label %if.then275, label %if.else279

if.then275:                                       ; preds = %while.end
  %173 = load ptr, ptr %a.addr, align 8
  %arg276 = getelementptr inbounds %struct.arguments, ptr %173, i32 0, i32 1
  %174 = load ptr, ptr %arg276, align 8
  %175 = load i64, ptr %n205, align 8
  %arrayidx277 = getelementptr inbounds %struct.argument, ptr %174, i64 %175
  %type278 = getelementptr inbounds %struct.argument, ptr %arrayidx277, i32 0, i32 0
  store i32 5, ptr %type278, align 16
  br label %if.end287

if.else279:                                       ; preds = %while.end
  %176 = load ptr, ptr %a.addr, align 8
  %arg280 = getelementptr inbounds %struct.arguments, ptr %176, i32 0, i32 1
  %177 = load ptr, ptr %arg280, align 8
  %178 = load i64, ptr %n205, align 8
  %arrayidx281 = getelementptr inbounds %struct.argument, ptr %177, i64 %178
  %type282 = getelementptr inbounds %struct.argument, ptr %arrayidx281, i32 0, i32 0
  %179 = load i32, ptr %type282, align 16
  %cmp283 = icmp ne i32 %179, 5
  br i1 %cmp283, label %if.then285, label %if.end286

if.then285:                                       ; preds = %if.else279
  br label %error

if.end286:                                        ; preds = %if.else279
  br label %if.end287

if.end287:                                        ; preds = %if.end286, %if.then275
  br label %if.end319

if.else288:                                       ; preds = %for.end118
  %180 = load ptr, ptr %cp, align 8
  %181 = load i8, ptr %180, align 1
  %conv289 = sext i8 %181 to i32
  %cmp290 = icmp sge i32 %conv289, 48
  br i1 %cmp290, label %land.lhs.true292, label %if.end318

land.lhs.true292:                                 ; preds = %if.else288
  %182 = load ptr, ptr %cp, align 8
  %183 = load i8, ptr %182, align 1
  %conv293 = sext i8 %183 to i32
  %cmp294 = icmp sle i32 %conv293, 57
  br i1 %cmp294, label %if.then296, label %if.end318

if.then296:                                       ; preds = %land.lhs.true292
  %184 = load ptr, ptr %cp, align 8
  %185 = load ptr, ptr %dp, align 8
  %width_start297 = getelementptr inbounds %struct.char_directive, ptr %185, i32 0, i32 3
  store ptr %184, ptr %width_start297, align 8
  br label %for.cond298

for.cond298:                                      ; preds = %for.inc308, %if.then296
  %186 = load ptr, ptr %cp, align 8
  %187 = load i8, ptr %186, align 1
  %conv299 = sext i8 %187 to i32
  %cmp300 = icmp sge i32 %conv299, 48
  br i1 %cmp300, label %land.rhs302, label %land.end306

land.rhs302:                                      ; preds = %for.cond298
  %188 = load ptr, ptr %cp, align 8
  %189 = load i8, ptr %188, align 1
  %conv303 = sext i8 %189 to i32
  %cmp304 = icmp sle i32 %conv303, 57
  br label %land.end306

land.end306:                                      ; preds = %land.rhs302, %for.cond298
  %190 = phi i1 [ false, %for.cond298 ], [ %cmp304, %land.rhs302 ]
  br i1 %190, label %for.body307, label %for.end310

for.body307:                                      ; preds = %land.end306
  br label %for.inc308

for.inc308:                                       ; preds = %for.body307
  %191 = load ptr, ptr %cp, align 8
  %incdec.ptr309 = getelementptr inbounds i8, ptr %191, i32 1
  store ptr %incdec.ptr309, ptr %cp, align 8
  br label %for.cond298, !llvm.loop !44

for.end310:                                       ; preds = %land.end306
  %192 = load ptr, ptr %cp, align 8
  %193 = load ptr, ptr %dp, align 8
  %width_end311 = getelementptr inbounds %struct.char_directive, ptr %193, i32 0, i32 4
  store ptr %192, ptr %width_end311, align 8
  %194 = load ptr, ptr %dp, align 8
  %width_end312 = getelementptr inbounds %struct.char_directive, ptr %194, i32 0, i32 4
  %195 = load ptr, ptr %width_end312, align 8
  %196 = load ptr, ptr %dp, align 8
  %width_start313 = getelementptr inbounds %struct.char_directive, ptr %196, i32 0, i32 3
  %197 = load ptr, ptr %width_start313, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %195 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %197 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, ptr %width_length, align 8
  %198 = load i64, ptr %max_width_length, align 8
  %199 = load i64, ptr %width_length, align 8
  %cmp314 = icmp ult i64 %198, %199
  br i1 %cmp314, label %if.then316, label %if.end317

if.then316:                                       ; preds = %for.end310
  %200 = load i64, ptr %width_length, align 8
  store i64 %200, ptr %max_width_length, align 8
  br label %if.end317

if.end317:                                        ; preds = %if.then316, %for.end310
  br label %if.end318

if.end318:                                        ; preds = %if.end317, %land.lhs.true292, %if.else288
  br label %if.end319

if.end319:                                        ; preds = %if.end318, %if.end287
  %201 = load ptr, ptr %cp, align 8
  %202 = load i8, ptr %201, align 1
  %conv320 = sext i8 %202 to i32
  %cmp321 = icmp eq i32 %conv320, 46
  br i1 %cmp321, label %if.then323, label %if.end527

if.then323:                                       ; preds = %if.end319
  %203 = load ptr, ptr %cp, align 8
  %incdec.ptr324 = getelementptr inbounds i8, ptr %203, i32 1
  store ptr %incdec.ptr324, ptr %cp, align 8
  %204 = load ptr, ptr %cp, align 8
  %205 = load i8, ptr %204, align 1
  %conv325 = sext i8 %205 to i32
  %cmp326 = icmp eq i32 %conv325, 42
  br i1 %cmp326, label %if.then328, label %if.else500

if.then328:                                       ; preds = %if.then323
  %206 = load ptr, ptr %cp, align 8
  %add.ptr329 = getelementptr inbounds i8, ptr %206, i64 -1
  %207 = load ptr, ptr %dp, align 8
  %precision_start330 = getelementptr inbounds %struct.char_directive, ptr %207, i32 0, i32 6
  store ptr %add.ptr329, ptr %precision_start330, align 8
  %208 = load ptr, ptr %cp, align 8
  %incdec.ptr331 = getelementptr inbounds i8, ptr %208, i32 1
  store ptr %incdec.ptr331, ptr %cp, align 8
  %209 = load ptr, ptr %cp, align 8
  %210 = load ptr, ptr %dp, align 8
  %precision_end332 = getelementptr inbounds %struct.char_directive, ptr %210, i32 0, i32 7
  store ptr %209, ptr %precision_end332, align 8
  %211 = load i64, ptr %max_precision_length, align 8
  %cmp333 = icmp ult i64 %211, 2
  br i1 %cmp333, label %if.then335, label %if.end336

if.then335:                                       ; preds = %if.then328
  store i64 2, ptr %max_precision_length, align 8
  br label %if.end336

if.end336:                                        ; preds = %if.then335, %if.then328
  %212 = load ptr, ptr %cp, align 8
  %213 = load i8, ptr %212, align 1
  %conv337 = sext i8 %213 to i32
  %cmp338 = icmp sge i32 %conv337, 48
  br i1 %cmp338, label %land.lhs.true340, label %if.end400

land.lhs.true340:                                 ; preds = %if.end336
  %214 = load ptr, ptr %cp, align 8
  %215 = load i8, ptr %214, align 1
  %conv341 = sext i8 %215 to i32
  %cmp342 = icmp sle i32 %conv341, 57
  br i1 %cmp342, label %if.then344, label %if.end400

if.then344:                                       ; preds = %land.lhs.true340
  %216 = load ptr, ptr %cp, align 8
  store ptr %216, ptr %np345, align 8
  br label %for.cond346

for.cond346:                                      ; preds = %for.inc356, %if.then344
  %217 = load ptr, ptr %np345, align 8
  %218 = load i8, ptr %217, align 1
  %conv347 = sext i8 %218 to i32
  %cmp348 = icmp sge i32 %conv347, 48
  br i1 %cmp348, label %land.rhs350, label %land.end354

land.rhs350:                                      ; preds = %for.cond346
  %219 = load ptr, ptr %np345, align 8
  %220 = load i8, ptr %219, align 1
  %conv351 = sext i8 %220 to i32
  %cmp352 = icmp sle i32 %conv351, 57
  br label %land.end354

land.end354:                                      ; preds = %land.rhs350, %for.cond346
  %221 = phi i1 [ false, %for.cond346 ], [ %cmp352, %land.rhs350 ]
  br i1 %221, label %for.body355, label %for.end358

for.body355:                                      ; preds = %land.end354
  br label %for.inc356

for.inc356:                                       ; preds = %for.body355
  %222 = load ptr, ptr %np345, align 8
  %incdec.ptr357 = getelementptr inbounds i8, ptr %222, i32 1
  store ptr %incdec.ptr357, ptr %np345, align 8
  br label %for.cond346, !llvm.loop !45

for.end358:                                       ; preds = %land.end354
  %223 = load ptr, ptr %np345, align 8
  %224 = load i8, ptr %223, align 1
  %conv359 = sext i8 %224 to i32
  %cmp360 = icmp eq i32 %conv359, 36
  br i1 %cmp360, label %if.then362, label %if.end399

if.then362:                                       ; preds = %for.end358
  store i64 0, ptr %n363, align 8
  %225 = load ptr, ptr %cp, align 8
  store ptr %225, ptr %np345, align 8
  br label %for.cond364

for.cond364:                                      ; preds = %for.inc385, %if.then362
  %226 = load ptr, ptr %np345, align 8
  %227 = load i8, ptr %226, align 1
  %conv365 = sext i8 %227 to i32
  %cmp366 = icmp sge i32 %conv365, 48
  br i1 %cmp366, label %land.rhs368, label %land.end372

land.rhs368:                                      ; preds = %for.cond364
  %228 = load ptr, ptr %np345, align 8
  %229 = load i8, ptr %228, align 1
  %conv369 = sext i8 %229 to i32
  %cmp370 = icmp sle i32 %conv369, 57
  br label %land.end372

land.end372:                                      ; preds = %land.rhs368, %for.cond364
  %230 = phi i1 [ false, %for.cond364 ], [ %cmp370, %land.rhs368 ]
  br i1 %230, label %for.body373, label %for.end387

for.body373:                                      ; preds = %land.end372
  %231 = load i64, ptr %n363, align 8
  %cmp374 = icmp ule i64 %231, 1844674407370955161
  br i1 %cmp374, label %cond.true376, label %cond.false378

cond.true376:                                     ; preds = %for.body373
  %232 = load i64, ptr %n363, align 8
  %mul377 = mul i64 %232, 10
  br label %cond.end379

cond.false378:                                    ; preds = %for.body373
  br label %cond.end379

cond.end379:                                      ; preds = %cond.false378, %cond.true376
  %cond380 = phi i64 [ %mul377, %cond.true376 ], [ -1, %cond.false378 ]
  %233 = load ptr, ptr %np345, align 8
  %234 = load i8, ptr %233, align 1
  %conv381 = sext i8 %234 to i32
  %sub382 = sub nsw i32 %conv381, 48
  %conv383 = sext i32 %sub382 to i64
  %call384 = call i64 @xsum(i64 noundef %cond380, i64 noundef %conv383) #23
  store i64 %call384, ptr %n363, align 8
  br label %for.inc385

for.inc385:                                       ; preds = %cond.end379
  %235 = load ptr, ptr %np345, align 8
  %incdec.ptr386 = getelementptr inbounds i8, ptr %235, i32 1
  store ptr %incdec.ptr386, ptr %np345, align 8
  br label %for.cond364, !llvm.loop !46

for.end387:                                       ; preds = %land.end372
  %236 = load i64, ptr %n363, align 8
  %cmp388 = icmp eq i64 %236, 0
  br i1 %cmp388, label %if.then390, label %if.end391

if.then390:                                       ; preds = %for.end387
  br label %error

if.end391:                                        ; preds = %for.end387
  %237 = load i64, ptr %n363, align 8
  %cmp392 = icmp eq i64 %237, -1
  br i1 %cmp392, label %if.then394, label %if.end395

if.then394:                                       ; preds = %if.end391
  br label %error

if.end395:                                        ; preds = %if.end391
  %238 = load i64, ptr %n363, align 8
  %sub396 = sub i64 %238, 1
  %239 = load ptr, ptr %dp, align 8
  %precision_arg_index397 = getelementptr inbounds %struct.char_directive, ptr %239, i32 0, i32 8
  store i64 %sub396, ptr %precision_arg_index397, align 8
  %240 = load ptr, ptr %np345, align 8
  %add.ptr398 = getelementptr inbounds i8, ptr %240, i64 1
  store ptr %add.ptr398, ptr %cp, align 8
  br label %if.end399

if.end399:                                        ; preds = %if.end395, %for.end358
  br label %if.end400

if.end400:                                        ; preds = %if.end399, %land.lhs.true340, %if.end336
  %241 = load ptr, ptr %dp, align 8
  %precision_arg_index401 = getelementptr inbounds %struct.char_directive, ptr %241, i32 0, i32 8
  %242 = load i64, ptr %precision_arg_index401, align 8
  %cmp402 = icmp eq i64 %242, -1
  br i1 %cmp402, label %if.then404, label %if.end412

if.then404:                                       ; preds = %if.end400
  %243 = load i64, ptr %arg_posn, align 8
  %inc405 = add i64 %243, 1
  store i64 %inc405, ptr %arg_posn, align 8
  %244 = load ptr, ptr %dp, align 8
  %precision_arg_index406 = getelementptr inbounds %struct.char_directive, ptr %244, i32 0, i32 8
  store i64 %243, ptr %precision_arg_index406, align 8
  %245 = load ptr, ptr %dp, align 8
  %precision_arg_index407 = getelementptr inbounds %struct.char_directive, ptr %245, i32 0, i32 8
  %246 = load i64, ptr %precision_arg_index407, align 8
  %cmp408 = icmp eq i64 %246, -1
  br i1 %cmp408, label %if.then410, label %if.end411

if.then410:                                       ; preds = %if.then404
  br label %error

if.end411:                                        ; preds = %if.then404
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %if.end400
  %247 = load ptr, ptr %dp, align 8
  %precision_arg_index414 = getelementptr inbounds %struct.char_directive, ptr %247, i32 0, i32 8
  %248 = load i64, ptr %precision_arg_index414, align 8
  store i64 %248, ptr %n413, align 8
  %249 = load i64, ptr %n413, align 8
  %250 = load i64, ptr %a_allocated, align 8
  %cmp415 = icmp uge i64 %249, %250
  br i1 %cmp415, label %if.then417, label %if.end470

if.then417:                                       ; preds = %if.end412
  %251 = load i64, ptr %a_allocated, align 8
  %cmp420 = icmp ule i64 %251, 9223372036854775807
  br i1 %cmp420, label %cond.true422, label %cond.false424

cond.true422:                                     ; preds = %if.then417
  %252 = load i64, ptr %a_allocated, align 8
  %mul423 = mul i64 %252, 2
  br label %cond.end425

cond.false424:                                    ; preds = %if.then417
  br label %cond.end425

cond.end425:                                      ; preds = %cond.false424, %cond.true422
  %cond426 = phi i64 [ %mul423, %cond.true422 ], [ -1, %cond.false424 ]
  store i64 %cond426, ptr %a_allocated, align 8
  %253 = load i64, ptr %a_allocated, align 8
  %254 = load i64, ptr %n413, align 8
  %cmp427 = icmp ule i64 %253, %254
  br i1 %cmp427, label %if.then429, label %if.end431

if.then429:                                       ; preds = %cond.end425
  %255 = load i64, ptr %n413, align 8
  %call430 = call i64 @xsum(i64 noundef %255, i64 noundef 1) #23
  store i64 %call430, ptr %a_allocated, align 8
  br label %if.end431

if.end431:                                        ; preds = %if.then429, %cond.end425
  %256 = load i64, ptr %a_allocated, align 8
  %cmp432 = icmp ule i64 %256, 576460752303423487
  br i1 %cmp432, label %cond.true434, label %cond.false436

cond.true434:                                     ; preds = %if.end431
  %257 = load i64, ptr %a_allocated, align 8
  %mul435 = mul i64 %257, 32
  br label %cond.end437

cond.false436:                                    ; preds = %if.end431
  br label %cond.end437

cond.end437:                                      ; preds = %cond.false436, %cond.true434
  %cond438 = phi i64 [ %mul435, %cond.true434 ], [ -1, %cond.false436 ]
  store i64 %cond438, ptr %memory_size418, align 8
  %258 = load i64, ptr %memory_size418, align 8
  %cmp439 = icmp eq i64 %258, -1
  br i1 %cmp439, label %if.then441, label %if.end442

if.then441:                                       ; preds = %cond.end437
  br label %out_of_memory

if.end442:                                        ; preds = %cond.end437
  %259 = load ptr, ptr %a.addr, align 8
  %arg443 = getelementptr inbounds %struct.arguments, ptr %259, i32 0, i32 1
  %260 = load ptr, ptr %arg443, align 8
  %261 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg444 = getelementptr inbounds %struct.arguments, ptr %261, i32 0, i32 2
  %arraydecay445 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg444, i64 0, i64 0
  %cmp446 = icmp ne ptr %260, %arraydecay445
  br i1 %cmp446, label %cond.true448, label %cond.false451

cond.true448:                                     ; preds = %if.end442
  %262 = load ptr, ptr %a.addr, align 8
  %arg449 = getelementptr inbounds %struct.arguments, ptr %262, i32 0, i32 1
  %263 = load ptr, ptr %arg449, align 8
  %264 = load i64, ptr %memory_size418, align 8
  %call450 = call ptr @rpl_realloc(ptr noundef %263, i64 noundef %264)
  br label %cond.end453

cond.false451:                                    ; preds = %if.end442
  %265 = load i64, ptr %memory_size418, align 8
  %call452 = call noalias ptr @malloc(i64 noundef %265) #29
  br label %cond.end453

cond.end453:                                      ; preds = %cond.false451, %cond.true448
  %cond454 = phi ptr [ %call450, %cond.true448 ], [ %call452, %cond.false451 ]
  store ptr %cond454, ptr %memory419, align 8
  %266 = load ptr, ptr %memory419, align 8
  %cmp455 = icmp eq ptr %266, null
  br i1 %cmp455, label %if.then457, label %if.end458

if.then457:                                       ; preds = %cond.end453
  br label %out_of_memory

if.end458:                                        ; preds = %cond.end453
  %267 = load ptr, ptr %a.addr, align 8
  %arg459 = getelementptr inbounds %struct.arguments, ptr %267, i32 0, i32 1
  %268 = load ptr, ptr %arg459, align 8
  %269 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg460 = getelementptr inbounds %struct.arguments, ptr %269, i32 0, i32 2
  %arraydecay461 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg460, i64 0, i64 0
  %cmp462 = icmp eq ptr %268, %arraydecay461
  br i1 %cmp462, label %if.then464, label %if.end468

if.then464:                                       ; preds = %if.end458
  %270 = load ptr, ptr %memory419, align 8
  %271 = load ptr, ptr %a.addr, align 8
  %arg465 = getelementptr inbounds %struct.arguments, ptr %271, i32 0, i32 1
  %272 = load ptr, ptr %arg465, align 8
  %273 = load ptr, ptr %a.addr, align 8
  %count466 = getelementptr inbounds %struct.arguments, ptr %273, i32 0, i32 0
  %274 = load i64, ptr %count466, align 16
  %mul467 = mul i64 %274, 32
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %270, ptr align 16 %272, i64 %mul467, i1 false)
  br label %if.end468

if.end468:                                        ; preds = %if.then464, %if.end458
  %275 = load ptr, ptr %memory419, align 8
  %276 = load ptr, ptr %a.addr, align 8
  %arg469 = getelementptr inbounds %struct.arguments, ptr %276, i32 0, i32 1
  store ptr %275, ptr %arg469, align 8
  br label %if.end470

if.end470:                                        ; preds = %if.end468, %if.end412
  br label %while.cond471

while.cond471:                                    ; preds = %while.body475, %if.end470
  %277 = load ptr, ptr %a.addr, align 8
  %count472 = getelementptr inbounds %struct.arguments, ptr %277, i32 0, i32 0
  %278 = load i64, ptr %count472, align 16
  %279 = load i64, ptr %n413, align 8
  %cmp473 = icmp ule i64 %278, %279
  br i1 %cmp473, label %while.body475, label %while.end481

while.body475:                                    ; preds = %while.cond471
  %280 = load ptr, ptr %a.addr, align 8
  %arg476 = getelementptr inbounds %struct.arguments, ptr %280, i32 0, i32 1
  %281 = load ptr, ptr %arg476, align 8
  %282 = load ptr, ptr %a.addr, align 8
  %count477 = getelementptr inbounds %struct.arguments, ptr %282, i32 0, i32 0
  %283 = load i64, ptr %count477, align 16
  %inc478 = add i64 %283, 1
  store i64 %inc478, ptr %count477, align 16
  %arrayidx479 = getelementptr inbounds %struct.argument, ptr %281, i64 %283
  %type480 = getelementptr inbounds %struct.argument, ptr %arrayidx479, i32 0, i32 0
  store i32 0, ptr %type480, align 16
  br label %while.cond471, !llvm.loop !47

while.end481:                                     ; preds = %while.cond471
  %284 = load ptr, ptr %a.addr, align 8
  %arg482 = getelementptr inbounds %struct.arguments, ptr %284, i32 0, i32 1
  %285 = load ptr, ptr %arg482, align 8
  %286 = load i64, ptr %n413, align 8
  %arrayidx483 = getelementptr inbounds %struct.argument, ptr %285, i64 %286
  %type484 = getelementptr inbounds %struct.argument, ptr %arrayidx483, i32 0, i32 0
  %287 = load i32, ptr %type484, align 16
  %cmp485 = icmp eq i32 %287, 0
  br i1 %cmp485, label %if.then487, label %if.else491

if.then487:                                       ; preds = %while.end481
  %288 = load ptr, ptr %a.addr, align 8
  %arg488 = getelementptr inbounds %struct.arguments, ptr %288, i32 0, i32 1
  %289 = load ptr, ptr %arg488, align 8
  %290 = load i64, ptr %n413, align 8
  %arrayidx489 = getelementptr inbounds %struct.argument, ptr %289, i64 %290
  %type490 = getelementptr inbounds %struct.argument, ptr %arrayidx489, i32 0, i32 0
  store i32 5, ptr %type490, align 16
  br label %if.end499

if.else491:                                       ; preds = %while.end481
  %291 = load ptr, ptr %a.addr, align 8
  %arg492 = getelementptr inbounds %struct.arguments, ptr %291, i32 0, i32 1
  %292 = load ptr, ptr %arg492, align 8
  %293 = load i64, ptr %n413, align 8
  %arrayidx493 = getelementptr inbounds %struct.argument, ptr %292, i64 %293
  %type494 = getelementptr inbounds %struct.argument, ptr %arrayidx493, i32 0, i32 0
  %294 = load i32, ptr %type494, align 16
  %cmp495 = icmp ne i32 %294, 5
  br i1 %cmp495, label %if.then497, label %if.end498

if.then497:                                       ; preds = %if.else491
  br label %error

if.end498:                                        ; preds = %if.else491
  br label %if.end499

if.end499:                                        ; preds = %if.end498, %if.then487
  br label %if.end526

if.else500:                                       ; preds = %if.then323
  %295 = load ptr, ptr %cp, align 8
  %add.ptr501 = getelementptr inbounds i8, ptr %295, i64 -1
  %296 = load ptr, ptr %dp, align 8
  %precision_start502 = getelementptr inbounds %struct.char_directive, ptr %296, i32 0, i32 6
  store ptr %add.ptr501, ptr %precision_start502, align 8
  br label %for.cond503

for.cond503:                                      ; preds = %for.inc513, %if.else500
  %297 = load ptr, ptr %cp, align 8
  %298 = load i8, ptr %297, align 1
  %conv504 = sext i8 %298 to i32
  %cmp505 = icmp sge i32 %conv504, 48
  br i1 %cmp505, label %land.rhs507, label %land.end511

land.rhs507:                                      ; preds = %for.cond503
  %299 = load ptr, ptr %cp, align 8
  %300 = load i8, ptr %299, align 1
  %conv508 = sext i8 %300 to i32
  %cmp509 = icmp sle i32 %conv508, 57
  br label %land.end511

land.end511:                                      ; preds = %land.rhs507, %for.cond503
  %301 = phi i1 [ false, %for.cond503 ], [ %cmp509, %land.rhs507 ]
  br i1 %301, label %for.body512, label %for.end515

for.body512:                                      ; preds = %land.end511
  br label %for.inc513

for.inc513:                                       ; preds = %for.body512
  %302 = load ptr, ptr %cp, align 8
  %incdec.ptr514 = getelementptr inbounds i8, ptr %302, i32 1
  store ptr %incdec.ptr514, ptr %cp, align 8
  br label %for.cond503, !llvm.loop !48

for.end515:                                       ; preds = %land.end511
  %303 = load ptr, ptr %cp, align 8
  %304 = load ptr, ptr %dp, align 8
  %precision_end516 = getelementptr inbounds %struct.char_directive, ptr %304, i32 0, i32 7
  store ptr %303, ptr %precision_end516, align 8
  %305 = load ptr, ptr %dp, align 8
  %precision_end517 = getelementptr inbounds %struct.char_directive, ptr %305, i32 0, i32 7
  %306 = load ptr, ptr %precision_end517, align 8
  %307 = load ptr, ptr %dp, align 8
  %precision_start518 = getelementptr inbounds %struct.char_directive, ptr %307, i32 0, i32 6
  %308 = load ptr, ptr %precision_start518, align 8
  %sub.ptr.lhs.cast519 = ptrtoint ptr %306 to i64
  %sub.ptr.rhs.cast520 = ptrtoint ptr %308 to i64
  %sub.ptr.sub521 = sub i64 %sub.ptr.lhs.cast519, %sub.ptr.rhs.cast520
  store i64 %sub.ptr.sub521, ptr %precision_length, align 8
  %309 = load i64, ptr %max_precision_length, align 8
  %310 = load i64, ptr %precision_length, align 8
  %cmp522 = icmp ult i64 %309, %310
  br i1 %cmp522, label %if.then524, label %if.end525

if.then524:                                       ; preds = %for.end515
  %311 = load i64, ptr %precision_length, align 8
  store i64 %311, ptr %max_precision_length, align 8
  br label %if.end525

if.end525:                                        ; preds = %if.then524, %for.end515
  br label %if.end526

if.end526:                                        ; preds = %if.end525, %if.end499
  br label %if.end527

if.end527:                                        ; preds = %if.end526, %if.end319
  store i32 5, ptr %signed_type, align 4
  store i32 6, ptr %unsigned_type, align 4
  store i32 36, ptr %pointer_type, align 4
  store i32 27, ptr %floatingpoint_type, align 4
  %312 = load ptr, ptr %cp, align 8
  %313 = load i8, ptr %312, align 1
  %conv529 = sext i8 %313 to i32
  %cmp530 = icmp eq i32 %conv529, 104
  br i1 %cmp530, label %if.then532, label %if.else542

if.then532:                                       ; preds = %if.end527
  %314 = load ptr, ptr %cp, align 8
  %arrayidx533 = getelementptr inbounds i8, ptr %314, i64 1
  %315 = load i8, ptr %arrayidx533, align 1
  %conv534 = sext i8 %315 to i32
  %cmp535 = icmp eq i32 %conv534, 104
  br i1 %cmp535, label %if.then537, label %if.else539

if.then537:                                       ; preds = %if.then532
  store i32 1, ptr %signed_type, align 4
  store i32 2, ptr %unsigned_type, align 4
  store i32 34, ptr %pointer_type, align 4
  %316 = load ptr, ptr %cp, align 8
  %add.ptr538 = getelementptr inbounds i8, ptr %316, i64 2
  store ptr %add.ptr538, ptr %cp, align 8
  br label %if.end541

if.else539:                                       ; preds = %if.then532
  store i32 3, ptr %signed_type, align 4
  store i32 4, ptr %unsigned_type, align 4
  store i32 35, ptr %pointer_type, align 4
  %317 = load ptr, ptr %cp, align 8
  %incdec.ptr540 = getelementptr inbounds i8, ptr %317, i32 1
  store ptr %incdec.ptr540, ptr %cp, align 8
  br label %if.end541

if.end541:                                        ; preds = %if.else539, %if.then537
  br label %if.end693

if.else542:                                       ; preds = %if.end527
  %318 = load ptr, ptr %cp, align 8
  %319 = load i8, ptr %318, align 1
  %conv543 = sext i8 %319 to i32
  %cmp544 = icmp eq i32 %conv543, 108
  br i1 %cmp544, label %if.then546, label %if.else556

if.then546:                                       ; preds = %if.else542
  %320 = load ptr, ptr %cp, align 8
  %arrayidx547 = getelementptr inbounds i8, ptr %320, i64 1
  %321 = load i8, ptr %arrayidx547, align 1
  %conv548 = sext i8 %321 to i32
  %cmp549 = icmp eq i32 %conv548, 108
  br i1 %cmp549, label %if.then551, label %if.else553

if.then551:                                       ; preds = %if.then546
  store i32 9, ptr %signed_type, align 4
  store i32 10, ptr %unsigned_type, align 4
  store i32 38, ptr %pointer_type, align 4
  store i32 28, ptr %floatingpoint_type, align 4
  %322 = load ptr, ptr %cp, align 8
  %add.ptr552 = getelementptr inbounds i8, ptr %322, i64 2
  store ptr %add.ptr552, ptr %cp, align 8
  br label %if.end555

if.else553:                                       ; preds = %if.then546
  store i32 7, ptr %signed_type, align 4
  store i32 8, ptr %unsigned_type, align 4
  store i32 37, ptr %pointer_type, align 4
  %323 = load ptr, ptr %cp, align 8
  %incdec.ptr554 = getelementptr inbounds i8, ptr %323, i32 1
  store ptr %incdec.ptr554, ptr %cp, align 8
  br label %if.end555

if.end555:                                        ; preds = %if.else553, %if.then551
  br label %if.end692

if.else556:                                       ; preds = %if.else542
  %324 = load ptr, ptr %cp, align 8
  %325 = load i8, ptr %324, align 1
  %conv557 = sext i8 %325 to i32
  %cmp558 = icmp eq i32 %conv557, 106
  br i1 %cmp558, label %if.then560, label %if.else562

if.then560:                                       ; preds = %if.else556
  store i32 7, ptr %signed_type, align 4
  store i32 8, ptr %unsigned_type, align 4
  store i32 37, ptr %pointer_type, align 4
  %326 = load ptr, ptr %cp, align 8
  %incdec.ptr561 = getelementptr inbounds i8, ptr %326, i32 1
  store ptr %incdec.ptr561, ptr %cp, align 8
  br label %if.end691

if.else562:                                       ; preds = %if.else556
  %327 = load ptr, ptr %cp, align 8
  %328 = load i8, ptr %327, align 1
  %conv563 = sext i8 %328 to i32
  %cmp564 = icmp eq i32 %conv563, 122
  br i1 %cmp564, label %if.then569, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else562
  %329 = load ptr, ptr %cp, align 8
  %330 = load i8, ptr %329, align 1
  %conv566 = sext i8 %330 to i32
  %cmp567 = icmp eq i32 %conv566, 90
  br i1 %cmp567, label %if.then569, label %if.else571

if.then569:                                       ; preds = %lor.lhs.false, %if.else562
  store i32 7, ptr %signed_type, align 4
  store i32 8, ptr %unsigned_type, align 4
  store i32 37, ptr %pointer_type, align 4
  %331 = load ptr, ptr %cp, align 8
  %incdec.ptr570 = getelementptr inbounds i8, ptr %331, i32 1
  store ptr %incdec.ptr570, ptr %cp, align 8
  br label %if.end690

if.else571:                                       ; preds = %lor.lhs.false
  %332 = load ptr, ptr %cp, align 8
  %333 = load i8, ptr %332, align 1
  %conv572 = sext i8 %333 to i32
  %cmp573 = icmp eq i32 %conv572, 116
  br i1 %cmp573, label %if.then575, label %if.else577

if.then575:                                       ; preds = %if.else571
  store i32 7, ptr %signed_type, align 4
  store i32 8, ptr %unsigned_type, align 4
  store i32 37, ptr %pointer_type, align 4
  %334 = load ptr, ptr %cp, align 8
  %incdec.ptr576 = getelementptr inbounds i8, ptr %334, i32 1
  store ptr %incdec.ptr576, ptr %cp, align 8
  br label %if.end689

if.else577:                                       ; preds = %if.else571
  %335 = load ptr, ptr %cp, align 8
  %336 = load i8, ptr %335, align 1
  %conv578 = sext i8 %336 to i32
  %cmp579 = icmp eq i32 %conv578, 119
  br i1 %cmp579, label %if.then581, label %if.else681

if.then581:                                       ; preds = %if.else577
  %337 = load ptr, ptr %cp, align 8
  %arrayidx582 = getelementptr inbounds i8, ptr %337, i64 1
  %338 = load i8, ptr %arrayidx582, align 1
  %conv583 = sext i8 %338 to i32
  %cmp584 = icmp eq i32 %conv583, 102
  br i1 %cmp584, label %if.then586, label %if.else633

if.then586:                                       ; preds = %if.then581
  %339 = load ptr, ptr %cp, align 8
  %arrayidx587 = getelementptr inbounds i8, ptr %339, i64 2
  %340 = load i8, ptr %arrayidx587, align 1
  %conv588 = sext i8 %340 to i32
  %cmp589 = icmp eq i32 %conv588, 56
  br i1 %cmp589, label %if.then591, label %if.else593

if.then591:                                       ; preds = %if.then586
  store i32 19, ptr %signed_type, align 4
  store i32 20, ptr %unsigned_type, align 4
  store i32 43, ptr %pointer_type, align 4
  %341 = load ptr, ptr %cp, align 8
  %add.ptr592 = getelementptr inbounds i8, ptr %341, i64 3
  store ptr %add.ptr592, ptr %cp, align 8
  br label %if.end632

if.else593:                                       ; preds = %if.then586
  %342 = load ptr, ptr %cp, align 8
  %arrayidx594 = getelementptr inbounds i8, ptr %342, i64 2
  %343 = load i8, ptr %arrayidx594, align 1
  %conv595 = sext i8 %343 to i32
  %cmp596 = icmp eq i32 %conv595, 49
  br i1 %cmp596, label %land.lhs.true598, label %if.else605

land.lhs.true598:                                 ; preds = %if.else593
  %344 = load ptr, ptr %cp, align 8
  %arrayidx599 = getelementptr inbounds i8, ptr %344, i64 3
  %345 = load i8, ptr %arrayidx599, align 1
  %conv600 = sext i8 %345 to i32
  %cmp601 = icmp eq i32 %conv600, 54
  br i1 %cmp601, label %if.then603, label %if.else605

if.then603:                                       ; preds = %land.lhs.true598
  store i32 21, ptr %signed_type, align 4
  store i32 22, ptr %unsigned_type, align 4
  store i32 44, ptr %pointer_type, align 4
  %346 = load ptr, ptr %cp, align 8
  %add.ptr604 = getelementptr inbounds i8, ptr %346, i64 4
  store ptr %add.ptr604, ptr %cp, align 8
  br label %if.end631

if.else605:                                       ; preds = %land.lhs.true598, %if.else593
  %347 = load ptr, ptr %cp, align 8
  %arrayidx606 = getelementptr inbounds i8, ptr %347, i64 2
  %348 = load i8, ptr %arrayidx606, align 1
  %conv607 = sext i8 %348 to i32
  %cmp608 = icmp eq i32 %conv607, 51
  br i1 %cmp608, label %land.lhs.true610, label %if.else617

land.lhs.true610:                                 ; preds = %if.else605
  %349 = load ptr, ptr %cp, align 8
  %arrayidx611 = getelementptr inbounds i8, ptr %349, i64 3
  %350 = load i8, ptr %arrayidx611, align 1
  %conv612 = sext i8 %350 to i32
  %cmp613 = icmp eq i32 %conv612, 50
  br i1 %cmp613, label %if.then615, label %if.else617

if.then615:                                       ; preds = %land.lhs.true610
  store i32 23, ptr %signed_type, align 4
  store i32 24, ptr %unsigned_type, align 4
  store i32 45, ptr %pointer_type, align 4
  %351 = load ptr, ptr %cp, align 8
  %add.ptr616 = getelementptr inbounds i8, ptr %351, i64 4
  store ptr %add.ptr616, ptr %cp, align 8
  br label %if.end630

if.else617:                                       ; preds = %land.lhs.true610, %if.else605
  %352 = load ptr, ptr %cp, align 8
  %arrayidx618 = getelementptr inbounds i8, ptr %352, i64 2
  %353 = load i8, ptr %arrayidx618, align 1
  %conv619 = sext i8 %353 to i32
  %cmp620 = icmp eq i32 %conv619, 54
  br i1 %cmp620, label %land.lhs.true622, label %if.end629

land.lhs.true622:                                 ; preds = %if.else617
  %354 = load ptr, ptr %cp, align 8
  %arrayidx623 = getelementptr inbounds i8, ptr %354, i64 3
  %355 = load i8, ptr %arrayidx623, align 1
  %conv624 = sext i8 %355 to i32
  %cmp625 = icmp eq i32 %conv624, 52
  br i1 %cmp625, label %if.then627, label %if.end629

if.then627:                                       ; preds = %land.lhs.true622
  store i32 25, ptr %signed_type, align 4
  store i32 26, ptr %unsigned_type, align 4
  store i32 46, ptr %pointer_type, align 4
  %356 = load ptr, ptr %cp, align 8
  %add.ptr628 = getelementptr inbounds i8, ptr %356, i64 4
  store ptr %add.ptr628, ptr %cp, align 8
  br label %if.end629

if.end629:                                        ; preds = %if.then627, %land.lhs.true622, %if.else617
  br label %if.end630

if.end630:                                        ; preds = %if.end629, %if.then615
  br label %if.end631

if.end631:                                        ; preds = %if.end630, %if.then603
  br label %if.end632

if.end632:                                        ; preds = %if.end631, %if.then591
  br label %if.end680

if.else633:                                       ; preds = %if.then581
  %357 = load ptr, ptr %cp, align 8
  %arrayidx634 = getelementptr inbounds i8, ptr %357, i64 1
  %358 = load i8, ptr %arrayidx634, align 1
  %conv635 = sext i8 %358 to i32
  %cmp636 = icmp eq i32 %conv635, 56
  br i1 %cmp636, label %if.then638, label %if.else640

if.then638:                                       ; preds = %if.else633
  store i32 11, ptr %signed_type, align 4
  store i32 12, ptr %unsigned_type, align 4
  store i32 39, ptr %pointer_type, align 4
  %359 = load ptr, ptr %cp, align 8
  %add.ptr639 = getelementptr inbounds i8, ptr %359, i64 2
  store ptr %add.ptr639, ptr %cp, align 8
  br label %if.end679

if.else640:                                       ; preds = %if.else633
  %360 = load ptr, ptr %cp, align 8
  %arrayidx641 = getelementptr inbounds i8, ptr %360, i64 1
  %361 = load i8, ptr %arrayidx641, align 1
  %conv642 = sext i8 %361 to i32
  %cmp643 = icmp eq i32 %conv642, 49
  br i1 %cmp643, label %land.lhs.true645, label %if.else652

land.lhs.true645:                                 ; preds = %if.else640
  %362 = load ptr, ptr %cp, align 8
  %arrayidx646 = getelementptr inbounds i8, ptr %362, i64 2
  %363 = load i8, ptr %arrayidx646, align 1
  %conv647 = sext i8 %363 to i32
  %cmp648 = icmp eq i32 %conv647, 54
  br i1 %cmp648, label %if.then650, label %if.else652

if.then650:                                       ; preds = %land.lhs.true645
  store i32 13, ptr %signed_type, align 4
  store i32 14, ptr %unsigned_type, align 4
  store i32 40, ptr %pointer_type, align 4
  %364 = load ptr, ptr %cp, align 8
  %add.ptr651 = getelementptr inbounds i8, ptr %364, i64 3
  store ptr %add.ptr651, ptr %cp, align 8
  br label %if.end678

if.else652:                                       ; preds = %land.lhs.true645, %if.else640
  %365 = load ptr, ptr %cp, align 8
  %arrayidx653 = getelementptr inbounds i8, ptr %365, i64 1
  %366 = load i8, ptr %arrayidx653, align 1
  %conv654 = sext i8 %366 to i32
  %cmp655 = icmp eq i32 %conv654, 51
  br i1 %cmp655, label %land.lhs.true657, label %if.else664

land.lhs.true657:                                 ; preds = %if.else652
  %367 = load ptr, ptr %cp, align 8
  %arrayidx658 = getelementptr inbounds i8, ptr %367, i64 2
  %368 = load i8, ptr %arrayidx658, align 1
  %conv659 = sext i8 %368 to i32
  %cmp660 = icmp eq i32 %conv659, 50
  br i1 %cmp660, label %if.then662, label %if.else664

if.then662:                                       ; preds = %land.lhs.true657
  store i32 15, ptr %signed_type, align 4
  store i32 16, ptr %unsigned_type, align 4
  store i32 41, ptr %pointer_type, align 4
  %369 = load ptr, ptr %cp, align 8
  %add.ptr663 = getelementptr inbounds i8, ptr %369, i64 3
  store ptr %add.ptr663, ptr %cp, align 8
  br label %if.end677

if.else664:                                       ; preds = %land.lhs.true657, %if.else652
  %370 = load ptr, ptr %cp, align 8
  %arrayidx665 = getelementptr inbounds i8, ptr %370, i64 1
  %371 = load i8, ptr %arrayidx665, align 1
  %conv666 = sext i8 %371 to i32
  %cmp667 = icmp eq i32 %conv666, 54
  br i1 %cmp667, label %land.lhs.true669, label %if.end676

land.lhs.true669:                                 ; preds = %if.else664
  %372 = load ptr, ptr %cp, align 8
  %arrayidx670 = getelementptr inbounds i8, ptr %372, i64 2
  %373 = load i8, ptr %arrayidx670, align 1
  %conv671 = sext i8 %373 to i32
  %cmp672 = icmp eq i32 %conv671, 52
  br i1 %cmp672, label %if.then674, label %if.end676

if.then674:                                       ; preds = %land.lhs.true669
  store i32 17, ptr %signed_type, align 4
  store i32 18, ptr %unsigned_type, align 4
  store i32 42, ptr %pointer_type, align 4
  %374 = load ptr, ptr %cp, align 8
  %add.ptr675 = getelementptr inbounds i8, ptr %374, i64 3
  store ptr %add.ptr675, ptr %cp, align 8
  br label %if.end676

if.end676:                                        ; preds = %if.then674, %land.lhs.true669, %if.else664
  br label %if.end677

if.end677:                                        ; preds = %if.end676, %if.then662
  br label %if.end678

if.end678:                                        ; preds = %if.end677, %if.then650
  br label %if.end679

if.end679:                                        ; preds = %if.end678, %if.then638
  br label %if.end680

if.end680:                                        ; preds = %if.end679, %if.end632
  br label %if.end688

if.else681:                                       ; preds = %if.else577
  %375 = load ptr, ptr %cp, align 8
  %376 = load i8, ptr %375, align 1
  %conv682 = sext i8 %376 to i32
  %cmp683 = icmp eq i32 %conv682, 76
  br i1 %cmp683, label %if.then685, label %if.end687

if.then685:                                       ; preds = %if.else681
  store i32 9, ptr %signed_type, align 4
  store i32 10, ptr %unsigned_type, align 4
  store i32 38, ptr %pointer_type, align 4
  store i32 28, ptr %floatingpoint_type, align 4
  %377 = load ptr, ptr %cp, align 8
  %incdec.ptr686 = getelementptr inbounds i8, ptr %377, i32 1
  store ptr %incdec.ptr686, ptr %cp, align 8
  br label %if.end687

if.end687:                                        ; preds = %if.then685, %if.else681
  br label %if.end688

if.end688:                                        ; preds = %if.end687, %if.end680
  br label %if.end689

if.end689:                                        ; preds = %if.end688, %if.then575
  br label %if.end690

if.end690:                                        ; preds = %if.end689, %if.then569
  br label %if.end691

if.end691:                                        ; preds = %if.end690, %if.then560
  br label %if.end692

if.end692:                                        ; preds = %if.end691, %if.end555
  br label %if.end693

if.end693:                                        ; preds = %if.end692, %if.end541
  %378 = load i32, ptr %pointer_type, align 4
  %379 = load ptr, ptr %cp, align 8
  %incdec.ptr694 = getelementptr inbounds i8, ptr %379, i32 1
  store ptr %incdec.ptr694, ptr %cp, align 8
  %380 = load i8, ptr %379, align 1
  store i8 %380, ptr %c, align 1
  %381 = load i8, ptr %c, align 1
  %conv695 = sext i8 %381 to i32
  switch i32 %conv695, label %sw.default [
    i32 100, label %sw.bb
    i32 105, label %sw.bb
    i32 98, label %sw.bb696
    i32 111, label %sw.bb696
    i32 117, label %sw.bb696
    i32 120, label %sw.bb696
    i32 88, label %sw.bb696
    i32 66, label %sw.bb696
    i32 102, label %sw.bb697
    i32 70, label %sw.bb697
    i32 101, label %sw.bb697
    i32 69, label %sw.bb697
    i32 103, label %sw.bb697
    i32 71, label %sw.bb697
    i32 97, label %sw.bb697
    i32 65, label %sw.bb697
    i32 99, label %sw.bb698
    i32 67, label %sw.bb707
    i32 115, label %sw.bb708
    i32 83, label %sw.bb717
    i32 112, label %sw.bb718
    i32 37, label %sw.bb719
  ]

sw.bb:                                            ; preds = %if.end693, %if.end693
  %382 = load i32, ptr %signed_type, align 4
  store i32 %382, ptr %type528, align 4
  br label %sw.epilog

sw.bb696:                                         ; preds = %if.end693, %if.end693, %if.end693, %if.end693, %if.end693, %if.end693
  %383 = load i32, ptr %unsigned_type, align 4
  store i32 %383, ptr %type528, align 4
  br label %sw.epilog

sw.bb697:                                         ; preds = %if.end693, %if.end693, %if.end693, %if.end693, %if.end693, %if.end693, %if.end693, %if.end693
  %384 = load i32, ptr %floatingpoint_type, align 4
  store i32 %384, ptr %type528, align 4
  br label %sw.epilog

sw.bb698:                                         ; preds = %if.end693
  %385 = load i32, ptr %signed_type, align 4
  %cmp699 = icmp eq i32 %385, 7
  br i1 %cmp699, label %if.then704, label %lor.lhs.false701

lor.lhs.false701:                                 ; preds = %sw.bb698
  %386 = load i32, ptr %signed_type, align 4
  %cmp702 = icmp eq i32 %386, 9
  br i1 %cmp702, label %if.then704, label %if.else705

if.then704:                                       ; preds = %lor.lhs.false701, %sw.bb698
  store i32 30, ptr %type528, align 4
  br label %if.end706

if.else705:                                       ; preds = %lor.lhs.false701
  store i32 29, ptr %type528, align 4
  br label %if.end706

if.end706:                                        ; preds = %if.else705, %if.then704
  br label %sw.epilog

sw.bb707:                                         ; preds = %if.end693
  store i32 30, ptr %type528, align 4
  store i8 99, ptr %c, align 1
  br label %sw.epilog

sw.bb708:                                         ; preds = %if.end693
  %387 = load i32, ptr %signed_type, align 4
  %cmp709 = icmp eq i32 %387, 7
  br i1 %cmp709, label %if.then714, label %lor.lhs.false711

lor.lhs.false711:                                 ; preds = %sw.bb708
  %388 = load i32, ptr %signed_type, align 4
  %cmp712 = icmp eq i32 %388, 9
  br i1 %cmp712, label %if.then714, label %if.else715

if.then714:                                       ; preds = %lor.lhs.false711, %sw.bb708
  store i32 32, ptr %type528, align 4
  br label %if.end716

if.else715:                                       ; preds = %lor.lhs.false711
  store i32 31, ptr %type528, align 4
  br label %if.end716

if.end716:                                        ; preds = %if.else715, %if.then714
  br label %sw.epilog

sw.bb717:                                         ; preds = %if.end693
  store i32 32, ptr %type528, align 4
  store i8 115, ptr %c, align 1
  br label %sw.epilog

sw.bb718:                                         ; preds = %if.end693
  store i32 33, ptr %type528, align 4
  br label %sw.epilog

sw.bb719:                                         ; preds = %if.end693
  store i32 0, ptr %type528, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end693
  br label %error

sw.epilog:                                        ; preds = %sw.bb719, %sw.bb718, %sw.bb717, %if.end716, %sw.bb707, %if.end706, %sw.bb697, %sw.bb696, %sw.bb
  %389 = load i32, ptr %type528, align 4
  %cmp720 = icmp ne i32 %389, 0
  br i1 %cmp720, label %if.then722, label %if.end823

if.then722:                                       ; preds = %sw.epilog
  %390 = load i64, ptr %arg_index, align 8
  %391 = load ptr, ptr %dp, align 8
  %arg_index723 = getelementptr inbounds %struct.char_directive, ptr %391, i32 0, i32 10
  store i64 %390, ptr %arg_index723, align 8
  %392 = load ptr, ptr %dp, align 8
  %arg_index724 = getelementptr inbounds %struct.char_directive, ptr %392, i32 0, i32 10
  %393 = load i64, ptr %arg_index724, align 8
  %cmp725 = icmp eq i64 %393, -1
  br i1 %cmp725, label %if.then727, label %if.end735

if.then727:                                       ; preds = %if.then722
  %394 = load i64, ptr %arg_posn, align 8
  %inc728 = add i64 %394, 1
  store i64 %inc728, ptr %arg_posn, align 8
  %395 = load ptr, ptr %dp, align 8
  %arg_index729 = getelementptr inbounds %struct.char_directive, ptr %395, i32 0, i32 10
  store i64 %394, ptr %arg_index729, align 8
  %396 = load ptr, ptr %dp, align 8
  %arg_index730 = getelementptr inbounds %struct.char_directive, ptr %396, i32 0, i32 10
  %397 = load i64, ptr %arg_index730, align 8
  %cmp731 = icmp eq i64 %397, -1
  br i1 %cmp731, label %if.then733, label %if.end734

if.then733:                                       ; preds = %if.then727
  br label %error

if.end734:                                        ; preds = %if.then727
  br label %if.end735

if.end735:                                        ; preds = %if.end734, %if.then722
  %398 = load ptr, ptr %dp, align 8
  %arg_index737 = getelementptr inbounds %struct.char_directive, ptr %398, i32 0, i32 10
  %399 = load i64, ptr %arg_index737, align 8
  store i64 %399, ptr %n736, align 8
  %400 = load i64, ptr %n736, align 8
  %401 = load i64, ptr %a_allocated, align 8
  %cmp738 = icmp uge i64 %400, %401
  br i1 %cmp738, label %if.then740, label %if.end793

if.then740:                                       ; preds = %if.end735
  %402 = load i64, ptr %a_allocated, align 8
  %cmp743 = icmp ule i64 %402, 9223372036854775807
  br i1 %cmp743, label %cond.true745, label %cond.false747

cond.true745:                                     ; preds = %if.then740
  %403 = load i64, ptr %a_allocated, align 8
  %mul746 = mul i64 %403, 2
  br label %cond.end748

cond.false747:                                    ; preds = %if.then740
  br label %cond.end748

cond.end748:                                      ; preds = %cond.false747, %cond.true745
  %cond749 = phi i64 [ %mul746, %cond.true745 ], [ -1, %cond.false747 ]
  store i64 %cond749, ptr %a_allocated, align 8
  %404 = load i64, ptr %a_allocated, align 8
  %405 = load i64, ptr %n736, align 8
  %cmp750 = icmp ule i64 %404, %405
  br i1 %cmp750, label %if.then752, label %if.end754

if.then752:                                       ; preds = %cond.end748
  %406 = load i64, ptr %n736, align 8
  %call753 = call i64 @xsum(i64 noundef %406, i64 noundef 1) #23
  store i64 %call753, ptr %a_allocated, align 8
  br label %if.end754

if.end754:                                        ; preds = %if.then752, %cond.end748
  %407 = load i64, ptr %a_allocated, align 8
  %cmp755 = icmp ule i64 %407, 576460752303423487
  br i1 %cmp755, label %cond.true757, label %cond.false759

cond.true757:                                     ; preds = %if.end754
  %408 = load i64, ptr %a_allocated, align 8
  %mul758 = mul i64 %408, 32
  br label %cond.end760

cond.false759:                                    ; preds = %if.end754
  br label %cond.end760

cond.end760:                                      ; preds = %cond.false759, %cond.true757
  %cond761 = phi i64 [ %mul758, %cond.true757 ], [ -1, %cond.false759 ]
  store i64 %cond761, ptr %memory_size741, align 8
  %409 = load i64, ptr %memory_size741, align 8
  %cmp762 = icmp eq i64 %409, -1
  br i1 %cmp762, label %if.then764, label %if.end765

if.then764:                                       ; preds = %cond.end760
  br label %out_of_memory

if.end765:                                        ; preds = %cond.end760
  %410 = load ptr, ptr %a.addr, align 8
  %arg766 = getelementptr inbounds %struct.arguments, ptr %410, i32 0, i32 1
  %411 = load ptr, ptr %arg766, align 8
  %412 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg767 = getelementptr inbounds %struct.arguments, ptr %412, i32 0, i32 2
  %arraydecay768 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg767, i64 0, i64 0
  %cmp769 = icmp ne ptr %411, %arraydecay768
  br i1 %cmp769, label %cond.true771, label %cond.false774

cond.true771:                                     ; preds = %if.end765
  %413 = load ptr, ptr %a.addr, align 8
  %arg772 = getelementptr inbounds %struct.arguments, ptr %413, i32 0, i32 1
  %414 = load ptr, ptr %arg772, align 8
  %415 = load i64, ptr %memory_size741, align 8
  %call773 = call ptr @rpl_realloc(ptr noundef %414, i64 noundef %415)
  br label %cond.end776

cond.false774:                                    ; preds = %if.end765
  %416 = load i64, ptr %memory_size741, align 8
  %call775 = call noalias ptr @malloc(i64 noundef %416) #29
  br label %cond.end776

cond.end776:                                      ; preds = %cond.false774, %cond.true771
  %cond777 = phi ptr [ %call773, %cond.true771 ], [ %call775, %cond.false774 ]
  store ptr %cond777, ptr %memory742, align 8
  %417 = load ptr, ptr %memory742, align 8
  %cmp778 = icmp eq ptr %417, null
  br i1 %cmp778, label %if.then780, label %if.end781

if.then780:                                       ; preds = %cond.end776
  br label %out_of_memory

if.end781:                                        ; preds = %cond.end776
  %418 = load ptr, ptr %a.addr, align 8
  %arg782 = getelementptr inbounds %struct.arguments, ptr %418, i32 0, i32 1
  %419 = load ptr, ptr %arg782, align 8
  %420 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg783 = getelementptr inbounds %struct.arguments, ptr %420, i32 0, i32 2
  %arraydecay784 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg783, i64 0, i64 0
  %cmp785 = icmp eq ptr %419, %arraydecay784
  br i1 %cmp785, label %if.then787, label %if.end791

if.then787:                                       ; preds = %if.end781
  %421 = load ptr, ptr %memory742, align 8
  %422 = load ptr, ptr %a.addr, align 8
  %arg788 = getelementptr inbounds %struct.arguments, ptr %422, i32 0, i32 1
  %423 = load ptr, ptr %arg788, align 8
  %424 = load ptr, ptr %a.addr, align 8
  %count789 = getelementptr inbounds %struct.arguments, ptr %424, i32 0, i32 0
  %425 = load i64, ptr %count789, align 16
  %mul790 = mul i64 %425, 32
  call void @llvm.memcpy.p0.p0.i64(ptr align 16 %421, ptr align 16 %423, i64 %mul790, i1 false)
  br label %if.end791

if.end791:                                        ; preds = %if.then787, %if.end781
  %426 = load ptr, ptr %memory742, align 8
  %427 = load ptr, ptr %a.addr, align 8
  %arg792 = getelementptr inbounds %struct.arguments, ptr %427, i32 0, i32 1
  store ptr %426, ptr %arg792, align 8
  br label %if.end793

if.end793:                                        ; preds = %if.end791, %if.end735
  br label %while.cond794

while.cond794:                                    ; preds = %while.body798, %if.end793
  %428 = load ptr, ptr %a.addr, align 8
  %count795 = getelementptr inbounds %struct.arguments, ptr %428, i32 0, i32 0
  %429 = load i64, ptr %count795, align 16
  %430 = load i64, ptr %n736, align 8
  %cmp796 = icmp ule i64 %429, %430
  br i1 %cmp796, label %while.body798, label %while.end804

while.body798:                                    ; preds = %while.cond794
  %431 = load ptr, ptr %a.addr, align 8
  %arg799 = getelementptr inbounds %struct.arguments, ptr %431, i32 0, i32 1
  %432 = load ptr, ptr %arg799, align 8
  %433 = load ptr, ptr %a.addr, align 8
  %count800 = getelementptr inbounds %struct.arguments, ptr %433, i32 0, i32 0
  %434 = load i64, ptr %count800, align 16
  %inc801 = add i64 %434, 1
  store i64 %inc801, ptr %count800, align 16
  %arrayidx802 = getelementptr inbounds %struct.argument, ptr %432, i64 %434
  %type803 = getelementptr inbounds %struct.argument, ptr %arrayidx802, i32 0, i32 0
  store i32 0, ptr %type803, align 16
  br label %while.cond794, !llvm.loop !49

while.end804:                                     ; preds = %while.cond794
  %435 = load ptr, ptr %a.addr, align 8
  %arg805 = getelementptr inbounds %struct.arguments, ptr %435, i32 0, i32 1
  %436 = load ptr, ptr %arg805, align 8
  %437 = load i64, ptr %n736, align 8
  %arrayidx806 = getelementptr inbounds %struct.argument, ptr %436, i64 %437
  %type807 = getelementptr inbounds %struct.argument, ptr %arrayidx806, i32 0, i32 0
  %438 = load i32, ptr %type807, align 16
  %cmp808 = icmp eq i32 %438, 0
  br i1 %cmp808, label %if.then810, label %if.else814

if.then810:                                       ; preds = %while.end804
  %439 = load i32, ptr %type528, align 4
  %440 = load ptr, ptr %a.addr, align 8
  %arg811 = getelementptr inbounds %struct.arguments, ptr %440, i32 0, i32 1
  %441 = load ptr, ptr %arg811, align 8
  %442 = load i64, ptr %n736, align 8
  %arrayidx812 = getelementptr inbounds %struct.argument, ptr %441, i64 %442
  %type813 = getelementptr inbounds %struct.argument, ptr %arrayidx812, i32 0, i32 0
  store i32 %439, ptr %type813, align 16
  br label %if.end822

if.else814:                                       ; preds = %while.end804
  %443 = load ptr, ptr %a.addr, align 8
  %arg815 = getelementptr inbounds %struct.arguments, ptr %443, i32 0, i32 1
  %444 = load ptr, ptr %arg815, align 8
  %445 = load i64, ptr %n736, align 8
  %arrayidx816 = getelementptr inbounds %struct.argument, ptr %444, i64 %445
  %type817 = getelementptr inbounds %struct.argument, ptr %arrayidx816, i32 0, i32 0
  %446 = load i32, ptr %type817, align 16
  %447 = load i32, ptr %type528, align 4
  %cmp818 = icmp ne i32 %446, %447
  br i1 %cmp818, label %if.then820, label %if.end821

if.then820:                                       ; preds = %if.else814
  br label %error

if.end821:                                        ; preds = %if.else814
  br label %if.end822

if.end822:                                        ; preds = %if.end821, %if.then810
  br label %if.end823

if.end823:                                        ; preds = %if.end822, %sw.epilog
  %448 = load i8, ptr %c, align 1
  %449 = load ptr, ptr %dp, align 8
  %conversion = getelementptr inbounds %struct.char_directive, ptr %449, i32 0, i32 9
  store i8 %448, ptr %conversion, align 8
  %450 = load ptr, ptr %cp, align 8
  %451 = load ptr, ptr %dp, align 8
  %dir_end = getelementptr inbounds %struct.char_directive, ptr %451, i32 0, i32 1
  store ptr %450, ptr %dir_end, align 8
  %452 = load ptr, ptr %d.addr, align 8
  %count824 = getelementptr inbounds %struct.char_directives, ptr %452, i32 0, i32 0
  %453 = load i64, ptr %count824, align 8
  %inc825 = add i64 %453, 1
  store i64 %inc825, ptr %count824, align 8
  %454 = load ptr, ptr %d.addr, align 8
  %count826 = getelementptr inbounds %struct.char_directives, ptr %454, i32 0, i32 0
  %455 = load i64, ptr %count826, align 8
  %456 = load i64, ptr %d_allocated, align 8
  %cmp827 = icmp uge i64 %455, %456
  br i1 %cmp827, label %if.then829, label %if.end877

if.then829:                                       ; preds = %if.end823
  %457 = load i64, ptr %d_allocated, align 8
  %cmp832 = icmp ule i64 %457, 9223372036854775807
  br i1 %cmp832, label %cond.true834, label %cond.false836

cond.true834:                                     ; preds = %if.then829
  %458 = load i64, ptr %d_allocated, align 8
  %mul835 = mul i64 %458, 2
  br label %cond.end837

cond.false836:                                    ; preds = %if.then829
  br label %cond.end837

cond.end837:                                      ; preds = %cond.false836, %cond.true834
  %cond838 = phi i64 [ %mul835, %cond.true834 ], [ -1, %cond.false836 ]
  store i64 %cond838, ptr %d_allocated, align 8
  %459 = load i64, ptr %d_allocated, align 8
  %cmp839 = icmp ule i64 %459, 209622091746699450
  br i1 %cmp839, label %cond.true841, label %cond.false843

cond.true841:                                     ; preds = %cond.end837
  %460 = load i64, ptr %d_allocated, align 8
  %mul842 = mul i64 %460, 88
  br label %cond.end844

cond.false843:                                    ; preds = %cond.end837
  br label %cond.end844

cond.end844:                                      ; preds = %cond.false843, %cond.true841
  %cond845 = phi i64 [ %mul842, %cond.true841 ], [ -1, %cond.false843 ]
  store i64 %cond845, ptr %memory_size830, align 8
  %461 = load i64, ptr %memory_size830, align 8
  %cmp846 = icmp eq i64 %461, -1
  br i1 %cmp846, label %if.then848, label %if.end849

if.then848:                                       ; preds = %cond.end844
  br label %out_of_memory

if.end849:                                        ; preds = %cond.end844
  %462 = load ptr, ptr %d.addr, align 8
  %dir850 = getelementptr inbounds %struct.char_directives, ptr %462, i32 0, i32 1
  %463 = load ptr, ptr %dir850, align 8
  %464 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir851 = getelementptr inbounds %struct.char_directives, ptr %464, i32 0, i32 4
  %arraydecay852 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir851, i64 0, i64 0
  %cmp853 = icmp ne ptr %463, %arraydecay852
  br i1 %cmp853, label %cond.true855, label %cond.false858

cond.true855:                                     ; preds = %if.end849
  %465 = load ptr, ptr %d.addr, align 8
  %dir856 = getelementptr inbounds %struct.char_directives, ptr %465, i32 0, i32 1
  %466 = load ptr, ptr %dir856, align 8
  %467 = load i64, ptr %memory_size830, align 8
  %call857 = call ptr @rpl_realloc(ptr noundef %466, i64 noundef %467)
  br label %cond.end860

cond.false858:                                    ; preds = %if.end849
  %468 = load i64, ptr %memory_size830, align 8
  %call859 = call noalias ptr @malloc(i64 noundef %468) #29
  br label %cond.end860

cond.end860:                                      ; preds = %cond.false858, %cond.true855
  %cond861 = phi ptr [ %call857, %cond.true855 ], [ %call859, %cond.false858 ]
  store ptr %cond861, ptr %memory831, align 8
  %469 = load ptr, ptr %memory831, align 8
  %cmp862 = icmp eq ptr %469, null
  br i1 %cmp862, label %if.then864, label %if.end865

if.then864:                                       ; preds = %cond.end860
  br label %out_of_memory

if.end865:                                        ; preds = %cond.end860
  %470 = load ptr, ptr %d.addr, align 8
  %dir866 = getelementptr inbounds %struct.char_directives, ptr %470, i32 0, i32 1
  %471 = load ptr, ptr %dir866, align 8
  %472 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir867 = getelementptr inbounds %struct.char_directives, ptr %472, i32 0, i32 4
  %arraydecay868 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir867, i64 0, i64 0
  %cmp869 = icmp eq ptr %471, %arraydecay868
  br i1 %cmp869, label %if.then871, label %if.end875

if.then871:                                       ; preds = %if.end865
  %473 = load ptr, ptr %memory831, align 8
  %474 = load ptr, ptr %d.addr, align 8
  %dir872 = getelementptr inbounds %struct.char_directives, ptr %474, i32 0, i32 1
  %475 = load ptr, ptr %dir872, align 8
  %476 = load ptr, ptr %d.addr, align 8
  %count873 = getelementptr inbounds %struct.char_directives, ptr %476, i32 0, i32 0
  %477 = load i64, ptr %count873, align 8
  %mul874 = mul i64 %477, 88
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %473, ptr align 8 %475, i64 %mul874, i1 false)
  br label %if.end875

if.end875:                                        ; preds = %if.then871, %if.end865
  %478 = load ptr, ptr %memory831, align 8
  %479 = load ptr, ptr %d.addr, align 8
  %dir876 = getelementptr inbounds %struct.char_directives, ptr %479, i32 0, i32 1
  store ptr %478, ptr %dir876, align 8
  br label %if.end877

if.end877:                                        ; preds = %if.end875, %if.end823
  br label %if.end878

if.end878:                                        ; preds = %if.end877, %while.body
  br label %while.cond, !llvm.loop !50

while.end879:                                     ; preds = %while.cond
  %480 = load ptr, ptr %cp, align 8
  %481 = load ptr, ptr %d.addr, align 8
  %dir880 = getelementptr inbounds %struct.char_directives, ptr %481, i32 0, i32 1
  %482 = load ptr, ptr %dir880, align 8
  %483 = load ptr, ptr %d.addr, align 8
  %count881 = getelementptr inbounds %struct.char_directives, ptr %483, i32 0, i32 0
  %484 = load i64, ptr %count881, align 8
  %arrayidx882 = getelementptr inbounds %struct.char_directive, ptr %482, i64 %484
  %dir_start883 = getelementptr inbounds %struct.char_directive, ptr %arrayidx882, i32 0, i32 0
  store ptr %480, ptr %dir_start883, align 8
  %485 = load i64, ptr %max_width_length, align 8
  %486 = load ptr, ptr %d.addr, align 8
  %max_width_length884 = getelementptr inbounds %struct.char_directives, ptr %486, i32 0, i32 2
  store i64 %485, ptr %max_width_length884, align 8
  %487 = load i64, ptr %max_precision_length, align 8
  %488 = load ptr, ptr %d.addr, align 8
  %max_precision_length885 = getelementptr inbounds %struct.char_directives, ptr %488, i32 0, i32 3
  store i64 %487, ptr %max_precision_length885, align 8
  store i32 0, ptr %retval, align 4
  br label %return

error:                                            ; preds = %if.then820, %if.then733, %sw.default, %if.then497, %if.then410, %if.then394, %if.then390, %if.then285, %if.then202, %if.then187, %if.then183, %if.then50, %if.then47
  %489 = load ptr, ptr %a.addr, align 8
  %arg886 = getelementptr inbounds %struct.arguments, ptr %489, i32 0, i32 1
  %490 = load ptr, ptr %arg886, align 8
  %491 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg887 = getelementptr inbounds %struct.arguments, ptr %491, i32 0, i32 2
  %arraydecay888 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg887, i64 0, i64 0
  %cmp889 = icmp ne ptr %490, %arraydecay888
  br i1 %cmp889, label %if.then891, label %if.end893

if.then891:                                       ; preds = %error
  %492 = load ptr, ptr %a.addr, align 8
  %arg892 = getelementptr inbounds %struct.arguments, ptr %492, i32 0, i32 1
  %493 = load ptr, ptr %arg892, align 8
  call void @free(ptr noundef %493) #21
  br label %if.end893

if.end893:                                        ; preds = %if.then891, %error
  %494 = load ptr, ptr %d.addr, align 8
  %dir894 = getelementptr inbounds %struct.char_directives, ptr %494, i32 0, i32 1
  %495 = load ptr, ptr %dir894, align 8
  %496 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir895 = getelementptr inbounds %struct.char_directives, ptr %496, i32 0, i32 4
  %arraydecay896 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir895, i64 0, i64 0
  %cmp897 = icmp ne ptr %495, %arraydecay896
  br i1 %cmp897, label %if.then899, label %if.end901

if.then899:                                       ; preds = %if.end893
  %497 = load ptr, ptr %d.addr, align 8
  %dir900 = getelementptr inbounds %struct.char_directives, ptr %497, i32 0, i32 1
  %498 = load ptr, ptr %dir900, align 8
  call void @free(ptr noundef %498) #21
  br label %if.end901

if.end901:                                        ; preds = %if.then899, %if.end893
  %call902 = call ptr @__errno_location() #26
  store i32 22, ptr %call902, align 4
  store i32 -1, ptr %retval, align 4
  br label %return

out_of_memory:                                    ; preds = %if.then864, %if.then848, %if.then780, %if.then764, %if.then457, %if.then441, %if.then247, %if.then231
  %499 = load ptr, ptr %a.addr, align 8
  %arg903 = getelementptr inbounds %struct.arguments, ptr %499, i32 0, i32 1
  %500 = load ptr, ptr %arg903, align 8
  %501 = load ptr, ptr %a.addr, align 8
  %direct_alloc_arg904 = getelementptr inbounds %struct.arguments, ptr %501, i32 0, i32 2
  %arraydecay905 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg904, i64 0, i64 0
  %cmp906 = icmp ne ptr %500, %arraydecay905
  br i1 %cmp906, label %if.then908, label %if.end910

if.then908:                                       ; preds = %out_of_memory
  %502 = load ptr, ptr %a.addr, align 8
  %arg909 = getelementptr inbounds %struct.arguments, ptr %502, i32 0, i32 1
  %503 = load ptr, ptr %arg909, align 8
  call void @free(ptr noundef %503) #21
  br label %if.end910

if.end910:                                        ; preds = %if.then908, %out_of_memory
  %504 = load ptr, ptr %d.addr, align 8
  %dir911 = getelementptr inbounds %struct.char_directives, ptr %504, i32 0, i32 1
  %505 = load ptr, ptr %dir911, align 8
  %506 = load ptr, ptr %d.addr, align 8
  %direct_alloc_dir912 = getelementptr inbounds %struct.char_directives, ptr %506, i32 0, i32 4
  %arraydecay913 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir912, i64 0, i64 0
  %cmp914 = icmp ne ptr %505, %arraydecay913
  br i1 %cmp914, label %if.then916, label %if.end918

if.then916:                                       ; preds = %if.end910
  %507 = load ptr, ptr %d.addr, align 8
  %dir917 = getelementptr inbounds %struct.char_directives, ptr %507, i32 0, i32 1
  %508 = load ptr, ptr %dir917, align 8
  call void @free(ptr noundef %508) #21
  br label %if.end918

if.end918:                                        ; preds = %if.then916, %if.end910
  %call919 = call ptr @__errno_location() #26
  store i32 12, ptr %call919, align 4
  store i32 -1, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end918, %if.end901, %while.end879
  %509 = load i32, ptr %retval, align 4
  ret i32 %509
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @xsum(i64 noundef, i64 noundef) #6

declare ptr @rpl_realloc(ptr noundef, i64 noundef) #2

; Function Attrs: nounwind allocsize(0)
declare noalias ptr @malloc(i64 noundef) #15

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @proper_name_lite(ptr noundef %name_ascii, ptr noundef %name_utf8) #3 {
entry:
  %name_ascii.addr = alloca ptr, align 8
  %name_utf8.addr = alloca ptr, align 8
  %translation = alloca ptr, align 8
  store ptr %name_ascii, ptr %name_ascii.addr, align 8
  store ptr %name_utf8, ptr %name_utf8.addr, align 8
  %0 = load ptr, ptr %name_ascii.addr, align 8
  %call = call ptr @gettext(ptr noundef %0) #21
  store ptr %call, ptr %translation, align 8
  %1 = load ptr, ptr %translation, align 8
  %2 = load ptr, ptr %name_ascii.addr, align 8
  %cmp = icmp ne ptr %1, %2
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load ptr, ptr %translation, align 8
  br label %cond.end6

cond.false:                                       ; preds = %entry
  %call1 = call ptr @locale_charset()
  %call2 = call i32 @c_strcasecmp(ptr noundef %call1, ptr noundef @.str.159) #23
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %cond.false
  %4 = load ptr, ptr %name_utf8.addr, align 8
  br label %cond.end

cond.false5:                                      ; preds = %cond.false
  %5 = load ptr, ptr %name_ascii.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond = phi ptr [ %4, %cond.true4 ], [ %5, %cond.false5 ]
  br label %cond.end6

cond.end6:                                        ; preds = %cond.end, %cond.true
  %cond7 = phi ptr [ %3, %cond.true ], [ %cond, %cond.end ]
  ret ptr %cond7
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fclose(ptr noundef nonnull %fp) #3 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca ptr, align 8
  %saved_errno = alloca i32, align 4
  %fd = alloca i32, align 4
  %result = alloca i32, align 4
  store ptr %fp, ptr %fp.addr, align 8
  store i32 0, ptr %saved_errno, align 4
  store i32 0, ptr %result, align 4
  %0 = load ptr, ptr %fp.addr, align 8
  %call = call i32 @fileno(ptr noundef %0) #21
  store i32 %call, ptr %fd, align 4
  %1 = load i32, ptr %fd, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %fp.addr, align 8
  %call1 = call i32 @fclose(ptr noundef %2)
  store i32 %call1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load ptr, ptr %fp.addr, align 8
  %call2 = call i32 @__freading(ptr noundef %3) #21
  %cmp3 = icmp ne i32 %call2, 0
  br i1 %cmp3, label %lor.lhs.false, label %land.lhs.true

lor.lhs.false:                                    ; preds = %if.end
  %4 = load ptr, ptr %fp.addr, align 8
  %call4 = call i32 @fileno(ptr noundef %4) #21
  %call5 = call i64 @lseek(i32 noundef %call4, i64 noundef 0, i32 noundef 1) #21
  %cmp6 = icmp ne i64 %call5, -1
  br i1 %cmp6, label %land.lhs.true, label %if.end10

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %5 = load ptr, ptr %fp.addr, align 8
  %call7 = call i32 @rpl_fflush(ptr noundef %5)
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.then8, label %if.end10

if.then8:                                         ; preds = %land.lhs.true
  %call9 = call ptr @__errno_location() #26
  %6 = load i32, ptr %call9, align 4
  store i32 %6, ptr %saved_errno, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %land.lhs.true, %lor.lhs.false
  %7 = load ptr, ptr %fp.addr, align 8
  %call11 = call i32 @fclose(ptr noundef %7)
  store i32 %call11, ptr %result, align 4
  %8 = load i32, ptr %saved_errno, align 4
  %cmp12 = icmp ne i32 %8, 0
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end10
  %9 = load i32, ptr %saved_errno, align 4
  %call14 = call ptr @__errno_location() #26
  store i32 %9, ptr %call14, align 4
  store i32 -1, ptr %result, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end10
  %10 = load i32, ptr %result, align 4
  store i32 %10, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end15, %if.then
  %11 = load i32, ptr %retval, align 4
  ret i32 %11
}

declare i32 @fclose(ptr noundef) #2

; Function Attrs: nounwind
declare i32 @__freading(ptr noundef) #1

; Function Attrs: nounwind
declare i64 @lseek(i32 noundef, i64 noundef, i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fcntl(i32 noundef %fd, i32 noundef %action, ...) #3 {
entry:
  %fd.addr = alloca i32, align 4
  %action.addr = alloca i32, align 4
  %arg = alloca [1 x %struct.__va_list_tag], align 16
  %result = alloca i32, align 4
  %target = alloca i32, align 4
  %target3 = alloca i32, align 4
  %x = alloca i32, align 4
  %p = alloca ptr, align 8
  store i32 %fd, ptr %fd.addr, align 4
  store i32 %action, ptr %action.addr, align 4
  store i32 -1, ptr %result, align 4
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load i32, ptr %action.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1030, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay1, i32 0, i32 0
  %gp_offset = load i32, ptr %gp_offset_p, align 16
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb
  %1 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay1, i32 0, i32 3
  %reg_save_area = load ptr, ptr %1, align 16
  %2 = getelementptr i8, ptr %reg_save_area, i32 %gp_offset
  %3 = add i32 %gp_offset, 8
  store i32 %3, ptr %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay1, i32 0, i32 2
  %overflow_arg_area = load ptr, ptr %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8, ptr %overflow_arg_area, i32 8
  store ptr %overflow_arg_area.next, ptr %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi ptr [ %2, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %4 = load i32, ptr %vaarg.addr, align 4
  store i32 %4, ptr %target, align 4
  %5 = load i32, ptr %fd.addr, align 4
  %6 = load i32, ptr %target, align 4
  %call = call i32 @rpl_fcntl_DUPFD(i32 noundef %5, i32 noundef %6)
  store i32 %call, ptr %result, align 4
  br label %sw.epilog47

sw.bb2:                                           ; preds = %entry
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  %gp_offset_p5 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay4, i32 0, i32 0
  %gp_offset6 = load i32, ptr %gp_offset_p5, align 16
  %fits_in_gp7 = icmp ule i32 %gp_offset6, 40
  br i1 %fits_in_gp7, label %vaarg.in_reg8, label %vaarg.in_mem10

vaarg.in_reg8:                                    ; preds = %sw.bb2
  %7 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay4, i32 0, i32 3
  %reg_save_area9 = load ptr, ptr %7, align 16
  %8 = getelementptr i8, ptr %reg_save_area9, i32 %gp_offset6
  %9 = add i32 %gp_offset6, 8
  store i32 %9, ptr %gp_offset_p5, align 16
  br label %vaarg.end14

vaarg.in_mem10:                                   ; preds = %sw.bb2
  %overflow_arg_area_p11 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay4, i32 0, i32 2
  %overflow_arg_area12 = load ptr, ptr %overflow_arg_area_p11, align 8
  %overflow_arg_area.next13 = getelementptr i8, ptr %overflow_arg_area12, i32 8
  store ptr %overflow_arg_area.next13, ptr %overflow_arg_area_p11, align 8
  br label %vaarg.end14

vaarg.end14:                                      ; preds = %vaarg.in_mem10, %vaarg.in_reg8
  %vaarg.addr15 = phi ptr [ %8, %vaarg.in_reg8 ], [ %overflow_arg_area12, %vaarg.in_mem10 ]
  %10 = load i32, ptr %vaarg.addr15, align 4
  store i32 %10, ptr %target3, align 4
  %11 = load i32, ptr %fd.addr, align 4
  %12 = load i32, ptr %target3, align 4
  %call16 = call i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 noundef %11, i32 noundef %12)
  store i32 %call16, ptr %result, align 4
  br label %sw.epilog47

sw.default:                                       ; preds = %entry
  %13 = load i32, ptr %action.addr, align 4
  switch i32 %13, label %sw.default33 [
    i32 1, label %sw.bb17
    i32 3, label %sw.bb17
    i32 1025, label %sw.bb17
    i32 9, label %sw.bb17
    i32 1032, label %sw.bb17
    i32 1034, label %sw.bb17
    i32 11, label %sw.bb17
    i32 1033, label %sw.bb19
    i32 0, label %sw.bb19
    i32 1030, label %sw.bb19
    i32 1026, label %sw.bb19
    i32 2, label %sw.bb19
    i32 4, label %sw.bb19
    i32 1024, label %sw.bb19
    i32 8, label %sw.bb19
    i32 1031, label %sw.bb19
    i32 10, label %sw.bb19
  ]

sw.bb17:                                          ; preds = %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default
  %14 = load i32, ptr %fd.addr, align 4
  %15 = load i32, ptr %action.addr, align 4
  %call18 = call i32 (i32, i32, ...) @fcntl(i32 noundef %14, i32 noundef %15)
  store i32 %call18, ptr %result, align 4
  br label %sw.epilog

sw.bb19:                                          ; preds = %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default, %sw.default
  %arraydecay20 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  %gp_offset_p21 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay20, i32 0, i32 0
  %gp_offset22 = load i32, ptr %gp_offset_p21, align 16
  %fits_in_gp23 = icmp ule i32 %gp_offset22, 40
  br i1 %fits_in_gp23, label %vaarg.in_reg24, label %vaarg.in_mem26

vaarg.in_reg24:                                   ; preds = %sw.bb19
  %16 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay20, i32 0, i32 3
  %reg_save_area25 = load ptr, ptr %16, align 16
  %17 = getelementptr i8, ptr %reg_save_area25, i32 %gp_offset22
  %18 = add i32 %gp_offset22, 8
  store i32 %18, ptr %gp_offset_p21, align 16
  br label %vaarg.end30

vaarg.in_mem26:                                   ; preds = %sw.bb19
  %overflow_arg_area_p27 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay20, i32 0, i32 2
  %overflow_arg_area28 = load ptr, ptr %overflow_arg_area_p27, align 8
  %overflow_arg_area.next29 = getelementptr i8, ptr %overflow_arg_area28, i32 8
  store ptr %overflow_arg_area.next29, ptr %overflow_arg_area_p27, align 8
  br label %vaarg.end30

vaarg.end30:                                      ; preds = %vaarg.in_mem26, %vaarg.in_reg24
  %vaarg.addr31 = phi ptr [ %17, %vaarg.in_reg24 ], [ %overflow_arg_area28, %vaarg.in_mem26 ]
  %19 = load i32, ptr %vaarg.addr31, align 4
  store i32 %19, ptr %x, align 4
  %20 = load i32, ptr %fd.addr, align 4
  %21 = load i32, ptr %action.addr, align 4
  %22 = load i32, ptr %x, align 4
  %call32 = call i32 (i32, i32, ...) @fcntl(i32 noundef %20, i32 noundef %21, i32 noundef %22)
  store i32 %call32, ptr %result, align 4
  br label %sw.epilog

sw.default33:                                     ; preds = %sw.default
  %arraydecay34 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  %gp_offset_p35 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay34, i32 0, i32 0
  %gp_offset36 = load i32, ptr %gp_offset_p35, align 16
  %fits_in_gp37 = icmp ule i32 %gp_offset36, 40
  br i1 %fits_in_gp37, label %vaarg.in_reg38, label %vaarg.in_mem40

vaarg.in_reg38:                                   ; preds = %sw.default33
  %23 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay34, i32 0, i32 3
  %reg_save_area39 = load ptr, ptr %23, align 16
  %24 = getelementptr i8, ptr %reg_save_area39, i32 %gp_offset36
  %25 = add i32 %gp_offset36, 8
  store i32 %25, ptr %gp_offset_p35, align 16
  br label %vaarg.end44

vaarg.in_mem40:                                   ; preds = %sw.default33
  %overflow_arg_area_p41 = getelementptr inbounds %struct.__va_list_tag, ptr %arraydecay34, i32 0, i32 2
  %overflow_arg_area42 = load ptr, ptr %overflow_arg_area_p41, align 8
  %overflow_arg_area.next43 = getelementptr i8, ptr %overflow_arg_area42, i32 8
  store ptr %overflow_arg_area.next43, ptr %overflow_arg_area_p41, align 8
  br label %vaarg.end44

vaarg.end44:                                      ; preds = %vaarg.in_mem40, %vaarg.in_reg38
  %vaarg.addr45 = phi ptr [ %24, %vaarg.in_reg38 ], [ %overflow_arg_area42, %vaarg.in_mem40 ]
  %26 = load ptr, ptr %vaarg.addr45, align 8
  store ptr %26, ptr %p, align 8
  %27 = load i32, ptr %fd.addr, align 4
  %28 = load i32, ptr %action.addr, align 4
  %29 = load ptr, ptr %p, align 8
  %call46 = call i32 (i32, i32, ...) @fcntl(i32 noundef %27, i32 noundef %28, ptr noundef %29)
  store i32 %call46, ptr %result, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %vaarg.end44, %vaarg.end30, %sw.bb17
  br label %sw.epilog47

sw.epilog47:                                      ; preds = %sw.epilog, %vaarg.end14, %vaarg.end
  %arraydecay48 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %arg, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay48)
  %30 = load i32, ptr %result, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fcntl_DUPFD(i32 noundef %fd, i32 noundef %target) #3 {
entry:
  %fd.addr = alloca i32, align 4
  %target.addr = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  store i32 %target, ptr %target.addr, align 4
  %0 = load i32, ptr %fd.addr, align 4
  %1 = load i32, ptr %target.addr, align 4
  %call = call i32 (i32, i32, ...) @fcntl(i32 noundef %0, i32 noundef 0, i32 noundef %1)
  store i32 %call, ptr %result, align 4
  %2 = load i32, ptr %result, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 noundef %fd, i32 noundef %target) #3 {
entry:
  %fd.addr = alloca i32, align 4
  %target.addr = alloca i32, align 4
  %result = alloca i32, align 4
  %flags = alloca i32, align 4
  %saved_errno = alloca i32, align 4
  store i32 %fd, ptr %fd.addr, align 4
  store i32 %target, ptr %target.addr, align 4
  %0 = load i32, ptr @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %if.then, label %if.else9

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %fd.addr, align 4
  %2 = load i32, ptr %target.addr, align 4
  %call = call i32 (i32, i32, ...) @fcntl(i32 noundef %1, i32 noundef 1030, i32 noundef %2)
  store i32 %call, ptr %result, align 4
  %3 = load i32, ptr %result, align 4
  %cmp1 = icmp sle i32 0, %3
  br i1 %cmp1, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %call2 = call ptr @__errno_location() #26
  %4 = load i32, ptr %call2, align 4
  %cmp3 = icmp ne i32 %4, 22
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %lor.lhs.false, %if.then
  store i32 1, ptr @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  br label %if.end8

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, ptr %fd.addr, align 4
  %6 = load i32, ptr %target.addr, align 4
  %call5 = call i32 @rpl_fcntl_DUPFD(i32 noundef %5, i32 noundef %6)
  store i32 %call5, ptr %result, align 4
  %7 = load i32, ptr %result, align 4
  %cmp6 = icmp sge i32 %7, 0
  br i1 %cmp6, label %if.then7, label %if.end

if.then7:                                         ; preds = %if.else
  store i32 -1, ptr @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  br label %if.end

if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then4
  br label %if.end11

if.else9:                                         ; preds = %entry
  %8 = load i32, ptr %fd.addr, align 4
  %9 = load i32, ptr %target.addr, align 4
  %call10 = call i32 @rpl_fcntl_DUPFD(i32 noundef %8, i32 noundef %9)
  store i32 %call10, ptr %result, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else9, %if.end8
  %10 = load i32, ptr %result, align 4
  %cmp12 = icmp sle i32 0, %10
  br i1 %cmp12, label %land.lhs.true, label %if.end25

land.lhs.true:                                    ; preds = %if.end11
  %11 = load i32, ptr @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  %cmp13 = icmp eq i32 %11, -1
  br i1 %cmp13, label %if.then14, label %if.end25

if.then14:                                        ; preds = %land.lhs.true
  %12 = load i32, ptr %result, align 4
  %call15 = call i32 (i32, i32, ...) @fcntl(i32 noundef %12, i32 noundef 1)
  store i32 %call15, ptr %flags, align 4
  %13 = load i32, ptr %flags, align 4
  %cmp16 = icmp slt i32 %13, 0
  br i1 %cmp16, label %if.then20, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.then14
  %14 = load i32, ptr %result, align 4
  %15 = load i32, ptr %flags, align 4
  %or = or i32 %15, 1
  %call18 = call i32 (i32, i32, ...) @fcntl(i32 noundef %14, i32 noundef 2, i32 noundef %or)
  %cmp19 = icmp eq i32 %call18, -1
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %lor.lhs.false17, %if.then14
  %call21 = call ptr @__errno_location() #26
  %16 = load i32, ptr %call21, align 4
  store i32 %16, ptr %saved_errno, align 4
  %17 = load i32, ptr %result, align 4
  %call22 = call i32 @close(i32 noundef %17)
  %18 = load i32, ptr %saved_errno, align 4
  %call23 = call ptr @__errno_location() #26
  store i32 %18, ptr %call23, align 4
  store i32 -1, ptr %result, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then20, %lor.lhs.false17
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %land.lhs.true, %if.end11
  %19 = load i32, ptr %result, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fflush(ptr noundef %stream) #3 {
entry:
  %retval = alloca i32, align 4
  %stream.addr = alloca ptr, align 8
  store ptr %stream, ptr %stream.addr, align 8
  %0 = load ptr, ptr %stream.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load ptr, ptr %stream.addr, align 8
  %call = call i32 @__freading(ptr noundef %1) #21
  %cmp1 = icmp ne i32 %call, 0
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load ptr, ptr %stream.addr, align 8
  %call2 = call i32 @fflush(ptr noundef %2)
  store i32 %call2, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load ptr, ptr %stream.addr, align 8
  call void @clear_ungetc_buffer_preserving_position(ptr noundef %3)
  %4 = load ptr, ptr %stream.addr, align 8
  %call3 = call i32 @fflush(ptr noundef %4)
  store i32 %call3, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, ptr %retval, align 4
  ret i32 %5
}

declare i32 @fflush(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(ptr noundef %fp) #3 {
entry:
  %fp.addr = alloca ptr, align 8
  store ptr %fp, ptr %fp.addr, align 8
  %0 = load ptr, ptr %fp.addr, align 8
  %_flags = getelementptr inbounds %struct._IO_FILE, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %_flags, align 8
  %and = and i32 %1, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %fp.addr, align 8
  %call = call i32 @rpl_fseeko(ptr noundef %2, i64 noundef 0, i32 noundef 1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias ptr @rpl_fopen(ptr noundef nonnull %filename, ptr noundef nonnull %mode) #3 {
entry:
  %retval = alloca ptr, align 8
  %filename.addr = alloca ptr, align 8
  %mode.addr = alloca ptr, align 8
  %open_direction = alloca i32, align 4
  %open_flags = alloca i32, align 4
  %open_flags_gnu = alloca i8, align 1
  %fdopen_mode_buf = alloca [81 x i8], align 16
  %p = alloca ptr, align 8
  %q = alloca ptr, align 8
  %len = alloca i64, align 8
  %fd = alloca i32, align 4
  %fp = alloca ptr, align 8
  %saved_errno = alloca i32, align 4
  store ptr %filename, ptr %filename.addr, align 8
  store ptr %mode, ptr %mode.addr, align 8
  store i32 0, ptr %open_direction, align 4
  store i32 0, ptr %open_flags, align 4
  store i8 0, ptr %open_flags_gnu, align 1
  %0 = load ptr, ptr %mode.addr, align 8
  store ptr %0, ptr %p, align 8
  %arraydecay = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  store ptr %arraydecay, ptr %q, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load ptr, ptr %p, align 8
  %2 = load i8, ptr %1, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %p, align 8
  %4 = load i8, ptr %3, align 1
  %conv2 = sext i8 %4 to i32
  switch i32 %conv2, label %sw.default [
    i32 114, label %sw.bb
    i32 119, label %sw.bb6
    i32 97, label %sw.bb14
    i32 98, label %sw.bb23
    i32 43, label %sw.bb32
    i32 120, label %sw.bb40
    i32 101, label %sw.bb42
  ]

sw.bb:                                            ; preds = %for.body
  store i32 0, ptr %open_direction, align 4
  %5 = load ptr, ptr %q, align 8
  %arraydecay3 = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, ptr %arraydecay3, i64 80
  %cmp4 = icmp ult ptr %5, %add.ptr
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %6 = load ptr, ptr %p, align 8
  %7 = load i8, ptr %6, align 1
  %8 = load ptr, ptr %q, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %8, i32 1
  store ptr %incdec.ptr, ptr %q, align 8
  store i8 %7, ptr %8, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %for.inc

sw.bb6:                                           ; preds = %for.body
  store i32 1, ptr %open_direction, align 4
  %9 = load i32, ptr %open_flags, align 4
  %or = or i32 %9, 576
  store i32 %or, ptr %open_flags, align 4
  %10 = load ptr, ptr %q, align 8
  %arraydecay7 = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  %add.ptr8 = getelementptr inbounds i8, ptr %arraydecay7, i64 80
  %cmp9 = icmp ult ptr %10, %add.ptr8
  br i1 %cmp9, label %if.then11, label %if.end13

if.then11:                                        ; preds = %sw.bb6
  %11 = load ptr, ptr %p, align 8
  %12 = load i8, ptr %11, align 1
  %13 = load ptr, ptr %q, align 8
  %incdec.ptr12 = getelementptr inbounds i8, ptr %13, i32 1
  store ptr %incdec.ptr12, ptr %q, align 8
  store i8 %12, ptr %13, align 1
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %sw.bb6
  br label %for.inc

sw.bb14:                                          ; preds = %for.body
  store i32 1, ptr %open_direction, align 4
  %14 = load i32, ptr %open_flags, align 4
  %or15 = or i32 %14, 1088
  store i32 %or15, ptr %open_flags, align 4
  %15 = load ptr, ptr %q, align 8
  %arraydecay16 = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  %add.ptr17 = getelementptr inbounds i8, ptr %arraydecay16, i64 80
  %cmp18 = icmp ult ptr %15, %add.ptr17
  br i1 %cmp18, label %if.then20, label %if.end22

if.then20:                                        ; preds = %sw.bb14
  %16 = load ptr, ptr %p, align 8
  %17 = load i8, ptr %16, align 1
  %18 = load ptr, ptr %q, align 8
  %incdec.ptr21 = getelementptr inbounds i8, ptr %18, i32 1
  store ptr %incdec.ptr21, ptr %q, align 8
  store i8 %17, ptr %18, align 1
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %sw.bb14
  br label %for.inc

sw.bb23:                                          ; preds = %for.body
  %19 = load i32, ptr %open_flags, align 4
  %or24 = or i32 %19, 0
  store i32 %or24, ptr %open_flags, align 4
  %20 = load ptr, ptr %q, align 8
  %arraydecay25 = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  %add.ptr26 = getelementptr inbounds i8, ptr %arraydecay25, i64 80
  %cmp27 = icmp ult ptr %20, %add.ptr26
  br i1 %cmp27, label %if.then29, label %if.end31

if.then29:                                        ; preds = %sw.bb23
  %21 = load ptr, ptr %p, align 8
  %22 = load i8, ptr %21, align 1
  %23 = load ptr, ptr %q, align 8
  %incdec.ptr30 = getelementptr inbounds i8, ptr %23, i32 1
  store ptr %incdec.ptr30, ptr %q, align 8
  store i8 %22, ptr %23, align 1
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %sw.bb23
  br label %for.inc

sw.bb32:                                          ; preds = %for.body
  store i32 2, ptr %open_direction, align 4
  %24 = load ptr, ptr %q, align 8
  %arraydecay33 = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  %add.ptr34 = getelementptr inbounds i8, ptr %arraydecay33, i64 80
  %cmp35 = icmp ult ptr %24, %add.ptr34
  br i1 %cmp35, label %if.then37, label %if.end39

if.then37:                                        ; preds = %sw.bb32
  %25 = load ptr, ptr %p, align 8
  %26 = load i8, ptr %25, align 1
  %27 = load ptr, ptr %q, align 8
  %incdec.ptr38 = getelementptr inbounds i8, ptr %27, i32 1
  store ptr %incdec.ptr38, ptr %q, align 8
  store i8 %26, ptr %27, align 1
  br label %if.end39

if.end39:                                         ; preds = %if.then37, %sw.bb32
  br label %for.inc

sw.bb40:                                          ; preds = %for.body
  %28 = load i32, ptr %open_flags, align 4
  %or41 = or i32 %28, 128
  store i32 %or41, ptr %open_flags, align 4
  store i8 1, ptr %open_flags_gnu, align 1
  br label %for.inc

sw.bb42:                                          ; preds = %for.body
  %29 = load i32, ptr %open_flags, align 4
  %or43 = or i32 %29, 524288
  store i32 %or43, ptr %open_flags, align 4
  store i8 1, ptr %open_flags_gnu, align 1
  br label %for.inc

sw.default:                                       ; preds = %for.body
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  %30 = load ptr, ptr %p, align 8
  %call = call i64 @strlen(ptr noundef %30) #23
  store i64 %call, ptr %len, align 8
  %31 = load i64, ptr %len, align 8
  %arraydecay44 = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  %add.ptr45 = getelementptr inbounds i8, ptr %arraydecay44, i64 80
  %32 = load ptr, ptr %q, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %add.ptr45 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %32 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp46 = icmp ugt i64 %31, %sub.ptr.sub
  br i1 %cmp46, label %if.then48, label %if.end54

if.then48:                                        ; preds = %sw.epilog
  %arraydecay49 = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  %add.ptr50 = getelementptr inbounds i8, ptr %arraydecay49, i64 80
  %33 = load ptr, ptr %q, align 8
  %sub.ptr.lhs.cast51 = ptrtoint ptr %add.ptr50 to i64
  %sub.ptr.rhs.cast52 = ptrtoint ptr %33 to i64
  %sub.ptr.sub53 = sub i64 %sub.ptr.lhs.cast51, %sub.ptr.rhs.cast52
  store i64 %sub.ptr.sub53, ptr %len, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.then48, %sw.epilog
  %34 = load ptr, ptr %q, align 8
  %35 = load ptr, ptr %p, align 8
  %36 = load i64, ptr %len, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %34, ptr align 1 %35, i64 %36, i1 false)
  %37 = load i64, ptr %len, align 8
  %38 = load ptr, ptr %q, align 8
  %add.ptr55 = getelementptr inbounds i8, ptr %38, i64 %37
  store ptr %add.ptr55, ptr %q, align 8
  br label %for.end

for.inc:                                          ; preds = %sw.bb42, %sw.bb40, %if.end39, %if.end31, %if.end22, %if.end13, %if.end
  %39 = load ptr, ptr %p, align 8
  %incdec.ptr56 = getelementptr inbounds i8, ptr %39, i32 1
  store ptr %incdec.ptr56, ptr %p, align 8
  br label %for.cond, !llvm.loop !51

for.end:                                          ; preds = %if.end54, %for.cond
  %40 = load ptr, ptr %q, align 8
  store i8 0, ptr %40, align 1
  %41 = load i8, ptr %open_flags_gnu, align 1
  %tobool = trunc i8 %41 to i1
  br i1 %tobool, label %if.then57, label %if.end73

if.then57:                                        ; preds = %for.end
  %42 = load ptr, ptr %filename.addr, align 8
  %43 = load i32, ptr %open_direction, align 4
  %44 = load i32, ptr %open_flags, align 4
  %or58 = or i32 %43, %44
  %call59 = call i32 (ptr, i32, ...) @open(ptr noundef %42, i32 noundef %or58, i32 noundef 438)
  store i32 %call59, ptr %fd, align 4
  %45 = load i32, ptr %fd, align 4
  %cmp60 = icmp slt i32 %45, 0
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.then57
  store ptr null, ptr %retval, align 8
  br label %return

if.end63:                                         ; preds = %if.then57
  %46 = load i32, ptr %fd, align 4
  %arraydecay64 = getelementptr inbounds [81 x i8], ptr %fdopen_mode_buf, i64 0, i64 0
  %call65 = call noalias ptr @fdopen(i32 noundef %46, ptr noundef %arraydecay64) #21
  store ptr %call65, ptr %fp, align 8
  %47 = load ptr, ptr %fp, align 8
  %cmp66 = icmp eq ptr %47, null
  br i1 %cmp66, label %if.then68, label %if.end72

if.then68:                                        ; preds = %if.end63
  %call69 = call ptr @__errno_location() #26
  %48 = load i32, ptr %call69, align 4
  store i32 %48, ptr %saved_errno, align 4
  %49 = load i32, ptr %fd, align 4
  %call70 = call i32 @close(i32 noundef %49)
  %50 = load i32, ptr %saved_errno, align 4
  %call71 = call ptr @__errno_location() #26
  store i32 %50, ptr %call71, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.then68, %if.end63
  %51 = load ptr, ptr %fp, align 8
  store ptr %51, ptr %retval, align 8
  br label %return

if.end73:                                         ; preds = %for.end
  %52 = load i32, ptr %open_direction, align 4
  %53 = load ptr, ptr %filename.addr, align 8
  %54 = load ptr, ptr %mode.addr, align 8
  %call74 = call ptr @orig_fopen(ptr noundef %53, ptr noundef %54)
  store ptr %call74, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end73, %if.end72, %if.then62
  %55 = load ptr, ptr %retval, align 8
  ret ptr %55
}

declare i32 @open(ptr noundef, i32 noundef, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @orig_fopen(ptr noundef %filename, ptr noundef %mode) #3 {
entry:
  %filename.addr = alloca ptr, align 8
  %mode.addr = alloca ptr, align 8
  store ptr %filename, ptr %filename.addr, align 8
  store ptr %mode, ptr %mode.addr, align 8
  %0 = load ptr, ptr %filename.addr, align 8
  %1 = load ptr, ptr %mode.addr, align 8
  %call = call noalias ptr @fopen(ptr noundef %0, ptr noundef %1)
  ret ptr %call
}

declare noalias ptr @fopen(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_fseeko(ptr noundef nonnull %fp, i64 noundef %offset, i32 noundef %whence) #3 {
entry:
  %retval = alloca i32, align 4
  %fp.addr = alloca ptr, align 8
  %offset.addr = alloca i64, align 8
  %whence.addr = alloca i32, align 4
  %pos = alloca i64, align 8
  store ptr %fp, ptr %fp.addr, align 8
  store i64 %offset, ptr %offset.addr, align 8
  store i32 %whence, ptr %whence.addr, align 4
  %0 = load ptr, ptr %fp.addr, align 8
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, ptr %0, i32 0, i32 2
  %1 = load ptr, ptr %_IO_read_end, align 8
  %2 = load ptr, ptr %fp.addr, align 8
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, ptr %2, i32 0, i32 1
  %3 = load ptr, ptr %_IO_read_ptr, align 8
  %cmp = icmp eq ptr %1, %3
  br i1 %cmp, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %entry
  %4 = load ptr, ptr %fp.addr, align 8
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, ptr %4, i32 0, i32 5
  %5 = load ptr, ptr %_IO_write_ptr, align 8
  %6 = load ptr, ptr %fp.addr, align 8
  %_IO_write_base = getelementptr inbounds %struct._IO_FILE, ptr %6, i32 0, i32 4
  %7 = load ptr, ptr %_IO_write_base, align 8
  %cmp1 = icmp eq ptr %5, %7
  br i1 %cmp1, label %land.lhs.true2, label %if.end7

land.lhs.true2:                                   ; preds = %land.lhs.true
  %8 = load ptr, ptr %fp.addr, align 8
  %_IO_save_base = getelementptr inbounds %struct._IO_FILE, ptr %8, i32 0, i32 9
  %9 = load ptr, ptr %_IO_save_base, align 8
  %cmp3 = icmp eq ptr %9, null
  br i1 %cmp3, label %if.then, label %if.end7

if.then:                                          ; preds = %land.lhs.true2
  %10 = load ptr, ptr %fp.addr, align 8
  %call = call i32 @fileno(ptr noundef %10) #21
  %11 = load i64, ptr %offset.addr, align 8
  %12 = load i32, ptr %whence.addr, align 4
  %call4 = call i64 @lseek(i32 noundef %call, i64 noundef %11, i32 noundef %12) #21
  store i64 %call4, ptr %pos, align 8
  %13 = load i64, ptr %pos, align 8
  %cmp5 = icmp eq i64 %13, -1
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then
  store i32 -1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %14 = load ptr, ptr %fp.addr, align 8
  %_flags = getelementptr inbounds %struct._IO_FILE, ptr %14, i32 0, i32 0
  %15 = load i32, ptr %_flags, align 8
  %and = and i32 %15, -17
  store i32 %and, ptr %_flags, align 8
  %16 = load i64, ptr %pos, align 8
  %17 = load ptr, ptr %fp.addr, align 8
  %_offset = getelementptr inbounds %struct._IO_FILE, ptr %17, i32 0, i32 21
  store i64 %16, ptr %_offset, align 8
  store i32 0, ptr %retval, align 4
  br label %return

if.end7:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %18 = load ptr, ptr %fp.addr, align 8
  %19 = load i64, ptr %offset.addr, align 8
  %20 = load i32, ptr %whence.addr, align 4
  %call8 = call i32 @fseeko(ptr noundef %18, i64 noundef %19, i32 noundef %20)
  store i32 %call8, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end7, %if.end, %if.then6
  %21 = load i32, ptr %retval, align 4
  ret i32 %21
}

declare i32 @fseeko(ptr noundef, i64 noundef, i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rpl_mbrtoc32(ptr noundef %pwc, ptr noundef %s, i64 noundef %n, ptr noundef %ps) #3 {
entry:
  %retval = alloca i64, align 8
  %pwc.addr = alloca ptr, align 8
  %s.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %ps.addr = alloca ptr, align 8
  %ret = alloca i64, align 8
  store ptr %pwc, ptr %pwc.addr, align 8
  store ptr %s, ptr %s.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store ptr %ps, ptr %ps.addr, align 8
  %0 = load ptr, ptr %s.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr null, ptr %pwc.addr, align 8
  store ptr @.str.172, ptr %s.addr, align 8
  store i64 1, ptr %n.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %ps.addr, align 8
  %cmp1 = icmp eq ptr %1, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store ptr @internal_state, ptr %ps.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = load ptr, ptr %pwc.addr, align 8
  %3 = load ptr, ptr %s.addr, align 8
  %4 = load i64, ptr %n.addr, align 8
  %5 = load ptr, ptr %ps.addr, align 8
  %call = call i64 @mbrtoc32(ptr noundef %2, ptr noundef %3, i64 noundef %4, ptr noundef %5) #21
  store i64 %call, ptr %ret, align 8
  %6 = load i64, ptr %ret, align 8
  %cmp4 = icmp ult i64 %6, -3
  br i1 %cmp4, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %if.end3
  %7 = load ptr, ptr %ps.addr, align 8
  %call5 = call i32 @mbsinit(ptr noundef %7) #23
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end7, label %if.then6

if.then6:                                         ; preds = %land.lhs.true
  %8 = load ptr, ptr %ps.addr, align 8
  call void @mbszero(ptr noundef %8)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %land.lhs.true, %if.end3
  %9 = load i64, ptr %ret, align 8
  %cmp8 = icmp eq i64 %9, -3
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  call void @abort() #22
  unreachable

if.end10:                                         ; preds = %if.end7
  %10 = load i64, ptr %ret, align 8
  %cmp11 = icmp ule i64 -2, %10
  br i1 %cmp11, label %land.lhs.true12, label %if.end20

land.lhs.true12:                                  ; preds = %if.end10
  %11 = load i64, ptr %n.addr, align 8
  %cmp13 = icmp ne i64 %11, 0
  br i1 %cmp13, label %land.lhs.true14, label %if.end20

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %call15 = call zeroext i1 @hard_locale(i32 noundef 0)
  br i1 %call15, label %if.end20, label %if.then16

if.then16:                                        ; preds = %land.lhs.true14
  %12 = load ptr, ptr %pwc.addr, align 8
  %cmp17 = icmp ne ptr %12, null
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.then16
  %13 = load ptr, ptr %s.addr, align 8
  %14 = load i8, ptr %13, align 1
  %conv = zext i8 %14 to i32
  %15 = load ptr, ptr %pwc.addr, align 8
  store i32 %conv, ptr %15, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.then16
  store i64 1, ptr %retval, align 8
  br label %return

if.end20:                                         ; preds = %land.lhs.true14, %land.lhs.true12, %if.end10
  %16 = load i64, ptr %ret, align 8
  store i64 %16, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end20, %if.end19
  %17 = load i64, ptr %retval, align 8
  ret i64 %17
}

; Function Attrs: nounwind
declare i64 @mbrtoc32(ptr noundef, ptr noundef, i64 noundef, ptr noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare i32 @mbsinit(ptr noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @set_program_name(ptr noundef %argv0) #3 {
entry:
  %argv0.addr = alloca ptr, align 8
  %slash = alloca ptr, align 8
  %base = alloca ptr, align 8
  store ptr %argv0, ptr %argv0.addr, align 8
  %0 = load ptr, ptr %argv0.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stderr, align 8
  %call = call i32 @fputs(ptr noundef @.str.177, ptr noundef %1)
  call void @abort() #22
  unreachable

if.end:                                           ; preds = %entry
  %2 = load ptr, ptr %argv0.addr, align 8
  %call1 = call ptr @strrchr(ptr noundef %2, i32 noundef 47) #23
  store ptr %call1, ptr %slash, align 8
  %3 = load ptr, ptr %slash, align 8
  %cmp2 = icmp ne ptr %3, null
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load ptr, ptr %slash, align 8
  %add.ptr = getelementptr inbounds i8, ptr %4, i64 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %5 = load ptr, ptr %argv0.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %add.ptr, %cond.true ], [ %5, %cond.false ]
  store ptr %cond, ptr %base, align 8
  %6 = load ptr, ptr %base, align 8
  %7 = load ptr, ptr %argv0.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %6 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp sge i64 %sub.ptr.sub, 7
  br i1 %cmp3, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %cond.end
  %8 = load ptr, ptr %base, align 8
  %add.ptr4 = getelementptr inbounds i8, ptr %8, i64 -7
  %call5 = call i32 @strncmp(ptr noundef %add.ptr4, ptr noundef @.str.1.178, i64 noundef 7) #23
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true
  %9 = load ptr, ptr %base, align 8
  store ptr %9, ptr %argv0.addr, align 8
  %10 = load ptr, ptr %base, align 8
  %call8 = call i32 @strncmp(ptr noundef %10, ptr noundef @.str.2.179, i64 noundef 3) #23
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.then7
  %11 = load ptr, ptr %base, align 8
  %add.ptr11 = getelementptr inbounds i8, ptr %11, i64 3
  store ptr %add.ptr11, ptr %base, align 8
  %12 = load ptr, ptr %base, align 8
  store ptr %12, ptr %argv0.addr, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.then7
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %land.lhs.true, %cond.end
  %13 = load ptr, ptr %argv0.addr, align 8
  store ptr %13, ptr @program_name, align 8
  %14 = load ptr, ptr %argv0.addr, align 8
  store ptr %14, ptr @program_invocation_name, align 8
  %15 = load ptr, ptr %base, align 8
  store ptr %15, ptr @program_invocation_short_name, align 8
  ret void
}

declare i32 @fputs(ptr noundef, ptr noundef) #2

; Function Attrs: nounwind willreturn memory(read)
declare ptr @strrchr(ptr noundef, i32 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setlocale_null_r(i32 noundef %category, ptr noundef nonnull %buf, i64 noundef %bufsize) #3 {
entry:
  %category.addr = alloca i32, align 4
  %buf.addr = alloca ptr, align 8
  %bufsize.addr = alloca i64, align 8
  store i32 %category, ptr %category.addr, align 4
  store ptr %buf, ptr %buf.addr, align 8
  store i64 %bufsize, ptr %bufsize.addr, align 8
  %0 = load i32, ptr %category.addr, align 4
  %1 = load ptr, ptr %buf.addr, align 8
  %2 = load i64, ptr %bufsize.addr, align 8
  %call = call i32 @setlocale_null_r_unlocked(i32 noundef %0, ptr noundef %1, i64 noundef %2)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @setlocale_null(i32 noundef %category) #3 {
entry:
  %category.addr = alloca i32, align 4
  store i32 %category, ptr %category.addr, align 4
  %0 = load i32, ptr %category.addr, align 4
  %call = call ptr @setlocale_null_unlocked(i32 noundef %0)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @setlocale_null_unlocked(i32 noundef %category) #3 {
entry:
  %category.addr = alloca i32, align 4
  %result = alloca ptr, align 8
  store i32 %category, ptr %category.addr, align 4
  %0 = load i32, ptr %category.addr, align 4
  %call = call ptr @setlocale(i32 noundef %0, ptr noundef null) #21
  store ptr %call, ptr %result, align 8
  %1 = load ptr, ptr %result, align 8
  ret ptr %1
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @setlocale_null_r_unlocked(i32 noundef %category, ptr noundef nonnull %buf, i64 noundef %bufsize) #3 {
entry:
  %retval = alloca i32, align 4
  %category.addr = alloca i32, align 4
  %buf.addr = alloca ptr, align 8
  %bufsize.addr = alloca i64, align 8
  %result = alloca ptr, align 8
  %length = alloca i64, align 8
  store i32 %category, ptr %category.addr, align 4
  store ptr %buf, ptr %buf.addr, align 8
  store i64 %bufsize, ptr %bufsize.addr, align 8
  %0 = load i32, ptr %category.addr, align 4
  %call = call ptr @setlocale_null_unlocked(i32 noundef %0)
  store ptr %call, ptr %result, align 8
  %1 = load ptr, ptr %result, align 8
  %cmp = icmp eq ptr %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, ptr %bufsize.addr, align 8
  %cmp1 = icmp ugt i64 %2, 0
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %3 = load ptr, ptr %buf.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %3, i64 0
  store i8 0, ptr %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i32 22, ptr %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %4 = load ptr, ptr %result, align 8
  %call3 = call i64 @strlen(ptr noundef %4) #23
  store i64 %call3, ptr %length, align 8
  %5 = load i64, ptr %length, align 8
  %6 = load i64, ptr %bufsize.addr, align 8
  %cmp4 = icmp ult i64 %5, %6
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else
  %7 = load ptr, ptr %buf.addr, align 8
  %8 = load ptr, ptr %result, align 8
  %9 = load i64, ptr %length, align 8
  %add = add i64 %9, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %7, ptr align 1 %8, i64 %add, i1 false)
  store i32 0, ptr %retval, align 4
  br label %return

if.else6:                                         ; preds = %if.else
  %10 = load i64, ptr %bufsize.addr, align 8
  %cmp7 = icmp ugt i64 %10, 0
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.else6
  %11 = load ptr, ptr %buf.addr, align 8
  %12 = load ptr, ptr %result, align 8
  %13 = load i64, ptr %bufsize.addr, align 8
  %sub = sub i64 %13, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %11, ptr align 1 %12, i64 %sub, i1 false)
  %14 = load ptr, ptr %buf.addr, align 8
  %15 = load i64, ptr %bufsize.addr, align 8
  %sub9 = sub i64 %15, 1
  %arrayidx10 = getelementptr inbounds i8, ptr %14, i64 %sub9
  store i8 0, ptr %arrayidx10, align 1
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.else6
  store i32 34, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end11, %if.then5, %if.end
  %16 = load i32, ptr %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local ptr @vasnprintf(ptr noundef %resultbuf, ptr noundef %lengthp, ptr noundef %format, ptr noundef %args) #3 {
entry:
  %retval = alloca ptr, align 8
  %resultbuf.addr = alloca ptr, align 8
  %lengthp.addr = alloca ptr, align 8
  %format.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  %d = alloca %struct.char_directives, align 8
  %a = alloca %struct.arguments, align 16
  %buf_neededlength = alloca i64, align 8
  %buf = alloca ptr, align 8
  %buf_malloced = alloca ptr, align 8
  %cp = alloca ptr, align 8
  %i = alloca i64, align 8
  %dp = alloca ptr, align 8
  %result = alloca ptr, align 8
  %allocated = alloca i64, align 8
  %length = alloca i64, align 8
  %buf_memsize = alloca i64, align 8
  %n = alloca i64, align 8
  %augmented_length = alloca i64, align 8
  %memory_size = alloca i64, align 8
  %memory = alloca ptr, align 8
  %augmented_length73 = alloca i64, align 8
  %memory_size82 = alloca i64, align 8
  %memory83 = alloca ptr, align 8
  %flags = alloca i32, align 4
  %has_width = alloca i32, align 4
  %width = alloca i64, align 8
  %has_precision = alloca i32, align 4
  %precision = alloca i64, align 8
  %arg161 = alloca i32, align 4
  %digitp = alloca ptr, align 8
  %arg207 = alloca i32, align 4
  %digitp226 = alloca ptr, align 8
  %arg246 = alloca ptr, align 8
  %bytes = alloca i64, align 8
  %w = alloca i64, align 8
  %total = alloca i64, align 8
  %memory_size271 = alloca i64, align 8
  %memory272 = alloca ptr, align 8
  %n327 = alloca i64, align 8
  %n340 = alloca i64, align 8
  %flags358 = alloca i32, align 4
  %has_width360 = alloca i32, align 4
  %width361 = alloca i64, align 8
  %has_precision362 = alloca i32, align 4
  %precision363 = alloca i64, align 8
  %arg373 = alloca i32, align 4
  %digitp394 = alloca ptr, align 8
  %arg429 = alloca i32, align 4
  %digitp448 = alloca ptr, align 8
  %arg471 = alloca ptr, align 8
  %arg_end = alloca ptr, align 8
  %bytes476 = alloca i64, align 8
  %w477 = alloca i64, align 8
  %state = alloca %struct.__mbstate_t, align 4
  %cbuf = alloca [64 x i8], align 16
  %count484 = alloca i32, align 4
  %state509 = alloca %struct.__mbstate_t, align 4
  %cbuf511 = alloca [64 x i8], align 16
  %count512 = alloca i32, align 4
  %n542 = alloca i64, align 8
  %memory_size548 = alloca i64, align 8
  %memory549 = alloca ptr, align 8
  %remaining = alloca i64, align 8
  %state605 = alloca %struct.__mbstate_t, align 4
  %memory_size610 = alloca i64, align 8
  %memory611 = alloca ptr, align 8
  %cbuf664 = alloca [64 x i8], align 16
  %count665 = alloca i32, align 4
  %state691 = alloca %struct.__mbstate_t, align 4
  %cbuf696 = alloca [64 x i8], align 16
  %count697 = alloca i32, align 4
  %memory_size714 = alloca i64, align 8
  %memory715 = alloca ptr, align 8
  %n781 = alloca i64, align 8
  %memory_size787 = alloca i64, align 8
  %memory788 = alloca ptr, align 8
  %type842 = alloca i32, align 4
  %flags847 = alloca i32, align 4
  %fbp = alloca ptr, align 8
  %prefix_count = alloca i32, align 4
  %prefixes = alloca [2 x i32], align 4
  %orig_errno = alloca i32, align 4
  %n890 = alloca i64, align 8
  %width896 = alloca i64, align 8
  %arg901 = alloca i32, align 4
  %digitp921 = alloca ptr, align 8
  %n955 = alloca i64, align 8
  %memory_size1014 = alloca i64, align 8
  %memory1015 = alloca ptr, align 8
  %count1068 = alloca i32, align 4
  %retcount = alloca i32, align 4
  %maxlen = alloca i64, align 8
  %arg1077 = alloca i32, align 4
  %arg1098 = alloca i32, align 4
  %arg1119 = alloca i32, align 4
  %arg1140 = alloca i32, align 4
  %arg1161 = alloca i32, align 4
  %arg1181 = alloca i32, align 4
  %arg1201 = alloca i64, align 8
  %arg1221 = alloca i64, align 8
  %arg1241 = alloca i64, align 8
  %arg1261 = alloca i64, align 8
  %arg1281 = alloca i8, align 1
  %arg1304 = alloca i8, align 1
  %arg1327 = alloca i16, align 2
  %arg1350 = alloca i16, align 2
  %arg1373 = alloca i32, align 4
  %arg1393 = alloca i32, align 4
  %arg1413 = alloca i64, align 8
  %arg1433 = alloca i64, align 8
  %arg1453 = alloca i8, align 1
  %arg1476 = alloca i8, align 1
  %arg1499 = alloca i64, align 8
  %arg1519 = alloca i64, align 8
  %arg1539 = alloca i64, align 8
  %arg1559 = alloca i64, align 8
  %arg1579 = alloca i64, align 8
  %arg1599 = alloca i64, align 8
  %arg1619 = alloca double, align 8
  %arg1639 = alloca x86_fp80, align 16
  %arg1659 = alloca i32, align 4
  %arg1679 = alloca i32, align 4
  %arg1699 = alloca ptr, align 8
  %arg1719 = alloca ptr, align 8
  %arg1739 = alloca ptr, align 8
  %n1826 = alloca i64, align 8
  %memory_size1843 = alloca i64, align 8
  %memory1844 = alloca ptr, align 8
  %memory_size1908 = alloca i64, align 8
  %memory1909 = alloca ptr, align 8
  %memory1967 = alloca ptr, align 8
  store ptr %resultbuf, ptr %resultbuf.addr, align 8
  store ptr %lengthp, ptr %lengthp.addr, align 8
  store ptr %format, ptr %format.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  %0 = load ptr, ptr %format.addr, align 8
  %call = call i32 @printf_parse(ptr noundef %0, ptr noundef %d, ptr noundef %a)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr null, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %args.addr, align 8
  %call1 = call i32 @printf_fetchargs(ptr noundef %1, ptr noundef %a)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %fail_1_with_EINVAL

if.end4:                                          ; preds = %if.end
  %max_width_length = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 2
  %2 = load i64, ptr %max_width_length, align 8
  %max_precision_length = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 3
  %3 = load i64, ptr %max_precision_length, align 8
  %call5 = call i64 @xsum4(i64 noundef 7, i64 noundef %2, i64 noundef %3, i64 noundef 6) #23
  store i64 %call5, ptr %buf_neededlength, align 8
  %4 = load i64, ptr %buf_neededlength, align 8
  %cmp6 = icmp ult i64 %4, 4000
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end4
  %5 = load i64, ptr %buf_neededlength, align 8
  %mul = mul i64 %5, 1
  %6 = alloca i8, i64 %mul, align 16
  store ptr %6, ptr %buf, align 8
  store ptr null, ptr %buf_malloced, align 8
  br label %if.end17

if.else:                                          ; preds = %if.end4
  %7 = load i64, ptr %buf_neededlength, align 8
  %cmp8 = icmp ule i64 %7, -1
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %8 = load i64, ptr %buf_neededlength, align 8
  %mul9 = mul i64 %8, 1
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %mul9, %cond.true ], [ -1, %cond.false ]
  store i64 %cond, ptr %buf_memsize, align 8
  %9 = load i64, ptr %buf_memsize, align 8
  %cmp10 = icmp eq i64 %9, -1
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %cond.end
  br label %out_of_memory_1

if.end12:                                         ; preds = %cond.end
  %10 = load i64, ptr %buf_memsize, align 8
  %call13 = call noalias ptr @malloc(i64 noundef %10) #29
  store ptr %call13, ptr %buf, align 8
  %11 = load ptr, ptr %buf, align 8
  %cmp14 = icmp eq ptr %11, null
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end12
  br label %out_of_memory_1

if.end16:                                         ; preds = %if.end12
  %12 = load ptr, ptr %buf, align 8
  store ptr %12, ptr %buf_malloced, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then7
  %13 = load ptr, ptr %resultbuf.addr, align 8
  store ptr %13, ptr %result, align 8
  %14 = load ptr, ptr %resultbuf.addr, align 8
  %cmp18 = icmp ne ptr %14, null
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %if.end17
  %15 = load ptr, ptr %lengthp.addr, align 8
  %16 = load i64, ptr %15, align 8
  br label %cond.end21

cond.false20:                                     ; preds = %if.end17
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i64 [ %16, %cond.true19 ], [ 0, %cond.false20 ]
  store i64 %cond22, ptr %allocated, align 8
  store i64 0, ptr %length, align 8
  %17 = load ptr, ptr %format.addr, align 8
  store ptr %17, ptr %cp, align 8
  store i64 0, ptr %i, align 8
  %dir = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %18 = load ptr, ptr %dir, align 8
  %arrayidx = getelementptr inbounds %struct.char_directive, ptr %18, i64 0
  store ptr %arrayidx, ptr %dp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end21
  %19 = load ptr, ptr %cp, align 8
  %20 = load ptr, ptr %dp, align 8
  %dir_start = getelementptr inbounds %struct.char_directive, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %dir_start, align 8
  %cmp23 = icmp ne ptr %19, %21
  br i1 %cmp23, label %if.then24, label %if.end66

if.then24:                                        ; preds = %for.cond
  %22 = load ptr, ptr %dp, align 8
  %dir_start25 = getelementptr inbounds %struct.char_directive, ptr %22, i32 0, i32 0
  %23 = load ptr, ptr %dir_start25, align 8
  %24 = load ptr, ptr %cp, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %23 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, ptr %n, align 8
  %25 = load i64, ptr %length, align 8
  %26 = load i64, ptr %n, align 8
  %call26 = call i64 @xsum(i64 noundef %25, i64 noundef %26) #23
  store i64 %call26, ptr %augmented_length, align 8
  %27 = load i64, ptr %augmented_length, align 8
  %28 = load i64, ptr %allocated, align 8
  %cmp27 = icmp ugt i64 %27, %28
  br i1 %cmp27, label %if.then28, label %if.end65

if.then28:                                        ; preds = %if.then24
  %29 = load i64, ptr %allocated, align 8
  %cmp29 = icmp ugt i64 %29, 0
  br i1 %cmp29, label %cond.true30, label %cond.false37

cond.true30:                                      ; preds = %if.then28
  %30 = load i64, ptr %allocated, align 8
  %cmp31 = icmp ule i64 %30, 9223372036854775807
  br i1 %cmp31, label %cond.true32, label %cond.false34

cond.true32:                                      ; preds = %cond.true30
  %31 = load i64, ptr %allocated, align 8
  %mul33 = mul i64 %31, 2
  br label %cond.end35

cond.false34:                                     ; preds = %cond.true30
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi i64 [ %mul33, %cond.true32 ], [ -1, %cond.false34 ]
  br label %cond.end38

cond.false37:                                     ; preds = %if.then28
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false37, %cond.end35
  %cond39 = phi i64 [ %cond36, %cond.end35 ], [ 12, %cond.false37 ]
  store i64 %cond39, ptr %allocated, align 8
  %32 = load i64, ptr %augmented_length, align 8
  %33 = load i64, ptr %allocated, align 8
  %cmp40 = icmp ugt i64 %32, %33
  br i1 %cmp40, label %if.then41, label %if.end42

if.then41:                                        ; preds = %cond.end38
  %34 = load i64, ptr %augmented_length, align 8
  store i64 %34, ptr %allocated, align 8
  br label %if.end42

if.end42:                                         ; preds = %if.then41, %cond.end38
  %35 = load i64, ptr %allocated, align 8
  %cmp43 = icmp ule i64 %35, -1
  br i1 %cmp43, label %cond.true44, label %cond.false46

cond.true44:                                      ; preds = %if.end42
  %36 = load i64, ptr %allocated, align 8
  %mul45 = mul i64 %36, 1
  br label %cond.end47

cond.false46:                                     ; preds = %if.end42
  br label %cond.end47

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi i64 [ %mul45, %cond.true44 ], [ -1, %cond.false46 ]
  store i64 %cond48, ptr %memory_size, align 8
  %37 = load i64, ptr %memory_size, align 8
  %cmp49 = icmp eq i64 %37, -1
  br i1 %cmp49, label %if.then50, label %if.end51

if.then50:                                        ; preds = %cond.end47
  br label %out_of_memory

if.end51:                                         ; preds = %cond.end47
  %38 = load ptr, ptr %result, align 8
  %39 = load ptr, ptr %resultbuf.addr, align 8
  %cmp52 = icmp eq ptr %38, %39
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %if.end51
  %40 = load i64, ptr %memory_size, align 8
  %call54 = call noalias ptr @malloc(i64 noundef %40) #29
  store ptr %call54, ptr %memory, align 8
  br label %if.end57

if.else55:                                        ; preds = %if.end51
  %41 = load ptr, ptr %result, align 8
  %42 = load i64, ptr %memory_size, align 8
  %call56 = call ptr @rpl_realloc(ptr noundef %41, i64 noundef %42)
  store ptr %call56, ptr %memory, align 8
  br label %if.end57

if.end57:                                         ; preds = %if.else55, %if.then53
  %43 = load ptr, ptr %memory, align 8
  %cmp58 = icmp eq ptr %43, null
  br i1 %cmp58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.end57
  br label %out_of_memory

if.end60:                                         ; preds = %if.end57
  %44 = load ptr, ptr %result, align 8
  %45 = load ptr, ptr %resultbuf.addr, align 8
  %cmp61 = icmp eq ptr %44, %45
  br i1 %cmp61, label %land.lhs.true, label %if.end64

land.lhs.true:                                    ; preds = %if.end60
  %46 = load i64, ptr %length, align 8
  %cmp62 = icmp ugt i64 %46, 0
  br i1 %cmp62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %land.lhs.true
  %47 = load ptr, ptr %memory, align 8
  %48 = load ptr, ptr %result, align 8
  %49 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %47, ptr align 1 %48, i64 %49, i1 false)
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true, %if.end60
  %50 = load ptr, ptr %memory, align 8
  store ptr %50, ptr %result, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then24
  %51 = load ptr, ptr %result, align 8
  %52 = load i64, ptr %length, align 8
  %add.ptr = getelementptr inbounds i8, ptr %51, i64 %52
  %53 = load ptr, ptr %cp, align 8
  %54 = load i64, ptr %n, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %add.ptr, ptr align 1 %53, i64 %54, i1 false)
  %55 = load i64, ptr %augmented_length, align 8
  store i64 %55, ptr %length, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %for.cond
  %56 = load i64, ptr %i, align 8
  %count = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 0
  %57 = load i64, ptr %count, align 8
  %cmp67 = icmp eq i64 %56, %57
  br i1 %cmp67, label %if.then68, label %if.end69

if.then68:                                        ; preds = %if.end66
  br label %for.end1903

if.end69:                                         ; preds = %if.end66
  %58 = load ptr, ptr %dp, align 8
  %conversion = getelementptr inbounds %struct.char_directive, ptr %58, i32 0, i32 9
  %59 = load i8, ptr %conversion, align 8
  %conv = sext i8 %59 to i32
  %cmp70 = icmp eq i32 %conv, 37
  br i1 %cmp70, label %if.then72, label %if.else132

if.then72:                                        ; preds = %if.end69
  %60 = load ptr, ptr %dp, align 8
  %arg_index = getelementptr inbounds %struct.char_directive, ptr %60, i32 0, i32 10
  %61 = load i64, ptr %arg_index, align 8
  %cmp74 = icmp eq i64 %61, -1
  br i1 %cmp74, label %if.end77, label %if.then76

if.then76:                                        ; preds = %if.then72
  call void @abort() #22
  unreachable

if.end77:                                         ; preds = %if.then72
  %62 = load i64, ptr %length, align 8
  %call78 = call i64 @xsum(i64 noundef %62, i64 noundef 1) #23
  store i64 %call78, ptr %augmented_length73, align 8
  %63 = load i64, ptr %augmented_length73, align 8
  %64 = load i64, ptr %allocated, align 8
  %cmp79 = icmp ugt i64 %63, %64
  br i1 %cmp79, label %if.then81, label %if.end130

if.then81:                                        ; preds = %if.end77
  %65 = load i64, ptr %allocated, align 8
  %cmp84 = icmp ugt i64 %65, 0
  br i1 %cmp84, label %cond.true86, label %cond.false94

cond.true86:                                      ; preds = %if.then81
  %66 = load i64, ptr %allocated, align 8
  %cmp87 = icmp ule i64 %66, 9223372036854775807
  br i1 %cmp87, label %cond.true89, label %cond.false91

cond.true89:                                      ; preds = %cond.true86
  %67 = load i64, ptr %allocated, align 8
  %mul90 = mul i64 %67, 2
  br label %cond.end92

cond.false91:                                     ; preds = %cond.true86
  br label %cond.end92

cond.end92:                                       ; preds = %cond.false91, %cond.true89
  %cond93 = phi i64 [ %mul90, %cond.true89 ], [ -1, %cond.false91 ]
  br label %cond.end95

cond.false94:                                     ; preds = %if.then81
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false94, %cond.end92
  %cond96 = phi i64 [ %cond93, %cond.end92 ], [ 12, %cond.false94 ]
  store i64 %cond96, ptr %allocated, align 8
  %68 = load i64, ptr %augmented_length73, align 8
  %69 = load i64, ptr %allocated, align 8
  %cmp97 = icmp ugt i64 %68, %69
  br i1 %cmp97, label %if.then99, label %if.end100

if.then99:                                        ; preds = %cond.end95
  %70 = load i64, ptr %augmented_length73, align 8
  store i64 %70, ptr %allocated, align 8
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %cond.end95
  %71 = load i64, ptr %allocated, align 8
  %cmp101 = icmp ule i64 %71, -1
  br i1 %cmp101, label %cond.true103, label %cond.false105

cond.true103:                                     ; preds = %if.end100
  %72 = load i64, ptr %allocated, align 8
  %mul104 = mul i64 %72, 1
  br label %cond.end106

cond.false105:                                    ; preds = %if.end100
  br label %cond.end106

cond.end106:                                      ; preds = %cond.false105, %cond.true103
  %cond107 = phi i64 [ %mul104, %cond.true103 ], [ -1, %cond.false105 ]
  store i64 %cond107, ptr %memory_size82, align 8
  %73 = load i64, ptr %memory_size82, align 8
  %cmp108 = icmp eq i64 %73, -1
  br i1 %cmp108, label %if.then110, label %if.end111

if.then110:                                       ; preds = %cond.end106
  br label %out_of_memory

if.end111:                                        ; preds = %cond.end106
  %74 = load ptr, ptr %result, align 8
  %75 = load ptr, ptr %resultbuf.addr, align 8
  %cmp112 = icmp eq ptr %74, %75
  br i1 %cmp112, label %if.then114, label %if.else116

if.then114:                                       ; preds = %if.end111
  %76 = load i64, ptr %memory_size82, align 8
  %call115 = call noalias ptr @malloc(i64 noundef %76) #29
  store ptr %call115, ptr %memory83, align 8
  br label %if.end118

if.else116:                                       ; preds = %if.end111
  %77 = load ptr, ptr %result, align 8
  %78 = load i64, ptr %memory_size82, align 8
  %call117 = call ptr @rpl_realloc(ptr noundef %77, i64 noundef %78)
  store ptr %call117, ptr %memory83, align 8
  br label %if.end118

if.end118:                                        ; preds = %if.else116, %if.then114
  %79 = load ptr, ptr %memory83, align 8
  %cmp119 = icmp eq ptr %79, null
  br i1 %cmp119, label %if.then121, label %if.end122

if.then121:                                       ; preds = %if.end118
  br label %out_of_memory

if.end122:                                        ; preds = %if.end118
  %80 = load ptr, ptr %result, align 8
  %81 = load ptr, ptr %resultbuf.addr, align 8
  %cmp123 = icmp eq ptr %80, %81
  br i1 %cmp123, label %land.lhs.true125, label %if.end129

land.lhs.true125:                                 ; preds = %if.end122
  %82 = load i64, ptr %length, align 8
  %cmp126 = icmp ugt i64 %82, 0
  br i1 %cmp126, label %if.then128, label %if.end129

if.then128:                                       ; preds = %land.lhs.true125
  %83 = load ptr, ptr %memory83, align 8
  %84 = load ptr, ptr %result, align 8
  %85 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %83, ptr align 1 %84, i64 %85, i1 false)
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %land.lhs.true125, %if.end122
  %86 = load ptr, ptr %memory83, align 8
  store ptr %86, ptr %result, align 8
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end77
  %87 = load ptr, ptr %result, align 8
  %88 = load i64, ptr %length, align 8
  %arrayidx131 = getelementptr inbounds i8, ptr %87, i64 %88
  store i8 37, ptr %arrayidx131, align 1
  %89 = load i64, ptr %augmented_length73, align 8
  store i64 %89, ptr %length, align 8
  br label %if.end1900

if.else132:                                       ; preds = %if.end69
  %90 = load ptr, ptr %dp, align 8
  %arg_index133 = getelementptr inbounds %struct.char_directive, ptr %90, i32 0, i32 10
  %91 = load i64, ptr %arg_index133, align 8
  %cmp134 = icmp ne i64 %91, -1
  br i1 %cmp134, label %if.end137, label %if.then136

if.then136:                                       ; preds = %if.else132
  call void @abort() #22
  unreachable

if.end137:                                        ; preds = %if.else132
  %92 = load ptr, ptr %dp, align 8
  %conversion138 = getelementptr inbounds %struct.char_directive, ptr %92, i32 0, i32 9
  %93 = load i8, ptr %conversion138, align 8
  %conv139 = sext i8 %93 to i32
  %cmp140 = icmp eq i32 %conv139, 110
  br i1 %cmp140, label %if.then142, label %if.else143

if.then142:                                       ; preds = %if.end137
  call void @abort() #22
  unreachable

if.else143:                                       ; preds = %if.end137
  %94 = load ptr, ptr %dp, align 8
  %conversion144 = getelementptr inbounds %struct.char_directive, ptr %94, i32 0, i32 9
  %95 = load i8, ptr %conversion144, align 8
  %conv145 = sext i8 %95 to i32
  %cmp146 = icmp eq i32 %conv145, 115
  br i1 %cmp146, label %land.lhs.true148, label %if.else345

land.lhs.true148:                                 ; preds = %if.else143
  %arg = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %96 = load ptr, ptr %arg, align 8
  %97 = load ptr, ptr %dp, align 8
  %arg_index149 = getelementptr inbounds %struct.char_directive, ptr %97, i32 0, i32 10
  %98 = load i64, ptr %arg_index149, align 8
  %arrayidx150 = getelementptr inbounds %struct.argument, ptr %96, i64 %98
  %type = getelementptr inbounds %struct.argument, ptr %arrayidx150, i32 0, i32 0
  %99 = load i32, ptr %type, align 16
  %cmp151 = icmp ne i32 %99, 32
  br i1 %cmp151, label %if.then153, label %if.else345

if.then153:                                       ; preds = %land.lhs.true148
  %100 = load ptr, ptr %dp, align 8
  %flags154 = getelementptr inbounds %struct.char_directive, ptr %100, i32 0, i32 2
  %101 = load i32, ptr %flags154, align 8
  store i32 %101, ptr %flags, align 4
  store i32 0, ptr %has_width, align 4
  store i64 0, ptr %width, align 8
  %102 = load ptr, ptr %dp, align 8
  %width_start = getelementptr inbounds %struct.char_directive, ptr %102, i32 0, i32 3
  %103 = load ptr, ptr %width_start, align 8
  %104 = load ptr, ptr %dp, align 8
  %width_end = getelementptr inbounds %struct.char_directive, ptr %104, i32 0, i32 4
  %105 = load ptr, ptr %width_end, align 8
  %cmp155 = icmp ne ptr %103, %105
  br i1 %cmp155, label %if.then157, label %if.end200

if.then157:                                       ; preds = %if.then153
  %106 = load ptr, ptr %dp, align 8
  %width_arg_index = getelementptr inbounds %struct.char_directive, ptr %106, i32 0, i32 5
  %107 = load i64, ptr %width_arg_index, align 8
  %cmp158 = icmp ne i64 %107, -1
  br i1 %cmp158, label %if.then160, label %if.else179

if.then160:                                       ; preds = %if.then157
  %arg162 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %108 = load ptr, ptr %arg162, align 8
  %109 = load ptr, ptr %dp, align 8
  %width_arg_index163 = getelementptr inbounds %struct.char_directive, ptr %109, i32 0, i32 5
  %110 = load i64, ptr %width_arg_index163, align 8
  %arrayidx164 = getelementptr inbounds %struct.argument, ptr %108, i64 %110
  %type165 = getelementptr inbounds %struct.argument, ptr %arrayidx164, i32 0, i32 0
  %111 = load i32, ptr %type165, align 16
  %cmp166 = icmp eq i32 %111, 5
  br i1 %cmp166, label %if.end169, label %if.then168

if.then168:                                       ; preds = %if.then160
  call void @abort() #22
  unreachable

if.end169:                                        ; preds = %if.then160
  %arg170 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %112 = load ptr, ptr %arg170, align 8
  %113 = load ptr, ptr %dp, align 8
  %width_arg_index171 = getelementptr inbounds %struct.char_directive, ptr %113, i32 0, i32 5
  %114 = load i64, ptr %width_arg_index171, align 8
  %arrayidx172 = getelementptr inbounds %struct.argument, ptr %112, i64 %114
  %a173 = getelementptr inbounds %struct.argument, ptr %arrayidx172, i32 0, i32 1
  %115 = load i32, ptr %a173, align 16
  store i32 %115, ptr %arg161, align 4
  %116 = load i32, ptr %arg161, align 4
  %conv174 = sext i32 %116 to i64
  store i64 %conv174, ptr %width, align 8
  %117 = load i32, ptr %arg161, align 4
  %cmp175 = icmp slt i32 %117, 0
  br i1 %cmp175, label %if.then177, label %if.end178

if.then177:                                       ; preds = %if.end169
  %118 = load i32, ptr %flags, align 4
  %or = or i32 %118, 2
  store i32 %or, ptr %flags, align 4
  %119 = load i64, ptr %width, align 8
  %sub = sub i64 0, %119
  store i64 %sub, ptr %width, align 8
  br label %if.end178

if.end178:                                        ; preds = %if.then177, %if.end169
  br label %if.end195

if.else179:                                       ; preds = %if.then157
  %120 = load ptr, ptr %dp, align 8
  %width_start180 = getelementptr inbounds %struct.char_directive, ptr %120, i32 0, i32 3
  %121 = load ptr, ptr %width_start180, align 8
  store ptr %121, ptr %digitp, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.else179
  %122 = load i64, ptr %width, align 8
  %cmp181 = icmp ule i64 %122, 1844674407370955161
  br i1 %cmp181, label %cond.true183, label %cond.false185

cond.true183:                                     ; preds = %do.body
  %123 = load i64, ptr %width, align 8
  %mul184 = mul i64 %123, 10
  br label %cond.end186

cond.false185:                                    ; preds = %do.body
  br label %cond.end186

cond.end186:                                      ; preds = %cond.false185, %cond.true183
  %cond187 = phi i64 [ %mul184, %cond.true183 ], [ -1, %cond.false185 ]
  %124 = load ptr, ptr %digitp, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %124, i32 1
  store ptr %incdec.ptr, ptr %digitp, align 8
  %125 = load i8, ptr %124, align 1
  %conv188 = sext i8 %125 to i32
  %sub189 = sub nsw i32 %conv188, 48
  %conv190 = sext i32 %sub189 to i64
  %call191 = call i64 @xsum(i64 noundef %cond187, i64 noundef %conv190) #23
  store i64 %call191, ptr %width, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end186
  %126 = load ptr, ptr %digitp, align 8
  %127 = load ptr, ptr %dp, align 8
  %width_end192 = getelementptr inbounds %struct.char_directive, ptr %127, i32 0, i32 4
  %128 = load ptr, ptr %width_end192, align 8
  %cmp193 = icmp ne ptr %126, %128
  br i1 %cmp193, label %do.body, label %do.end, !llvm.loop !52

do.end:                                           ; preds = %do.cond
  br label %if.end195

if.end195:                                        ; preds = %do.end, %if.end178
  %129 = load i64, ptr %width, align 8
  %cmp196 = icmp ugt i64 %129, 2147483647
  br i1 %cmp196, label %if.then198, label %if.end199

if.then198:                                       ; preds = %if.end195
  br label %overflow

if.end199:                                        ; preds = %if.end195
  store i32 1, ptr %has_width, align 4
  br label %if.end200

if.end200:                                        ; preds = %if.end199, %if.then153
  store i32 0, ptr %has_precision, align 4
  store i64 6, ptr %precision, align 8
  %130 = load ptr, ptr %dp, align 8
  %precision_start = getelementptr inbounds %struct.char_directive, ptr %130, i32 0, i32 6
  %131 = load ptr, ptr %precision_start, align 8
  %132 = load ptr, ptr %dp, align 8
  %precision_end = getelementptr inbounds %struct.char_directive, ptr %132, i32 0, i32 7
  %133 = load ptr, ptr %precision_end, align 8
  %cmp201 = icmp ne ptr %131, %133
  br i1 %cmp201, label %if.then203, label %if.end245

if.then203:                                       ; preds = %if.end200
  %134 = load ptr, ptr %dp, align 8
  %precision_arg_index = getelementptr inbounds %struct.char_directive, ptr %134, i32 0, i32 8
  %135 = load i64, ptr %precision_arg_index, align 8
  %cmp204 = icmp ne i64 %135, -1
  br i1 %cmp204, label %if.then206, label %if.else225

if.then206:                                       ; preds = %if.then203
  %arg208 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %136 = load ptr, ptr %arg208, align 8
  %137 = load ptr, ptr %dp, align 8
  %precision_arg_index209 = getelementptr inbounds %struct.char_directive, ptr %137, i32 0, i32 8
  %138 = load i64, ptr %precision_arg_index209, align 8
  %arrayidx210 = getelementptr inbounds %struct.argument, ptr %136, i64 %138
  %type211 = getelementptr inbounds %struct.argument, ptr %arrayidx210, i32 0, i32 0
  %139 = load i32, ptr %type211, align 16
  %cmp212 = icmp eq i32 %139, 5
  br i1 %cmp212, label %if.end215, label %if.then214

if.then214:                                       ; preds = %if.then206
  call void @abort() #22
  unreachable

if.end215:                                        ; preds = %if.then206
  %arg216 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %140 = load ptr, ptr %arg216, align 8
  %141 = load ptr, ptr %dp, align 8
  %precision_arg_index217 = getelementptr inbounds %struct.char_directive, ptr %141, i32 0, i32 8
  %142 = load i64, ptr %precision_arg_index217, align 8
  %arrayidx218 = getelementptr inbounds %struct.argument, ptr %140, i64 %142
  %a219 = getelementptr inbounds %struct.argument, ptr %arrayidx218, i32 0, i32 1
  %143 = load i32, ptr %a219, align 16
  store i32 %143, ptr %arg207, align 4
  %144 = load i32, ptr %arg207, align 4
  %cmp220 = icmp sge i32 %144, 0
  br i1 %cmp220, label %if.then222, label %if.end224

if.then222:                                       ; preds = %if.end215
  %145 = load i32, ptr %arg207, align 4
  %conv223 = sext i32 %145 to i64
  store i64 %conv223, ptr %precision, align 8
  store i32 1, ptr %has_precision, align 4
  br label %if.end224

if.end224:                                        ; preds = %if.then222, %if.end215
  br label %if.end244

if.else225:                                       ; preds = %if.then203
  %146 = load ptr, ptr %dp, align 8
  %precision_start227 = getelementptr inbounds %struct.char_directive, ptr %146, i32 0, i32 6
  %147 = load ptr, ptr %precision_start227, align 8
  %add.ptr228 = getelementptr inbounds i8, ptr %147, i64 1
  store ptr %add.ptr228, ptr %digitp226, align 8
  store i64 0, ptr %precision, align 8
  br label %while.cond

while.cond:                                       ; preds = %cond.end237, %if.else225
  %148 = load ptr, ptr %digitp226, align 8
  %149 = load ptr, ptr %dp, align 8
  %precision_end229 = getelementptr inbounds %struct.char_directive, ptr %149, i32 0, i32 7
  %150 = load ptr, ptr %precision_end229, align 8
  %cmp230 = icmp ne ptr %148, %150
  br i1 %cmp230, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %151 = load i64, ptr %precision, align 8
  %cmp232 = icmp ule i64 %151, 1844674407370955161
  br i1 %cmp232, label %cond.true234, label %cond.false236

cond.true234:                                     ; preds = %while.body
  %152 = load i64, ptr %precision, align 8
  %mul235 = mul i64 %152, 10
  br label %cond.end237

cond.false236:                                    ; preds = %while.body
  br label %cond.end237

cond.end237:                                      ; preds = %cond.false236, %cond.true234
  %cond238 = phi i64 [ %mul235, %cond.true234 ], [ -1, %cond.false236 ]
  %153 = load ptr, ptr %digitp226, align 8
  %incdec.ptr239 = getelementptr inbounds i8, ptr %153, i32 1
  store ptr %incdec.ptr239, ptr %digitp226, align 8
  %154 = load i8, ptr %153, align 1
  %conv240 = sext i8 %154 to i32
  %sub241 = sub nsw i32 %conv240, 48
  %conv242 = sext i32 %sub241 to i64
  %call243 = call i64 @xsum(i64 noundef %cond238, i64 noundef %conv242) #23
  store i64 %call243, ptr %precision, align 8
  br label %while.cond, !llvm.loop !53

while.end:                                        ; preds = %while.cond
  store i32 1, ptr %has_precision, align 4
  br label %if.end244

if.end244:                                        ; preds = %while.end, %if.end224
  br label %if.end245

if.end245:                                        ; preds = %if.end244, %if.end200
  %arg247 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %155 = load ptr, ptr %arg247, align 8
  %156 = load ptr, ptr %dp, align 8
  %arg_index248 = getelementptr inbounds %struct.char_directive, ptr %156, i32 0, i32 10
  %157 = load i64, ptr %arg_index248, align 8
  %arrayidx249 = getelementptr inbounds %struct.argument, ptr %155, i64 %157
  %a250 = getelementptr inbounds %struct.argument, ptr %arrayidx249, i32 0, i32 1
  %158 = load ptr, ptr %a250, align 16
  store ptr %158, ptr %arg246, align 8
  %159 = load i32, ptr %has_precision, align 4
  %tobool = icmp ne i32 %159, 0
  br i1 %tobool, label %if.then251, label %if.else253

if.then251:                                       ; preds = %if.end245
  %160 = load ptr, ptr %arg246, align 8
  %161 = load i64, ptr %precision, align 8
  %call252 = call i64 @strnlen(ptr noundef %160, i64 noundef %161) #23
  store i64 %call252, ptr %bytes, align 8
  br label %if.end255

if.else253:                                       ; preds = %if.end245
  %162 = load ptr, ptr %arg246, align 8
  %call254 = call i64 @strlen(ptr noundef %162) #23
  store i64 %call254, ptr %bytes, align 8
  br label %if.end255

if.end255:                                        ; preds = %if.else253, %if.then251
  %163 = load i32, ptr %has_width, align 4
  %tobool256 = icmp ne i32 %163, 0
  br i1 %tobool256, label %if.then257, label %if.else258

if.then257:                                       ; preds = %if.end255
  %164 = load i64, ptr %bytes, align 8
  store i64 %164, ptr %w, align 8
  br label %if.end259

if.else258:                                       ; preds = %if.end255
  store i64 0, ptr %w, align 8
  br label %if.end259

if.end259:                                        ; preds = %if.else258, %if.then257
  %165 = load i64, ptr %bytes, align 8
  %166 = load i64, ptr %w, align 8
  %167 = load i64, ptr %width, align 8
  %cmp260 = icmp ult i64 %166, %167
  br i1 %cmp260, label %cond.true262, label %cond.false264

cond.true262:                                     ; preds = %if.end259
  %168 = load i64, ptr %width, align 8
  %169 = load i64, ptr %w, align 8
  %sub263 = sub i64 %168, %169
  br label %cond.end265

cond.false264:                                    ; preds = %if.end259
  br label %cond.end265

cond.end265:                                      ; preds = %cond.false264, %cond.true262
  %cond266 = phi i64 [ %sub263, %cond.true262 ], [ 0, %cond.false264 ]
  %add = add i64 %165, %cond266
  store i64 %add, ptr %total, align 8
  %170 = load i64, ptr %length, align 8
  %171 = load i64, ptr %total, align 8
  %call267 = call i64 @xsum(i64 noundef %170, i64 noundef %171) #23
  %172 = load i64, ptr %allocated, align 8
  %cmp268 = icmp ugt i64 %call267, %172
  br i1 %cmp268, label %if.then270, label %if.end321

if.then270:                                       ; preds = %cond.end265
  %173 = load i64, ptr %allocated, align 8
  %cmp273 = icmp ugt i64 %173, 0
  br i1 %cmp273, label %cond.true275, label %cond.false283

cond.true275:                                     ; preds = %if.then270
  %174 = load i64, ptr %allocated, align 8
  %cmp276 = icmp ule i64 %174, 9223372036854775807
  br i1 %cmp276, label %cond.true278, label %cond.false280

cond.true278:                                     ; preds = %cond.true275
  %175 = load i64, ptr %allocated, align 8
  %mul279 = mul i64 %175, 2
  br label %cond.end281

cond.false280:                                    ; preds = %cond.true275
  br label %cond.end281

cond.end281:                                      ; preds = %cond.false280, %cond.true278
  %cond282 = phi i64 [ %mul279, %cond.true278 ], [ -1, %cond.false280 ]
  br label %cond.end284

cond.false283:                                    ; preds = %if.then270
  br label %cond.end284

cond.end284:                                      ; preds = %cond.false283, %cond.end281
  %cond285 = phi i64 [ %cond282, %cond.end281 ], [ 12, %cond.false283 ]
  store i64 %cond285, ptr %allocated, align 8
  %176 = load i64, ptr %length, align 8
  %177 = load i64, ptr %total, align 8
  %call286 = call i64 @xsum(i64 noundef %176, i64 noundef %177) #23
  %178 = load i64, ptr %allocated, align 8
  %cmp287 = icmp ugt i64 %call286, %178
  br i1 %cmp287, label %if.then289, label %if.end291

if.then289:                                       ; preds = %cond.end284
  %179 = load i64, ptr %length, align 8
  %180 = load i64, ptr %total, align 8
  %call290 = call i64 @xsum(i64 noundef %179, i64 noundef %180) #23
  store i64 %call290, ptr %allocated, align 8
  br label %if.end291

if.end291:                                        ; preds = %if.then289, %cond.end284
  %181 = load i64, ptr %allocated, align 8
  %cmp292 = icmp ule i64 %181, -1
  br i1 %cmp292, label %cond.true294, label %cond.false296

cond.true294:                                     ; preds = %if.end291
  %182 = load i64, ptr %allocated, align 8
  %mul295 = mul i64 %182, 1
  br label %cond.end297

cond.false296:                                    ; preds = %if.end291
  br label %cond.end297

cond.end297:                                      ; preds = %cond.false296, %cond.true294
  %cond298 = phi i64 [ %mul295, %cond.true294 ], [ -1, %cond.false296 ]
  store i64 %cond298, ptr %memory_size271, align 8
  %183 = load i64, ptr %memory_size271, align 8
  %cmp299 = icmp eq i64 %183, -1
  br i1 %cmp299, label %if.then301, label %if.end302

if.then301:                                       ; preds = %cond.end297
  br label %out_of_memory

if.end302:                                        ; preds = %cond.end297
  %184 = load ptr, ptr %result, align 8
  %185 = load ptr, ptr %resultbuf.addr, align 8
  %cmp303 = icmp eq ptr %184, %185
  br i1 %cmp303, label %if.then305, label %if.else307

if.then305:                                       ; preds = %if.end302
  %186 = load i64, ptr %memory_size271, align 8
  %call306 = call noalias ptr @malloc(i64 noundef %186) #29
  store ptr %call306, ptr %memory272, align 8
  br label %if.end309

if.else307:                                       ; preds = %if.end302
  %187 = load ptr, ptr %result, align 8
  %188 = load i64, ptr %memory_size271, align 8
  %call308 = call ptr @rpl_realloc(ptr noundef %187, i64 noundef %188)
  store ptr %call308, ptr %memory272, align 8
  br label %if.end309

if.end309:                                        ; preds = %if.else307, %if.then305
  %189 = load ptr, ptr %memory272, align 8
  %cmp310 = icmp eq ptr %189, null
  br i1 %cmp310, label %if.then312, label %if.end313

if.then312:                                       ; preds = %if.end309
  br label %out_of_memory

if.end313:                                        ; preds = %if.end309
  %190 = load ptr, ptr %result, align 8
  %191 = load ptr, ptr %resultbuf.addr, align 8
  %cmp314 = icmp eq ptr %190, %191
  br i1 %cmp314, label %land.lhs.true316, label %if.end320

land.lhs.true316:                                 ; preds = %if.end313
  %192 = load i64, ptr %length, align 8
  %cmp317 = icmp ugt i64 %192, 0
  br i1 %cmp317, label %if.then319, label %if.end320

if.then319:                                       ; preds = %land.lhs.true316
  %193 = load ptr, ptr %memory272, align 8
  %194 = load ptr, ptr %result, align 8
  %195 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %193, ptr align 1 %194, i64 %195, i1 false)
  br label %if.end320

if.end320:                                        ; preds = %if.then319, %land.lhs.true316, %if.end313
  %196 = load ptr, ptr %memory272, align 8
  store ptr %196, ptr %result, align 8
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %cond.end265
  %197 = load i64, ptr %w, align 8
  %198 = load i64, ptr %width, align 8
  %cmp322 = icmp ult i64 %197, %198
  br i1 %cmp322, label %land.lhs.true324, label %if.end331

land.lhs.true324:                                 ; preds = %if.end321
  %199 = load i32, ptr %flags, align 4
  %and = and i32 %199, 2
  %tobool325 = icmp ne i32 %and, 0
  br i1 %tobool325, label %if.end331, label %if.then326

if.then326:                                       ; preds = %land.lhs.true324
  %200 = load i64, ptr %width, align 8
  %201 = load i64, ptr %w, align 8
  %sub328 = sub i64 %200, %201
  store i64 %sub328, ptr %n327, align 8
  %202 = load ptr, ptr %result, align 8
  %203 = load i64, ptr %length, align 8
  %add.ptr329 = getelementptr inbounds i8, ptr %202, i64 %203
  %204 = load i64, ptr %n327, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %add.ptr329, i8 32, i64 %204, i1 false)
  %205 = load i64, ptr %n327, align 8
  %206 = load i64, ptr %length, align 8
  %add330 = add i64 %206, %205
  store i64 %add330, ptr %length, align 8
  br label %if.end331

if.end331:                                        ; preds = %if.then326, %land.lhs.true324, %if.end321
  %207 = load ptr, ptr %result, align 8
  %208 = load i64, ptr %length, align 8
  %add.ptr332 = getelementptr inbounds i8, ptr %207, i64 %208
  %209 = load ptr, ptr %arg246, align 8
  %210 = load i64, ptr %bytes, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %add.ptr332, ptr align 1 %209, i64 %210, i1 false)
  %211 = load i64, ptr %bytes, align 8
  %212 = load i64, ptr %length, align 8
  %add333 = add i64 %212, %211
  store i64 %add333, ptr %length, align 8
  %213 = load i64, ptr %w, align 8
  %214 = load i64, ptr %width, align 8
  %cmp334 = icmp ult i64 %213, %214
  br i1 %cmp334, label %land.lhs.true336, label %if.end344

land.lhs.true336:                                 ; preds = %if.end331
  %215 = load i32, ptr %flags, align 4
  %and337 = and i32 %215, 2
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %if.then339, label %if.end344

if.then339:                                       ; preds = %land.lhs.true336
  %216 = load i64, ptr %width, align 8
  %217 = load i64, ptr %w, align 8
  %sub341 = sub i64 %216, %217
  store i64 %sub341, ptr %n340, align 8
  %218 = load ptr, ptr %result, align 8
  %219 = load i64, ptr %length, align 8
  %add.ptr342 = getelementptr inbounds i8, ptr %218, i64 %219
  %220 = load i64, ptr %n340, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %add.ptr342, i8 32, i64 %220, i1 false)
  %221 = load i64, ptr %n340, align 8
  %222 = load i64, ptr %length, align 8
  %add343 = add i64 %222, %221
  store i64 %add343, ptr %length, align 8
  br label %if.end344

if.end344:                                        ; preds = %if.then339, %land.lhs.true336, %if.end331
  br label %if.end1898

if.else345:                                       ; preds = %land.lhs.true148, %if.else143
  %223 = load ptr, ptr %dp, align 8
  %conversion346 = getelementptr inbounds %struct.char_directive, ptr %223, i32 0, i32 9
  %224 = load i8, ptr %conversion346, align 8
  %conv347 = sext i8 %224 to i32
  %cmp348 = icmp eq i32 %conv347, 115
  br i1 %cmp348, label %land.lhs.true350, label %if.else841

land.lhs.true350:                                 ; preds = %if.else345
  %arg351 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %225 = load ptr, ptr %arg351, align 8
  %226 = load ptr, ptr %dp, align 8
  %arg_index352 = getelementptr inbounds %struct.char_directive, ptr %226, i32 0, i32 10
  %227 = load i64, ptr %arg_index352, align 8
  %arrayidx353 = getelementptr inbounds %struct.argument, ptr %225, i64 %227
  %type354 = getelementptr inbounds %struct.argument, ptr %arrayidx353, i32 0, i32 0
  %228 = load i32, ptr %type354, align 16
  %cmp355 = icmp eq i32 %228, 32
  br i1 %cmp355, label %if.then357, label %if.else841

if.then357:                                       ; preds = %land.lhs.true350
  %229 = load ptr, ptr %dp, align 8
  %flags359 = getelementptr inbounds %struct.char_directive, ptr %229, i32 0, i32 2
  %230 = load i32, ptr %flags359, align 8
  store i32 %230, ptr %flags358, align 4
  store i32 0, ptr %has_width360, align 4
  store i64 0, ptr %width361, align 8
  %231 = load ptr, ptr %dp, align 8
  %width_start364 = getelementptr inbounds %struct.char_directive, ptr %231, i32 0, i32 3
  %232 = load ptr, ptr %width_start364, align 8
  %233 = load ptr, ptr %dp, align 8
  %width_end365 = getelementptr inbounds %struct.char_directive, ptr %233, i32 0, i32 4
  %234 = load ptr, ptr %width_end365, align 8
  %cmp366 = icmp ne ptr %232, %234
  br i1 %cmp366, label %if.then368, label %if.end419

if.then368:                                       ; preds = %if.then357
  %235 = load ptr, ptr %dp, align 8
  %width_arg_index369 = getelementptr inbounds %struct.char_directive, ptr %235, i32 0, i32 5
  %236 = load i64, ptr %width_arg_index369, align 8
  %cmp370 = icmp ne i64 %236, -1
  br i1 %cmp370, label %if.then372, label %if.else393

if.then372:                                       ; preds = %if.then368
  %arg374 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %237 = load ptr, ptr %arg374, align 8
  %238 = load ptr, ptr %dp, align 8
  %width_arg_index375 = getelementptr inbounds %struct.char_directive, ptr %238, i32 0, i32 5
  %239 = load i64, ptr %width_arg_index375, align 8
  %arrayidx376 = getelementptr inbounds %struct.argument, ptr %237, i64 %239
  %type377 = getelementptr inbounds %struct.argument, ptr %arrayidx376, i32 0, i32 0
  %240 = load i32, ptr %type377, align 16
  %cmp378 = icmp eq i32 %240, 5
  br i1 %cmp378, label %if.end381, label %if.then380

if.then380:                                       ; preds = %if.then372
  call void @abort() #22
  unreachable

if.end381:                                        ; preds = %if.then372
  %arg382 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %241 = load ptr, ptr %arg382, align 8
  %242 = load ptr, ptr %dp, align 8
  %width_arg_index383 = getelementptr inbounds %struct.char_directive, ptr %242, i32 0, i32 5
  %243 = load i64, ptr %width_arg_index383, align 8
  %arrayidx384 = getelementptr inbounds %struct.argument, ptr %241, i64 %243
  %a385 = getelementptr inbounds %struct.argument, ptr %arrayidx384, i32 0, i32 1
  %244 = load i32, ptr %a385, align 16
  store i32 %244, ptr %arg373, align 4
  %245 = load i32, ptr %arg373, align 4
  %conv386 = sext i32 %245 to i64
  store i64 %conv386, ptr %width361, align 8
  %246 = load i32, ptr %arg373, align 4
  %cmp387 = icmp slt i32 %246, 0
  br i1 %cmp387, label %if.then389, label %if.end392

if.then389:                                       ; preds = %if.end381
  %247 = load i32, ptr %flags358, align 4
  %or390 = or i32 %247, 2
  store i32 %or390, ptr %flags358, align 4
  %248 = load i64, ptr %width361, align 8
  %sub391 = sub i64 0, %248
  store i64 %sub391, ptr %width361, align 8
  br label %if.end392

if.end392:                                        ; preds = %if.then389, %if.end381
  br label %if.end414

if.else393:                                       ; preds = %if.then368
  %249 = load ptr, ptr %dp, align 8
  %width_start395 = getelementptr inbounds %struct.char_directive, ptr %249, i32 0, i32 3
  %250 = load ptr, ptr %width_start395, align 8
  store ptr %250, ptr %digitp394, align 8
  br label %do.body396

do.body396:                                       ; preds = %do.cond409, %if.else393
  %251 = load i64, ptr %width361, align 8
  %cmp397 = icmp ule i64 %251, 1844674407370955161
  br i1 %cmp397, label %cond.true399, label %cond.false401

cond.true399:                                     ; preds = %do.body396
  %252 = load i64, ptr %width361, align 8
  %mul400 = mul i64 %252, 10
  br label %cond.end402

cond.false401:                                    ; preds = %do.body396
  br label %cond.end402

cond.end402:                                      ; preds = %cond.false401, %cond.true399
  %cond403 = phi i64 [ %mul400, %cond.true399 ], [ -1, %cond.false401 ]
  %253 = load ptr, ptr %digitp394, align 8
  %incdec.ptr404 = getelementptr inbounds i8, ptr %253, i32 1
  store ptr %incdec.ptr404, ptr %digitp394, align 8
  %254 = load i8, ptr %253, align 1
  %conv405 = sext i8 %254 to i32
  %sub406 = sub nsw i32 %conv405, 48
  %conv407 = sext i32 %sub406 to i64
  %call408 = call i64 @xsum(i64 noundef %cond403, i64 noundef %conv407) #23
  store i64 %call408, ptr %width361, align 8
  br label %do.cond409

do.cond409:                                       ; preds = %cond.end402
  %255 = load ptr, ptr %digitp394, align 8
  %256 = load ptr, ptr %dp, align 8
  %width_end410 = getelementptr inbounds %struct.char_directive, ptr %256, i32 0, i32 4
  %257 = load ptr, ptr %width_end410, align 8
  %cmp411 = icmp ne ptr %255, %257
  br i1 %cmp411, label %do.body396, label %do.end413, !llvm.loop !54

do.end413:                                        ; preds = %do.cond409
  br label %if.end414

if.end414:                                        ; preds = %do.end413, %if.end392
  %258 = load i64, ptr %width361, align 8
  %cmp415 = icmp ugt i64 %258, 2147483647
  br i1 %cmp415, label %if.then417, label %if.end418

if.then417:                                       ; preds = %if.end414
  br label %overflow

if.end418:                                        ; preds = %if.end414
  store i32 1, ptr %has_width360, align 4
  br label %if.end419

if.end419:                                        ; preds = %if.end418, %if.then357
  store i32 0, ptr %has_precision362, align 4
  store i64 6, ptr %precision363, align 8
  %259 = load ptr, ptr %dp, align 8
  %precision_start420 = getelementptr inbounds %struct.char_directive, ptr %259, i32 0, i32 6
  %260 = load ptr, ptr %precision_start420, align 8
  %261 = load ptr, ptr %dp, align 8
  %precision_end421 = getelementptr inbounds %struct.char_directive, ptr %261, i32 0, i32 7
  %262 = load ptr, ptr %precision_end421, align 8
  %cmp422 = icmp ne ptr %260, %262
  br i1 %cmp422, label %if.then424, label %if.end470

if.then424:                                       ; preds = %if.end419
  %263 = load ptr, ptr %dp, align 8
  %precision_arg_index425 = getelementptr inbounds %struct.char_directive, ptr %263, i32 0, i32 8
  %264 = load i64, ptr %precision_arg_index425, align 8
  %cmp426 = icmp ne i64 %264, -1
  br i1 %cmp426, label %if.then428, label %if.else447

if.then428:                                       ; preds = %if.then424
  %arg430 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %265 = load ptr, ptr %arg430, align 8
  %266 = load ptr, ptr %dp, align 8
  %precision_arg_index431 = getelementptr inbounds %struct.char_directive, ptr %266, i32 0, i32 8
  %267 = load i64, ptr %precision_arg_index431, align 8
  %arrayidx432 = getelementptr inbounds %struct.argument, ptr %265, i64 %267
  %type433 = getelementptr inbounds %struct.argument, ptr %arrayidx432, i32 0, i32 0
  %268 = load i32, ptr %type433, align 16
  %cmp434 = icmp eq i32 %268, 5
  br i1 %cmp434, label %if.end437, label %if.then436

if.then436:                                       ; preds = %if.then428
  call void @abort() #22
  unreachable

if.end437:                                        ; preds = %if.then428
  %arg438 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %269 = load ptr, ptr %arg438, align 8
  %270 = load ptr, ptr %dp, align 8
  %precision_arg_index439 = getelementptr inbounds %struct.char_directive, ptr %270, i32 0, i32 8
  %271 = load i64, ptr %precision_arg_index439, align 8
  %arrayidx440 = getelementptr inbounds %struct.argument, ptr %269, i64 %271
  %a441 = getelementptr inbounds %struct.argument, ptr %arrayidx440, i32 0, i32 1
  %272 = load i32, ptr %a441, align 16
  store i32 %272, ptr %arg429, align 4
  %273 = load i32, ptr %arg429, align 4
  %cmp442 = icmp sge i32 %273, 0
  br i1 %cmp442, label %if.then444, label %if.end446

if.then444:                                       ; preds = %if.end437
  %274 = load i32, ptr %arg429, align 4
  %conv445 = sext i32 %274 to i64
  store i64 %conv445, ptr %precision363, align 8
  store i32 1, ptr %has_precision362, align 4
  br label %if.end446

if.end446:                                        ; preds = %if.then444, %if.end437
  br label %if.end469

if.else447:                                       ; preds = %if.then424
  %275 = load ptr, ptr %dp, align 8
  %precision_start449 = getelementptr inbounds %struct.char_directive, ptr %275, i32 0, i32 6
  %276 = load ptr, ptr %precision_start449, align 8
  %add.ptr450 = getelementptr inbounds i8, ptr %276, i64 1
  store ptr %add.ptr450, ptr %digitp448, align 8
  store i64 0, ptr %precision363, align 8
  br label %while.cond451

while.cond451:                                    ; preds = %cond.end461, %if.else447
  %277 = load ptr, ptr %digitp448, align 8
  %278 = load ptr, ptr %dp, align 8
  %precision_end452 = getelementptr inbounds %struct.char_directive, ptr %278, i32 0, i32 7
  %279 = load ptr, ptr %precision_end452, align 8
  %cmp453 = icmp ne ptr %277, %279
  br i1 %cmp453, label %while.body455, label %while.end468

while.body455:                                    ; preds = %while.cond451
  %280 = load i64, ptr %precision363, align 8
  %cmp456 = icmp ule i64 %280, 1844674407370955161
  br i1 %cmp456, label %cond.true458, label %cond.false460

cond.true458:                                     ; preds = %while.body455
  %281 = load i64, ptr %precision363, align 8
  %mul459 = mul i64 %281, 10
  br label %cond.end461

cond.false460:                                    ; preds = %while.body455
  br label %cond.end461

cond.end461:                                      ; preds = %cond.false460, %cond.true458
  %cond462 = phi i64 [ %mul459, %cond.true458 ], [ -1, %cond.false460 ]
  %282 = load ptr, ptr %digitp448, align 8
  %incdec.ptr463 = getelementptr inbounds i8, ptr %282, i32 1
  store ptr %incdec.ptr463, ptr %digitp448, align 8
  %283 = load i8, ptr %282, align 1
  %conv464 = sext i8 %283 to i32
  %sub465 = sub nsw i32 %conv464, 48
  %conv466 = sext i32 %sub465 to i64
  %call467 = call i64 @xsum(i64 noundef %cond462, i64 noundef %conv466) #23
  store i64 %call467, ptr %precision363, align 8
  br label %while.cond451, !llvm.loop !55

while.end468:                                     ; preds = %while.cond451
  store i32 1, ptr %has_precision362, align 4
  br label %if.end469

if.end469:                                        ; preds = %while.end468, %if.end446
  br label %if.end470

if.end470:                                        ; preds = %if.end469, %if.end419
  %arg472 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %284 = load ptr, ptr %arg472, align 8
  %285 = load ptr, ptr %dp, align 8
  %arg_index473 = getelementptr inbounds %struct.char_directive, ptr %285, i32 0, i32 10
  %286 = load i64, ptr %arg_index473, align 8
  %arrayidx474 = getelementptr inbounds %struct.argument, ptr %284, i64 %286
  %a475 = getelementptr inbounds %struct.argument, ptr %arrayidx474, i32 0, i32 1
  %287 = load ptr, ptr %a475, align 16
  store ptr %287, ptr %arg471, align 8
  %288 = load i32, ptr %has_precision362, align 4
  %tobool478 = icmp ne i32 %288, 0
  br i1 %tobool478, label %if.then479, label %if.else506

if.then479:                                       ; preds = %if.end470
  call void @mbszero(ptr noundef %state)
  %289 = load ptr, ptr %arg471, align 8
  store ptr %289, ptr %arg_end, align 8
  store i64 0, ptr %bytes476, align 8
  br label %while.cond480

while.cond480:                                    ; preds = %if.end499, %if.then479
  %290 = load i64, ptr %precision363, align 8
  %cmp481 = icmp ugt i64 %290, 0
  br i1 %cmp481, label %while.body483, label %while.end505

while.body483:                                    ; preds = %while.cond480
  %291 = load ptr, ptr %arg_end, align 8
  %292 = load i32, ptr %291, align 4
  %cmp485 = icmp eq i32 %292, 0
  br i1 %cmp485, label %if.then487, label %if.end488

if.then487:                                       ; preds = %while.body483
  br label %while.end505

if.end488:                                        ; preds = %while.body483
  %arraydecay = getelementptr inbounds [64 x i8], ptr %cbuf, i64 0, i64 0
  %293 = load ptr, ptr %arg_end, align 8
  %294 = load i32, ptr %293, align 4
  %call489 = call i64 @wcrtomb(ptr noundef %arraydecay, i32 noundef %294, ptr noundef %state) #21
  %conv490 = trunc i64 %call489 to i32
  store i32 %conv490, ptr %count484, align 4
  %295 = load i32, ptr %count484, align 4
  %cmp491 = icmp slt i32 %295, 0
  br i1 %cmp491, label %if.then493, label %if.end494

if.then493:                                       ; preds = %if.end488
  br label %fail_with_EILSEQ

if.end494:                                        ; preds = %if.end488
  %296 = load i64, ptr %precision363, align 8
  %297 = load i32, ptr %count484, align 4
  %conv495 = zext i32 %297 to i64
  %cmp496 = icmp ult i64 %296, %conv495
  br i1 %cmp496, label %if.then498, label %if.end499

if.then498:                                       ; preds = %if.end494
  br label %while.end505

if.end499:                                        ; preds = %if.end494
  %298 = load ptr, ptr %arg_end, align 8
  %incdec.ptr500 = getelementptr inbounds i32, ptr %298, i32 1
  store ptr %incdec.ptr500, ptr %arg_end, align 8
  %299 = load i32, ptr %count484, align 4
  %conv501 = sext i32 %299 to i64
  %300 = load i64, ptr %bytes476, align 8
  %add502 = add i64 %300, %conv501
  store i64 %add502, ptr %bytes476, align 8
  %301 = load i32, ptr %count484, align 4
  %conv503 = sext i32 %301 to i64
  %302 = load i64, ptr %precision363, align 8
  %sub504 = sub i64 %302, %conv503
  store i64 %sub504, ptr %precision363, align 8
  br label %while.cond480, !llvm.loop !56

while.end505:                                     ; preds = %if.then498, %if.then487, %while.cond480
  br label %if.end531

if.else506:                                       ; preds = %if.end470
  %303 = load i32, ptr %has_width360, align 4
  %tobool507 = icmp ne i32 %303, 0
  br i1 %tobool507, label %if.then508, label %if.else527

if.then508:                                       ; preds = %if.else506
  call void @mbszero(ptr noundef %state509)
  %304 = load ptr, ptr %arg471, align 8
  store ptr %304, ptr %arg_end, align 8
  store i64 0, ptr %bytes476, align 8
  br label %for.cond510

for.cond510:                                      ; preds = %if.end523, %if.then508
  %305 = load ptr, ptr %arg_end, align 8
  %306 = load i32, ptr %305, align 4
  %cmp513 = icmp eq i32 %306, 0
  br i1 %cmp513, label %if.then515, label %if.end516

if.then515:                                       ; preds = %for.cond510
  br label %for.end

if.end516:                                        ; preds = %for.cond510
  %arraydecay517 = getelementptr inbounds [64 x i8], ptr %cbuf511, i64 0, i64 0
  %307 = load ptr, ptr %arg_end, align 8
  %308 = load i32, ptr %307, align 4
  %call518 = call i64 @wcrtomb(ptr noundef %arraydecay517, i32 noundef %308, ptr noundef %state509) #21
  %conv519 = trunc i64 %call518 to i32
  store i32 %conv519, ptr %count512, align 4
  %309 = load i32, ptr %count512, align 4
  %cmp520 = icmp slt i32 %309, 0
  br i1 %cmp520, label %if.then522, label %if.end523

if.then522:                                       ; preds = %if.end516
  br label %fail_with_EILSEQ

if.end523:                                        ; preds = %if.end516
  %310 = load ptr, ptr %arg_end, align 8
  %incdec.ptr524 = getelementptr inbounds i32, ptr %310, i32 1
  store ptr %incdec.ptr524, ptr %arg_end, align 8
  %311 = load i32, ptr %count512, align 4
  %conv525 = sext i32 %311 to i64
  %312 = load i64, ptr %bytes476, align 8
  %add526 = add i64 %312, %conv525
  store i64 %add526, ptr %bytes476, align 8
  br label %for.cond510

for.end:                                          ; preds = %if.then515
  br label %if.end530

if.else527:                                       ; preds = %if.else506
  %313 = load ptr, ptr %arg471, align 8
  %314 = load ptr, ptr %arg471, align 8
  %call528 = call i64 @wcslen(ptr noundef %314) #23
  %add.ptr529 = getelementptr inbounds i32, ptr %313, i64 %call528
  store ptr %add.ptr529, ptr %arg_end, align 8
  store i64 0, ptr %bytes476, align 8
  br label %if.end530

if.end530:                                        ; preds = %if.else527, %for.end
  br label %if.end531

if.end531:                                        ; preds = %if.end530, %while.end505
  %315 = load i32, ptr %has_width360, align 4
  %tobool532 = icmp ne i32 %315, 0
  br i1 %tobool532, label %if.then533, label %if.else534

if.then533:                                       ; preds = %if.end531
  %316 = load i64, ptr %bytes476, align 8
  store i64 %316, ptr %w477, align 8
  br label %if.end535

if.else534:                                       ; preds = %if.end531
  store i64 0, ptr %w477, align 8
  br label %if.end535

if.end535:                                        ; preds = %if.else534, %if.then533
  %317 = load i64, ptr %w477, align 8
  %318 = load i64, ptr %width361, align 8
  %cmp536 = icmp ult i64 %317, %318
  br i1 %cmp536, label %land.lhs.true538, label %if.end601

land.lhs.true538:                                 ; preds = %if.end535
  %319 = load i32, ptr %flags358, align 4
  %and539 = and i32 %319, 2
  %tobool540 = icmp ne i32 %and539, 0
  br i1 %tobool540, label %if.end601, label %if.then541

if.then541:                                       ; preds = %land.lhs.true538
  %320 = load i64, ptr %width361, align 8
  %321 = load i64, ptr %w477, align 8
  %sub543 = sub i64 %320, %321
  store i64 %sub543, ptr %n542, align 8
  %322 = load i64, ptr %length, align 8
  %323 = load i64, ptr %n542, align 8
  %call544 = call i64 @xsum(i64 noundef %322, i64 noundef %323) #23
  %324 = load i64, ptr %allocated, align 8
  %cmp545 = icmp ugt i64 %call544, %324
  br i1 %cmp545, label %if.then547, label %if.end598

if.then547:                                       ; preds = %if.then541
  %325 = load i64, ptr %allocated, align 8
  %cmp550 = icmp ugt i64 %325, 0
  br i1 %cmp550, label %cond.true552, label %cond.false560

cond.true552:                                     ; preds = %if.then547
  %326 = load i64, ptr %allocated, align 8
  %cmp553 = icmp ule i64 %326, 9223372036854775807
  br i1 %cmp553, label %cond.true555, label %cond.false557

cond.true555:                                     ; preds = %cond.true552
  %327 = load i64, ptr %allocated, align 8
  %mul556 = mul i64 %327, 2
  br label %cond.end558

cond.false557:                                    ; preds = %cond.true552
  br label %cond.end558

cond.end558:                                      ; preds = %cond.false557, %cond.true555
  %cond559 = phi i64 [ %mul556, %cond.true555 ], [ -1, %cond.false557 ]
  br label %cond.end561

cond.false560:                                    ; preds = %if.then547
  br label %cond.end561

cond.end561:                                      ; preds = %cond.false560, %cond.end558
  %cond562 = phi i64 [ %cond559, %cond.end558 ], [ 12, %cond.false560 ]
  store i64 %cond562, ptr %allocated, align 8
  %328 = load i64, ptr %length, align 8
  %329 = load i64, ptr %n542, align 8
  %call563 = call i64 @xsum(i64 noundef %328, i64 noundef %329) #23
  %330 = load i64, ptr %allocated, align 8
  %cmp564 = icmp ugt i64 %call563, %330
  br i1 %cmp564, label %if.then566, label %if.end568

if.then566:                                       ; preds = %cond.end561
  %331 = load i64, ptr %length, align 8
  %332 = load i64, ptr %n542, align 8
  %call567 = call i64 @xsum(i64 noundef %331, i64 noundef %332) #23
  store i64 %call567, ptr %allocated, align 8
  br label %if.end568

if.end568:                                        ; preds = %if.then566, %cond.end561
  %333 = load i64, ptr %allocated, align 8
  %cmp569 = icmp ule i64 %333, -1
  br i1 %cmp569, label %cond.true571, label %cond.false573

cond.true571:                                     ; preds = %if.end568
  %334 = load i64, ptr %allocated, align 8
  %mul572 = mul i64 %334, 1
  br label %cond.end574

cond.false573:                                    ; preds = %if.end568
  br label %cond.end574

cond.end574:                                      ; preds = %cond.false573, %cond.true571
  %cond575 = phi i64 [ %mul572, %cond.true571 ], [ -1, %cond.false573 ]
  store i64 %cond575, ptr %memory_size548, align 8
  %335 = load i64, ptr %memory_size548, align 8
  %cmp576 = icmp eq i64 %335, -1
  br i1 %cmp576, label %if.then578, label %if.end579

if.then578:                                       ; preds = %cond.end574
  br label %out_of_memory

if.end579:                                        ; preds = %cond.end574
  %336 = load ptr, ptr %result, align 8
  %337 = load ptr, ptr %resultbuf.addr, align 8
  %cmp580 = icmp eq ptr %336, %337
  br i1 %cmp580, label %if.then582, label %if.else584

if.then582:                                       ; preds = %if.end579
  %338 = load i64, ptr %memory_size548, align 8
  %call583 = call noalias ptr @malloc(i64 noundef %338) #29
  store ptr %call583, ptr %memory549, align 8
  br label %if.end586

if.else584:                                       ; preds = %if.end579
  %339 = load ptr, ptr %result, align 8
  %340 = load i64, ptr %memory_size548, align 8
  %call585 = call ptr @rpl_realloc(ptr noundef %339, i64 noundef %340)
  store ptr %call585, ptr %memory549, align 8
  br label %if.end586

if.end586:                                        ; preds = %if.else584, %if.then582
  %341 = load ptr, ptr %memory549, align 8
  %cmp587 = icmp eq ptr %341, null
  br i1 %cmp587, label %if.then589, label %if.end590

if.then589:                                       ; preds = %if.end586
  br label %out_of_memory

if.end590:                                        ; preds = %if.end586
  %342 = load ptr, ptr %result, align 8
  %343 = load ptr, ptr %resultbuf.addr, align 8
  %cmp591 = icmp eq ptr %342, %343
  br i1 %cmp591, label %land.lhs.true593, label %if.end597

land.lhs.true593:                                 ; preds = %if.end590
  %344 = load i64, ptr %length, align 8
  %cmp594 = icmp ugt i64 %344, 0
  br i1 %cmp594, label %if.then596, label %if.end597

if.then596:                                       ; preds = %land.lhs.true593
  %345 = load ptr, ptr %memory549, align 8
  %346 = load ptr, ptr %result, align 8
  %347 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %345, ptr align 1 %346, i64 %347, i1 false)
  br label %if.end597

if.end597:                                        ; preds = %if.then596, %land.lhs.true593, %if.end590
  %348 = load ptr, ptr %memory549, align 8
  store ptr %348, ptr %result, align 8
  br label %if.end598

if.end598:                                        ; preds = %if.end597, %if.then541
  %349 = load ptr, ptr %result, align 8
  %350 = load i64, ptr %length, align 8
  %add.ptr599 = getelementptr inbounds i8, ptr %349, i64 %350
  %351 = load i64, ptr %n542, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %add.ptr599, i8 32, i64 %351, i1 false)
  %352 = load i64, ptr %n542, align 8
  %353 = load i64, ptr %length, align 8
  %add600 = add i64 %353, %352
  store i64 %add600, ptr %length, align 8
  br label %if.end601

if.end601:                                        ; preds = %if.end598, %land.lhs.true538, %if.end535
  %354 = load i32, ptr %has_precision362, align 4
  %tobool602 = icmp ne i32 %354, 0
  br i1 %tobool602, label %if.then604, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end601
  %355 = load i32, ptr %has_width360, align 4
  %tobool603 = icmp ne i32 %355, 0
  br i1 %tobool603, label %if.then604, label %if.else690

if.then604:                                       ; preds = %lor.lhs.false, %if.end601
  call void @mbszero(ptr noundef %state605)
  %356 = load i64, ptr %length, align 8
  %357 = load i64, ptr %bytes476, align 8
  %call606 = call i64 @xsum(i64 noundef %356, i64 noundef %357) #23
  %358 = load i64, ptr %allocated, align 8
  %cmp607 = icmp ugt i64 %call606, %358
  br i1 %cmp607, label %if.then609, label %if.end660

if.then609:                                       ; preds = %if.then604
  %359 = load i64, ptr %allocated, align 8
  %cmp612 = icmp ugt i64 %359, 0
  br i1 %cmp612, label %cond.true614, label %cond.false622

cond.true614:                                     ; preds = %if.then609
  %360 = load i64, ptr %allocated, align 8
  %cmp615 = icmp ule i64 %360, 9223372036854775807
  br i1 %cmp615, label %cond.true617, label %cond.false619

cond.true617:                                     ; preds = %cond.true614
  %361 = load i64, ptr %allocated, align 8
  %mul618 = mul i64 %361, 2
  br label %cond.end620

cond.false619:                                    ; preds = %cond.true614
  br label %cond.end620

cond.end620:                                      ; preds = %cond.false619, %cond.true617
  %cond621 = phi i64 [ %mul618, %cond.true617 ], [ -1, %cond.false619 ]
  br label %cond.end623

cond.false622:                                    ; preds = %if.then609
  br label %cond.end623

cond.end623:                                      ; preds = %cond.false622, %cond.end620
  %cond624 = phi i64 [ %cond621, %cond.end620 ], [ 12, %cond.false622 ]
  store i64 %cond624, ptr %allocated, align 8
  %362 = load i64, ptr %length, align 8
  %363 = load i64, ptr %bytes476, align 8
  %call625 = call i64 @xsum(i64 noundef %362, i64 noundef %363) #23
  %364 = load i64, ptr %allocated, align 8
  %cmp626 = icmp ugt i64 %call625, %364
  br i1 %cmp626, label %if.then628, label %if.end630

if.then628:                                       ; preds = %cond.end623
  %365 = load i64, ptr %length, align 8
  %366 = load i64, ptr %bytes476, align 8
  %call629 = call i64 @xsum(i64 noundef %365, i64 noundef %366) #23
  store i64 %call629, ptr %allocated, align 8
  br label %if.end630

if.end630:                                        ; preds = %if.then628, %cond.end623
  %367 = load i64, ptr %allocated, align 8
  %cmp631 = icmp ule i64 %367, -1
  br i1 %cmp631, label %cond.true633, label %cond.false635

cond.true633:                                     ; preds = %if.end630
  %368 = load i64, ptr %allocated, align 8
  %mul634 = mul i64 %368, 1
  br label %cond.end636

cond.false635:                                    ; preds = %if.end630
  br label %cond.end636

cond.end636:                                      ; preds = %cond.false635, %cond.true633
  %cond637 = phi i64 [ %mul634, %cond.true633 ], [ -1, %cond.false635 ]
  store i64 %cond637, ptr %memory_size610, align 8
  %369 = load i64, ptr %memory_size610, align 8
  %cmp638 = icmp eq i64 %369, -1
  br i1 %cmp638, label %if.then640, label %if.end641

if.then640:                                       ; preds = %cond.end636
  br label %out_of_memory

if.end641:                                        ; preds = %cond.end636
  %370 = load ptr, ptr %result, align 8
  %371 = load ptr, ptr %resultbuf.addr, align 8
  %cmp642 = icmp eq ptr %370, %371
  br i1 %cmp642, label %if.then644, label %if.else646

if.then644:                                       ; preds = %if.end641
  %372 = load i64, ptr %memory_size610, align 8
  %call645 = call noalias ptr @malloc(i64 noundef %372) #29
  store ptr %call645, ptr %memory611, align 8
  br label %if.end648

if.else646:                                       ; preds = %if.end641
  %373 = load ptr, ptr %result, align 8
  %374 = load i64, ptr %memory_size610, align 8
  %call647 = call ptr @rpl_realloc(ptr noundef %373, i64 noundef %374)
  store ptr %call647, ptr %memory611, align 8
  br label %if.end648

if.end648:                                        ; preds = %if.else646, %if.then644
  %375 = load ptr, ptr %memory611, align 8
  %cmp649 = icmp eq ptr %375, null
  br i1 %cmp649, label %if.then651, label %if.end652

if.then651:                                       ; preds = %if.end648
  br label %out_of_memory

if.end652:                                        ; preds = %if.end648
  %376 = load ptr, ptr %result, align 8
  %377 = load ptr, ptr %resultbuf.addr, align 8
  %cmp653 = icmp eq ptr %376, %377
  br i1 %cmp653, label %land.lhs.true655, label %if.end659

land.lhs.true655:                                 ; preds = %if.end652
  %378 = load i64, ptr %length, align 8
  %cmp656 = icmp ugt i64 %378, 0
  br i1 %cmp656, label %if.then658, label %if.end659

if.then658:                                       ; preds = %land.lhs.true655
  %379 = load ptr, ptr %memory611, align 8
  %380 = load ptr, ptr %result, align 8
  %381 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %379, ptr align 1 %380, i64 %381, i1 false)
  br label %if.end659

if.end659:                                        ; preds = %if.then658, %land.lhs.true655, %if.end652
  %382 = load ptr, ptr %memory611, align 8
  store ptr %382, ptr %result, align 8
  br label %if.end660

if.end660:                                        ; preds = %if.end659, %if.then604
  %383 = load i64, ptr %bytes476, align 8
  store i64 %383, ptr %remaining, align 8
  br label %for.cond661

for.cond661:                                      ; preds = %if.end676, %if.end660
  %384 = load i64, ptr %remaining, align 8
  %cmp662 = icmp ugt i64 %384, 0
  br i1 %cmp662, label %for.body, label %for.end685

for.body:                                         ; preds = %for.cond661
  %385 = load ptr, ptr %arg471, align 8
  %386 = load i32, ptr %385, align 4
  %cmp666 = icmp eq i32 %386, 0
  br i1 %cmp666, label %if.then668, label %if.end669

if.then668:                                       ; preds = %for.body
  call void @abort() #22
  unreachable

if.end669:                                        ; preds = %for.body
  %arraydecay670 = getelementptr inbounds [64 x i8], ptr %cbuf664, i64 0, i64 0
  %387 = load ptr, ptr %arg471, align 8
  %388 = load i32, ptr %387, align 4
  %call671 = call i64 @wcrtomb(ptr noundef %arraydecay670, i32 noundef %388, ptr noundef %state605) #21
  %conv672 = trunc i64 %call671 to i32
  store i32 %conv672, ptr %count665, align 4
  %389 = load i32, ptr %count665, align 4
  %cmp673 = icmp sle i32 %389, 0
  br i1 %cmp673, label %if.then675, label %if.end676

if.then675:                                       ; preds = %if.end669
  call void @abort() #22
  unreachable

if.end676:                                        ; preds = %if.end669
  %390 = load ptr, ptr %result, align 8
  %391 = load i64, ptr %length, align 8
  %add.ptr677 = getelementptr inbounds i8, ptr %390, i64 %391
  %arraydecay678 = getelementptr inbounds [64 x i8], ptr %cbuf664, i64 0, i64 0
  %392 = load i32, ptr %count665, align 4
  %conv679 = sext i32 %392 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %add.ptr677, ptr align 16 %arraydecay678, i64 %conv679, i1 false)
  %393 = load i32, ptr %count665, align 4
  %conv680 = sext i32 %393 to i64
  %394 = load i64, ptr %length, align 8
  %add681 = add i64 %394, %conv680
  store i64 %add681, ptr %length, align 8
  %395 = load ptr, ptr %arg471, align 8
  %incdec.ptr682 = getelementptr inbounds i32, ptr %395, i32 1
  store ptr %incdec.ptr682, ptr %arg471, align 8
  %396 = load i32, ptr %count665, align 4
  %conv683 = sext i32 %396 to i64
  %397 = load i64, ptr %remaining, align 8
  %sub684 = sub i64 %397, %conv683
  store i64 %sub684, ptr %remaining, align 8
  br label %for.cond661, !llvm.loop !57

for.end685:                                       ; preds = %for.cond661
  %398 = load ptr, ptr %arg471, align 8
  %399 = load ptr, ptr %arg_end, align 8
  %cmp686 = icmp eq ptr %398, %399
  br i1 %cmp686, label %if.end689, label %if.then688

if.then688:                                       ; preds = %for.end685
  call void @abort() #22
  unreachable

if.end689:                                        ; preds = %for.end685
  br label %if.end774

if.else690:                                       ; preds = %lor.lhs.false
  call void @mbszero(ptr noundef %state691)
  br label %while.cond692

while.cond692:                                    ; preds = %if.end766, %if.else690
  %400 = load ptr, ptr %arg471, align 8
  %401 = load ptr, ptr %arg_end, align 8
  %cmp693 = icmp ult ptr %400, %401
  br i1 %cmp693, label %while.body695, label %while.end773

while.body695:                                    ; preds = %while.cond692
  %402 = load ptr, ptr %arg471, align 8
  %403 = load i32, ptr %402, align 4
  %cmp698 = icmp eq i32 %403, 0
  br i1 %cmp698, label %if.then700, label %if.end701

if.then700:                                       ; preds = %while.body695
  call void @abort() #22
  unreachable

if.end701:                                        ; preds = %while.body695
  %arraydecay702 = getelementptr inbounds [64 x i8], ptr %cbuf696, i64 0, i64 0
  %404 = load ptr, ptr %arg471, align 8
  %405 = load i32, ptr %404, align 4
  %call703 = call i64 @wcrtomb(ptr noundef %arraydecay702, i32 noundef %405, ptr noundef %state691) #21
  %conv704 = trunc i64 %call703 to i32
  store i32 %conv704, ptr %count697, align 4
  %406 = load i32, ptr %count697, align 4
  %cmp705 = icmp sle i32 %406, 0
  br i1 %cmp705, label %if.then707, label %if.end708

if.then707:                                       ; preds = %if.end701
  br label %fail_with_EILSEQ

if.end708:                                        ; preds = %if.end701
  %407 = load i64, ptr %length, align 8
  %408 = load i32, ptr %count697, align 4
  %conv709 = sext i32 %408 to i64
  %call710 = call i64 @xsum(i64 noundef %407, i64 noundef %conv709) #23
  %409 = load i64, ptr %allocated, align 8
  %cmp711 = icmp ugt i64 %call710, %409
  br i1 %cmp711, label %if.then713, label %if.end766

if.then713:                                       ; preds = %if.end708
  %410 = load i64, ptr %allocated, align 8
  %cmp716 = icmp ugt i64 %410, 0
  br i1 %cmp716, label %cond.true718, label %cond.false726

cond.true718:                                     ; preds = %if.then713
  %411 = load i64, ptr %allocated, align 8
  %cmp719 = icmp ule i64 %411, 9223372036854775807
  br i1 %cmp719, label %cond.true721, label %cond.false723

cond.true721:                                     ; preds = %cond.true718
  %412 = load i64, ptr %allocated, align 8
  %mul722 = mul i64 %412, 2
  br label %cond.end724

cond.false723:                                    ; preds = %cond.true718
  br label %cond.end724

cond.end724:                                      ; preds = %cond.false723, %cond.true721
  %cond725 = phi i64 [ %mul722, %cond.true721 ], [ -1, %cond.false723 ]
  br label %cond.end727

cond.false726:                                    ; preds = %if.then713
  br label %cond.end727

cond.end727:                                      ; preds = %cond.false726, %cond.end724
  %cond728 = phi i64 [ %cond725, %cond.end724 ], [ 12, %cond.false726 ]
  store i64 %cond728, ptr %allocated, align 8
  %413 = load i64, ptr %length, align 8
  %414 = load i32, ptr %count697, align 4
  %conv729 = sext i32 %414 to i64
  %call730 = call i64 @xsum(i64 noundef %413, i64 noundef %conv729) #23
  %415 = load i64, ptr %allocated, align 8
  %cmp731 = icmp ugt i64 %call730, %415
  br i1 %cmp731, label %if.then733, label %if.end736

if.then733:                                       ; preds = %cond.end727
  %416 = load i64, ptr %length, align 8
  %417 = load i32, ptr %count697, align 4
  %conv734 = sext i32 %417 to i64
  %call735 = call i64 @xsum(i64 noundef %416, i64 noundef %conv734) #23
  store i64 %call735, ptr %allocated, align 8
  br label %if.end736

if.end736:                                        ; preds = %if.then733, %cond.end727
  %418 = load i64, ptr %allocated, align 8
  %cmp737 = icmp ule i64 %418, -1
  br i1 %cmp737, label %cond.true739, label %cond.false741

cond.true739:                                     ; preds = %if.end736
  %419 = load i64, ptr %allocated, align 8
  %mul740 = mul i64 %419, 1
  br label %cond.end742

cond.false741:                                    ; preds = %if.end736
  br label %cond.end742

cond.end742:                                      ; preds = %cond.false741, %cond.true739
  %cond743 = phi i64 [ %mul740, %cond.true739 ], [ -1, %cond.false741 ]
  store i64 %cond743, ptr %memory_size714, align 8
  %420 = load i64, ptr %memory_size714, align 8
  %cmp744 = icmp eq i64 %420, -1
  br i1 %cmp744, label %if.then746, label %if.end747

if.then746:                                       ; preds = %cond.end742
  br label %out_of_memory

if.end747:                                        ; preds = %cond.end742
  %421 = load ptr, ptr %result, align 8
  %422 = load ptr, ptr %resultbuf.addr, align 8
  %cmp748 = icmp eq ptr %421, %422
  br i1 %cmp748, label %if.then750, label %if.else752

if.then750:                                       ; preds = %if.end747
  %423 = load i64, ptr %memory_size714, align 8
  %call751 = call noalias ptr @malloc(i64 noundef %423) #29
  store ptr %call751, ptr %memory715, align 8
  br label %if.end754

if.else752:                                       ; preds = %if.end747
  %424 = load ptr, ptr %result, align 8
  %425 = load i64, ptr %memory_size714, align 8
  %call753 = call ptr @rpl_realloc(ptr noundef %424, i64 noundef %425)
  store ptr %call753, ptr %memory715, align 8
  br label %if.end754

if.end754:                                        ; preds = %if.else752, %if.then750
  %426 = load ptr, ptr %memory715, align 8
  %cmp755 = icmp eq ptr %426, null
  br i1 %cmp755, label %if.then757, label %if.end758

if.then757:                                       ; preds = %if.end754
  br label %out_of_memory

if.end758:                                        ; preds = %if.end754
  %427 = load ptr, ptr %result, align 8
  %428 = load ptr, ptr %resultbuf.addr, align 8
  %cmp759 = icmp eq ptr %427, %428
  br i1 %cmp759, label %land.lhs.true761, label %if.end765

land.lhs.true761:                                 ; preds = %if.end758
  %429 = load i64, ptr %length, align 8
  %cmp762 = icmp ugt i64 %429, 0
  br i1 %cmp762, label %if.then764, label %if.end765

if.then764:                                       ; preds = %land.lhs.true761
  %430 = load ptr, ptr %memory715, align 8
  %431 = load ptr, ptr %result, align 8
  %432 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %430, ptr align 1 %431, i64 %432, i1 false)
  br label %if.end765

if.end765:                                        ; preds = %if.then764, %land.lhs.true761, %if.end758
  %433 = load ptr, ptr %memory715, align 8
  store ptr %433, ptr %result, align 8
  br label %if.end766

if.end766:                                        ; preds = %if.end765, %if.end708
  %434 = load ptr, ptr %result, align 8
  %435 = load i64, ptr %length, align 8
  %add.ptr767 = getelementptr inbounds i8, ptr %434, i64 %435
  %arraydecay768 = getelementptr inbounds [64 x i8], ptr %cbuf696, i64 0, i64 0
  %436 = load i32, ptr %count697, align 4
  %conv769 = sext i32 %436 to i64
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %add.ptr767, ptr align 16 %arraydecay768, i64 %conv769, i1 false)
  %437 = load i32, ptr %count697, align 4
  %conv770 = sext i32 %437 to i64
  %438 = load i64, ptr %length, align 8
  %add771 = add i64 %438, %conv770
  store i64 %add771, ptr %length, align 8
  %439 = load ptr, ptr %arg471, align 8
  %incdec.ptr772 = getelementptr inbounds i32, ptr %439, i32 1
  store ptr %incdec.ptr772, ptr %arg471, align 8
  br label %while.cond692, !llvm.loop !58

while.end773:                                     ; preds = %while.cond692
  br label %if.end774

if.end774:                                        ; preds = %while.end773, %if.end689
  %440 = load i64, ptr %w477, align 8
  %441 = load i64, ptr %width361, align 8
  %cmp775 = icmp ult i64 %440, %441
  br i1 %cmp775, label %land.lhs.true777, label %if.end840

land.lhs.true777:                                 ; preds = %if.end774
  %442 = load i32, ptr %flags358, align 4
  %and778 = and i32 %442, 2
  %tobool779 = icmp ne i32 %and778, 0
  br i1 %tobool779, label %if.then780, label %if.end840

if.then780:                                       ; preds = %land.lhs.true777
  %443 = load i64, ptr %width361, align 8
  %444 = load i64, ptr %w477, align 8
  %sub782 = sub i64 %443, %444
  store i64 %sub782, ptr %n781, align 8
  %445 = load i64, ptr %length, align 8
  %446 = load i64, ptr %n781, align 8
  %call783 = call i64 @xsum(i64 noundef %445, i64 noundef %446) #23
  %447 = load i64, ptr %allocated, align 8
  %cmp784 = icmp ugt i64 %call783, %447
  br i1 %cmp784, label %if.then786, label %if.end837

if.then786:                                       ; preds = %if.then780
  %448 = load i64, ptr %allocated, align 8
  %cmp789 = icmp ugt i64 %448, 0
  br i1 %cmp789, label %cond.true791, label %cond.false799

cond.true791:                                     ; preds = %if.then786
  %449 = load i64, ptr %allocated, align 8
  %cmp792 = icmp ule i64 %449, 9223372036854775807
  br i1 %cmp792, label %cond.true794, label %cond.false796

cond.true794:                                     ; preds = %cond.true791
  %450 = load i64, ptr %allocated, align 8
  %mul795 = mul i64 %450, 2
  br label %cond.end797

cond.false796:                                    ; preds = %cond.true791
  br label %cond.end797

cond.end797:                                      ; preds = %cond.false796, %cond.true794
  %cond798 = phi i64 [ %mul795, %cond.true794 ], [ -1, %cond.false796 ]
  br label %cond.end800

cond.false799:                                    ; preds = %if.then786
  br label %cond.end800

cond.end800:                                      ; preds = %cond.false799, %cond.end797
  %cond801 = phi i64 [ %cond798, %cond.end797 ], [ 12, %cond.false799 ]
  store i64 %cond801, ptr %allocated, align 8
  %451 = load i64, ptr %length, align 8
  %452 = load i64, ptr %n781, align 8
  %call802 = call i64 @xsum(i64 noundef %451, i64 noundef %452) #23
  %453 = load i64, ptr %allocated, align 8
  %cmp803 = icmp ugt i64 %call802, %453
  br i1 %cmp803, label %if.then805, label %if.end807

if.then805:                                       ; preds = %cond.end800
  %454 = load i64, ptr %length, align 8
  %455 = load i64, ptr %n781, align 8
  %call806 = call i64 @xsum(i64 noundef %454, i64 noundef %455) #23
  store i64 %call806, ptr %allocated, align 8
  br label %if.end807

if.end807:                                        ; preds = %if.then805, %cond.end800
  %456 = load i64, ptr %allocated, align 8
  %cmp808 = icmp ule i64 %456, -1
  br i1 %cmp808, label %cond.true810, label %cond.false812

cond.true810:                                     ; preds = %if.end807
  %457 = load i64, ptr %allocated, align 8
  %mul811 = mul i64 %457, 1
  br label %cond.end813

cond.false812:                                    ; preds = %if.end807
  br label %cond.end813

cond.end813:                                      ; preds = %cond.false812, %cond.true810
  %cond814 = phi i64 [ %mul811, %cond.true810 ], [ -1, %cond.false812 ]
  store i64 %cond814, ptr %memory_size787, align 8
  %458 = load i64, ptr %memory_size787, align 8
  %cmp815 = icmp eq i64 %458, -1
  br i1 %cmp815, label %if.then817, label %if.end818

if.then817:                                       ; preds = %cond.end813
  br label %out_of_memory

if.end818:                                        ; preds = %cond.end813
  %459 = load ptr, ptr %result, align 8
  %460 = load ptr, ptr %resultbuf.addr, align 8
  %cmp819 = icmp eq ptr %459, %460
  br i1 %cmp819, label %if.then821, label %if.else823

if.then821:                                       ; preds = %if.end818
  %461 = load i64, ptr %memory_size787, align 8
  %call822 = call noalias ptr @malloc(i64 noundef %461) #29
  store ptr %call822, ptr %memory788, align 8
  br label %if.end825

if.else823:                                       ; preds = %if.end818
  %462 = load ptr, ptr %result, align 8
  %463 = load i64, ptr %memory_size787, align 8
  %call824 = call ptr @rpl_realloc(ptr noundef %462, i64 noundef %463)
  store ptr %call824, ptr %memory788, align 8
  br label %if.end825

if.end825:                                        ; preds = %if.else823, %if.then821
  %464 = load ptr, ptr %memory788, align 8
  %cmp826 = icmp eq ptr %464, null
  br i1 %cmp826, label %if.then828, label %if.end829

if.then828:                                       ; preds = %if.end825
  br label %out_of_memory

if.end829:                                        ; preds = %if.end825
  %465 = load ptr, ptr %result, align 8
  %466 = load ptr, ptr %resultbuf.addr, align 8
  %cmp830 = icmp eq ptr %465, %466
  br i1 %cmp830, label %land.lhs.true832, label %if.end836

land.lhs.true832:                                 ; preds = %if.end829
  %467 = load i64, ptr %length, align 8
  %cmp833 = icmp ugt i64 %467, 0
  br i1 %cmp833, label %if.then835, label %if.end836

if.then835:                                       ; preds = %land.lhs.true832
  %468 = load ptr, ptr %memory788, align 8
  %469 = load ptr, ptr %result, align 8
  %470 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %468, ptr align 1 %469, i64 %470, i1 false)
  br label %if.end836

if.end836:                                        ; preds = %if.then835, %land.lhs.true832, %if.end829
  %471 = load ptr, ptr %memory788, align 8
  store ptr %471, ptr %result, align 8
  br label %if.end837

if.end837:                                        ; preds = %if.end836, %if.then780
  %472 = load ptr, ptr %result, align 8
  %473 = load i64, ptr %length, align 8
  %add.ptr838 = getelementptr inbounds i8, ptr %472, i64 %473
  %474 = load i64, ptr %n781, align 8
  call void @llvm.memset.p0.i64(ptr align 1 %add.ptr838, i8 32, i64 %474, i1 false)
  %475 = load i64, ptr %n781, align 8
  %476 = load i64, ptr %length, align 8
  %add839 = add i64 %476, %475
  store i64 %add839, ptr %length, align 8
  br label %if.end840

if.end840:                                        ; preds = %if.end837, %land.lhs.true777, %if.end774
  br label %if.end1897

if.else841:                                       ; preds = %land.lhs.true350, %if.else345
  %arg843 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %477 = load ptr, ptr %arg843, align 8
  %478 = load ptr, ptr %dp, align 8
  %arg_index844 = getelementptr inbounds %struct.char_directive, ptr %478, i32 0, i32 10
  %479 = load i64, ptr %arg_index844, align 8
  %arrayidx845 = getelementptr inbounds %struct.argument, ptr %477, i64 %479
  %type846 = getelementptr inbounds %struct.argument, ptr %arrayidx845, i32 0, i32 0
  %480 = load i32, ptr %type846, align 16
  store i32 %480, ptr %type842, align 4
  %481 = load ptr, ptr %dp, align 8
  %flags848 = getelementptr inbounds %struct.char_directive, ptr %481, i32 0, i32 2
  %482 = load i32, ptr %flags848, align 8
  store i32 %482, ptr %flags847, align 4
  %483 = load ptr, ptr %buf, align 8
  store ptr %483, ptr %fbp, align 8
  %484 = load ptr, ptr %fbp, align 8
  %incdec.ptr849 = getelementptr inbounds i8, ptr %484, i32 1
  store ptr %incdec.ptr849, ptr %fbp, align 8
  store i8 37, ptr %484, align 1
  %485 = load i32, ptr %flags847, align 4
  %and850 = and i32 %485, 1
  %tobool851 = icmp ne i32 %and850, 0
  br i1 %tobool851, label %if.then852, label %if.end854

if.then852:                                       ; preds = %if.else841
  %486 = load ptr, ptr %fbp, align 8
  %incdec.ptr853 = getelementptr inbounds i8, ptr %486, i32 1
  store ptr %incdec.ptr853, ptr %fbp, align 8
  store i8 39, ptr %486, align 1
  br label %if.end854

if.end854:                                        ; preds = %if.then852, %if.else841
  %487 = load i32, ptr %flags847, align 4
  %and855 = and i32 %487, 2
  %tobool856 = icmp ne i32 %and855, 0
  br i1 %tobool856, label %if.then857, label %if.end859

if.then857:                                       ; preds = %if.end854
  %488 = load ptr, ptr %fbp, align 8
  %incdec.ptr858 = getelementptr inbounds i8, ptr %488, i32 1
  store ptr %incdec.ptr858, ptr %fbp, align 8
  store i8 45, ptr %488, align 1
  br label %if.end859

if.end859:                                        ; preds = %if.then857, %if.end854
  %489 = load i32, ptr %flags847, align 4
  %and860 = and i32 %489, 4
  %tobool861 = icmp ne i32 %and860, 0
  br i1 %tobool861, label %if.then862, label %if.end864

if.then862:                                       ; preds = %if.end859
  %490 = load ptr, ptr %fbp, align 8
  %incdec.ptr863 = getelementptr inbounds i8, ptr %490, i32 1
  store ptr %incdec.ptr863, ptr %fbp, align 8
  store i8 43, ptr %490, align 1
  br label %if.end864

if.end864:                                        ; preds = %if.then862, %if.end859
  %491 = load i32, ptr %flags847, align 4
  %and865 = and i32 %491, 8
  %tobool866 = icmp ne i32 %and865, 0
  br i1 %tobool866, label %if.then867, label %if.end869

if.then867:                                       ; preds = %if.end864
  %492 = load ptr, ptr %fbp, align 8
  %incdec.ptr868 = getelementptr inbounds i8, ptr %492, i32 1
  store ptr %incdec.ptr868, ptr %fbp, align 8
  store i8 32, ptr %492, align 1
  br label %if.end869

if.end869:                                        ; preds = %if.then867, %if.end864
  %493 = load i32, ptr %flags847, align 4
  %and870 = and i32 %493, 16
  %tobool871 = icmp ne i32 %and870, 0
  br i1 %tobool871, label %if.then872, label %if.end874

if.then872:                                       ; preds = %if.end869
  %494 = load ptr, ptr %fbp, align 8
  %incdec.ptr873 = getelementptr inbounds i8, ptr %494, i32 1
  store ptr %incdec.ptr873, ptr %fbp, align 8
  store i8 35, ptr %494, align 1
  br label %if.end874

if.end874:                                        ; preds = %if.then872, %if.end869
  %495 = load i32, ptr %flags847, align 4
  %and875 = and i32 %495, 64
  %tobool876 = icmp ne i32 %and875, 0
  br i1 %tobool876, label %if.then877, label %if.end879

if.then877:                                       ; preds = %if.end874
  %496 = load ptr, ptr %fbp, align 8
  %incdec.ptr878 = getelementptr inbounds i8, ptr %496, i32 1
  store ptr %incdec.ptr878, ptr %fbp, align 8
  store i8 73, ptr %496, align 1
  br label %if.end879

if.end879:                                        ; preds = %if.then877, %if.end874
  %497 = load i32, ptr %flags847, align 4
  %and880 = and i32 %497, 32
  %tobool881 = icmp ne i32 %and880, 0
  br i1 %tobool881, label %if.then882, label %if.end884

if.then882:                                       ; preds = %if.end879
  %498 = load ptr, ptr %fbp, align 8
  %incdec.ptr883 = getelementptr inbounds i8, ptr %498, i32 1
  store ptr %incdec.ptr883, ptr %fbp, align 8
  store i8 48, ptr %498, align 1
  br label %if.end884

if.end884:                                        ; preds = %if.then882, %if.end879
  %499 = load ptr, ptr %dp, align 8
  %width_start885 = getelementptr inbounds %struct.char_directive, ptr %499, i32 0, i32 3
  %500 = load ptr, ptr %width_start885, align 8
  %501 = load ptr, ptr %dp, align 8
  %width_end886 = getelementptr inbounds %struct.char_directive, ptr %501, i32 0, i32 4
  %502 = load ptr, ptr %width_end886, align 8
  %cmp887 = icmp ne ptr %500, %502
  br i1 %cmp887, label %if.then889, label %if.end949

if.then889:                                       ; preds = %if.end884
  %503 = load ptr, ptr %dp, align 8
  %width_end891 = getelementptr inbounds %struct.char_directive, ptr %503, i32 0, i32 4
  %504 = load ptr, ptr %width_end891, align 8
  %505 = load ptr, ptr %dp, align 8
  %width_start892 = getelementptr inbounds %struct.char_directive, ptr %505, i32 0, i32 3
  %506 = load ptr, ptr %width_start892, align 8
  %sub.ptr.lhs.cast893 = ptrtoint ptr %504 to i64
  %sub.ptr.rhs.cast894 = ptrtoint ptr %506 to i64
  %sub.ptr.sub895 = sub i64 %sub.ptr.lhs.cast893, %sub.ptr.rhs.cast894
  store i64 %sub.ptr.sub895, ptr %n890, align 8
  %507 = load ptr, ptr %dp, align 8
  %width_arg_index897 = getelementptr inbounds %struct.char_directive, ptr %507, i32 0, i32 5
  %508 = load i64, ptr %width_arg_index897, align 8
  %cmp898 = icmp ne i64 %508, -1
  br i1 %cmp898, label %if.then900, label %if.else920

if.then900:                                       ; preds = %if.then889
  %arg902 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %509 = load ptr, ptr %arg902, align 8
  %510 = load ptr, ptr %dp, align 8
  %width_arg_index903 = getelementptr inbounds %struct.char_directive, ptr %510, i32 0, i32 5
  %511 = load i64, ptr %width_arg_index903, align 8
  %arrayidx904 = getelementptr inbounds %struct.argument, ptr %509, i64 %511
  %type905 = getelementptr inbounds %struct.argument, ptr %arrayidx904, i32 0, i32 0
  %512 = load i32, ptr %type905, align 16
  %cmp906 = icmp eq i32 %512, 5
  br i1 %cmp906, label %if.end909, label %if.then908

if.then908:                                       ; preds = %if.then900
  call void @abort() #22
  unreachable

if.end909:                                        ; preds = %if.then900
  %arg910 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %513 = load ptr, ptr %arg910, align 8
  %514 = load ptr, ptr %dp, align 8
  %width_arg_index911 = getelementptr inbounds %struct.char_directive, ptr %514, i32 0, i32 5
  %515 = load i64, ptr %width_arg_index911, align 8
  %arrayidx912 = getelementptr inbounds %struct.argument, ptr %513, i64 %515
  %a913 = getelementptr inbounds %struct.argument, ptr %arrayidx912, i32 0, i32 1
  %516 = load i32, ptr %a913, align 16
  store i32 %516, ptr %arg901, align 4
  %517 = load i32, ptr %arg901, align 4
  %conv914 = sext i32 %517 to i64
  store i64 %conv914, ptr %width896, align 8
  %518 = load i32, ptr %arg901, align 4
  %cmp915 = icmp slt i32 %518, 0
  br i1 %cmp915, label %if.then917, label %if.end919

if.then917:                                       ; preds = %if.end909
  %519 = load i64, ptr %width896, align 8
  %sub918 = sub i64 0, %519
  store i64 %sub918, ptr %width896, align 8
  br label %if.end919

if.end919:                                        ; preds = %if.then917, %if.end909
  br label %if.end941

if.else920:                                       ; preds = %if.then889
  %520 = load ptr, ptr %dp, align 8
  %width_start922 = getelementptr inbounds %struct.char_directive, ptr %520, i32 0, i32 3
  %521 = load ptr, ptr %width_start922, align 8
  store ptr %521, ptr %digitp921, align 8
  store i64 0, ptr %width896, align 8
  br label %do.body923

do.body923:                                       ; preds = %do.cond936, %if.else920
  %522 = load i64, ptr %width896, align 8
  %cmp924 = icmp ule i64 %522, 1844674407370955161
  br i1 %cmp924, label %cond.true926, label %cond.false928

cond.true926:                                     ; preds = %do.body923
  %523 = load i64, ptr %width896, align 8
  %mul927 = mul i64 %523, 10
  br label %cond.end929

cond.false928:                                    ; preds = %do.body923
  br label %cond.end929

cond.end929:                                      ; preds = %cond.false928, %cond.true926
  %cond930 = phi i64 [ %mul927, %cond.true926 ], [ -1, %cond.false928 ]
  %524 = load ptr, ptr %digitp921, align 8
  %incdec.ptr931 = getelementptr inbounds i8, ptr %524, i32 1
  store ptr %incdec.ptr931, ptr %digitp921, align 8
  %525 = load i8, ptr %524, align 1
  %conv932 = sext i8 %525 to i32
  %sub933 = sub nsw i32 %conv932, 48
  %conv934 = sext i32 %sub933 to i64
  %call935 = call i64 @xsum(i64 noundef %cond930, i64 noundef %conv934) #23
  store i64 %call935, ptr %width896, align 8
  br label %do.cond936

do.cond936:                                       ; preds = %cond.end929
  %526 = load ptr, ptr %digitp921, align 8
  %527 = load ptr, ptr %dp, align 8
  %width_end937 = getelementptr inbounds %struct.char_directive, ptr %527, i32 0, i32 4
  %528 = load ptr, ptr %width_end937, align 8
  %cmp938 = icmp ne ptr %526, %528
  br i1 %cmp938, label %do.body923, label %do.end940, !llvm.loop !59

do.end940:                                        ; preds = %do.cond936
  br label %if.end941

if.end941:                                        ; preds = %do.end940, %if.end919
  %529 = load i64, ptr %width896, align 8
  %cmp942 = icmp ugt i64 %529, 2147483647
  br i1 %cmp942, label %if.then944, label %if.end945

if.then944:                                       ; preds = %if.end941
  br label %overflow

if.end945:                                        ; preds = %if.end941
  %530 = load ptr, ptr %fbp, align 8
  %531 = load ptr, ptr %dp, align 8
  %width_start946 = getelementptr inbounds %struct.char_directive, ptr %531, i32 0, i32 3
  %532 = load ptr, ptr %width_start946, align 8
  %533 = load i64, ptr %n890, align 8
  %mul947 = mul i64 %533, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %530, ptr align 1 %532, i64 %mul947, i1 false)
  %534 = load i64, ptr %n890, align 8
  %535 = load ptr, ptr %fbp, align 8
  %add.ptr948 = getelementptr inbounds i8, ptr %535, i64 %534
  store ptr %add.ptr948, ptr %fbp, align 8
  br label %if.end949

if.end949:                                        ; preds = %if.end945, %if.end884
  %536 = load ptr, ptr %dp, align 8
  %precision_start950 = getelementptr inbounds %struct.char_directive, ptr %536, i32 0, i32 6
  %537 = load ptr, ptr %precision_start950, align 8
  %538 = load ptr, ptr %dp, align 8
  %precision_end951 = getelementptr inbounds %struct.char_directive, ptr %538, i32 0, i32 7
  %539 = load ptr, ptr %precision_end951, align 8
  %cmp952 = icmp ne ptr %537, %539
  br i1 %cmp952, label %if.then954, label %if.end964

if.then954:                                       ; preds = %if.end949
  %540 = load ptr, ptr %dp, align 8
  %precision_end956 = getelementptr inbounds %struct.char_directive, ptr %540, i32 0, i32 7
  %541 = load ptr, ptr %precision_end956, align 8
  %542 = load ptr, ptr %dp, align 8
  %precision_start957 = getelementptr inbounds %struct.char_directive, ptr %542, i32 0, i32 6
  %543 = load ptr, ptr %precision_start957, align 8
  %sub.ptr.lhs.cast958 = ptrtoint ptr %541 to i64
  %sub.ptr.rhs.cast959 = ptrtoint ptr %543 to i64
  %sub.ptr.sub960 = sub i64 %sub.ptr.lhs.cast958, %sub.ptr.rhs.cast959
  store i64 %sub.ptr.sub960, ptr %n955, align 8
  %544 = load ptr, ptr %fbp, align 8
  %545 = load ptr, ptr %dp, align 8
  %precision_start961 = getelementptr inbounds %struct.char_directive, ptr %545, i32 0, i32 6
  %546 = load ptr, ptr %precision_start961, align 8
  %547 = load i64, ptr %n955, align 8
  %mul962 = mul i64 %547, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %544, ptr align 1 %546, i64 %mul962, i1 false)
  %548 = load i64, ptr %n955, align 8
  %549 = load ptr, ptr %fbp, align 8
  %add.ptr963 = getelementptr inbounds i8, ptr %549, i64 %548
  store ptr %add.ptr963, ptr %fbp, align 8
  br label %if.end964

if.end964:                                        ; preds = %if.then954, %if.end949
  %550 = load i32, ptr %type842, align 4
  switch i32 %550, label %sw.default [
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 7, label %sw.bb966
    i32 8, label %sw.bb966
    i32 17, label %sw.bb966
    i32 18, label %sw.bb966
    i32 21, label %sw.bb966
    i32 22, label %sw.bb966
    i32 23, label %sw.bb966
    i32 24, label %sw.bb966
    i32 25, label %sw.bb966
    i32 26, label %sw.bb966
    i32 30, label %sw.bb966
    i32 32, label %sw.bb966
    i32 28, label %sw.bb968
  ]

sw.bb:                                            ; preds = %if.end964, %if.end964
  %551 = load ptr, ptr %fbp, align 8
  %incdec.ptr965 = getelementptr inbounds i8, ptr %551, i32 1
  store ptr %incdec.ptr965, ptr %fbp, align 8
  store i8 108, ptr %551, align 1
  br label %sw.bb966

sw.bb966:                                         ; preds = %sw.bb, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964, %if.end964
  %552 = load ptr, ptr %fbp, align 8
  %incdec.ptr967 = getelementptr inbounds i8, ptr %552, i32 1
  store ptr %incdec.ptr967, ptr %fbp, align 8
  store i8 108, ptr %552, align 1
  br label %sw.epilog

sw.bb968:                                         ; preds = %if.end964
  %553 = load ptr, ptr %fbp, align 8
  %incdec.ptr969 = getelementptr inbounds i8, ptr %553, i32 1
  store ptr %incdec.ptr969, ptr %fbp, align 8
  store i8 76, ptr %553, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %if.end964
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb968, %sw.bb966
  %554 = load ptr, ptr %dp, align 8
  %conversion970 = getelementptr inbounds %struct.char_directive, ptr %554, i32 0, i32 9
  %555 = load i8, ptr %conversion970, align 8
  %556 = load ptr, ptr %fbp, align 8
  store i8 %555, ptr %556, align 1
  %557 = load ptr, ptr %fbp, align 8
  %arrayidx971 = getelementptr inbounds i8, ptr %557, i64 1
  store i8 0, ptr %arrayidx971, align 1
  store i32 0, ptr %prefix_count, align 4
  %558 = load ptr, ptr %dp, align 8
  %width_arg_index972 = getelementptr inbounds %struct.char_directive, ptr %558, i32 0, i32 5
  %559 = load i64, ptr %width_arg_index972, align 8
  %cmp973 = icmp ne i64 %559, -1
  br i1 %cmp973, label %if.then975, label %if.end989

if.then975:                                       ; preds = %sw.epilog
  %arg976 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %560 = load ptr, ptr %arg976, align 8
  %561 = load ptr, ptr %dp, align 8
  %width_arg_index977 = getelementptr inbounds %struct.char_directive, ptr %561, i32 0, i32 5
  %562 = load i64, ptr %width_arg_index977, align 8
  %arrayidx978 = getelementptr inbounds %struct.argument, ptr %560, i64 %562
  %type979 = getelementptr inbounds %struct.argument, ptr %arrayidx978, i32 0, i32 0
  %563 = load i32, ptr %type979, align 16
  %cmp980 = icmp eq i32 %563, 5
  br i1 %cmp980, label %if.end983, label %if.then982

if.then982:                                       ; preds = %if.then975
  call void @abort() #22
  unreachable

if.end983:                                        ; preds = %if.then975
  %arg984 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %564 = load ptr, ptr %arg984, align 8
  %565 = load ptr, ptr %dp, align 8
  %width_arg_index985 = getelementptr inbounds %struct.char_directive, ptr %565, i32 0, i32 5
  %566 = load i64, ptr %width_arg_index985, align 8
  %arrayidx986 = getelementptr inbounds %struct.argument, ptr %564, i64 %566
  %a987 = getelementptr inbounds %struct.argument, ptr %arrayidx986, i32 0, i32 1
  %567 = load i32, ptr %a987, align 16
  %568 = load i32, ptr %prefix_count, align 4
  %inc = add i32 %568, 1
  store i32 %inc, ptr %prefix_count, align 4
  %idxprom = zext i32 %568 to i64
  %arrayidx988 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 %idxprom
  store i32 %567, ptr %arrayidx988, align 4
  br label %if.end989

if.end989:                                        ; preds = %if.end983, %sw.epilog
  %569 = load ptr, ptr %dp, align 8
  %precision_arg_index990 = getelementptr inbounds %struct.char_directive, ptr %569, i32 0, i32 8
  %570 = load i64, ptr %precision_arg_index990, align 8
  %cmp991 = icmp ne i64 %570, -1
  br i1 %cmp991, label %if.then993, label %if.end1009

if.then993:                                       ; preds = %if.end989
  %arg994 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %571 = load ptr, ptr %arg994, align 8
  %572 = load ptr, ptr %dp, align 8
  %precision_arg_index995 = getelementptr inbounds %struct.char_directive, ptr %572, i32 0, i32 8
  %573 = load i64, ptr %precision_arg_index995, align 8
  %arrayidx996 = getelementptr inbounds %struct.argument, ptr %571, i64 %573
  %type997 = getelementptr inbounds %struct.argument, ptr %arrayidx996, i32 0, i32 0
  %574 = load i32, ptr %type997, align 16
  %cmp998 = icmp eq i32 %574, 5
  br i1 %cmp998, label %if.end1001, label %if.then1000

if.then1000:                                      ; preds = %if.then993
  call void @abort() #22
  unreachable

if.end1001:                                       ; preds = %if.then993
  %arg1002 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %575 = load ptr, ptr %arg1002, align 8
  %576 = load ptr, ptr %dp, align 8
  %precision_arg_index1003 = getelementptr inbounds %struct.char_directive, ptr %576, i32 0, i32 8
  %577 = load i64, ptr %precision_arg_index1003, align 8
  %arrayidx1004 = getelementptr inbounds %struct.argument, ptr %575, i64 %577
  %a1005 = getelementptr inbounds %struct.argument, ptr %arrayidx1004, i32 0, i32 1
  %578 = load i32, ptr %a1005, align 16
  %579 = load i32, ptr %prefix_count, align 4
  %inc1006 = add i32 %579, 1
  store i32 %inc1006, ptr %prefix_count, align 4
  %idxprom1007 = zext i32 %579 to i64
  %arrayidx1008 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 %idxprom1007
  store i32 %578, ptr %arrayidx1008, align 4
  br label %if.end1009

if.end1009:                                       ; preds = %if.end1001, %if.end989
  %580 = load i64, ptr %length, align 8
  %call1010 = call i64 @xsum(i64 noundef %580, i64 noundef 2) #23
  %581 = load i64, ptr %allocated, align 8
  %cmp1011 = icmp ugt i64 %call1010, %581
  br i1 %cmp1011, label %if.then1013, label %if.end1064

if.then1013:                                      ; preds = %if.end1009
  %582 = load i64, ptr %allocated, align 8
  %cmp1016 = icmp ugt i64 %582, 0
  br i1 %cmp1016, label %cond.true1018, label %cond.false1026

cond.true1018:                                    ; preds = %if.then1013
  %583 = load i64, ptr %allocated, align 8
  %cmp1019 = icmp ule i64 %583, 9223372036854775807
  br i1 %cmp1019, label %cond.true1021, label %cond.false1023

cond.true1021:                                    ; preds = %cond.true1018
  %584 = load i64, ptr %allocated, align 8
  %mul1022 = mul i64 %584, 2
  br label %cond.end1024

cond.false1023:                                   ; preds = %cond.true1018
  br label %cond.end1024

cond.end1024:                                     ; preds = %cond.false1023, %cond.true1021
  %cond1025 = phi i64 [ %mul1022, %cond.true1021 ], [ -1, %cond.false1023 ]
  br label %cond.end1027

cond.false1026:                                   ; preds = %if.then1013
  br label %cond.end1027

cond.end1027:                                     ; preds = %cond.false1026, %cond.end1024
  %cond1028 = phi i64 [ %cond1025, %cond.end1024 ], [ 12, %cond.false1026 ]
  store i64 %cond1028, ptr %allocated, align 8
  %585 = load i64, ptr %length, align 8
  %call1029 = call i64 @xsum(i64 noundef %585, i64 noundef 2) #23
  %586 = load i64, ptr %allocated, align 8
  %cmp1030 = icmp ugt i64 %call1029, %586
  br i1 %cmp1030, label %if.then1032, label %if.end1034

if.then1032:                                      ; preds = %cond.end1027
  %587 = load i64, ptr %length, align 8
  %call1033 = call i64 @xsum(i64 noundef %587, i64 noundef 2) #23
  store i64 %call1033, ptr %allocated, align 8
  br label %if.end1034

if.end1034:                                       ; preds = %if.then1032, %cond.end1027
  %588 = load i64, ptr %allocated, align 8
  %cmp1035 = icmp ule i64 %588, -1
  br i1 %cmp1035, label %cond.true1037, label %cond.false1039

cond.true1037:                                    ; preds = %if.end1034
  %589 = load i64, ptr %allocated, align 8
  %mul1038 = mul i64 %589, 1
  br label %cond.end1040

cond.false1039:                                   ; preds = %if.end1034
  br label %cond.end1040

cond.end1040:                                     ; preds = %cond.false1039, %cond.true1037
  %cond1041 = phi i64 [ %mul1038, %cond.true1037 ], [ -1, %cond.false1039 ]
  store i64 %cond1041, ptr %memory_size1014, align 8
  %590 = load i64, ptr %memory_size1014, align 8
  %cmp1042 = icmp eq i64 %590, -1
  br i1 %cmp1042, label %if.then1044, label %if.end1045

if.then1044:                                      ; preds = %cond.end1040
  br label %out_of_memory

if.end1045:                                       ; preds = %cond.end1040
  %591 = load ptr, ptr %result, align 8
  %592 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1046 = icmp eq ptr %591, %592
  br i1 %cmp1046, label %if.then1048, label %if.else1050

if.then1048:                                      ; preds = %if.end1045
  %593 = load i64, ptr %memory_size1014, align 8
  %call1049 = call noalias ptr @malloc(i64 noundef %593) #29
  store ptr %call1049, ptr %memory1015, align 8
  br label %if.end1052

if.else1050:                                      ; preds = %if.end1045
  %594 = load ptr, ptr %result, align 8
  %595 = load i64, ptr %memory_size1014, align 8
  %call1051 = call ptr @rpl_realloc(ptr noundef %594, i64 noundef %595)
  store ptr %call1051, ptr %memory1015, align 8
  br label %if.end1052

if.end1052:                                       ; preds = %if.else1050, %if.then1048
  %596 = load ptr, ptr %memory1015, align 8
  %cmp1053 = icmp eq ptr %596, null
  br i1 %cmp1053, label %if.then1055, label %if.end1056

if.then1055:                                      ; preds = %if.end1052
  br label %out_of_memory

if.end1056:                                       ; preds = %if.end1052
  %597 = load ptr, ptr %result, align 8
  %598 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1057 = icmp eq ptr %597, %598
  br i1 %cmp1057, label %land.lhs.true1059, label %if.end1063

land.lhs.true1059:                                ; preds = %if.end1056
  %599 = load i64, ptr %length, align 8
  %cmp1060 = icmp ugt i64 %599, 0
  br i1 %cmp1060, label %if.then1062, label %if.end1063

if.then1062:                                      ; preds = %land.lhs.true1059
  %600 = load ptr, ptr %memory1015, align 8
  %601 = load ptr, ptr %result, align 8
  %602 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %600, ptr align 1 %601, i64 %602, i1 false)
  br label %if.end1063

if.end1063:                                       ; preds = %if.then1062, %land.lhs.true1059, %if.end1056
  %603 = load ptr, ptr %memory1015, align 8
  store ptr %603, ptr %result, align 8
  br label %if.end1064

if.end1064:                                       ; preds = %if.end1063, %if.end1009
  %604 = load ptr, ptr %result, align 8
  %605 = load i64, ptr %length, align 8
  %add.ptr1065 = getelementptr inbounds i8, ptr %604, i64 %605
  store i8 0, ptr %add.ptr1065, align 1
  %call1066 = call ptr @__errno_location() #26
  %606 = load i32, ptr %call1066, align 4
  store i32 %606, ptr %orig_errno, align 4
  br label %for.cond1067

for.cond1067:                                     ; preds = %if.end1891, %if.then1784, %if.end1064
  store i32 -1, ptr %count1068, align 4
  store i32 0, ptr %retcount, align 4
  %607 = load i64, ptr %allocated, align 8
  %608 = load i64, ptr %length, align 8
  %sub1069 = sub i64 %607, %608
  store i64 %sub1069, ptr %maxlen, align 8
  %609 = load i64, ptr %maxlen, align 8
  %cmp1070 = icmp ugt i64 %609, 2147483647
  br i1 %cmp1070, label %if.then1072, label %if.end1073

if.then1072:                                      ; preds = %for.cond1067
  store i64 2147483647, ptr %maxlen, align 8
  br label %if.end1073

if.end1073:                                       ; preds = %if.then1072, %for.cond1067
  %610 = load i64, ptr %maxlen, align 8
  %mul1074 = mul i64 %610, 1
  store i64 %mul1074, ptr %maxlen, align 8
  %call1075 = call ptr @__errno_location() #26
  store i32 0, ptr %call1075, align 4
  %611 = load i32, ptr %type842, align 4
  switch i32 %611, label %sw.default1758 [
    i32 1, label %sw.bb1076
    i32 2, label %sw.bb1097
    i32 3, label %sw.bb1118
    i32 4, label %sw.bb1139
    i32 5, label %sw.bb1160
    i32 6, label %sw.bb1180
    i32 7, label %sw.bb1200
    i32 8, label %sw.bb1220
    i32 9, label %sw.bb1240
    i32 10, label %sw.bb1260
    i32 11, label %sw.bb1280
    i32 12, label %sw.bb1303
    i32 13, label %sw.bb1326
    i32 14, label %sw.bb1349
    i32 15, label %sw.bb1372
    i32 16, label %sw.bb1392
    i32 17, label %sw.bb1412
    i32 18, label %sw.bb1432
    i32 19, label %sw.bb1452
    i32 20, label %sw.bb1475
    i32 21, label %sw.bb1498
    i32 22, label %sw.bb1518
    i32 23, label %sw.bb1538
    i32 24, label %sw.bb1558
    i32 25, label %sw.bb1578
    i32 26, label %sw.bb1598
    i32 27, label %sw.bb1618
    i32 28, label %sw.bb1638
    i32 29, label %sw.bb1658
    i32 30, label %sw.bb1678
    i32 31, label %sw.bb1698
    i32 32, label %sw.bb1718
    i32 33, label %sw.bb1738
  ]

sw.bb1076:                                        ; preds = %if.end1073
  %arg1078 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %612 = load ptr, ptr %arg1078, align 8
  %613 = load ptr, ptr %dp, align 8
  %arg_index1079 = getelementptr inbounds %struct.char_directive, ptr %613, i32 0, i32 10
  %614 = load i64, ptr %arg_index1079, align 8
  %arrayidx1080 = getelementptr inbounds %struct.argument, ptr %612, i64 %614
  %a1081 = getelementptr inbounds %struct.argument, ptr %arrayidx1080, i32 0, i32 1
  %615 = load i8, ptr %a1081, align 16
  %conv1082 = sext i8 %615 to i32
  store i32 %conv1082, ptr %arg1077, align 4
  %616 = load i32, ptr %prefix_count, align 4
  switch i32 %616, label %sw.default1095 [
    i32 0, label %sw.bb1083
    i32 1, label %sw.bb1086
    i32 2, label %sw.bb1090
  ]

sw.bb1083:                                        ; preds = %sw.bb1076
  %617 = load ptr, ptr %result, align 8
  %618 = load i64, ptr %length, align 8
  %add.ptr1084 = getelementptr inbounds i8, ptr %617, i64 %618
  %619 = load i64, ptr %maxlen, align 8
  %620 = load ptr, ptr %buf, align 8
  %621 = load i32, ptr %arg1077, align 4
  %call1085 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1084, i64 noundef %619, ptr noundef %620, i32 noundef %621, ptr noundef %count1068) #21
  store i32 %call1085, ptr %retcount, align 4
  br label %sw.epilog1096

sw.bb1086:                                        ; preds = %sw.bb1076
  %622 = load ptr, ptr %result, align 8
  %623 = load i64, ptr %length, align 8
  %add.ptr1087 = getelementptr inbounds i8, ptr %622, i64 %623
  %624 = load i64, ptr %maxlen, align 8
  %625 = load ptr, ptr %buf, align 8
  %arrayidx1088 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %626 = load i32, ptr %arrayidx1088, align 4
  %627 = load i32, ptr %arg1077, align 4
  %call1089 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1087, i64 noundef %624, ptr noundef %625, i32 noundef %626, i32 noundef %627, ptr noundef %count1068) #21
  store i32 %call1089, ptr %retcount, align 4
  br label %sw.epilog1096

sw.bb1090:                                        ; preds = %sw.bb1076
  %628 = load ptr, ptr %result, align 8
  %629 = load i64, ptr %length, align 8
  %add.ptr1091 = getelementptr inbounds i8, ptr %628, i64 %629
  %630 = load i64, ptr %maxlen, align 8
  %631 = load ptr, ptr %buf, align 8
  %arrayidx1092 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %632 = load i32, ptr %arrayidx1092, align 4
  %arrayidx1093 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %633 = load i32, ptr %arrayidx1093, align 4
  %634 = load i32, ptr %arg1077, align 4
  %call1094 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1091, i64 noundef %630, ptr noundef %631, i32 noundef %632, i32 noundef %633, i32 noundef %634, ptr noundef %count1068) #21
  store i32 %call1094, ptr %retcount, align 4
  br label %sw.epilog1096

sw.default1095:                                   ; preds = %sw.bb1076
  call void @abort() #22
  unreachable

sw.epilog1096:                                    ; preds = %sw.bb1090, %sw.bb1086, %sw.bb1083
  br label %sw.epilog1759

sw.bb1097:                                        ; preds = %if.end1073
  %arg1099 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %635 = load ptr, ptr %arg1099, align 8
  %636 = load ptr, ptr %dp, align 8
  %arg_index1100 = getelementptr inbounds %struct.char_directive, ptr %636, i32 0, i32 10
  %637 = load i64, ptr %arg_index1100, align 8
  %arrayidx1101 = getelementptr inbounds %struct.argument, ptr %635, i64 %637
  %a1102 = getelementptr inbounds %struct.argument, ptr %arrayidx1101, i32 0, i32 1
  %638 = load i8, ptr %a1102, align 16
  %conv1103 = zext i8 %638 to i32
  store i32 %conv1103, ptr %arg1098, align 4
  %639 = load i32, ptr %prefix_count, align 4
  switch i32 %639, label %sw.default1116 [
    i32 0, label %sw.bb1104
    i32 1, label %sw.bb1107
    i32 2, label %sw.bb1111
  ]

sw.bb1104:                                        ; preds = %sw.bb1097
  %640 = load ptr, ptr %result, align 8
  %641 = load i64, ptr %length, align 8
  %add.ptr1105 = getelementptr inbounds i8, ptr %640, i64 %641
  %642 = load i64, ptr %maxlen, align 8
  %643 = load ptr, ptr %buf, align 8
  %644 = load i32, ptr %arg1098, align 4
  %call1106 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1105, i64 noundef %642, ptr noundef %643, i32 noundef %644, ptr noundef %count1068) #21
  store i32 %call1106, ptr %retcount, align 4
  br label %sw.epilog1117

sw.bb1107:                                        ; preds = %sw.bb1097
  %645 = load ptr, ptr %result, align 8
  %646 = load i64, ptr %length, align 8
  %add.ptr1108 = getelementptr inbounds i8, ptr %645, i64 %646
  %647 = load i64, ptr %maxlen, align 8
  %648 = load ptr, ptr %buf, align 8
  %arrayidx1109 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %649 = load i32, ptr %arrayidx1109, align 4
  %650 = load i32, ptr %arg1098, align 4
  %call1110 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1108, i64 noundef %647, ptr noundef %648, i32 noundef %649, i32 noundef %650, ptr noundef %count1068) #21
  store i32 %call1110, ptr %retcount, align 4
  br label %sw.epilog1117

sw.bb1111:                                        ; preds = %sw.bb1097
  %651 = load ptr, ptr %result, align 8
  %652 = load i64, ptr %length, align 8
  %add.ptr1112 = getelementptr inbounds i8, ptr %651, i64 %652
  %653 = load i64, ptr %maxlen, align 8
  %654 = load ptr, ptr %buf, align 8
  %arrayidx1113 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %655 = load i32, ptr %arrayidx1113, align 4
  %arrayidx1114 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %656 = load i32, ptr %arrayidx1114, align 4
  %657 = load i32, ptr %arg1098, align 4
  %call1115 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1112, i64 noundef %653, ptr noundef %654, i32 noundef %655, i32 noundef %656, i32 noundef %657, ptr noundef %count1068) #21
  store i32 %call1115, ptr %retcount, align 4
  br label %sw.epilog1117

sw.default1116:                                   ; preds = %sw.bb1097
  call void @abort() #22
  unreachable

sw.epilog1117:                                    ; preds = %sw.bb1111, %sw.bb1107, %sw.bb1104
  br label %sw.epilog1759

sw.bb1118:                                        ; preds = %if.end1073
  %arg1120 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %658 = load ptr, ptr %arg1120, align 8
  %659 = load ptr, ptr %dp, align 8
  %arg_index1121 = getelementptr inbounds %struct.char_directive, ptr %659, i32 0, i32 10
  %660 = load i64, ptr %arg_index1121, align 8
  %arrayidx1122 = getelementptr inbounds %struct.argument, ptr %658, i64 %660
  %a1123 = getelementptr inbounds %struct.argument, ptr %arrayidx1122, i32 0, i32 1
  %661 = load i16, ptr %a1123, align 16
  %conv1124 = sext i16 %661 to i32
  store i32 %conv1124, ptr %arg1119, align 4
  %662 = load i32, ptr %prefix_count, align 4
  switch i32 %662, label %sw.default1137 [
    i32 0, label %sw.bb1125
    i32 1, label %sw.bb1128
    i32 2, label %sw.bb1132
  ]

sw.bb1125:                                        ; preds = %sw.bb1118
  %663 = load ptr, ptr %result, align 8
  %664 = load i64, ptr %length, align 8
  %add.ptr1126 = getelementptr inbounds i8, ptr %663, i64 %664
  %665 = load i64, ptr %maxlen, align 8
  %666 = load ptr, ptr %buf, align 8
  %667 = load i32, ptr %arg1119, align 4
  %call1127 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1126, i64 noundef %665, ptr noundef %666, i32 noundef %667, ptr noundef %count1068) #21
  store i32 %call1127, ptr %retcount, align 4
  br label %sw.epilog1138

sw.bb1128:                                        ; preds = %sw.bb1118
  %668 = load ptr, ptr %result, align 8
  %669 = load i64, ptr %length, align 8
  %add.ptr1129 = getelementptr inbounds i8, ptr %668, i64 %669
  %670 = load i64, ptr %maxlen, align 8
  %671 = load ptr, ptr %buf, align 8
  %arrayidx1130 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %672 = load i32, ptr %arrayidx1130, align 4
  %673 = load i32, ptr %arg1119, align 4
  %call1131 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1129, i64 noundef %670, ptr noundef %671, i32 noundef %672, i32 noundef %673, ptr noundef %count1068) #21
  store i32 %call1131, ptr %retcount, align 4
  br label %sw.epilog1138

sw.bb1132:                                        ; preds = %sw.bb1118
  %674 = load ptr, ptr %result, align 8
  %675 = load i64, ptr %length, align 8
  %add.ptr1133 = getelementptr inbounds i8, ptr %674, i64 %675
  %676 = load i64, ptr %maxlen, align 8
  %677 = load ptr, ptr %buf, align 8
  %arrayidx1134 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %678 = load i32, ptr %arrayidx1134, align 4
  %arrayidx1135 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %679 = load i32, ptr %arrayidx1135, align 4
  %680 = load i32, ptr %arg1119, align 4
  %call1136 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1133, i64 noundef %676, ptr noundef %677, i32 noundef %678, i32 noundef %679, i32 noundef %680, ptr noundef %count1068) #21
  store i32 %call1136, ptr %retcount, align 4
  br label %sw.epilog1138

sw.default1137:                                   ; preds = %sw.bb1118
  call void @abort() #22
  unreachable

sw.epilog1138:                                    ; preds = %sw.bb1132, %sw.bb1128, %sw.bb1125
  br label %sw.epilog1759

sw.bb1139:                                        ; preds = %if.end1073
  %arg1141 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %681 = load ptr, ptr %arg1141, align 8
  %682 = load ptr, ptr %dp, align 8
  %arg_index1142 = getelementptr inbounds %struct.char_directive, ptr %682, i32 0, i32 10
  %683 = load i64, ptr %arg_index1142, align 8
  %arrayidx1143 = getelementptr inbounds %struct.argument, ptr %681, i64 %683
  %a1144 = getelementptr inbounds %struct.argument, ptr %arrayidx1143, i32 0, i32 1
  %684 = load i16, ptr %a1144, align 16
  %conv1145 = zext i16 %684 to i32
  store i32 %conv1145, ptr %arg1140, align 4
  %685 = load i32, ptr %prefix_count, align 4
  switch i32 %685, label %sw.default1158 [
    i32 0, label %sw.bb1146
    i32 1, label %sw.bb1149
    i32 2, label %sw.bb1153
  ]

sw.bb1146:                                        ; preds = %sw.bb1139
  %686 = load ptr, ptr %result, align 8
  %687 = load i64, ptr %length, align 8
  %add.ptr1147 = getelementptr inbounds i8, ptr %686, i64 %687
  %688 = load i64, ptr %maxlen, align 8
  %689 = load ptr, ptr %buf, align 8
  %690 = load i32, ptr %arg1140, align 4
  %call1148 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1147, i64 noundef %688, ptr noundef %689, i32 noundef %690, ptr noundef %count1068) #21
  store i32 %call1148, ptr %retcount, align 4
  br label %sw.epilog1159

sw.bb1149:                                        ; preds = %sw.bb1139
  %691 = load ptr, ptr %result, align 8
  %692 = load i64, ptr %length, align 8
  %add.ptr1150 = getelementptr inbounds i8, ptr %691, i64 %692
  %693 = load i64, ptr %maxlen, align 8
  %694 = load ptr, ptr %buf, align 8
  %arrayidx1151 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %695 = load i32, ptr %arrayidx1151, align 4
  %696 = load i32, ptr %arg1140, align 4
  %call1152 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1150, i64 noundef %693, ptr noundef %694, i32 noundef %695, i32 noundef %696, ptr noundef %count1068) #21
  store i32 %call1152, ptr %retcount, align 4
  br label %sw.epilog1159

sw.bb1153:                                        ; preds = %sw.bb1139
  %697 = load ptr, ptr %result, align 8
  %698 = load i64, ptr %length, align 8
  %add.ptr1154 = getelementptr inbounds i8, ptr %697, i64 %698
  %699 = load i64, ptr %maxlen, align 8
  %700 = load ptr, ptr %buf, align 8
  %arrayidx1155 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %701 = load i32, ptr %arrayidx1155, align 4
  %arrayidx1156 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %702 = load i32, ptr %arrayidx1156, align 4
  %703 = load i32, ptr %arg1140, align 4
  %call1157 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1154, i64 noundef %699, ptr noundef %700, i32 noundef %701, i32 noundef %702, i32 noundef %703, ptr noundef %count1068) #21
  store i32 %call1157, ptr %retcount, align 4
  br label %sw.epilog1159

sw.default1158:                                   ; preds = %sw.bb1139
  call void @abort() #22
  unreachable

sw.epilog1159:                                    ; preds = %sw.bb1153, %sw.bb1149, %sw.bb1146
  br label %sw.epilog1759

sw.bb1160:                                        ; preds = %if.end1073
  %arg1162 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %704 = load ptr, ptr %arg1162, align 8
  %705 = load ptr, ptr %dp, align 8
  %arg_index1163 = getelementptr inbounds %struct.char_directive, ptr %705, i32 0, i32 10
  %706 = load i64, ptr %arg_index1163, align 8
  %arrayidx1164 = getelementptr inbounds %struct.argument, ptr %704, i64 %706
  %a1165 = getelementptr inbounds %struct.argument, ptr %arrayidx1164, i32 0, i32 1
  %707 = load i32, ptr %a1165, align 16
  store i32 %707, ptr %arg1161, align 4
  %708 = load i32, ptr %prefix_count, align 4
  switch i32 %708, label %sw.default1178 [
    i32 0, label %sw.bb1166
    i32 1, label %sw.bb1169
    i32 2, label %sw.bb1173
  ]

sw.bb1166:                                        ; preds = %sw.bb1160
  %709 = load ptr, ptr %result, align 8
  %710 = load i64, ptr %length, align 8
  %add.ptr1167 = getelementptr inbounds i8, ptr %709, i64 %710
  %711 = load i64, ptr %maxlen, align 8
  %712 = load ptr, ptr %buf, align 8
  %713 = load i32, ptr %arg1161, align 4
  %call1168 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1167, i64 noundef %711, ptr noundef %712, i32 noundef %713, ptr noundef %count1068) #21
  store i32 %call1168, ptr %retcount, align 4
  br label %sw.epilog1179

sw.bb1169:                                        ; preds = %sw.bb1160
  %714 = load ptr, ptr %result, align 8
  %715 = load i64, ptr %length, align 8
  %add.ptr1170 = getelementptr inbounds i8, ptr %714, i64 %715
  %716 = load i64, ptr %maxlen, align 8
  %717 = load ptr, ptr %buf, align 8
  %arrayidx1171 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %718 = load i32, ptr %arrayidx1171, align 4
  %719 = load i32, ptr %arg1161, align 4
  %call1172 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1170, i64 noundef %716, ptr noundef %717, i32 noundef %718, i32 noundef %719, ptr noundef %count1068) #21
  store i32 %call1172, ptr %retcount, align 4
  br label %sw.epilog1179

sw.bb1173:                                        ; preds = %sw.bb1160
  %720 = load ptr, ptr %result, align 8
  %721 = load i64, ptr %length, align 8
  %add.ptr1174 = getelementptr inbounds i8, ptr %720, i64 %721
  %722 = load i64, ptr %maxlen, align 8
  %723 = load ptr, ptr %buf, align 8
  %arrayidx1175 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %724 = load i32, ptr %arrayidx1175, align 4
  %arrayidx1176 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %725 = load i32, ptr %arrayidx1176, align 4
  %726 = load i32, ptr %arg1161, align 4
  %call1177 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1174, i64 noundef %722, ptr noundef %723, i32 noundef %724, i32 noundef %725, i32 noundef %726, ptr noundef %count1068) #21
  store i32 %call1177, ptr %retcount, align 4
  br label %sw.epilog1179

sw.default1178:                                   ; preds = %sw.bb1160
  call void @abort() #22
  unreachable

sw.epilog1179:                                    ; preds = %sw.bb1173, %sw.bb1169, %sw.bb1166
  br label %sw.epilog1759

sw.bb1180:                                        ; preds = %if.end1073
  %arg1182 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %727 = load ptr, ptr %arg1182, align 8
  %728 = load ptr, ptr %dp, align 8
  %arg_index1183 = getelementptr inbounds %struct.char_directive, ptr %728, i32 0, i32 10
  %729 = load i64, ptr %arg_index1183, align 8
  %arrayidx1184 = getelementptr inbounds %struct.argument, ptr %727, i64 %729
  %a1185 = getelementptr inbounds %struct.argument, ptr %arrayidx1184, i32 0, i32 1
  %730 = load i32, ptr %a1185, align 16
  store i32 %730, ptr %arg1181, align 4
  %731 = load i32, ptr %prefix_count, align 4
  switch i32 %731, label %sw.default1198 [
    i32 0, label %sw.bb1186
    i32 1, label %sw.bb1189
    i32 2, label %sw.bb1193
  ]

sw.bb1186:                                        ; preds = %sw.bb1180
  %732 = load ptr, ptr %result, align 8
  %733 = load i64, ptr %length, align 8
  %add.ptr1187 = getelementptr inbounds i8, ptr %732, i64 %733
  %734 = load i64, ptr %maxlen, align 8
  %735 = load ptr, ptr %buf, align 8
  %736 = load i32, ptr %arg1181, align 4
  %call1188 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1187, i64 noundef %734, ptr noundef %735, i32 noundef %736, ptr noundef %count1068) #21
  store i32 %call1188, ptr %retcount, align 4
  br label %sw.epilog1199

sw.bb1189:                                        ; preds = %sw.bb1180
  %737 = load ptr, ptr %result, align 8
  %738 = load i64, ptr %length, align 8
  %add.ptr1190 = getelementptr inbounds i8, ptr %737, i64 %738
  %739 = load i64, ptr %maxlen, align 8
  %740 = load ptr, ptr %buf, align 8
  %arrayidx1191 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %741 = load i32, ptr %arrayidx1191, align 4
  %742 = load i32, ptr %arg1181, align 4
  %call1192 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1190, i64 noundef %739, ptr noundef %740, i32 noundef %741, i32 noundef %742, ptr noundef %count1068) #21
  store i32 %call1192, ptr %retcount, align 4
  br label %sw.epilog1199

sw.bb1193:                                        ; preds = %sw.bb1180
  %743 = load ptr, ptr %result, align 8
  %744 = load i64, ptr %length, align 8
  %add.ptr1194 = getelementptr inbounds i8, ptr %743, i64 %744
  %745 = load i64, ptr %maxlen, align 8
  %746 = load ptr, ptr %buf, align 8
  %arrayidx1195 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %747 = load i32, ptr %arrayidx1195, align 4
  %arrayidx1196 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %748 = load i32, ptr %arrayidx1196, align 4
  %749 = load i32, ptr %arg1181, align 4
  %call1197 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1194, i64 noundef %745, ptr noundef %746, i32 noundef %747, i32 noundef %748, i32 noundef %749, ptr noundef %count1068) #21
  store i32 %call1197, ptr %retcount, align 4
  br label %sw.epilog1199

sw.default1198:                                   ; preds = %sw.bb1180
  call void @abort() #22
  unreachable

sw.epilog1199:                                    ; preds = %sw.bb1193, %sw.bb1189, %sw.bb1186
  br label %sw.epilog1759

sw.bb1200:                                        ; preds = %if.end1073
  %arg1202 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %750 = load ptr, ptr %arg1202, align 8
  %751 = load ptr, ptr %dp, align 8
  %arg_index1203 = getelementptr inbounds %struct.char_directive, ptr %751, i32 0, i32 10
  %752 = load i64, ptr %arg_index1203, align 8
  %arrayidx1204 = getelementptr inbounds %struct.argument, ptr %750, i64 %752
  %a1205 = getelementptr inbounds %struct.argument, ptr %arrayidx1204, i32 0, i32 1
  %753 = load i64, ptr %a1205, align 16
  store i64 %753, ptr %arg1201, align 8
  %754 = load i32, ptr %prefix_count, align 4
  switch i32 %754, label %sw.default1218 [
    i32 0, label %sw.bb1206
    i32 1, label %sw.bb1209
    i32 2, label %sw.bb1213
  ]

sw.bb1206:                                        ; preds = %sw.bb1200
  %755 = load ptr, ptr %result, align 8
  %756 = load i64, ptr %length, align 8
  %add.ptr1207 = getelementptr inbounds i8, ptr %755, i64 %756
  %757 = load i64, ptr %maxlen, align 8
  %758 = load ptr, ptr %buf, align 8
  %759 = load i64, ptr %arg1201, align 8
  %call1208 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1207, i64 noundef %757, ptr noundef %758, i64 noundef %759, ptr noundef %count1068) #21
  store i32 %call1208, ptr %retcount, align 4
  br label %sw.epilog1219

sw.bb1209:                                        ; preds = %sw.bb1200
  %760 = load ptr, ptr %result, align 8
  %761 = load i64, ptr %length, align 8
  %add.ptr1210 = getelementptr inbounds i8, ptr %760, i64 %761
  %762 = load i64, ptr %maxlen, align 8
  %763 = load ptr, ptr %buf, align 8
  %arrayidx1211 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %764 = load i32, ptr %arrayidx1211, align 4
  %765 = load i64, ptr %arg1201, align 8
  %call1212 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1210, i64 noundef %762, ptr noundef %763, i32 noundef %764, i64 noundef %765, ptr noundef %count1068) #21
  store i32 %call1212, ptr %retcount, align 4
  br label %sw.epilog1219

sw.bb1213:                                        ; preds = %sw.bb1200
  %766 = load ptr, ptr %result, align 8
  %767 = load i64, ptr %length, align 8
  %add.ptr1214 = getelementptr inbounds i8, ptr %766, i64 %767
  %768 = load i64, ptr %maxlen, align 8
  %769 = load ptr, ptr %buf, align 8
  %arrayidx1215 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %770 = load i32, ptr %arrayidx1215, align 4
  %arrayidx1216 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %771 = load i32, ptr %arrayidx1216, align 4
  %772 = load i64, ptr %arg1201, align 8
  %call1217 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1214, i64 noundef %768, ptr noundef %769, i32 noundef %770, i32 noundef %771, i64 noundef %772, ptr noundef %count1068) #21
  store i32 %call1217, ptr %retcount, align 4
  br label %sw.epilog1219

sw.default1218:                                   ; preds = %sw.bb1200
  call void @abort() #22
  unreachable

sw.epilog1219:                                    ; preds = %sw.bb1213, %sw.bb1209, %sw.bb1206
  br label %sw.epilog1759

sw.bb1220:                                        ; preds = %if.end1073
  %arg1222 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %773 = load ptr, ptr %arg1222, align 8
  %774 = load ptr, ptr %dp, align 8
  %arg_index1223 = getelementptr inbounds %struct.char_directive, ptr %774, i32 0, i32 10
  %775 = load i64, ptr %arg_index1223, align 8
  %arrayidx1224 = getelementptr inbounds %struct.argument, ptr %773, i64 %775
  %a1225 = getelementptr inbounds %struct.argument, ptr %arrayidx1224, i32 0, i32 1
  %776 = load i64, ptr %a1225, align 16
  store i64 %776, ptr %arg1221, align 8
  %777 = load i32, ptr %prefix_count, align 4
  switch i32 %777, label %sw.default1238 [
    i32 0, label %sw.bb1226
    i32 1, label %sw.bb1229
    i32 2, label %sw.bb1233
  ]

sw.bb1226:                                        ; preds = %sw.bb1220
  %778 = load ptr, ptr %result, align 8
  %779 = load i64, ptr %length, align 8
  %add.ptr1227 = getelementptr inbounds i8, ptr %778, i64 %779
  %780 = load i64, ptr %maxlen, align 8
  %781 = load ptr, ptr %buf, align 8
  %782 = load i64, ptr %arg1221, align 8
  %call1228 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1227, i64 noundef %780, ptr noundef %781, i64 noundef %782, ptr noundef %count1068) #21
  store i32 %call1228, ptr %retcount, align 4
  br label %sw.epilog1239

sw.bb1229:                                        ; preds = %sw.bb1220
  %783 = load ptr, ptr %result, align 8
  %784 = load i64, ptr %length, align 8
  %add.ptr1230 = getelementptr inbounds i8, ptr %783, i64 %784
  %785 = load i64, ptr %maxlen, align 8
  %786 = load ptr, ptr %buf, align 8
  %arrayidx1231 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %787 = load i32, ptr %arrayidx1231, align 4
  %788 = load i64, ptr %arg1221, align 8
  %call1232 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1230, i64 noundef %785, ptr noundef %786, i32 noundef %787, i64 noundef %788, ptr noundef %count1068) #21
  store i32 %call1232, ptr %retcount, align 4
  br label %sw.epilog1239

sw.bb1233:                                        ; preds = %sw.bb1220
  %789 = load ptr, ptr %result, align 8
  %790 = load i64, ptr %length, align 8
  %add.ptr1234 = getelementptr inbounds i8, ptr %789, i64 %790
  %791 = load i64, ptr %maxlen, align 8
  %792 = load ptr, ptr %buf, align 8
  %arrayidx1235 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %793 = load i32, ptr %arrayidx1235, align 4
  %arrayidx1236 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %794 = load i32, ptr %arrayidx1236, align 4
  %795 = load i64, ptr %arg1221, align 8
  %call1237 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1234, i64 noundef %791, ptr noundef %792, i32 noundef %793, i32 noundef %794, i64 noundef %795, ptr noundef %count1068) #21
  store i32 %call1237, ptr %retcount, align 4
  br label %sw.epilog1239

sw.default1238:                                   ; preds = %sw.bb1220
  call void @abort() #22
  unreachable

sw.epilog1239:                                    ; preds = %sw.bb1233, %sw.bb1229, %sw.bb1226
  br label %sw.epilog1759

sw.bb1240:                                        ; preds = %if.end1073
  %arg1242 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %796 = load ptr, ptr %arg1242, align 8
  %797 = load ptr, ptr %dp, align 8
  %arg_index1243 = getelementptr inbounds %struct.char_directive, ptr %797, i32 0, i32 10
  %798 = load i64, ptr %arg_index1243, align 8
  %arrayidx1244 = getelementptr inbounds %struct.argument, ptr %796, i64 %798
  %a1245 = getelementptr inbounds %struct.argument, ptr %arrayidx1244, i32 0, i32 1
  %799 = load i64, ptr %a1245, align 16
  store i64 %799, ptr %arg1241, align 8
  %800 = load i32, ptr %prefix_count, align 4
  switch i32 %800, label %sw.default1258 [
    i32 0, label %sw.bb1246
    i32 1, label %sw.bb1249
    i32 2, label %sw.bb1253
  ]

sw.bb1246:                                        ; preds = %sw.bb1240
  %801 = load ptr, ptr %result, align 8
  %802 = load i64, ptr %length, align 8
  %add.ptr1247 = getelementptr inbounds i8, ptr %801, i64 %802
  %803 = load i64, ptr %maxlen, align 8
  %804 = load ptr, ptr %buf, align 8
  %805 = load i64, ptr %arg1241, align 8
  %call1248 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1247, i64 noundef %803, ptr noundef %804, i64 noundef %805, ptr noundef %count1068) #21
  store i32 %call1248, ptr %retcount, align 4
  br label %sw.epilog1259

sw.bb1249:                                        ; preds = %sw.bb1240
  %806 = load ptr, ptr %result, align 8
  %807 = load i64, ptr %length, align 8
  %add.ptr1250 = getelementptr inbounds i8, ptr %806, i64 %807
  %808 = load i64, ptr %maxlen, align 8
  %809 = load ptr, ptr %buf, align 8
  %arrayidx1251 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %810 = load i32, ptr %arrayidx1251, align 4
  %811 = load i64, ptr %arg1241, align 8
  %call1252 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1250, i64 noundef %808, ptr noundef %809, i32 noundef %810, i64 noundef %811, ptr noundef %count1068) #21
  store i32 %call1252, ptr %retcount, align 4
  br label %sw.epilog1259

sw.bb1253:                                        ; preds = %sw.bb1240
  %812 = load ptr, ptr %result, align 8
  %813 = load i64, ptr %length, align 8
  %add.ptr1254 = getelementptr inbounds i8, ptr %812, i64 %813
  %814 = load i64, ptr %maxlen, align 8
  %815 = load ptr, ptr %buf, align 8
  %arrayidx1255 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %816 = load i32, ptr %arrayidx1255, align 4
  %arrayidx1256 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %817 = load i32, ptr %arrayidx1256, align 4
  %818 = load i64, ptr %arg1241, align 8
  %call1257 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1254, i64 noundef %814, ptr noundef %815, i32 noundef %816, i32 noundef %817, i64 noundef %818, ptr noundef %count1068) #21
  store i32 %call1257, ptr %retcount, align 4
  br label %sw.epilog1259

sw.default1258:                                   ; preds = %sw.bb1240
  call void @abort() #22
  unreachable

sw.epilog1259:                                    ; preds = %sw.bb1253, %sw.bb1249, %sw.bb1246
  br label %sw.epilog1759

sw.bb1260:                                        ; preds = %if.end1073
  %arg1262 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %819 = load ptr, ptr %arg1262, align 8
  %820 = load ptr, ptr %dp, align 8
  %arg_index1263 = getelementptr inbounds %struct.char_directive, ptr %820, i32 0, i32 10
  %821 = load i64, ptr %arg_index1263, align 8
  %arrayidx1264 = getelementptr inbounds %struct.argument, ptr %819, i64 %821
  %a1265 = getelementptr inbounds %struct.argument, ptr %arrayidx1264, i32 0, i32 1
  %822 = load i64, ptr %a1265, align 16
  store i64 %822, ptr %arg1261, align 8
  %823 = load i32, ptr %prefix_count, align 4
  switch i32 %823, label %sw.default1278 [
    i32 0, label %sw.bb1266
    i32 1, label %sw.bb1269
    i32 2, label %sw.bb1273
  ]

sw.bb1266:                                        ; preds = %sw.bb1260
  %824 = load ptr, ptr %result, align 8
  %825 = load i64, ptr %length, align 8
  %add.ptr1267 = getelementptr inbounds i8, ptr %824, i64 %825
  %826 = load i64, ptr %maxlen, align 8
  %827 = load ptr, ptr %buf, align 8
  %828 = load i64, ptr %arg1261, align 8
  %call1268 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1267, i64 noundef %826, ptr noundef %827, i64 noundef %828, ptr noundef %count1068) #21
  store i32 %call1268, ptr %retcount, align 4
  br label %sw.epilog1279

sw.bb1269:                                        ; preds = %sw.bb1260
  %829 = load ptr, ptr %result, align 8
  %830 = load i64, ptr %length, align 8
  %add.ptr1270 = getelementptr inbounds i8, ptr %829, i64 %830
  %831 = load i64, ptr %maxlen, align 8
  %832 = load ptr, ptr %buf, align 8
  %arrayidx1271 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %833 = load i32, ptr %arrayidx1271, align 4
  %834 = load i64, ptr %arg1261, align 8
  %call1272 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1270, i64 noundef %831, ptr noundef %832, i32 noundef %833, i64 noundef %834, ptr noundef %count1068) #21
  store i32 %call1272, ptr %retcount, align 4
  br label %sw.epilog1279

sw.bb1273:                                        ; preds = %sw.bb1260
  %835 = load ptr, ptr %result, align 8
  %836 = load i64, ptr %length, align 8
  %add.ptr1274 = getelementptr inbounds i8, ptr %835, i64 %836
  %837 = load i64, ptr %maxlen, align 8
  %838 = load ptr, ptr %buf, align 8
  %arrayidx1275 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %839 = load i32, ptr %arrayidx1275, align 4
  %arrayidx1276 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %840 = load i32, ptr %arrayidx1276, align 4
  %841 = load i64, ptr %arg1261, align 8
  %call1277 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1274, i64 noundef %837, ptr noundef %838, i32 noundef %839, i32 noundef %840, i64 noundef %841, ptr noundef %count1068) #21
  store i32 %call1277, ptr %retcount, align 4
  br label %sw.epilog1279

sw.default1278:                                   ; preds = %sw.bb1260
  call void @abort() #22
  unreachable

sw.epilog1279:                                    ; preds = %sw.bb1273, %sw.bb1269, %sw.bb1266
  br label %sw.epilog1759

sw.bb1280:                                        ; preds = %if.end1073
  %arg1282 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %842 = load ptr, ptr %arg1282, align 8
  %843 = load ptr, ptr %dp, align 8
  %arg_index1283 = getelementptr inbounds %struct.char_directive, ptr %843, i32 0, i32 10
  %844 = load i64, ptr %arg_index1283, align 8
  %arrayidx1284 = getelementptr inbounds %struct.argument, ptr %842, i64 %844
  %a1285 = getelementptr inbounds %struct.argument, ptr %arrayidx1284, i32 0, i32 1
  %845 = load i8, ptr %a1285, align 16
  store i8 %845, ptr %arg1281, align 1
  %846 = load i32, ptr %prefix_count, align 4
  switch i32 %846, label %sw.default1301 [
    i32 0, label %sw.bb1286
    i32 1, label %sw.bb1290
    i32 2, label %sw.bb1295
  ]

sw.bb1286:                                        ; preds = %sw.bb1280
  %847 = load ptr, ptr %result, align 8
  %848 = load i64, ptr %length, align 8
  %add.ptr1287 = getelementptr inbounds i8, ptr %847, i64 %848
  %849 = load i64, ptr %maxlen, align 8
  %850 = load ptr, ptr %buf, align 8
  %851 = load i8, ptr %arg1281, align 1
  %conv1288 = sext i8 %851 to i32
  %call1289 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1287, i64 noundef %849, ptr noundef %850, i32 noundef %conv1288, ptr noundef %count1068) #21
  store i32 %call1289, ptr %retcount, align 4
  br label %sw.epilog1302

sw.bb1290:                                        ; preds = %sw.bb1280
  %852 = load ptr, ptr %result, align 8
  %853 = load i64, ptr %length, align 8
  %add.ptr1291 = getelementptr inbounds i8, ptr %852, i64 %853
  %854 = load i64, ptr %maxlen, align 8
  %855 = load ptr, ptr %buf, align 8
  %arrayidx1292 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %856 = load i32, ptr %arrayidx1292, align 4
  %857 = load i8, ptr %arg1281, align 1
  %conv1293 = sext i8 %857 to i32
  %call1294 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1291, i64 noundef %854, ptr noundef %855, i32 noundef %856, i32 noundef %conv1293, ptr noundef %count1068) #21
  store i32 %call1294, ptr %retcount, align 4
  br label %sw.epilog1302

sw.bb1295:                                        ; preds = %sw.bb1280
  %858 = load ptr, ptr %result, align 8
  %859 = load i64, ptr %length, align 8
  %add.ptr1296 = getelementptr inbounds i8, ptr %858, i64 %859
  %860 = load i64, ptr %maxlen, align 8
  %861 = load ptr, ptr %buf, align 8
  %arrayidx1297 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %862 = load i32, ptr %arrayidx1297, align 4
  %arrayidx1298 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %863 = load i32, ptr %arrayidx1298, align 4
  %864 = load i8, ptr %arg1281, align 1
  %conv1299 = sext i8 %864 to i32
  %call1300 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1296, i64 noundef %860, ptr noundef %861, i32 noundef %862, i32 noundef %863, i32 noundef %conv1299, ptr noundef %count1068) #21
  store i32 %call1300, ptr %retcount, align 4
  br label %sw.epilog1302

sw.default1301:                                   ; preds = %sw.bb1280
  call void @abort() #22
  unreachable

sw.epilog1302:                                    ; preds = %sw.bb1295, %sw.bb1290, %sw.bb1286
  br label %sw.epilog1759

sw.bb1303:                                        ; preds = %if.end1073
  %arg1305 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %865 = load ptr, ptr %arg1305, align 8
  %866 = load ptr, ptr %dp, align 8
  %arg_index1306 = getelementptr inbounds %struct.char_directive, ptr %866, i32 0, i32 10
  %867 = load i64, ptr %arg_index1306, align 8
  %arrayidx1307 = getelementptr inbounds %struct.argument, ptr %865, i64 %867
  %a1308 = getelementptr inbounds %struct.argument, ptr %arrayidx1307, i32 0, i32 1
  %868 = load i8, ptr %a1308, align 16
  store i8 %868, ptr %arg1304, align 1
  %869 = load i32, ptr %prefix_count, align 4
  switch i32 %869, label %sw.default1324 [
    i32 0, label %sw.bb1309
    i32 1, label %sw.bb1313
    i32 2, label %sw.bb1318
  ]

sw.bb1309:                                        ; preds = %sw.bb1303
  %870 = load ptr, ptr %result, align 8
  %871 = load i64, ptr %length, align 8
  %add.ptr1310 = getelementptr inbounds i8, ptr %870, i64 %871
  %872 = load i64, ptr %maxlen, align 8
  %873 = load ptr, ptr %buf, align 8
  %874 = load i8, ptr %arg1304, align 1
  %conv1311 = zext i8 %874 to i32
  %call1312 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1310, i64 noundef %872, ptr noundef %873, i32 noundef %conv1311, ptr noundef %count1068) #21
  store i32 %call1312, ptr %retcount, align 4
  br label %sw.epilog1325

sw.bb1313:                                        ; preds = %sw.bb1303
  %875 = load ptr, ptr %result, align 8
  %876 = load i64, ptr %length, align 8
  %add.ptr1314 = getelementptr inbounds i8, ptr %875, i64 %876
  %877 = load i64, ptr %maxlen, align 8
  %878 = load ptr, ptr %buf, align 8
  %arrayidx1315 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %879 = load i32, ptr %arrayidx1315, align 4
  %880 = load i8, ptr %arg1304, align 1
  %conv1316 = zext i8 %880 to i32
  %call1317 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1314, i64 noundef %877, ptr noundef %878, i32 noundef %879, i32 noundef %conv1316, ptr noundef %count1068) #21
  store i32 %call1317, ptr %retcount, align 4
  br label %sw.epilog1325

sw.bb1318:                                        ; preds = %sw.bb1303
  %881 = load ptr, ptr %result, align 8
  %882 = load i64, ptr %length, align 8
  %add.ptr1319 = getelementptr inbounds i8, ptr %881, i64 %882
  %883 = load i64, ptr %maxlen, align 8
  %884 = load ptr, ptr %buf, align 8
  %arrayidx1320 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %885 = load i32, ptr %arrayidx1320, align 4
  %arrayidx1321 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %886 = load i32, ptr %arrayidx1321, align 4
  %887 = load i8, ptr %arg1304, align 1
  %conv1322 = zext i8 %887 to i32
  %call1323 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1319, i64 noundef %883, ptr noundef %884, i32 noundef %885, i32 noundef %886, i32 noundef %conv1322, ptr noundef %count1068) #21
  store i32 %call1323, ptr %retcount, align 4
  br label %sw.epilog1325

sw.default1324:                                   ; preds = %sw.bb1303
  call void @abort() #22
  unreachable

sw.epilog1325:                                    ; preds = %sw.bb1318, %sw.bb1313, %sw.bb1309
  br label %sw.epilog1759

sw.bb1326:                                        ; preds = %if.end1073
  %arg1328 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %888 = load ptr, ptr %arg1328, align 8
  %889 = load ptr, ptr %dp, align 8
  %arg_index1329 = getelementptr inbounds %struct.char_directive, ptr %889, i32 0, i32 10
  %890 = load i64, ptr %arg_index1329, align 8
  %arrayidx1330 = getelementptr inbounds %struct.argument, ptr %888, i64 %890
  %a1331 = getelementptr inbounds %struct.argument, ptr %arrayidx1330, i32 0, i32 1
  %891 = load i16, ptr %a1331, align 16
  store i16 %891, ptr %arg1327, align 2
  %892 = load i32, ptr %prefix_count, align 4
  switch i32 %892, label %sw.default1347 [
    i32 0, label %sw.bb1332
    i32 1, label %sw.bb1336
    i32 2, label %sw.bb1341
  ]

sw.bb1332:                                        ; preds = %sw.bb1326
  %893 = load ptr, ptr %result, align 8
  %894 = load i64, ptr %length, align 8
  %add.ptr1333 = getelementptr inbounds i8, ptr %893, i64 %894
  %895 = load i64, ptr %maxlen, align 8
  %896 = load ptr, ptr %buf, align 8
  %897 = load i16, ptr %arg1327, align 2
  %conv1334 = sext i16 %897 to i32
  %call1335 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1333, i64 noundef %895, ptr noundef %896, i32 noundef %conv1334, ptr noundef %count1068) #21
  store i32 %call1335, ptr %retcount, align 4
  br label %sw.epilog1348

sw.bb1336:                                        ; preds = %sw.bb1326
  %898 = load ptr, ptr %result, align 8
  %899 = load i64, ptr %length, align 8
  %add.ptr1337 = getelementptr inbounds i8, ptr %898, i64 %899
  %900 = load i64, ptr %maxlen, align 8
  %901 = load ptr, ptr %buf, align 8
  %arrayidx1338 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %902 = load i32, ptr %arrayidx1338, align 4
  %903 = load i16, ptr %arg1327, align 2
  %conv1339 = sext i16 %903 to i32
  %call1340 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1337, i64 noundef %900, ptr noundef %901, i32 noundef %902, i32 noundef %conv1339, ptr noundef %count1068) #21
  store i32 %call1340, ptr %retcount, align 4
  br label %sw.epilog1348

sw.bb1341:                                        ; preds = %sw.bb1326
  %904 = load ptr, ptr %result, align 8
  %905 = load i64, ptr %length, align 8
  %add.ptr1342 = getelementptr inbounds i8, ptr %904, i64 %905
  %906 = load i64, ptr %maxlen, align 8
  %907 = load ptr, ptr %buf, align 8
  %arrayidx1343 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %908 = load i32, ptr %arrayidx1343, align 4
  %arrayidx1344 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %909 = load i32, ptr %arrayidx1344, align 4
  %910 = load i16, ptr %arg1327, align 2
  %conv1345 = sext i16 %910 to i32
  %call1346 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1342, i64 noundef %906, ptr noundef %907, i32 noundef %908, i32 noundef %909, i32 noundef %conv1345, ptr noundef %count1068) #21
  store i32 %call1346, ptr %retcount, align 4
  br label %sw.epilog1348

sw.default1347:                                   ; preds = %sw.bb1326
  call void @abort() #22
  unreachable

sw.epilog1348:                                    ; preds = %sw.bb1341, %sw.bb1336, %sw.bb1332
  br label %sw.epilog1759

sw.bb1349:                                        ; preds = %if.end1073
  %arg1351 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %911 = load ptr, ptr %arg1351, align 8
  %912 = load ptr, ptr %dp, align 8
  %arg_index1352 = getelementptr inbounds %struct.char_directive, ptr %912, i32 0, i32 10
  %913 = load i64, ptr %arg_index1352, align 8
  %arrayidx1353 = getelementptr inbounds %struct.argument, ptr %911, i64 %913
  %a1354 = getelementptr inbounds %struct.argument, ptr %arrayidx1353, i32 0, i32 1
  %914 = load i16, ptr %a1354, align 16
  store i16 %914, ptr %arg1350, align 2
  %915 = load i32, ptr %prefix_count, align 4
  switch i32 %915, label %sw.default1370 [
    i32 0, label %sw.bb1355
    i32 1, label %sw.bb1359
    i32 2, label %sw.bb1364
  ]

sw.bb1355:                                        ; preds = %sw.bb1349
  %916 = load ptr, ptr %result, align 8
  %917 = load i64, ptr %length, align 8
  %add.ptr1356 = getelementptr inbounds i8, ptr %916, i64 %917
  %918 = load i64, ptr %maxlen, align 8
  %919 = load ptr, ptr %buf, align 8
  %920 = load i16, ptr %arg1350, align 2
  %conv1357 = zext i16 %920 to i32
  %call1358 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1356, i64 noundef %918, ptr noundef %919, i32 noundef %conv1357, ptr noundef %count1068) #21
  store i32 %call1358, ptr %retcount, align 4
  br label %sw.epilog1371

sw.bb1359:                                        ; preds = %sw.bb1349
  %921 = load ptr, ptr %result, align 8
  %922 = load i64, ptr %length, align 8
  %add.ptr1360 = getelementptr inbounds i8, ptr %921, i64 %922
  %923 = load i64, ptr %maxlen, align 8
  %924 = load ptr, ptr %buf, align 8
  %arrayidx1361 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %925 = load i32, ptr %arrayidx1361, align 4
  %926 = load i16, ptr %arg1350, align 2
  %conv1362 = zext i16 %926 to i32
  %call1363 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1360, i64 noundef %923, ptr noundef %924, i32 noundef %925, i32 noundef %conv1362, ptr noundef %count1068) #21
  store i32 %call1363, ptr %retcount, align 4
  br label %sw.epilog1371

sw.bb1364:                                        ; preds = %sw.bb1349
  %927 = load ptr, ptr %result, align 8
  %928 = load i64, ptr %length, align 8
  %add.ptr1365 = getelementptr inbounds i8, ptr %927, i64 %928
  %929 = load i64, ptr %maxlen, align 8
  %930 = load ptr, ptr %buf, align 8
  %arrayidx1366 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %931 = load i32, ptr %arrayidx1366, align 4
  %arrayidx1367 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %932 = load i32, ptr %arrayidx1367, align 4
  %933 = load i16, ptr %arg1350, align 2
  %conv1368 = zext i16 %933 to i32
  %call1369 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1365, i64 noundef %929, ptr noundef %930, i32 noundef %931, i32 noundef %932, i32 noundef %conv1368, ptr noundef %count1068) #21
  store i32 %call1369, ptr %retcount, align 4
  br label %sw.epilog1371

sw.default1370:                                   ; preds = %sw.bb1349
  call void @abort() #22
  unreachable

sw.epilog1371:                                    ; preds = %sw.bb1364, %sw.bb1359, %sw.bb1355
  br label %sw.epilog1759

sw.bb1372:                                        ; preds = %if.end1073
  %arg1374 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %934 = load ptr, ptr %arg1374, align 8
  %935 = load ptr, ptr %dp, align 8
  %arg_index1375 = getelementptr inbounds %struct.char_directive, ptr %935, i32 0, i32 10
  %936 = load i64, ptr %arg_index1375, align 8
  %arrayidx1376 = getelementptr inbounds %struct.argument, ptr %934, i64 %936
  %a1377 = getelementptr inbounds %struct.argument, ptr %arrayidx1376, i32 0, i32 1
  %937 = load i32, ptr %a1377, align 16
  store i32 %937, ptr %arg1373, align 4
  %938 = load i32, ptr %prefix_count, align 4
  switch i32 %938, label %sw.default1390 [
    i32 0, label %sw.bb1378
    i32 1, label %sw.bb1381
    i32 2, label %sw.bb1385
  ]

sw.bb1378:                                        ; preds = %sw.bb1372
  %939 = load ptr, ptr %result, align 8
  %940 = load i64, ptr %length, align 8
  %add.ptr1379 = getelementptr inbounds i8, ptr %939, i64 %940
  %941 = load i64, ptr %maxlen, align 8
  %942 = load ptr, ptr %buf, align 8
  %943 = load i32, ptr %arg1373, align 4
  %call1380 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1379, i64 noundef %941, ptr noundef %942, i32 noundef %943, ptr noundef %count1068) #21
  store i32 %call1380, ptr %retcount, align 4
  br label %sw.epilog1391

sw.bb1381:                                        ; preds = %sw.bb1372
  %944 = load ptr, ptr %result, align 8
  %945 = load i64, ptr %length, align 8
  %add.ptr1382 = getelementptr inbounds i8, ptr %944, i64 %945
  %946 = load i64, ptr %maxlen, align 8
  %947 = load ptr, ptr %buf, align 8
  %arrayidx1383 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %948 = load i32, ptr %arrayidx1383, align 4
  %949 = load i32, ptr %arg1373, align 4
  %call1384 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1382, i64 noundef %946, ptr noundef %947, i32 noundef %948, i32 noundef %949, ptr noundef %count1068) #21
  store i32 %call1384, ptr %retcount, align 4
  br label %sw.epilog1391

sw.bb1385:                                        ; preds = %sw.bb1372
  %950 = load ptr, ptr %result, align 8
  %951 = load i64, ptr %length, align 8
  %add.ptr1386 = getelementptr inbounds i8, ptr %950, i64 %951
  %952 = load i64, ptr %maxlen, align 8
  %953 = load ptr, ptr %buf, align 8
  %arrayidx1387 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %954 = load i32, ptr %arrayidx1387, align 4
  %arrayidx1388 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %955 = load i32, ptr %arrayidx1388, align 4
  %956 = load i32, ptr %arg1373, align 4
  %call1389 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1386, i64 noundef %952, ptr noundef %953, i32 noundef %954, i32 noundef %955, i32 noundef %956, ptr noundef %count1068) #21
  store i32 %call1389, ptr %retcount, align 4
  br label %sw.epilog1391

sw.default1390:                                   ; preds = %sw.bb1372
  call void @abort() #22
  unreachable

sw.epilog1391:                                    ; preds = %sw.bb1385, %sw.bb1381, %sw.bb1378
  br label %sw.epilog1759

sw.bb1392:                                        ; preds = %if.end1073
  %arg1394 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %957 = load ptr, ptr %arg1394, align 8
  %958 = load ptr, ptr %dp, align 8
  %arg_index1395 = getelementptr inbounds %struct.char_directive, ptr %958, i32 0, i32 10
  %959 = load i64, ptr %arg_index1395, align 8
  %arrayidx1396 = getelementptr inbounds %struct.argument, ptr %957, i64 %959
  %a1397 = getelementptr inbounds %struct.argument, ptr %arrayidx1396, i32 0, i32 1
  %960 = load i32, ptr %a1397, align 16
  store i32 %960, ptr %arg1393, align 4
  %961 = load i32, ptr %prefix_count, align 4
  switch i32 %961, label %sw.default1410 [
    i32 0, label %sw.bb1398
    i32 1, label %sw.bb1401
    i32 2, label %sw.bb1405
  ]

sw.bb1398:                                        ; preds = %sw.bb1392
  %962 = load ptr, ptr %result, align 8
  %963 = load i64, ptr %length, align 8
  %add.ptr1399 = getelementptr inbounds i8, ptr %962, i64 %963
  %964 = load i64, ptr %maxlen, align 8
  %965 = load ptr, ptr %buf, align 8
  %966 = load i32, ptr %arg1393, align 4
  %call1400 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1399, i64 noundef %964, ptr noundef %965, i32 noundef %966, ptr noundef %count1068) #21
  store i32 %call1400, ptr %retcount, align 4
  br label %sw.epilog1411

sw.bb1401:                                        ; preds = %sw.bb1392
  %967 = load ptr, ptr %result, align 8
  %968 = load i64, ptr %length, align 8
  %add.ptr1402 = getelementptr inbounds i8, ptr %967, i64 %968
  %969 = load i64, ptr %maxlen, align 8
  %970 = load ptr, ptr %buf, align 8
  %arrayidx1403 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %971 = load i32, ptr %arrayidx1403, align 4
  %972 = load i32, ptr %arg1393, align 4
  %call1404 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1402, i64 noundef %969, ptr noundef %970, i32 noundef %971, i32 noundef %972, ptr noundef %count1068) #21
  store i32 %call1404, ptr %retcount, align 4
  br label %sw.epilog1411

sw.bb1405:                                        ; preds = %sw.bb1392
  %973 = load ptr, ptr %result, align 8
  %974 = load i64, ptr %length, align 8
  %add.ptr1406 = getelementptr inbounds i8, ptr %973, i64 %974
  %975 = load i64, ptr %maxlen, align 8
  %976 = load ptr, ptr %buf, align 8
  %arrayidx1407 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %977 = load i32, ptr %arrayidx1407, align 4
  %arrayidx1408 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %978 = load i32, ptr %arrayidx1408, align 4
  %979 = load i32, ptr %arg1393, align 4
  %call1409 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1406, i64 noundef %975, ptr noundef %976, i32 noundef %977, i32 noundef %978, i32 noundef %979, ptr noundef %count1068) #21
  store i32 %call1409, ptr %retcount, align 4
  br label %sw.epilog1411

sw.default1410:                                   ; preds = %sw.bb1392
  call void @abort() #22
  unreachable

sw.epilog1411:                                    ; preds = %sw.bb1405, %sw.bb1401, %sw.bb1398
  br label %sw.epilog1759

sw.bb1412:                                        ; preds = %if.end1073
  %arg1414 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %980 = load ptr, ptr %arg1414, align 8
  %981 = load ptr, ptr %dp, align 8
  %arg_index1415 = getelementptr inbounds %struct.char_directive, ptr %981, i32 0, i32 10
  %982 = load i64, ptr %arg_index1415, align 8
  %arrayidx1416 = getelementptr inbounds %struct.argument, ptr %980, i64 %982
  %a1417 = getelementptr inbounds %struct.argument, ptr %arrayidx1416, i32 0, i32 1
  %983 = load i64, ptr %a1417, align 16
  store i64 %983, ptr %arg1413, align 8
  %984 = load i32, ptr %prefix_count, align 4
  switch i32 %984, label %sw.default1430 [
    i32 0, label %sw.bb1418
    i32 1, label %sw.bb1421
    i32 2, label %sw.bb1425
  ]

sw.bb1418:                                        ; preds = %sw.bb1412
  %985 = load ptr, ptr %result, align 8
  %986 = load i64, ptr %length, align 8
  %add.ptr1419 = getelementptr inbounds i8, ptr %985, i64 %986
  %987 = load i64, ptr %maxlen, align 8
  %988 = load ptr, ptr %buf, align 8
  %989 = load i64, ptr %arg1413, align 8
  %call1420 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1419, i64 noundef %987, ptr noundef %988, i64 noundef %989, ptr noundef %count1068) #21
  store i32 %call1420, ptr %retcount, align 4
  br label %sw.epilog1431

sw.bb1421:                                        ; preds = %sw.bb1412
  %990 = load ptr, ptr %result, align 8
  %991 = load i64, ptr %length, align 8
  %add.ptr1422 = getelementptr inbounds i8, ptr %990, i64 %991
  %992 = load i64, ptr %maxlen, align 8
  %993 = load ptr, ptr %buf, align 8
  %arrayidx1423 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %994 = load i32, ptr %arrayidx1423, align 4
  %995 = load i64, ptr %arg1413, align 8
  %call1424 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1422, i64 noundef %992, ptr noundef %993, i32 noundef %994, i64 noundef %995, ptr noundef %count1068) #21
  store i32 %call1424, ptr %retcount, align 4
  br label %sw.epilog1431

sw.bb1425:                                        ; preds = %sw.bb1412
  %996 = load ptr, ptr %result, align 8
  %997 = load i64, ptr %length, align 8
  %add.ptr1426 = getelementptr inbounds i8, ptr %996, i64 %997
  %998 = load i64, ptr %maxlen, align 8
  %999 = load ptr, ptr %buf, align 8
  %arrayidx1427 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1000 = load i32, ptr %arrayidx1427, align 4
  %arrayidx1428 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1001 = load i32, ptr %arrayidx1428, align 4
  %1002 = load i64, ptr %arg1413, align 8
  %call1429 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1426, i64 noundef %998, ptr noundef %999, i32 noundef %1000, i32 noundef %1001, i64 noundef %1002, ptr noundef %count1068) #21
  store i32 %call1429, ptr %retcount, align 4
  br label %sw.epilog1431

sw.default1430:                                   ; preds = %sw.bb1412
  call void @abort() #22
  unreachable

sw.epilog1431:                                    ; preds = %sw.bb1425, %sw.bb1421, %sw.bb1418
  br label %sw.epilog1759

sw.bb1432:                                        ; preds = %if.end1073
  %arg1434 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1003 = load ptr, ptr %arg1434, align 8
  %1004 = load ptr, ptr %dp, align 8
  %arg_index1435 = getelementptr inbounds %struct.char_directive, ptr %1004, i32 0, i32 10
  %1005 = load i64, ptr %arg_index1435, align 8
  %arrayidx1436 = getelementptr inbounds %struct.argument, ptr %1003, i64 %1005
  %a1437 = getelementptr inbounds %struct.argument, ptr %arrayidx1436, i32 0, i32 1
  %1006 = load i64, ptr %a1437, align 16
  store i64 %1006, ptr %arg1433, align 8
  %1007 = load i32, ptr %prefix_count, align 4
  switch i32 %1007, label %sw.default1450 [
    i32 0, label %sw.bb1438
    i32 1, label %sw.bb1441
    i32 2, label %sw.bb1445
  ]

sw.bb1438:                                        ; preds = %sw.bb1432
  %1008 = load ptr, ptr %result, align 8
  %1009 = load i64, ptr %length, align 8
  %add.ptr1439 = getelementptr inbounds i8, ptr %1008, i64 %1009
  %1010 = load i64, ptr %maxlen, align 8
  %1011 = load ptr, ptr %buf, align 8
  %1012 = load i64, ptr %arg1433, align 8
  %call1440 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1439, i64 noundef %1010, ptr noundef %1011, i64 noundef %1012, ptr noundef %count1068) #21
  store i32 %call1440, ptr %retcount, align 4
  br label %sw.epilog1451

sw.bb1441:                                        ; preds = %sw.bb1432
  %1013 = load ptr, ptr %result, align 8
  %1014 = load i64, ptr %length, align 8
  %add.ptr1442 = getelementptr inbounds i8, ptr %1013, i64 %1014
  %1015 = load i64, ptr %maxlen, align 8
  %1016 = load ptr, ptr %buf, align 8
  %arrayidx1443 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1017 = load i32, ptr %arrayidx1443, align 4
  %1018 = load i64, ptr %arg1433, align 8
  %call1444 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1442, i64 noundef %1015, ptr noundef %1016, i32 noundef %1017, i64 noundef %1018, ptr noundef %count1068) #21
  store i32 %call1444, ptr %retcount, align 4
  br label %sw.epilog1451

sw.bb1445:                                        ; preds = %sw.bb1432
  %1019 = load ptr, ptr %result, align 8
  %1020 = load i64, ptr %length, align 8
  %add.ptr1446 = getelementptr inbounds i8, ptr %1019, i64 %1020
  %1021 = load i64, ptr %maxlen, align 8
  %1022 = load ptr, ptr %buf, align 8
  %arrayidx1447 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1023 = load i32, ptr %arrayidx1447, align 4
  %arrayidx1448 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1024 = load i32, ptr %arrayidx1448, align 4
  %1025 = load i64, ptr %arg1433, align 8
  %call1449 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1446, i64 noundef %1021, ptr noundef %1022, i32 noundef %1023, i32 noundef %1024, i64 noundef %1025, ptr noundef %count1068) #21
  store i32 %call1449, ptr %retcount, align 4
  br label %sw.epilog1451

sw.default1450:                                   ; preds = %sw.bb1432
  call void @abort() #22
  unreachable

sw.epilog1451:                                    ; preds = %sw.bb1445, %sw.bb1441, %sw.bb1438
  br label %sw.epilog1759

sw.bb1452:                                        ; preds = %if.end1073
  %arg1454 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1026 = load ptr, ptr %arg1454, align 8
  %1027 = load ptr, ptr %dp, align 8
  %arg_index1455 = getelementptr inbounds %struct.char_directive, ptr %1027, i32 0, i32 10
  %1028 = load i64, ptr %arg_index1455, align 8
  %arrayidx1456 = getelementptr inbounds %struct.argument, ptr %1026, i64 %1028
  %a1457 = getelementptr inbounds %struct.argument, ptr %arrayidx1456, i32 0, i32 1
  %1029 = load i8, ptr %a1457, align 16
  store i8 %1029, ptr %arg1453, align 1
  %1030 = load i32, ptr %prefix_count, align 4
  switch i32 %1030, label %sw.default1473 [
    i32 0, label %sw.bb1458
    i32 1, label %sw.bb1462
    i32 2, label %sw.bb1467
  ]

sw.bb1458:                                        ; preds = %sw.bb1452
  %1031 = load ptr, ptr %result, align 8
  %1032 = load i64, ptr %length, align 8
  %add.ptr1459 = getelementptr inbounds i8, ptr %1031, i64 %1032
  %1033 = load i64, ptr %maxlen, align 8
  %1034 = load ptr, ptr %buf, align 8
  %1035 = load i8, ptr %arg1453, align 1
  %conv1460 = sext i8 %1035 to i32
  %call1461 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1459, i64 noundef %1033, ptr noundef %1034, i32 noundef %conv1460, ptr noundef %count1068) #21
  store i32 %call1461, ptr %retcount, align 4
  br label %sw.epilog1474

sw.bb1462:                                        ; preds = %sw.bb1452
  %1036 = load ptr, ptr %result, align 8
  %1037 = load i64, ptr %length, align 8
  %add.ptr1463 = getelementptr inbounds i8, ptr %1036, i64 %1037
  %1038 = load i64, ptr %maxlen, align 8
  %1039 = load ptr, ptr %buf, align 8
  %arrayidx1464 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1040 = load i32, ptr %arrayidx1464, align 4
  %1041 = load i8, ptr %arg1453, align 1
  %conv1465 = sext i8 %1041 to i32
  %call1466 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1463, i64 noundef %1038, ptr noundef %1039, i32 noundef %1040, i32 noundef %conv1465, ptr noundef %count1068) #21
  store i32 %call1466, ptr %retcount, align 4
  br label %sw.epilog1474

sw.bb1467:                                        ; preds = %sw.bb1452
  %1042 = load ptr, ptr %result, align 8
  %1043 = load i64, ptr %length, align 8
  %add.ptr1468 = getelementptr inbounds i8, ptr %1042, i64 %1043
  %1044 = load i64, ptr %maxlen, align 8
  %1045 = load ptr, ptr %buf, align 8
  %arrayidx1469 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1046 = load i32, ptr %arrayidx1469, align 4
  %arrayidx1470 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1047 = load i32, ptr %arrayidx1470, align 4
  %1048 = load i8, ptr %arg1453, align 1
  %conv1471 = sext i8 %1048 to i32
  %call1472 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1468, i64 noundef %1044, ptr noundef %1045, i32 noundef %1046, i32 noundef %1047, i32 noundef %conv1471, ptr noundef %count1068) #21
  store i32 %call1472, ptr %retcount, align 4
  br label %sw.epilog1474

sw.default1473:                                   ; preds = %sw.bb1452
  call void @abort() #22
  unreachable

sw.epilog1474:                                    ; preds = %sw.bb1467, %sw.bb1462, %sw.bb1458
  br label %sw.epilog1759

sw.bb1475:                                        ; preds = %if.end1073
  %arg1477 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1049 = load ptr, ptr %arg1477, align 8
  %1050 = load ptr, ptr %dp, align 8
  %arg_index1478 = getelementptr inbounds %struct.char_directive, ptr %1050, i32 0, i32 10
  %1051 = load i64, ptr %arg_index1478, align 8
  %arrayidx1479 = getelementptr inbounds %struct.argument, ptr %1049, i64 %1051
  %a1480 = getelementptr inbounds %struct.argument, ptr %arrayidx1479, i32 0, i32 1
  %1052 = load i8, ptr %a1480, align 16
  store i8 %1052, ptr %arg1476, align 1
  %1053 = load i32, ptr %prefix_count, align 4
  switch i32 %1053, label %sw.default1496 [
    i32 0, label %sw.bb1481
    i32 1, label %sw.bb1485
    i32 2, label %sw.bb1490
  ]

sw.bb1481:                                        ; preds = %sw.bb1475
  %1054 = load ptr, ptr %result, align 8
  %1055 = load i64, ptr %length, align 8
  %add.ptr1482 = getelementptr inbounds i8, ptr %1054, i64 %1055
  %1056 = load i64, ptr %maxlen, align 8
  %1057 = load ptr, ptr %buf, align 8
  %1058 = load i8, ptr %arg1476, align 1
  %conv1483 = zext i8 %1058 to i32
  %call1484 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1482, i64 noundef %1056, ptr noundef %1057, i32 noundef %conv1483, ptr noundef %count1068) #21
  store i32 %call1484, ptr %retcount, align 4
  br label %sw.epilog1497

sw.bb1485:                                        ; preds = %sw.bb1475
  %1059 = load ptr, ptr %result, align 8
  %1060 = load i64, ptr %length, align 8
  %add.ptr1486 = getelementptr inbounds i8, ptr %1059, i64 %1060
  %1061 = load i64, ptr %maxlen, align 8
  %1062 = load ptr, ptr %buf, align 8
  %arrayidx1487 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1063 = load i32, ptr %arrayidx1487, align 4
  %1064 = load i8, ptr %arg1476, align 1
  %conv1488 = zext i8 %1064 to i32
  %call1489 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1486, i64 noundef %1061, ptr noundef %1062, i32 noundef %1063, i32 noundef %conv1488, ptr noundef %count1068) #21
  store i32 %call1489, ptr %retcount, align 4
  br label %sw.epilog1497

sw.bb1490:                                        ; preds = %sw.bb1475
  %1065 = load ptr, ptr %result, align 8
  %1066 = load i64, ptr %length, align 8
  %add.ptr1491 = getelementptr inbounds i8, ptr %1065, i64 %1066
  %1067 = load i64, ptr %maxlen, align 8
  %1068 = load ptr, ptr %buf, align 8
  %arrayidx1492 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1069 = load i32, ptr %arrayidx1492, align 4
  %arrayidx1493 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1070 = load i32, ptr %arrayidx1493, align 4
  %1071 = load i8, ptr %arg1476, align 1
  %conv1494 = zext i8 %1071 to i32
  %call1495 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1491, i64 noundef %1067, ptr noundef %1068, i32 noundef %1069, i32 noundef %1070, i32 noundef %conv1494, ptr noundef %count1068) #21
  store i32 %call1495, ptr %retcount, align 4
  br label %sw.epilog1497

sw.default1496:                                   ; preds = %sw.bb1475
  call void @abort() #22
  unreachable

sw.epilog1497:                                    ; preds = %sw.bb1490, %sw.bb1485, %sw.bb1481
  br label %sw.epilog1759

sw.bb1498:                                        ; preds = %if.end1073
  %arg1500 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1072 = load ptr, ptr %arg1500, align 8
  %1073 = load ptr, ptr %dp, align 8
  %arg_index1501 = getelementptr inbounds %struct.char_directive, ptr %1073, i32 0, i32 10
  %1074 = load i64, ptr %arg_index1501, align 8
  %arrayidx1502 = getelementptr inbounds %struct.argument, ptr %1072, i64 %1074
  %a1503 = getelementptr inbounds %struct.argument, ptr %arrayidx1502, i32 0, i32 1
  %1075 = load i64, ptr %a1503, align 16
  store i64 %1075, ptr %arg1499, align 8
  %1076 = load i32, ptr %prefix_count, align 4
  switch i32 %1076, label %sw.default1516 [
    i32 0, label %sw.bb1504
    i32 1, label %sw.bb1507
    i32 2, label %sw.bb1511
  ]

sw.bb1504:                                        ; preds = %sw.bb1498
  %1077 = load ptr, ptr %result, align 8
  %1078 = load i64, ptr %length, align 8
  %add.ptr1505 = getelementptr inbounds i8, ptr %1077, i64 %1078
  %1079 = load i64, ptr %maxlen, align 8
  %1080 = load ptr, ptr %buf, align 8
  %1081 = load i64, ptr %arg1499, align 8
  %call1506 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1505, i64 noundef %1079, ptr noundef %1080, i64 noundef %1081, ptr noundef %count1068) #21
  store i32 %call1506, ptr %retcount, align 4
  br label %sw.epilog1517

sw.bb1507:                                        ; preds = %sw.bb1498
  %1082 = load ptr, ptr %result, align 8
  %1083 = load i64, ptr %length, align 8
  %add.ptr1508 = getelementptr inbounds i8, ptr %1082, i64 %1083
  %1084 = load i64, ptr %maxlen, align 8
  %1085 = load ptr, ptr %buf, align 8
  %arrayidx1509 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1086 = load i32, ptr %arrayidx1509, align 4
  %1087 = load i64, ptr %arg1499, align 8
  %call1510 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1508, i64 noundef %1084, ptr noundef %1085, i32 noundef %1086, i64 noundef %1087, ptr noundef %count1068) #21
  store i32 %call1510, ptr %retcount, align 4
  br label %sw.epilog1517

sw.bb1511:                                        ; preds = %sw.bb1498
  %1088 = load ptr, ptr %result, align 8
  %1089 = load i64, ptr %length, align 8
  %add.ptr1512 = getelementptr inbounds i8, ptr %1088, i64 %1089
  %1090 = load i64, ptr %maxlen, align 8
  %1091 = load ptr, ptr %buf, align 8
  %arrayidx1513 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1092 = load i32, ptr %arrayidx1513, align 4
  %arrayidx1514 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1093 = load i32, ptr %arrayidx1514, align 4
  %1094 = load i64, ptr %arg1499, align 8
  %call1515 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1512, i64 noundef %1090, ptr noundef %1091, i32 noundef %1092, i32 noundef %1093, i64 noundef %1094, ptr noundef %count1068) #21
  store i32 %call1515, ptr %retcount, align 4
  br label %sw.epilog1517

sw.default1516:                                   ; preds = %sw.bb1498
  call void @abort() #22
  unreachable

sw.epilog1517:                                    ; preds = %sw.bb1511, %sw.bb1507, %sw.bb1504
  br label %sw.epilog1759

sw.bb1518:                                        ; preds = %if.end1073
  %arg1520 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1095 = load ptr, ptr %arg1520, align 8
  %1096 = load ptr, ptr %dp, align 8
  %arg_index1521 = getelementptr inbounds %struct.char_directive, ptr %1096, i32 0, i32 10
  %1097 = load i64, ptr %arg_index1521, align 8
  %arrayidx1522 = getelementptr inbounds %struct.argument, ptr %1095, i64 %1097
  %a1523 = getelementptr inbounds %struct.argument, ptr %arrayidx1522, i32 0, i32 1
  %1098 = load i64, ptr %a1523, align 16
  store i64 %1098, ptr %arg1519, align 8
  %1099 = load i32, ptr %prefix_count, align 4
  switch i32 %1099, label %sw.default1536 [
    i32 0, label %sw.bb1524
    i32 1, label %sw.bb1527
    i32 2, label %sw.bb1531
  ]

sw.bb1524:                                        ; preds = %sw.bb1518
  %1100 = load ptr, ptr %result, align 8
  %1101 = load i64, ptr %length, align 8
  %add.ptr1525 = getelementptr inbounds i8, ptr %1100, i64 %1101
  %1102 = load i64, ptr %maxlen, align 8
  %1103 = load ptr, ptr %buf, align 8
  %1104 = load i64, ptr %arg1519, align 8
  %call1526 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1525, i64 noundef %1102, ptr noundef %1103, i64 noundef %1104, ptr noundef %count1068) #21
  store i32 %call1526, ptr %retcount, align 4
  br label %sw.epilog1537

sw.bb1527:                                        ; preds = %sw.bb1518
  %1105 = load ptr, ptr %result, align 8
  %1106 = load i64, ptr %length, align 8
  %add.ptr1528 = getelementptr inbounds i8, ptr %1105, i64 %1106
  %1107 = load i64, ptr %maxlen, align 8
  %1108 = load ptr, ptr %buf, align 8
  %arrayidx1529 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1109 = load i32, ptr %arrayidx1529, align 4
  %1110 = load i64, ptr %arg1519, align 8
  %call1530 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1528, i64 noundef %1107, ptr noundef %1108, i32 noundef %1109, i64 noundef %1110, ptr noundef %count1068) #21
  store i32 %call1530, ptr %retcount, align 4
  br label %sw.epilog1537

sw.bb1531:                                        ; preds = %sw.bb1518
  %1111 = load ptr, ptr %result, align 8
  %1112 = load i64, ptr %length, align 8
  %add.ptr1532 = getelementptr inbounds i8, ptr %1111, i64 %1112
  %1113 = load i64, ptr %maxlen, align 8
  %1114 = load ptr, ptr %buf, align 8
  %arrayidx1533 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1115 = load i32, ptr %arrayidx1533, align 4
  %arrayidx1534 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1116 = load i32, ptr %arrayidx1534, align 4
  %1117 = load i64, ptr %arg1519, align 8
  %call1535 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1532, i64 noundef %1113, ptr noundef %1114, i32 noundef %1115, i32 noundef %1116, i64 noundef %1117, ptr noundef %count1068) #21
  store i32 %call1535, ptr %retcount, align 4
  br label %sw.epilog1537

sw.default1536:                                   ; preds = %sw.bb1518
  call void @abort() #22
  unreachable

sw.epilog1537:                                    ; preds = %sw.bb1531, %sw.bb1527, %sw.bb1524
  br label %sw.epilog1759

sw.bb1538:                                        ; preds = %if.end1073
  %arg1540 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1118 = load ptr, ptr %arg1540, align 8
  %1119 = load ptr, ptr %dp, align 8
  %arg_index1541 = getelementptr inbounds %struct.char_directive, ptr %1119, i32 0, i32 10
  %1120 = load i64, ptr %arg_index1541, align 8
  %arrayidx1542 = getelementptr inbounds %struct.argument, ptr %1118, i64 %1120
  %a1543 = getelementptr inbounds %struct.argument, ptr %arrayidx1542, i32 0, i32 1
  %1121 = load i64, ptr %a1543, align 16
  store i64 %1121, ptr %arg1539, align 8
  %1122 = load i32, ptr %prefix_count, align 4
  switch i32 %1122, label %sw.default1556 [
    i32 0, label %sw.bb1544
    i32 1, label %sw.bb1547
    i32 2, label %sw.bb1551
  ]

sw.bb1544:                                        ; preds = %sw.bb1538
  %1123 = load ptr, ptr %result, align 8
  %1124 = load i64, ptr %length, align 8
  %add.ptr1545 = getelementptr inbounds i8, ptr %1123, i64 %1124
  %1125 = load i64, ptr %maxlen, align 8
  %1126 = load ptr, ptr %buf, align 8
  %1127 = load i64, ptr %arg1539, align 8
  %call1546 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1545, i64 noundef %1125, ptr noundef %1126, i64 noundef %1127, ptr noundef %count1068) #21
  store i32 %call1546, ptr %retcount, align 4
  br label %sw.epilog1557

sw.bb1547:                                        ; preds = %sw.bb1538
  %1128 = load ptr, ptr %result, align 8
  %1129 = load i64, ptr %length, align 8
  %add.ptr1548 = getelementptr inbounds i8, ptr %1128, i64 %1129
  %1130 = load i64, ptr %maxlen, align 8
  %1131 = load ptr, ptr %buf, align 8
  %arrayidx1549 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1132 = load i32, ptr %arrayidx1549, align 4
  %1133 = load i64, ptr %arg1539, align 8
  %call1550 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1548, i64 noundef %1130, ptr noundef %1131, i32 noundef %1132, i64 noundef %1133, ptr noundef %count1068) #21
  store i32 %call1550, ptr %retcount, align 4
  br label %sw.epilog1557

sw.bb1551:                                        ; preds = %sw.bb1538
  %1134 = load ptr, ptr %result, align 8
  %1135 = load i64, ptr %length, align 8
  %add.ptr1552 = getelementptr inbounds i8, ptr %1134, i64 %1135
  %1136 = load i64, ptr %maxlen, align 8
  %1137 = load ptr, ptr %buf, align 8
  %arrayidx1553 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1138 = load i32, ptr %arrayidx1553, align 4
  %arrayidx1554 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1139 = load i32, ptr %arrayidx1554, align 4
  %1140 = load i64, ptr %arg1539, align 8
  %call1555 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1552, i64 noundef %1136, ptr noundef %1137, i32 noundef %1138, i32 noundef %1139, i64 noundef %1140, ptr noundef %count1068) #21
  store i32 %call1555, ptr %retcount, align 4
  br label %sw.epilog1557

sw.default1556:                                   ; preds = %sw.bb1538
  call void @abort() #22
  unreachable

sw.epilog1557:                                    ; preds = %sw.bb1551, %sw.bb1547, %sw.bb1544
  br label %sw.epilog1759

sw.bb1558:                                        ; preds = %if.end1073
  %arg1560 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1141 = load ptr, ptr %arg1560, align 8
  %1142 = load ptr, ptr %dp, align 8
  %arg_index1561 = getelementptr inbounds %struct.char_directive, ptr %1142, i32 0, i32 10
  %1143 = load i64, ptr %arg_index1561, align 8
  %arrayidx1562 = getelementptr inbounds %struct.argument, ptr %1141, i64 %1143
  %a1563 = getelementptr inbounds %struct.argument, ptr %arrayidx1562, i32 0, i32 1
  %1144 = load i64, ptr %a1563, align 16
  store i64 %1144, ptr %arg1559, align 8
  %1145 = load i32, ptr %prefix_count, align 4
  switch i32 %1145, label %sw.default1576 [
    i32 0, label %sw.bb1564
    i32 1, label %sw.bb1567
    i32 2, label %sw.bb1571
  ]

sw.bb1564:                                        ; preds = %sw.bb1558
  %1146 = load ptr, ptr %result, align 8
  %1147 = load i64, ptr %length, align 8
  %add.ptr1565 = getelementptr inbounds i8, ptr %1146, i64 %1147
  %1148 = load i64, ptr %maxlen, align 8
  %1149 = load ptr, ptr %buf, align 8
  %1150 = load i64, ptr %arg1559, align 8
  %call1566 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1565, i64 noundef %1148, ptr noundef %1149, i64 noundef %1150, ptr noundef %count1068) #21
  store i32 %call1566, ptr %retcount, align 4
  br label %sw.epilog1577

sw.bb1567:                                        ; preds = %sw.bb1558
  %1151 = load ptr, ptr %result, align 8
  %1152 = load i64, ptr %length, align 8
  %add.ptr1568 = getelementptr inbounds i8, ptr %1151, i64 %1152
  %1153 = load i64, ptr %maxlen, align 8
  %1154 = load ptr, ptr %buf, align 8
  %arrayidx1569 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1155 = load i32, ptr %arrayidx1569, align 4
  %1156 = load i64, ptr %arg1559, align 8
  %call1570 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1568, i64 noundef %1153, ptr noundef %1154, i32 noundef %1155, i64 noundef %1156, ptr noundef %count1068) #21
  store i32 %call1570, ptr %retcount, align 4
  br label %sw.epilog1577

sw.bb1571:                                        ; preds = %sw.bb1558
  %1157 = load ptr, ptr %result, align 8
  %1158 = load i64, ptr %length, align 8
  %add.ptr1572 = getelementptr inbounds i8, ptr %1157, i64 %1158
  %1159 = load i64, ptr %maxlen, align 8
  %1160 = load ptr, ptr %buf, align 8
  %arrayidx1573 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1161 = load i32, ptr %arrayidx1573, align 4
  %arrayidx1574 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1162 = load i32, ptr %arrayidx1574, align 4
  %1163 = load i64, ptr %arg1559, align 8
  %call1575 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1572, i64 noundef %1159, ptr noundef %1160, i32 noundef %1161, i32 noundef %1162, i64 noundef %1163, ptr noundef %count1068) #21
  store i32 %call1575, ptr %retcount, align 4
  br label %sw.epilog1577

sw.default1576:                                   ; preds = %sw.bb1558
  call void @abort() #22
  unreachable

sw.epilog1577:                                    ; preds = %sw.bb1571, %sw.bb1567, %sw.bb1564
  br label %sw.epilog1759

sw.bb1578:                                        ; preds = %if.end1073
  %arg1580 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1164 = load ptr, ptr %arg1580, align 8
  %1165 = load ptr, ptr %dp, align 8
  %arg_index1581 = getelementptr inbounds %struct.char_directive, ptr %1165, i32 0, i32 10
  %1166 = load i64, ptr %arg_index1581, align 8
  %arrayidx1582 = getelementptr inbounds %struct.argument, ptr %1164, i64 %1166
  %a1583 = getelementptr inbounds %struct.argument, ptr %arrayidx1582, i32 0, i32 1
  %1167 = load i64, ptr %a1583, align 16
  store i64 %1167, ptr %arg1579, align 8
  %1168 = load i32, ptr %prefix_count, align 4
  switch i32 %1168, label %sw.default1596 [
    i32 0, label %sw.bb1584
    i32 1, label %sw.bb1587
    i32 2, label %sw.bb1591
  ]

sw.bb1584:                                        ; preds = %sw.bb1578
  %1169 = load ptr, ptr %result, align 8
  %1170 = load i64, ptr %length, align 8
  %add.ptr1585 = getelementptr inbounds i8, ptr %1169, i64 %1170
  %1171 = load i64, ptr %maxlen, align 8
  %1172 = load ptr, ptr %buf, align 8
  %1173 = load i64, ptr %arg1579, align 8
  %call1586 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1585, i64 noundef %1171, ptr noundef %1172, i64 noundef %1173, ptr noundef %count1068) #21
  store i32 %call1586, ptr %retcount, align 4
  br label %sw.epilog1597

sw.bb1587:                                        ; preds = %sw.bb1578
  %1174 = load ptr, ptr %result, align 8
  %1175 = load i64, ptr %length, align 8
  %add.ptr1588 = getelementptr inbounds i8, ptr %1174, i64 %1175
  %1176 = load i64, ptr %maxlen, align 8
  %1177 = load ptr, ptr %buf, align 8
  %arrayidx1589 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1178 = load i32, ptr %arrayidx1589, align 4
  %1179 = load i64, ptr %arg1579, align 8
  %call1590 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1588, i64 noundef %1176, ptr noundef %1177, i32 noundef %1178, i64 noundef %1179, ptr noundef %count1068) #21
  store i32 %call1590, ptr %retcount, align 4
  br label %sw.epilog1597

sw.bb1591:                                        ; preds = %sw.bb1578
  %1180 = load ptr, ptr %result, align 8
  %1181 = load i64, ptr %length, align 8
  %add.ptr1592 = getelementptr inbounds i8, ptr %1180, i64 %1181
  %1182 = load i64, ptr %maxlen, align 8
  %1183 = load ptr, ptr %buf, align 8
  %arrayidx1593 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1184 = load i32, ptr %arrayidx1593, align 4
  %arrayidx1594 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1185 = load i32, ptr %arrayidx1594, align 4
  %1186 = load i64, ptr %arg1579, align 8
  %call1595 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1592, i64 noundef %1182, ptr noundef %1183, i32 noundef %1184, i32 noundef %1185, i64 noundef %1186, ptr noundef %count1068) #21
  store i32 %call1595, ptr %retcount, align 4
  br label %sw.epilog1597

sw.default1596:                                   ; preds = %sw.bb1578
  call void @abort() #22
  unreachable

sw.epilog1597:                                    ; preds = %sw.bb1591, %sw.bb1587, %sw.bb1584
  br label %sw.epilog1759

sw.bb1598:                                        ; preds = %if.end1073
  %arg1600 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1187 = load ptr, ptr %arg1600, align 8
  %1188 = load ptr, ptr %dp, align 8
  %arg_index1601 = getelementptr inbounds %struct.char_directive, ptr %1188, i32 0, i32 10
  %1189 = load i64, ptr %arg_index1601, align 8
  %arrayidx1602 = getelementptr inbounds %struct.argument, ptr %1187, i64 %1189
  %a1603 = getelementptr inbounds %struct.argument, ptr %arrayidx1602, i32 0, i32 1
  %1190 = load i64, ptr %a1603, align 16
  store i64 %1190, ptr %arg1599, align 8
  %1191 = load i32, ptr %prefix_count, align 4
  switch i32 %1191, label %sw.default1616 [
    i32 0, label %sw.bb1604
    i32 1, label %sw.bb1607
    i32 2, label %sw.bb1611
  ]

sw.bb1604:                                        ; preds = %sw.bb1598
  %1192 = load ptr, ptr %result, align 8
  %1193 = load i64, ptr %length, align 8
  %add.ptr1605 = getelementptr inbounds i8, ptr %1192, i64 %1193
  %1194 = load i64, ptr %maxlen, align 8
  %1195 = load ptr, ptr %buf, align 8
  %1196 = load i64, ptr %arg1599, align 8
  %call1606 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1605, i64 noundef %1194, ptr noundef %1195, i64 noundef %1196, ptr noundef %count1068) #21
  store i32 %call1606, ptr %retcount, align 4
  br label %sw.epilog1617

sw.bb1607:                                        ; preds = %sw.bb1598
  %1197 = load ptr, ptr %result, align 8
  %1198 = load i64, ptr %length, align 8
  %add.ptr1608 = getelementptr inbounds i8, ptr %1197, i64 %1198
  %1199 = load i64, ptr %maxlen, align 8
  %1200 = load ptr, ptr %buf, align 8
  %arrayidx1609 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1201 = load i32, ptr %arrayidx1609, align 4
  %1202 = load i64, ptr %arg1599, align 8
  %call1610 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1608, i64 noundef %1199, ptr noundef %1200, i32 noundef %1201, i64 noundef %1202, ptr noundef %count1068) #21
  store i32 %call1610, ptr %retcount, align 4
  br label %sw.epilog1617

sw.bb1611:                                        ; preds = %sw.bb1598
  %1203 = load ptr, ptr %result, align 8
  %1204 = load i64, ptr %length, align 8
  %add.ptr1612 = getelementptr inbounds i8, ptr %1203, i64 %1204
  %1205 = load i64, ptr %maxlen, align 8
  %1206 = load ptr, ptr %buf, align 8
  %arrayidx1613 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1207 = load i32, ptr %arrayidx1613, align 4
  %arrayidx1614 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1208 = load i32, ptr %arrayidx1614, align 4
  %1209 = load i64, ptr %arg1599, align 8
  %call1615 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1612, i64 noundef %1205, ptr noundef %1206, i32 noundef %1207, i32 noundef %1208, i64 noundef %1209, ptr noundef %count1068) #21
  store i32 %call1615, ptr %retcount, align 4
  br label %sw.epilog1617

sw.default1616:                                   ; preds = %sw.bb1598
  call void @abort() #22
  unreachable

sw.epilog1617:                                    ; preds = %sw.bb1611, %sw.bb1607, %sw.bb1604
  br label %sw.epilog1759

sw.bb1618:                                        ; preds = %if.end1073
  %arg1620 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1210 = load ptr, ptr %arg1620, align 8
  %1211 = load ptr, ptr %dp, align 8
  %arg_index1621 = getelementptr inbounds %struct.char_directive, ptr %1211, i32 0, i32 10
  %1212 = load i64, ptr %arg_index1621, align 8
  %arrayidx1622 = getelementptr inbounds %struct.argument, ptr %1210, i64 %1212
  %a1623 = getelementptr inbounds %struct.argument, ptr %arrayidx1622, i32 0, i32 1
  %1213 = load double, ptr %a1623, align 16
  store double %1213, ptr %arg1619, align 8
  %1214 = load i32, ptr %prefix_count, align 4
  switch i32 %1214, label %sw.default1636 [
    i32 0, label %sw.bb1624
    i32 1, label %sw.bb1627
    i32 2, label %sw.bb1631
  ]

sw.bb1624:                                        ; preds = %sw.bb1618
  %1215 = load ptr, ptr %result, align 8
  %1216 = load i64, ptr %length, align 8
  %add.ptr1625 = getelementptr inbounds i8, ptr %1215, i64 %1216
  %1217 = load i64, ptr %maxlen, align 8
  %1218 = load ptr, ptr %buf, align 8
  %1219 = load double, ptr %arg1619, align 8
  %call1626 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1625, i64 noundef %1217, ptr noundef %1218, double noundef %1219, ptr noundef %count1068) #21
  store i32 %call1626, ptr %retcount, align 4
  br label %sw.epilog1637

sw.bb1627:                                        ; preds = %sw.bb1618
  %1220 = load ptr, ptr %result, align 8
  %1221 = load i64, ptr %length, align 8
  %add.ptr1628 = getelementptr inbounds i8, ptr %1220, i64 %1221
  %1222 = load i64, ptr %maxlen, align 8
  %1223 = load ptr, ptr %buf, align 8
  %arrayidx1629 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1224 = load i32, ptr %arrayidx1629, align 4
  %1225 = load double, ptr %arg1619, align 8
  %call1630 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1628, i64 noundef %1222, ptr noundef %1223, i32 noundef %1224, double noundef %1225, ptr noundef %count1068) #21
  store i32 %call1630, ptr %retcount, align 4
  br label %sw.epilog1637

sw.bb1631:                                        ; preds = %sw.bb1618
  %1226 = load ptr, ptr %result, align 8
  %1227 = load i64, ptr %length, align 8
  %add.ptr1632 = getelementptr inbounds i8, ptr %1226, i64 %1227
  %1228 = load i64, ptr %maxlen, align 8
  %1229 = load ptr, ptr %buf, align 8
  %arrayidx1633 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1230 = load i32, ptr %arrayidx1633, align 4
  %arrayidx1634 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1231 = load i32, ptr %arrayidx1634, align 4
  %1232 = load double, ptr %arg1619, align 8
  %call1635 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1632, i64 noundef %1228, ptr noundef %1229, i32 noundef %1230, i32 noundef %1231, double noundef %1232, ptr noundef %count1068) #21
  store i32 %call1635, ptr %retcount, align 4
  br label %sw.epilog1637

sw.default1636:                                   ; preds = %sw.bb1618
  call void @abort() #22
  unreachable

sw.epilog1637:                                    ; preds = %sw.bb1631, %sw.bb1627, %sw.bb1624
  br label %sw.epilog1759

sw.bb1638:                                        ; preds = %if.end1073
  %arg1640 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1233 = load ptr, ptr %arg1640, align 8
  %1234 = load ptr, ptr %dp, align 8
  %arg_index1641 = getelementptr inbounds %struct.char_directive, ptr %1234, i32 0, i32 10
  %1235 = load i64, ptr %arg_index1641, align 8
  %arrayidx1642 = getelementptr inbounds %struct.argument, ptr %1233, i64 %1235
  %a1643 = getelementptr inbounds %struct.argument, ptr %arrayidx1642, i32 0, i32 1
  %1236 = load x86_fp80, ptr %a1643, align 16
  store x86_fp80 %1236, ptr %arg1639, align 16
  %1237 = load i32, ptr %prefix_count, align 4
  switch i32 %1237, label %sw.default1656 [
    i32 0, label %sw.bb1644
    i32 1, label %sw.bb1647
    i32 2, label %sw.bb1651
  ]

sw.bb1644:                                        ; preds = %sw.bb1638
  %1238 = load ptr, ptr %result, align 8
  %1239 = load i64, ptr %length, align 8
  %add.ptr1645 = getelementptr inbounds i8, ptr %1238, i64 %1239
  %1240 = load i64, ptr %maxlen, align 8
  %1241 = load ptr, ptr %buf, align 8
  %1242 = load x86_fp80, ptr %arg1639, align 16
  %call1646 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1645, i64 noundef %1240, ptr noundef %1241, x86_fp80 noundef %1242, ptr noundef %count1068) #21
  store i32 %call1646, ptr %retcount, align 4
  br label %sw.epilog1657

sw.bb1647:                                        ; preds = %sw.bb1638
  %1243 = load ptr, ptr %result, align 8
  %1244 = load i64, ptr %length, align 8
  %add.ptr1648 = getelementptr inbounds i8, ptr %1243, i64 %1244
  %1245 = load i64, ptr %maxlen, align 8
  %1246 = load ptr, ptr %buf, align 8
  %arrayidx1649 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1247 = load i32, ptr %arrayidx1649, align 4
  %1248 = load x86_fp80, ptr %arg1639, align 16
  %call1650 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1648, i64 noundef %1245, ptr noundef %1246, i32 noundef %1247, x86_fp80 noundef %1248, ptr noundef %count1068) #21
  store i32 %call1650, ptr %retcount, align 4
  br label %sw.epilog1657

sw.bb1651:                                        ; preds = %sw.bb1638
  %1249 = load ptr, ptr %result, align 8
  %1250 = load i64, ptr %length, align 8
  %add.ptr1652 = getelementptr inbounds i8, ptr %1249, i64 %1250
  %1251 = load i64, ptr %maxlen, align 8
  %1252 = load ptr, ptr %buf, align 8
  %arrayidx1653 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1253 = load i32, ptr %arrayidx1653, align 4
  %arrayidx1654 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1254 = load i32, ptr %arrayidx1654, align 4
  %1255 = load x86_fp80, ptr %arg1639, align 16
  %call1655 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1652, i64 noundef %1251, ptr noundef %1252, i32 noundef %1253, i32 noundef %1254, x86_fp80 noundef %1255, ptr noundef %count1068) #21
  store i32 %call1655, ptr %retcount, align 4
  br label %sw.epilog1657

sw.default1656:                                   ; preds = %sw.bb1638
  call void @abort() #22
  unreachable

sw.epilog1657:                                    ; preds = %sw.bb1651, %sw.bb1647, %sw.bb1644
  br label %sw.epilog1759

sw.bb1658:                                        ; preds = %if.end1073
  %arg1660 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1256 = load ptr, ptr %arg1660, align 8
  %1257 = load ptr, ptr %dp, align 8
  %arg_index1661 = getelementptr inbounds %struct.char_directive, ptr %1257, i32 0, i32 10
  %1258 = load i64, ptr %arg_index1661, align 8
  %arrayidx1662 = getelementptr inbounds %struct.argument, ptr %1256, i64 %1258
  %a1663 = getelementptr inbounds %struct.argument, ptr %arrayidx1662, i32 0, i32 1
  %1259 = load i32, ptr %a1663, align 16
  store i32 %1259, ptr %arg1659, align 4
  %1260 = load i32, ptr %prefix_count, align 4
  switch i32 %1260, label %sw.default1676 [
    i32 0, label %sw.bb1664
    i32 1, label %sw.bb1667
    i32 2, label %sw.bb1671
  ]

sw.bb1664:                                        ; preds = %sw.bb1658
  %1261 = load ptr, ptr %result, align 8
  %1262 = load i64, ptr %length, align 8
  %add.ptr1665 = getelementptr inbounds i8, ptr %1261, i64 %1262
  %1263 = load i64, ptr %maxlen, align 8
  %1264 = load ptr, ptr %buf, align 8
  %1265 = load i32, ptr %arg1659, align 4
  %call1666 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1665, i64 noundef %1263, ptr noundef %1264, i32 noundef %1265, ptr noundef %count1068) #21
  store i32 %call1666, ptr %retcount, align 4
  br label %sw.epilog1677

sw.bb1667:                                        ; preds = %sw.bb1658
  %1266 = load ptr, ptr %result, align 8
  %1267 = load i64, ptr %length, align 8
  %add.ptr1668 = getelementptr inbounds i8, ptr %1266, i64 %1267
  %1268 = load i64, ptr %maxlen, align 8
  %1269 = load ptr, ptr %buf, align 8
  %arrayidx1669 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1270 = load i32, ptr %arrayidx1669, align 4
  %1271 = load i32, ptr %arg1659, align 4
  %call1670 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1668, i64 noundef %1268, ptr noundef %1269, i32 noundef %1270, i32 noundef %1271, ptr noundef %count1068) #21
  store i32 %call1670, ptr %retcount, align 4
  br label %sw.epilog1677

sw.bb1671:                                        ; preds = %sw.bb1658
  %1272 = load ptr, ptr %result, align 8
  %1273 = load i64, ptr %length, align 8
  %add.ptr1672 = getelementptr inbounds i8, ptr %1272, i64 %1273
  %1274 = load i64, ptr %maxlen, align 8
  %1275 = load ptr, ptr %buf, align 8
  %arrayidx1673 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1276 = load i32, ptr %arrayidx1673, align 4
  %arrayidx1674 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1277 = load i32, ptr %arrayidx1674, align 4
  %1278 = load i32, ptr %arg1659, align 4
  %call1675 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1672, i64 noundef %1274, ptr noundef %1275, i32 noundef %1276, i32 noundef %1277, i32 noundef %1278, ptr noundef %count1068) #21
  store i32 %call1675, ptr %retcount, align 4
  br label %sw.epilog1677

sw.default1676:                                   ; preds = %sw.bb1658
  call void @abort() #22
  unreachable

sw.epilog1677:                                    ; preds = %sw.bb1671, %sw.bb1667, %sw.bb1664
  br label %sw.epilog1759

sw.bb1678:                                        ; preds = %if.end1073
  %arg1680 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1279 = load ptr, ptr %arg1680, align 8
  %1280 = load ptr, ptr %dp, align 8
  %arg_index1681 = getelementptr inbounds %struct.char_directive, ptr %1280, i32 0, i32 10
  %1281 = load i64, ptr %arg_index1681, align 8
  %arrayidx1682 = getelementptr inbounds %struct.argument, ptr %1279, i64 %1281
  %a1683 = getelementptr inbounds %struct.argument, ptr %arrayidx1682, i32 0, i32 1
  %1282 = load i32, ptr %a1683, align 16
  store i32 %1282, ptr %arg1679, align 4
  %1283 = load i32, ptr %prefix_count, align 4
  switch i32 %1283, label %sw.default1696 [
    i32 0, label %sw.bb1684
    i32 1, label %sw.bb1687
    i32 2, label %sw.bb1691
  ]

sw.bb1684:                                        ; preds = %sw.bb1678
  %1284 = load ptr, ptr %result, align 8
  %1285 = load i64, ptr %length, align 8
  %add.ptr1685 = getelementptr inbounds i8, ptr %1284, i64 %1285
  %1286 = load i64, ptr %maxlen, align 8
  %1287 = load ptr, ptr %buf, align 8
  %1288 = load i32, ptr %arg1679, align 4
  %call1686 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1685, i64 noundef %1286, ptr noundef %1287, i32 noundef %1288, ptr noundef %count1068) #21
  store i32 %call1686, ptr %retcount, align 4
  br label %sw.epilog1697

sw.bb1687:                                        ; preds = %sw.bb1678
  %1289 = load ptr, ptr %result, align 8
  %1290 = load i64, ptr %length, align 8
  %add.ptr1688 = getelementptr inbounds i8, ptr %1289, i64 %1290
  %1291 = load i64, ptr %maxlen, align 8
  %1292 = load ptr, ptr %buf, align 8
  %arrayidx1689 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1293 = load i32, ptr %arrayidx1689, align 4
  %1294 = load i32, ptr %arg1679, align 4
  %call1690 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1688, i64 noundef %1291, ptr noundef %1292, i32 noundef %1293, i32 noundef %1294, ptr noundef %count1068) #21
  store i32 %call1690, ptr %retcount, align 4
  br label %sw.epilog1697

sw.bb1691:                                        ; preds = %sw.bb1678
  %1295 = load ptr, ptr %result, align 8
  %1296 = load i64, ptr %length, align 8
  %add.ptr1692 = getelementptr inbounds i8, ptr %1295, i64 %1296
  %1297 = load i64, ptr %maxlen, align 8
  %1298 = load ptr, ptr %buf, align 8
  %arrayidx1693 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1299 = load i32, ptr %arrayidx1693, align 4
  %arrayidx1694 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1300 = load i32, ptr %arrayidx1694, align 4
  %1301 = load i32, ptr %arg1679, align 4
  %call1695 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1692, i64 noundef %1297, ptr noundef %1298, i32 noundef %1299, i32 noundef %1300, i32 noundef %1301, ptr noundef %count1068) #21
  store i32 %call1695, ptr %retcount, align 4
  br label %sw.epilog1697

sw.default1696:                                   ; preds = %sw.bb1678
  call void @abort() #22
  unreachable

sw.epilog1697:                                    ; preds = %sw.bb1691, %sw.bb1687, %sw.bb1684
  br label %sw.epilog1759

sw.bb1698:                                        ; preds = %if.end1073
  %arg1700 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1302 = load ptr, ptr %arg1700, align 8
  %1303 = load ptr, ptr %dp, align 8
  %arg_index1701 = getelementptr inbounds %struct.char_directive, ptr %1303, i32 0, i32 10
  %1304 = load i64, ptr %arg_index1701, align 8
  %arrayidx1702 = getelementptr inbounds %struct.argument, ptr %1302, i64 %1304
  %a1703 = getelementptr inbounds %struct.argument, ptr %arrayidx1702, i32 0, i32 1
  %1305 = load ptr, ptr %a1703, align 16
  store ptr %1305, ptr %arg1699, align 8
  %1306 = load i32, ptr %prefix_count, align 4
  switch i32 %1306, label %sw.default1716 [
    i32 0, label %sw.bb1704
    i32 1, label %sw.bb1707
    i32 2, label %sw.bb1711
  ]

sw.bb1704:                                        ; preds = %sw.bb1698
  %1307 = load ptr, ptr %result, align 8
  %1308 = load i64, ptr %length, align 8
  %add.ptr1705 = getelementptr inbounds i8, ptr %1307, i64 %1308
  %1309 = load i64, ptr %maxlen, align 8
  %1310 = load ptr, ptr %buf, align 8
  %1311 = load ptr, ptr %arg1699, align 8
  %call1706 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1705, i64 noundef %1309, ptr noundef %1310, ptr noundef %1311, ptr noundef %count1068) #21
  store i32 %call1706, ptr %retcount, align 4
  br label %sw.epilog1717

sw.bb1707:                                        ; preds = %sw.bb1698
  %1312 = load ptr, ptr %result, align 8
  %1313 = load i64, ptr %length, align 8
  %add.ptr1708 = getelementptr inbounds i8, ptr %1312, i64 %1313
  %1314 = load i64, ptr %maxlen, align 8
  %1315 = load ptr, ptr %buf, align 8
  %arrayidx1709 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1316 = load i32, ptr %arrayidx1709, align 4
  %1317 = load ptr, ptr %arg1699, align 8
  %call1710 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1708, i64 noundef %1314, ptr noundef %1315, i32 noundef %1316, ptr noundef %1317, ptr noundef %count1068) #21
  store i32 %call1710, ptr %retcount, align 4
  br label %sw.epilog1717

sw.bb1711:                                        ; preds = %sw.bb1698
  %1318 = load ptr, ptr %result, align 8
  %1319 = load i64, ptr %length, align 8
  %add.ptr1712 = getelementptr inbounds i8, ptr %1318, i64 %1319
  %1320 = load i64, ptr %maxlen, align 8
  %1321 = load ptr, ptr %buf, align 8
  %arrayidx1713 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1322 = load i32, ptr %arrayidx1713, align 4
  %arrayidx1714 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1323 = load i32, ptr %arrayidx1714, align 4
  %1324 = load ptr, ptr %arg1699, align 8
  %call1715 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1712, i64 noundef %1320, ptr noundef %1321, i32 noundef %1322, i32 noundef %1323, ptr noundef %1324, ptr noundef %count1068) #21
  store i32 %call1715, ptr %retcount, align 4
  br label %sw.epilog1717

sw.default1716:                                   ; preds = %sw.bb1698
  call void @abort() #22
  unreachable

sw.epilog1717:                                    ; preds = %sw.bb1711, %sw.bb1707, %sw.bb1704
  br label %sw.epilog1759

sw.bb1718:                                        ; preds = %if.end1073
  %arg1720 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1325 = load ptr, ptr %arg1720, align 8
  %1326 = load ptr, ptr %dp, align 8
  %arg_index1721 = getelementptr inbounds %struct.char_directive, ptr %1326, i32 0, i32 10
  %1327 = load i64, ptr %arg_index1721, align 8
  %arrayidx1722 = getelementptr inbounds %struct.argument, ptr %1325, i64 %1327
  %a1723 = getelementptr inbounds %struct.argument, ptr %arrayidx1722, i32 0, i32 1
  %1328 = load ptr, ptr %a1723, align 16
  store ptr %1328, ptr %arg1719, align 8
  %1329 = load i32, ptr %prefix_count, align 4
  switch i32 %1329, label %sw.default1736 [
    i32 0, label %sw.bb1724
    i32 1, label %sw.bb1727
    i32 2, label %sw.bb1731
  ]

sw.bb1724:                                        ; preds = %sw.bb1718
  %1330 = load ptr, ptr %result, align 8
  %1331 = load i64, ptr %length, align 8
  %add.ptr1725 = getelementptr inbounds i8, ptr %1330, i64 %1331
  %1332 = load i64, ptr %maxlen, align 8
  %1333 = load ptr, ptr %buf, align 8
  %1334 = load ptr, ptr %arg1719, align 8
  %call1726 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1725, i64 noundef %1332, ptr noundef %1333, ptr noundef %1334, ptr noundef %count1068) #21
  store i32 %call1726, ptr %retcount, align 4
  br label %sw.epilog1737

sw.bb1727:                                        ; preds = %sw.bb1718
  %1335 = load ptr, ptr %result, align 8
  %1336 = load i64, ptr %length, align 8
  %add.ptr1728 = getelementptr inbounds i8, ptr %1335, i64 %1336
  %1337 = load i64, ptr %maxlen, align 8
  %1338 = load ptr, ptr %buf, align 8
  %arrayidx1729 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1339 = load i32, ptr %arrayidx1729, align 4
  %1340 = load ptr, ptr %arg1719, align 8
  %call1730 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1728, i64 noundef %1337, ptr noundef %1338, i32 noundef %1339, ptr noundef %1340, ptr noundef %count1068) #21
  store i32 %call1730, ptr %retcount, align 4
  br label %sw.epilog1737

sw.bb1731:                                        ; preds = %sw.bb1718
  %1341 = load ptr, ptr %result, align 8
  %1342 = load i64, ptr %length, align 8
  %add.ptr1732 = getelementptr inbounds i8, ptr %1341, i64 %1342
  %1343 = load i64, ptr %maxlen, align 8
  %1344 = load ptr, ptr %buf, align 8
  %arrayidx1733 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1345 = load i32, ptr %arrayidx1733, align 4
  %arrayidx1734 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1346 = load i32, ptr %arrayidx1734, align 4
  %1347 = load ptr, ptr %arg1719, align 8
  %call1735 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1732, i64 noundef %1343, ptr noundef %1344, i32 noundef %1345, i32 noundef %1346, ptr noundef %1347, ptr noundef %count1068) #21
  store i32 %call1735, ptr %retcount, align 4
  br label %sw.epilog1737

sw.default1736:                                   ; preds = %sw.bb1718
  call void @abort() #22
  unreachable

sw.epilog1737:                                    ; preds = %sw.bb1731, %sw.bb1727, %sw.bb1724
  br label %sw.epilog1759

sw.bb1738:                                        ; preds = %if.end1073
  %arg1740 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1348 = load ptr, ptr %arg1740, align 8
  %1349 = load ptr, ptr %dp, align 8
  %arg_index1741 = getelementptr inbounds %struct.char_directive, ptr %1349, i32 0, i32 10
  %1350 = load i64, ptr %arg_index1741, align 8
  %arrayidx1742 = getelementptr inbounds %struct.argument, ptr %1348, i64 %1350
  %a1743 = getelementptr inbounds %struct.argument, ptr %arrayidx1742, i32 0, i32 1
  %1351 = load ptr, ptr %a1743, align 16
  store ptr %1351, ptr %arg1739, align 8
  %1352 = load i32, ptr %prefix_count, align 4
  switch i32 %1352, label %sw.default1756 [
    i32 0, label %sw.bb1744
    i32 1, label %sw.bb1747
    i32 2, label %sw.bb1751
  ]

sw.bb1744:                                        ; preds = %sw.bb1738
  %1353 = load ptr, ptr %result, align 8
  %1354 = load i64, ptr %length, align 8
  %add.ptr1745 = getelementptr inbounds i8, ptr %1353, i64 %1354
  %1355 = load i64, ptr %maxlen, align 8
  %1356 = load ptr, ptr %buf, align 8
  %1357 = load ptr, ptr %arg1739, align 8
  %call1746 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1745, i64 noundef %1355, ptr noundef %1356, ptr noundef %1357, ptr noundef %count1068) #21
  store i32 %call1746, ptr %retcount, align 4
  br label %sw.epilog1757

sw.bb1747:                                        ; preds = %sw.bb1738
  %1358 = load ptr, ptr %result, align 8
  %1359 = load i64, ptr %length, align 8
  %add.ptr1748 = getelementptr inbounds i8, ptr %1358, i64 %1359
  %1360 = load i64, ptr %maxlen, align 8
  %1361 = load ptr, ptr %buf, align 8
  %arrayidx1749 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1362 = load i32, ptr %arrayidx1749, align 4
  %1363 = load ptr, ptr %arg1739, align 8
  %call1750 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1748, i64 noundef %1360, ptr noundef %1361, i32 noundef %1362, ptr noundef %1363, ptr noundef %count1068) #21
  store i32 %call1750, ptr %retcount, align 4
  br label %sw.epilog1757

sw.bb1751:                                        ; preds = %sw.bb1738
  %1364 = load ptr, ptr %result, align 8
  %1365 = load i64, ptr %length, align 8
  %add.ptr1752 = getelementptr inbounds i8, ptr %1364, i64 %1365
  %1366 = load i64, ptr %maxlen, align 8
  %1367 = load ptr, ptr %buf, align 8
  %arrayidx1753 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 0
  %1368 = load i32, ptr %arrayidx1753, align 4
  %arrayidx1754 = getelementptr inbounds [2 x i32], ptr %prefixes, i64 0, i64 1
  %1369 = load i32, ptr %arrayidx1754, align 4
  %1370 = load ptr, ptr %arg1739, align 8
  %call1755 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr1752, i64 noundef %1366, ptr noundef %1367, i32 noundef %1368, i32 noundef %1369, ptr noundef %1370, ptr noundef %count1068) #21
  store i32 %call1755, ptr %retcount, align 4
  br label %sw.epilog1757

sw.default1756:                                   ; preds = %sw.bb1738
  call void @abort() #22
  unreachable

sw.epilog1757:                                    ; preds = %sw.bb1751, %sw.bb1747, %sw.bb1744
  br label %sw.epilog1759

sw.default1758:                                   ; preds = %if.end1073
  call void @abort() #22
  unreachable

sw.epilog1759:                                    ; preds = %sw.epilog1757, %sw.epilog1737, %sw.epilog1717, %sw.epilog1697, %sw.epilog1677, %sw.epilog1657, %sw.epilog1637, %sw.epilog1617, %sw.epilog1597, %sw.epilog1577, %sw.epilog1557, %sw.epilog1537, %sw.epilog1517, %sw.epilog1497, %sw.epilog1474, %sw.epilog1451, %sw.epilog1431, %sw.epilog1411, %sw.epilog1391, %sw.epilog1371, %sw.epilog1348, %sw.epilog1325, %sw.epilog1302, %sw.epilog1279, %sw.epilog1259, %sw.epilog1239, %sw.epilog1219, %sw.epilog1199, %sw.epilog1179, %sw.epilog1159, %sw.epilog1138, %sw.epilog1117, %sw.epilog1096
  %1371 = load i32, ptr %count1068, align 4
  %cmp1760 = icmp sge i32 %1371, 0
  br i1 %cmp1760, label %if.then1762, label %if.else1779

if.then1762:                                      ; preds = %sw.epilog1759
  %1372 = load i32, ptr %count1068, align 4
  %conv1763 = zext i32 %1372 to i64
  %1373 = load i64, ptr %maxlen, align 8
  %cmp1764 = icmp ult i64 %conv1763, %1373
  br i1 %cmp1764, label %land.lhs.true1766, label %if.end1774

land.lhs.true1766:                                ; preds = %if.then1762
  %1374 = load ptr, ptr %result, align 8
  %1375 = load i64, ptr %length, align 8
  %add.ptr1767 = getelementptr inbounds i8, ptr %1374, i64 %1375
  %1376 = load i32, ptr %count1068, align 4
  %idxprom1768 = sext i32 %1376 to i64
  %arrayidx1769 = getelementptr inbounds i8, ptr %add.ptr1767, i64 %idxprom1768
  %1377 = load i8, ptr %arrayidx1769, align 1
  %conv1770 = sext i8 %1377 to i32
  %cmp1771 = icmp ne i32 %conv1770, 0
  br i1 %cmp1771, label %if.then1773, label %if.end1774

if.then1773:                                      ; preds = %land.lhs.true1766
  call void @abort() #22
  unreachable

if.end1774:                                       ; preds = %land.lhs.true1766, %if.then1762
  %1378 = load i32, ptr %retcount, align 4
  %1379 = load i32, ptr %count1068, align 4
  %cmp1775 = icmp sgt i32 %1378, %1379
  br i1 %cmp1775, label %if.then1777, label %if.end1778

if.then1777:                                      ; preds = %if.end1774
  %1380 = load i32, ptr %retcount, align 4
  store i32 %1380, ptr %count1068, align 4
  br label %if.end1778

if.end1778:                                       ; preds = %if.then1777, %if.end1774
  br label %if.end1793

if.else1779:                                      ; preds = %sw.epilog1759
  %1381 = load ptr, ptr %fbp, align 8
  %arrayidx1780 = getelementptr inbounds i8, ptr %1381, i64 1
  %1382 = load i8, ptr %arrayidx1780, align 1
  %conv1781 = sext i8 %1382 to i32
  %cmp1782 = icmp ne i32 %conv1781, 0
  br i1 %cmp1782, label %if.then1784, label %if.else1786

if.then1784:                                      ; preds = %if.else1779
  %1383 = load ptr, ptr %fbp, align 8
  %arrayidx1785 = getelementptr inbounds i8, ptr %1383, i64 1
  store i8 0, ptr %arrayidx1785, align 1
  br label %for.cond1067

if.else1786:                                      ; preds = %if.else1779
  %1384 = load i32, ptr %retcount, align 4
  %cmp1787 = icmp slt i32 %1384, 0
  br i1 %cmp1787, label %if.then1789, label %if.else1790

if.then1789:                                      ; preds = %if.else1786
  br label %if.end1791

if.else1790:                                      ; preds = %if.else1786
  %1385 = load i32, ptr %retcount, align 4
  store i32 %1385, ptr %count1068, align 4
  br label %if.end1791

if.end1791:                                       ; preds = %if.else1790, %if.then1789
  br label %if.end1792

if.end1792:                                       ; preds = %if.end1791
  br label %if.end1793

if.end1793:                                       ; preds = %if.end1792, %if.end1778
  %1386 = load i32, ptr %count1068, align 4
  %cmp1794 = icmp slt i32 %1386, 0
  br i1 %cmp1794, label %if.then1796, label %if.end1816

if.then1796:                                      ; preds = %if.end1793
  %call1797 = call ptr @__errno_location() #26
  %1387 = load i32, ptr %call1797, align 4
  %cmp1798 = icmp eq i32 %1387, 0
  br i1 %cmp1798, label %if.then1800, label %if.end1815

if.then1800:                                      ; preds = %if.then1796
  %1388 = load ptr, ptr %dp, align 8
  %conversion1801 = getelementptr inbounds %struct.char_directive, ptr %1388, i32 0, i32 9
  %1389 = load i8, ptr %conversion1801, align 8
  %conv1802 = sext i8 %1389 to i32
  %cmp1803 = icmp eq i32 %conv1802, 99
  br i1 %cmp1803, label %if.then1810, label %lor.lhs.false1805

lor.lhs.false1805:                                ; preds = %if.then1800
  %1390 = load ptr, ptr %dp, align 8
  %conversion1806 = getelementptr inbounds %struct.char_directive, ptr %1390, i32 0, i32 9
  %1391 = load i8, ptr %conversion1806, align 8
  %conv1807 = sext i8 %1391 to i32
  %cmp1808 = icmp eq i32 %conv1807, 115
  br i1 %cmp1808, label %if.then1810, label %if.else1812

if.then1810:                                      ; preds = %lor.lhs.false1805, %if.then1800
  %call1811 = call ptr @__errno_location() #26
  store i32 84, ptr %call1811, align 4
  br label %if.end1814

if.else1812:                                      ; preds = %lor.lhs.false1805
  %call1813 = call ptr @__errno_location() #26
  store i32 22, ptr %call1813, align 4
  br label %if.end1814

if.end1814:                                       ; preds = %if.else1812, %if.then1810
  br label %if.end1815

if.end1815:                                       ; preds = %if.end1814, %if.then1796
  br label %fail_with_errno

if.end1816:                                       ; preds = %if.end1793
  %1392 = load i32, ptr %count1068, align 4
  %add1817 = add i32 %1392, 1
  %conv1818 = zext i32 %add1817 to i64
  %1393 = load i64, ptr %maxlen, align 8
  %cmp1819 = icmp uge i64 %conv1818, %1393
  br i1 %cmp1819, label %if.then1821, label %if.end1892

if.then1821:                                      ; preds = %if.end1816
  %1394 = load i64, ptr %maxlen, align 8
  %cmp1822 = icmp eq i64 %1394, 2147483647
  br i1 %cmp1822, label %if.then1824, label %if.else1825

if.then1824:                                      ; preds = %if.then1821
  br label %overflow

if.else1825:                                      ; preds = %if.then1821
  %1395 = load i64, ptr %length, align 8
  %1396 = load i32, ptr %count1068, align 4
  %add1827 = add i32 %1396, 2
  %conv1828 = zext i32 %add1827 to i64
  %add1829 = add i64 %conv1828, 1
  %sub1830 = sub i64 %add1829, 1
  %div = udiv i64 %sub1830, 1
  %call1831 = call i64 @xsum(i64 noundef %1395, i64 noundef %div) #23
  %1397 = load i64, ptr %allocated, align 8
  %cmp1832 = icmp ule i64 %1397, 9223372036854775807
  br i1 %cmp1832, label %cond.true1834, label %cond.false1836

cond.true1834:                                    ; preds = %if.else1825
  %1398 = load i64, ptr %allocated, align 8
  %mul1835 = mul i64 %1398, 2
  br label %cond.end1837

cond.false1836:                                   ; preds = %if.else1825
  br label %cond.end1837

cond.end1837:                                     ; preds = %cond.false1836, %cond.true1834
  %cond1838 = phi i64 [ %mul1835, %cond.true1834 ], [ -1, %cond.false1836 ]
  %call1839 = call i64 @xmax(i64 noundef %call1831, i64 noundef %cond1838) #23
  store i64 %call1839, ptr %n1826, align 8
  %1399 = load i64, ptr %n1826, align 8
  %1400 = load i64, ptr %allocated, align 8
  %cmp1840 = icmp ugt i64 %1399, %1400
  br i1 %cmp1840, label %if.then1842, label %if.end1891

if.then1842:                                      ; preds = %cond.end1837
  %1401 = load i64, ptr %allocated, align 8
  %cmp1845 = icmp ugt i64 %1401, 0
  br i1 %cmp1845, label %cond.true1847, label %cond.false1855

cond.true1847:                                    ; preds = %if.then1842
  %1402 = load i64, ptr %allocated, align 8
  %cmp1848 = icmp ule i64 %1402, 9223372036854775807
  br i1 %cmp1848, label %cond.true1850, label %cond.false1852

cond.true1850:                                    ; preds = %cond.true1847
  %1403 = load i64, ptr %allocated, align 8
  %mul1851 = mul i64 %1403, 2
  br label %cond.end1853

cond.false1852:                                   ; preds = %cond.true1847
  br label %cond.end1853

cond.end1853:                                     ; preds = %cond.false1852, %cond.true1850
  %cond1854 = phi i64 [ %mul1851, %cond.true1850 ], [ -1, %cond.false1852 ]
  br label %cond.end1856

cond.false1855:                                   ; preds = %if.then1842
  br label %cond.end1856

cond.end1856:                                     ; preds = %cond.false1855, %cond.end1853
  %cond1857 = phi i64 [ %cond1854, %cond.end1853 ], [ 12, %cond.false1855 ]
  store i64 %cond1857, ptr %allocated, align 8
  %1404 = load i64, ptr %n1826, align 8
  %1405 = load i64, ptr %allocated, align 8
  %cmp1858 = icmp ugt i64 %1404, %1405
  br i1 %cmp1858, label %if.then1860, label %if.end1861

if.then1860:                                      ; preds = %cond.end1856
  %1406 = load i64, ptr %n1826, align 8
  store i64 %1406, ptr %allocated, align 8
  br label %if.end1861

if.end1861:                                       ; preds = %if.then1860, %cond.end1856
  %1407 = load i64, ptr %allocated, align 8
  %cmp1862 = icmp ule i64 %1407, -1
  br i1 %cmp1862, label %cond.true1864, label %cond.false1866

cond.true1864:                                    ; preds = %if.end1861
  %1408 = load i64, ptr %allocated, align 8
  %mul1865 = mul i64 %1408, 1
  br label %cond.end1867

cond.false1866:                                   ; preds = %if.end1861
  br label %cond.end1867

cond.end1867:                                     ; preds = %cond.false1866, %cond.true1864
  %cond1868 = phi i64 [ %mul1865, %cond.true1864 ], [ -1, %cond.false1866 ]
  store i64 %cond1868, ptr %memory_size1843, align 8
  %1409 = load i64, ptr %memory_size1843, align 8
  %cmp1869 = icmp eq i64 %1409, -1
  br i1 %cmp1869, label %if.then1871, label %if.end1872

if.then1871:                                      ; preds = %cond.end1867
  br label %out_of_memory

if.end1872:                                       ; preds = %cond.end1867
  %1410 = load ptr, ptr %result, align 8
  %1411 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1873 = icmp eq ptr %1410, %1411
  br i1 %cmp1873, label %if.then1875, label %if.else1877

if.then1875:                                      ; preds = %if.end1872
  %1412 = load i64, ptr %memory_size1843, align 8
  %call1876 = call noalias ptr @malloc(i64 noundef %1412) #29
  store ptr %call1876, ptr %memory1844, align 8
  br label %if.end1879

if.else1877:                                      ; preds = %if.end1872
  %1413 = load ptr, ptr %result, align 8
  %1414 = load i64, ptr %memory_size1843, align 8
  %call1878 = call ptr @rpl_realloc(ptr noundef %1413, i64 noundef %1414)
  store ptr %call1878, ptr %memory1844, align 8
  br label %if.end1879

if.end1879:                                       ; preds = %if.else1877, %if.then1875
  %1415 = load ptr, ptr %memory1844, align 8
  %cmp1880 = icmp eq ptr %1415, null
  br i1 %cmp1880, label %if.then1882, label %if.end1883

if.then1882:                                      ; preds = %if.end1879
  br label %out_of_memory

if.end1883:                                       ; preds = %if.end1879
  %1416 = load ptr, ptr %result, align 8
  %1417 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1884 = icmp eq ptr %1416, %1417
  br i1 %cmp1884, label %land.lhs.true1886, label %if.end1890

land.lhs.true1886:                                ; preds = %if.end1883
  %1418 = load i64, ptr %length, align 8
  %cmp1887 = icmp ugt i64 %1418, 0
  br i1 %cmp1887, label %if.then1889, label %if.end1890

if.then1889:                                      ; preds = %land.lhs.true1886
  %1419 = load ptr, ptr %memory1844, align 8
  %1420 = load ptr, ptr %result, align 8
  %1421 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1419, ptr align 1 %1420, i64 %1421, i1 false)
  br label %if.end1890

if.end1890:                                       ; preds = %if.then1889, %land.lhs.true1886, %if.end1883
  %1422 = load ptr, ptr %memory1844, align 8
  store ptr %1422, ptr %result, align 8
  br label %if.end1891

if.end1891:                                       ; preds = %if.end1890, %cond.end1837
  br label %for.cond1067

if.end1892:                                       ; preds = %if.end1816
  %1423 = load i32, ptr %count1068, align 4
  %conv1893 = sext i32 %1423 to i64
  %1424 = load i64, ptr %length, align 8
  %add1894 = add i64 %1424, %conv1893
  store i64 %add1894, ptr %length, align 8
  br label %for.end1895

for.end1895:                                      ; preds = %if.end1892
  %1425 = load i32, ptr %orig_errno, align 4
  %call1896 = call ptr @__errno_location() #26
  store i32 %1425, ptr %call1896, align 4
  br label %if.end1897

if.end1897:                                       ; preds = %for.end1895, %if.end840
  br label %if.end1898

if.end1898:                                       ; preds = %if.end1897, %if.end344
  br label %if.end1899

if.end1899:                                       ; preds = %if.end1898
  br label %if.end1900

if.end1900:                                       ; preds = %if.end1899, %if.end130
  br label %for.inc

for.inc:                                          ; preds = %if.end1900
  %1426 = load ptr, ptr %dp, align 8
  %dir_end = getelementptr inbounds %struct.char_directive, ptr %1426, i32 0, i32 1
  %1427 = load ptr, ptr %dir_end, align 8
  store ptr %1427, ptr %cp, align 8
  %1428 = load i64, ptr %i, align 8
  %inc1901 = add i64 %1428, 1
  store i64 %inc1901, ptr %i, align 8
  %1429 = load ptr, ptr %dp, align 8
  %incdec.ptr1902 = getelementptr inbounds %struct.char_directive, ptr %1429, i32 1
  store ptr %incdec.ptr1902, ptr %dp, align 8
  br label %for.cond

for.end1903:                                      ; preds = %if.then68
  %1430 = load i64, ptr %length, align 8
  %call1904 = call i64 @xsum(i64 noundef %1430, i64 noundef 1) #23
  %1431 = load i64, ptr %allocated, align 8
  %cmp1905 = icmp ugt i64 %call1904, %1431
  br i1 %cmp1905, label %if.then1907, label %if.end1958

if.then1907:                                      ; preds = %for.end1903
  %1432 = load i64, ptr %allocated, align 8
  %cmp1910 = icmp ugt i64 %1432, 0
  br i1 %cmp1910, label %cond.true1912, label %cond.false1920

cond.true1912:                                    ; preds = %if.then1907
  %1433 = load i64, ptr %allocated, align 8
  %cmp1913 = icmp ule i64 %1433, 9223372036854775807
  br i1 %cmp1913, label %cond.true1915, label %cond.false1917

cond.true1915:                                    ; preds = %cond.true1912
  %1434 = load i64, ptr %allocated, align 8
  %mul1916 = mul i64 %1434, 2
  br label %cond.end1918

cond.false1917:                                   ; preds = %cond.true1912
  br label %cond.end1918

cond.end1918:                                     ; preds = %cond.false1917, %cond.true1915
  %cond1919 = phi i64 [ %mul1916, %cond.true1915 ], [ -1, %cond.false1917 ]
  br label %cond.end1921

cond.false1920:                                   ; preds = %if.then1907
  br label %cond.end1921

cond.end1921:                                     ; preds = %cond.false1920, %cond.end1918
  %cond1922 = phi i64 [ %cond1919, %cond.end1918 ], [ 12, %cond.false1920 ]
  store i64 %cond1922, ptr %allocated, align 8
  %1435 = load i64, ptr %length, align 8
  %call1923 = call i64 @xsum(i64 noundef %1435, i64 noundef 1) #23
  %1436 = load i64, ptr %allocated, align 8
  %cmp1924 = icmp ugt i64 %call1923, %1436
  br i1 %cmp1924, label %if.then1926, label %if.end1928

if.then1926:                                      ; preds = %cond.end1921
  %1437 = load i64, ptr %length, align 8
  %call1927 = call i64 @xsum(i64 noundef %1437, i64 noundef 1) #23
  store i64 %call1927, ptr %allocated, align 8
  br label %if.end1928

if.end1928:                                       ; preds = %if.then1926, %cond.end1921
  %1438 = load i64, ptr %allocated, align 8
  %cmp1929 = icmp ule i64 %1438, -1
  br i1 %cmp1929, label %cond.true1931, label %cond.false1933

cond.true1931:                                    ; preds = %if.end1928
  %1439 = load i64, ptr %allocated, align 8
  %mul1932 = mul i64 %1439, 1
  br label %cond.end1934

cond.false1933:                                   ; preds = %if.end1928
  br label %cond.end1934

cond.end1934:                                     ; preds = %cond.false1933, %cond.true1931
  %cond1935 = phi i64 [ %mul1932, %cond.true1931 ], [ -1, %cond.false1933 ]
  store i64 %cond1935, ptr %memory_size1908, align 8
  %1440 = load i64, ptr %memory_size1908, align 8
  %cmp1936 = icmp eq i64 %1440, -1
  br i1 %cmp1936, label %if.then1938, label %if.end1939

if.then1938:                                      ; preds = %cond.end1934
  br label %out_of_memory

if.end1939:                                       ; preds = %cond.end1934
  %1441 = load ptr, ptr %result, align 8
  %1442 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1940 = icmp eq ptr %1441, %1442
  br i1 %cmp1940, label %if.then1942, label %if.else1944

if.then1942:                                      ; preds = %if.end1939
  %1443 = load i64, ptr %memory_size1908, align 8
  %call1943 = call noalias ptr @malloc(i64 noundef %1443) #29
  store ptr %call1943, ptr %memory1909, align 8
  br label %if.end1946

if.else1944:                                      ; preds = %if.end1939
  %1444 = load ptr, ptr %result, align 8
  %1445 = load i64, ptr %memory_size1908, align 8
  %call1945 = call ptr @rpl_realloc(ptr noundef %1444, i64 noundef %1445)
  store ptr %call1945, ptr %memory1909, align 8
  br label %if.end1946

if.end1946:                                       ; preds = %if.else1944, %if.then1942
  %1446 = load ptr, ptr %memory1909, align 8
  %cmp1947 = icmp eq ptr %1446, null
  br i1 %cmp1947, label %if.then1949, label %if.end1950

if.then1949:                                      ; preds = %if.end1946
  br label %out_of_memory

if.end1950:                                       ; preds = %if.end1946
  %1447 = load ptr, ptr %result, align 8
  %1448 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1951 = icmp eq ptr %1447, %1448
  br i1 %cmp1951, label %land.lhs.true1953, label %if.end1957

land.lhs.true1953:                                ; preds = %if.end1950
  %1449 = load i64, ptr %length, align 8
  %cmp1954 = icmp ugt i64 %1449, 0
  br i1 %cmp1954, label %if.then1956, label %if.end1957

if.then1956:                                      ; preds = %land.lhs.true1953
  %1450 = load ptr, ptr %memory1909, align 8
  %1451 = load ptr, ptr %result, align 8
  %1452 = load i64, ptr %length, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %1450, ptr align 1 %1451, i64 %1452, i1 false)
  br label %if.end1957

if.end1957:                                       ; preds = %if.then1956, %land.lhs.true1953, %if.end1950
  %1453 = load ptr, ptr %memory1909, align 8
  store ptr %1453, ptr %result, align 8
  br label %if.end1958

if.end1958:                                       ; preds = %if.end1957, %for.end1903
  %1454 = load ptr, ptr %result, align 8
  %1455 = load i64, ptr %length, align 8
  %arrayidx1959 = getelementptr inbounds i8, ptr %1454, i64 %1455
  store i8 0, ptr %arrayidx1959, align 1
  %1456 = load ptr, ptr %result, align 8
  %1457 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1960 = icmp ne ptr %1456, %1457
  br i1 %cmp1960, label %land.lhs.true1962, label %if.end1975

land.lhs.true1962:                                ; preds = %if.end1958
  %1458 = load i64, ptr %length, align 8
  %add1963 = add i64 %1458, 1
  %1459 = load i64, ptr %allocated, align 8
  %cmp1964 = icmp ult i64 %add1963, %1459
  br i1 %cmp1964, label %if.then1966, label %if.end1975

if.then1966:                                      ; preds = %land.lhs.true1962
  %1460 = load ptr, ptr %result, align 8
  %1461 = load i64, ptr %length, align 8
  %add1968 = add i64 %1461, 1
  %mul1969 = mul i64 %add1968, 1
  %call1970 = call ptr @rpl_realloc(ptr noundef %1460, i64 noundef %mul1969)
  store ptr %call1970, ptr %memory1967, align 8
  %1462 = load ptr, ptr %memory1967, align 8
  %cmp1971 = icmp ne ptr %1462, null
  br i1 %cmp1971, label %if.then1973, label %if.end1974

if.then1973:                                      ; preds = %if.then1966
  %1463 = load ptr, ptr %memory1967, align 8
  store ptr %1463, ptr %result, align 8
  br label %if.end1974

if.end1974:                                       ; preds = %if.then1973, %if.then1966
  br label %if.end1975

if.end1975:                                       ; preds = %if.end1974, %land.lhs.true1962, %if.end1958
  %1464 = load ptr, ptr %buf_malloced, align 8
  %cmp1976 = icmp ne ptr %1464, null
  br i1 %cmp1976, label %if.then1978, label %if.end1979

if.then1978:                                      ; preds = %if.end1975
  %1465 = load ptr, ptr %buf_malloced, align 8
  call void @free(ptr noundef %1465) #21
  br label %if.end1979

if.end1979:                                       ; preds = %if.then1978, %if.end1975
  %dir1980 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1466 = load ptr, ptr %dir1980, align 8
  %direct_alloc_dir = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 4
  %arraydecay1981 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir, i64 0, i64 0
  %cmp1982 = icmp ne ptr %1466, %arraydecay1981
  br i1 %cmp1982, label %if.then1984, label %if.end1986

if.then1984:                                      ; preds = %if.end1979
  %dir1985 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1467 = load ptr, ptr %dir1985, align 8
  call void @free(ptr noundef %1467) #21
  br label %if.end1986

if.end1986:                                       ; preds = %if.then1984, %if.end1979
  %arg1987 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1468 = load ptr, ptr %arg1987, align 8
  %direct_alloc_arg = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 2
  %arraydecay1988 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg, i64 0, i64 0
  %cmp1989 = icmp ne ptr %1468, %arraydecay1988
  br i1 %cmp1989, label %if.then1991, label %if.end1993

if.then1991:                                      ; preds = %if.end1986
  %arg1992 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1469 = load ptr, ptr %arg1992, align 8
  call void @free(ptr noundef %1469) #21
  br label %if.end1993

if.end1993:                                       ; preds = %if.then1991, %if.end1986
  %1470 = load i64, ptr %length, align 8
  %1471 = load ptr, ptr %lengthp.addr, align 8
  store i64 %1470, ptr %1471, align 8
  %1472 = load ptr, ptr %result, align 8
  store ptr %1472, ptr %retval, align 8
  br label %return

overflow:                                         ; preds = %if.then1824, %if.then944, %if.then417, %if.then198
  %call1994 = call ptr @__errno_location() #26
  store i32 75, ptr %call1994, align 4
  br label %fail_with_errno

out_of_memory:                                    ; preds = %if.then1949, %if.then1938, %if.then1882, %if.then1871, %if.then1055, %if.then1044, %if.then828, %if.then817, %if.then757, %if.then746, %if.then651, %if.then640, %if.then589, %if.then578, %if.then312, %if.then301, %if.then121, %if.then110, %if.then59, %if.then50
  %call1995 = call ptr @__errno_location() #26
  store i32 12, ptr %call1995, align 4
  br label %fail_with_errno

fail_with_EILSEQ:                                 ; preds = %if.then707, %if.then522, %if.then493
  %call1996 = call ptr @__errno_location() #26
  store i32 84, ptr %call1996, align 4
  br label %fail_with_errno

fail_with_errno:                                  ; preds = %fail_with_EILSEQ, %out_of_memory, %overflow, %if.end1815
  %1473 = load ptr, ptr %result, align 8
  %1474 = load ptr, ptr %resultbuf.addr, align 8
  %cmp1997 = icmp ne ptr %1473, %1474
  br i1 %cmp1997, label %if.then1999, label %if.end2000

if.then1999:                                      ; preds = %fail_with_errno
  %1475 = load ptr, ptr %result, align 8
  call void @free(ptr noundef %1475) #21
  br label %if.end2000

if.end2000:                                       ; preds = %if.then1999, %fail_with_errno
  %1476 = load ptr, ptr %buf_malloced, align 8
  %cmp2001 = icmp ne ptr %1476, null
  br i1 %cmp2001, label %if.then2003, label %if.end2004

if.then2003:                                      ; preds = %if.end2000
  %1477 = load ptr, ptr %buf_malloced, align 8
  call void @free(ptr noundef %1477) #21
  br label %if.end2004

if.end2004:                                       ; preds = %if.then2003, %if.end2000
  %dir2005 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1478 = load ptr, ptr %dir2005, align 8
  %direct_alloc_dir2006 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 4
  %arraydecay2007 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir2006, i64 0, i64 0
  %cmp2008 = icmp ne ptr %1478, %arraydecay2007
  br i1 %cmp2008, label %if.then2010, label %if.end2012

if.then2010:                                      ; preds = %if.end2004
  %dir2011 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1479 = load ptr, ptr %dir2011, align 8
  call void @free(ptr noundef %1479) #21
  br label %if.end2012

if.end2012:                                       ; preds = %if.then2010, %if.end2004
  %arg2013 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1480 = load ptr, ptr %arg2013, align 8
  %direct_alloc_arg2014 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 2
  %arraydecay2015 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg2014, i64 0, i64 0
  %cmp2016 = icmp ne ptr %1480, %arraydecay2015
  br i1 %cmp2016, label %if.then2018, label %if.end2020

if.then2018:                                      ; preds = %if.end2012
  %arg2019 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1481 = load ptr, ptr %arg2019, align 8
  call void @free(ptr noundef %1481) #21
  br label %if.end2020

if.end2020:                                       ; preds = %if.then2018, %if.end2012
  store ptr null, ptr %retval, align 8
  br label %return

out_of_memory_1:                                  ; preds = %if.then15, %if.then11
  %call2021 = call ptr @__errno_location() #26
  store i32 12, ptr %call2021, align 4
  br label %fail_1_with_errno

fail_1_with_EINVAL:                               ; preds = %if.then3
  %call2022 = call ptr @__errno_location() #26
  store i32 22, ptr %call2022, align 4
  br label %fail_1_with_errno

fail_1_with_errno:                                ; preds = %fail_1_with_EINVAL, %out_of_memory_1
  %dir2023 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1482 = load ptr, ptr %dir2023, align 8
  %direct_alloc_dir2024 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 4
  %arraydecay2025 = getelementptr inbounds [7 x %struct.char_directive], ptr %direct_alloc_dir2024, i64 0, i64 0
  %cmp2026 = icmp ne ptr %1482, %arraydecay2025
  br i1 %cmp2026, label %if.then2028, label %if.end2030

if.then2028:                                      ; preds = %fail_1_with_errno
  %dir2029 = getelementptr inbounds %struct.char_directives, ptr %d, i32 0, i32 1
  %1483 = load ptr, ptr %dir2029, align 8
  call void @free(ptr noundef %1483) #21
  br label %if.end2030

if.end2030:                                       ; preds = %if.then2028, %fail_1_with_errno
  %arg2031 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1484 = load ptr, ptr %arg2031, align 8
  %direct_alloc_arg2032 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 2
  %arraydecay2033 = getelementptr inbounds [7 x %struct.argument], ptr %direct_alloc_arg2032, i64 0, i64 0
  %cmp2034 = icmp ne ptr %1484, %arraydecay2033
  br i1 %cmp2034, label %if.then2036, label %if.end2038

if.then2036:                                      ; preds = %if.end2030
  %arg2037 = getelementptr inbounds %struct.arguments, ptr %a, i32 0, i32 1
  %1485 = load ptr, ptr %arg2037, align 8
  call void @free(ptr noundef %1485) #21
  br label %if.end2038

if.end2038:                                       ; preds = %if.then2036, %if.end2030
  store ptr null, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end2038, %if.end2020, %if.end1993, %if.then
  %1486 = load ptr, ptr %retval, align 8
  ret ptr %1486
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @xsum4(i64 noundef, i64 noundef, i64 noundef, i64 noundef) #6

; Function Attrs: nounwind willreturn memory(read)
declare i64 @strnlen(ptr noundef, i64 noundef) #6

; Function Attrs: nounwind
declare i64 @wcrtomb(ptr noundef, i32 noundef, ptr noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @wcslen(ptr noundef) #6

; Function Attrs: nounwind
declare i32 @snprintf(ptr noundef, i64 noundef, ptr noundef, ...) #1

; Function Attrs: nounwind willreturn memory(read)
declare i64 @xmax(i64 noundef, i64 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @vfzprintf(ptr noundef nonnull %fp, ptr noundef nonnull %format, ptr noundef %args) #3 {
entry:
  %retval = alloca i64, align 8
  %fp.addr = alloca ptr, align 8
  %format.addr = alloca ptr, align 8
  %args.addr = alloca ptr, align 8
  %buf = alloca [2000 x i8], align 16
  %output = alloca ptr, align 8
  %len = alloca i64, align 8
  %lenbuf = alloca i64, align 8
  store ptr %fp, ptr %fp.addr, align 8
  store ptr %format, ptr %format.addr, align 8
  store ptr %args, ptr %args.addr, align 8
  store i64 2000, ptr %lenbuf, align 8
  %arraydecay = getelementptr inbounds [2000 x i8], ptr %buf, i64 0, i64 0
  %0 = load ptr, ptr %format.addr, align 8
  %1 = load ptr, ptr %args.addr, align 8
  %call = call ptr @vasnprintf(ptr noundef %arraydecay, ptr noundef %lenbuf, ptr noundef %0, ptr noundef %1)
  store ptr %call, ptr %output, align 8
  %2 = load i64, ptr %lenbuf, align 8
  store i64 %2, ptr %len, align 8
  %3 = load ptr, ptr %output, align 8
  %tobool = icmp ne ptr %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load ptr, ptr %fp.addr, align 8
  call void @fseterr(ptr noundef %4)
  store i64 -1, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64, ptr %len, align 8
  %cmp = icmp ugt i64 %5, 9223372036854775807
  br i1 %cmp, label %if.then1, label %if.end7

if.then1:                                         ; preds = %if.end
  %6 = load ptr, ptr %output, align 8
  %arraydecay2 = getelementptr inbounds [2000 x i8], ptr %buf, i64 0, i64 0
  %cmp3 = icmp ne ptr %6, %arraydecay2
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.then1
  %7 = load ptr, ptr %output, align 8
  call void @free(ptr noundef %7) #21
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.then1
  %8 = load ptr, ptr %fp.addr, align 8
  call void @fseterr(ptr noundef %8)
  %call6 = call ptr @__errno_location() #26
  store i32 12, ptr %call6, align 4
  store i64 -1, ptr %retval, align 8
  br label %return

if.end7:                                          ; preds = %if.end
  %9 = load ptr, ptr %output, align 8
  %10 = load i64, ptr %len, align 8
  %11 = load ptr, ptr %fp.addr, align 8
  %call8 = call i64 @fwrite(ptr noundef %9, i64 noundef 1, i64 noundef %10, ptr noundef %11)
  %12 = load i64, ptr %len, align 8
  %cmp9 = icmp ult i64 %call8, %12
  br i1 %cmp9, label %if.then10, label %if.end15

if.then10:                                        ; preds = %if.end7
  %13 = load ptr, ptr %output, align 8
  %arraydecay11 = getelementptr inbounds [2000 x i8], ptr %buf, i64 0, i64 0
  %cmp12 = icmp ne ptr %13, %arraydecay11
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.then10
  %14 = load ptr, ptr %output, align 8
  call void @free(ptr noundef %14) #21
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.then10
  store i64 -1, ptr %retval, align 8
  br label %return

if.end15:                                         ; preds = %if.end7
  %15 = load ptr, ptr %output, align 8
  %arraydecay16 = getelementptr inbounds [2000 x i8], ptr %buf, i64 0, i64 0
  %cmp17 = icmp ne ptr %15, %arraydecay16
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end15
  %16 = load ptr, ptr %output, align 8
  call void @free(ptr noundef %16) #21
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.end15
  %17 = load i64, ptr %len, align 8
  store i64 %17, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end19, %if.end14, %if.end5, %if.then
  %18 = load i64, ptr %retval, align 8
  ret i64 %18
}

declare i64 @fwrite(ptr noundef, i64 noundef, i64 noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(1,2) uwtable
define dso_local ptr @xnrealloc(ptr noundef %p, i64 noundef %n, i64 noundef %s) #16 {
entry:
  %p.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %n.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  %call = call ptr @xreallocarray(ptr noundef %0, i64 noundef %1, i64 noundef %2) #30
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(1,2) uwtable
define dso_local ptr @xreallocarray(ptr noundef %p, i64 noundef %n, i64 noundef %s) #16 {
entry:
  %p.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  %r = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %n.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  %call = call ptr @rpl_reallocarray(ptr noundef %0, i64 noundef %1, i64 noundef %2)
  store ptr %call, ptr %r, align 8
  %3 = load ptr, ptr %r, align 8
  %tobool = icmp ne ptr %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @xalloc_die() #25
  unreachable

if.end:                                           ; preds = %entry
  %4 = load ptr, ptr %r, align 8
  ret ptr %4
}

declare ptr @rpl_reallocarray(ptr noundef, i64 noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @xmalloc(i64 noundef %s) #17 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias ptr @malloc(i64 noundef %0) #29
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define internal ptr @check_nonnull(ptr noundef %p) #10 {
entry:
  %p.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @xalloc_die() #25
  unreachable

if.end:                                           ; preds = %entry
  %1 = load ptr, ptr %p.addr, align 8
  ret ptr %1
}

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @ximalloc(i64 noundef %s) #17 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias ptr @imalloc(i64 noundef %0)
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

declare noalias ptr @imalloc(i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @xcharalloc(i64 noundef %n) #17 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %call = call noalias nonnull ptr @xmalloc(i64 noundef %0) #27
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(1) uwtable
define dso_local ptr @xrealloc(ptr noundef %p, i64 noundef %s) #18 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  %r = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call ptr @rpl_realloc(ptr noundef %0, i64 noundef %1)
  store ptr %call, ptr %r, align 8
  %2 = load ptr, ptr %r, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @xalloc_die() #25
  unreachable

if.end:                                           ; preds = %entry
  %3 = load ptr, ptr %r, align 8
  ret ptr %3
}

; Function Attrs: noinline nounwind optnone allocsize(1) uwtable
define dso_local nonnull ptr @xirealloc(ptr noundef %p, i64 noundef %s) #18 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call ptr @irealloc(ptr noundef %0, i64 noundef %1)
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

declare ptr @irealloc(ptr noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(1,2) uwtable
define dso_local nonnull ptr @xireallocarray(ptr noundef %p, i64 noundef %n, i64 noundef %s) #16 {
entry:
  %p.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load i64, ptr %n.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  %call = call ptr @ireallocarray(ptr noundef %0, i64 noundef %1, i64 noundef %2)
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

declare ptr @ireallocarray(ptr noundef, i64 noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(0,1) uwtable
define dso_local noalias nonnull ptr @xnmalloc(i64 noundef %n, i64 noundef %s) #19 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call ptr @xreallocarray(ptr noundef null, i64 noundef %0, i64 noundef %1) #30
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(0,1) uwtable
define dso_local noalias nonnull ptr @xinmalloc(i64 noundef %n, i64 noundef %s) #19 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call nonnull ptr @xireallocarray(ptr noundef null, i64 noundef %0, i64 noundef %1) #30
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local nonnull ptr @x2realloc(ptr noundef %p, ptr noundef %ps) #3 {
entry:
  %p.addr = alloca ptr, align 8
  %ps.addr = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %ps, ptr %ps.addr, align 8
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load ptr, ptr %ps.addr, align 8
  %call = call nonnull ptr @x2nrealloc(ptr noundef %0, ptr noundef %1, i64 noundef 1)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local nonnull ptr @x2nrealloc(ptr noundef %p, ptr noundef %pn, i64 noundef %s) #3 {
entry:
  %p.addr = alloca ptr, align 8
  %pn.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  %n = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %pn, ptr %pn.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %pn.addr, align 8
  %1 = load i64, ptr %0, align 8
  store i64 %1, ptr %n, align 8
  %2 = load ptr, ptr %p.addr, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, ptr %n, align 8
  %tobool1 = icmp ne i64 %3, 0
  br i1 %tobool1, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %4 = load i64, ptr %s.addr, align 8
  %div = udiv i64 128, %4
  store i64 %div, ptr %n, align 8
  %5 = load i64, ptr %n, align 8
  %tobool3 = icmp ne i64 %5, 0
  %lnot = xor i1 %tobool3, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %6 = load i64, ptr %n, align 8
  %add = add i64 %6, %conv
  store i64 %add, ptr %n, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7

if.else:                                          ; preds = %entry
  %7 = load i64, ptr %n, align 8
  %8 = load i64, ptr %n, align 8
  %shr = lshr i64 %8, 1
  %add4 = add i64 %shr, 1
  %9 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %7, i64 %add4)
  %10 = extractvalue { i64, i1 } %9, 1
  %11 = extractvalue { i64, i1 } %9, 0
  store i64 %11, ptr %n, align 8
  br i1 %10, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.else
  call void @xalloc_die() #25
  unreachable

if.end6:                                          ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  %12 = load ptr, ptr %p.addr, align 8
  %13 = load i64, ptr %n, align 8
  %14 = load i64, ptr %s.addr, align 8
  %call = call ptr @xreallocarray(ptr noundef %12, i64 noundef %13, i64 noundef %14) #30
  store ptr %call, ptr %p.addr, align 8
  %15 = load i64, ptr %n, align 8
  %16 = load ptr, ptr %pn.addr, align 8
  store i64 %15, ptr %16, align 8
  %17 = load ptr, ptr %p.addr, align 8
  ret ptr %17
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #14

; Function Attrs: noinline nounwind optnone uwtable
define dso_local nonnull ptr @xpalloc(ptr noundef %pa, ptr noundef %pn, i64 noundef %n_incr_min, i64 noundef %n_max, i64 noundef %s) #3 {
entry:
  %pa.addr = alloca ptr, align 8
  %pn.addr = alloca ptr, align 8
  %n_incr_min.addr = alloca i64, align 8
  %n_max.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  %n0 = alloca i64, align 8
  %n = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %adjusted_nbytes = alloca i64, align 8
  store ptr %pa, ptr %pa.addr, align 8
  store ptr %pn, ptr %pn.addr, align 8
  store i64 %n_incr_min, ptr %n_incr_min.addr, align 8
  store i64 %n_max, ptr %n_max.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load ptr, ptr %pn.addr, align 8
  %1 = load i64, ptr %0, align 8
  store i64 %1, ptr %n0, align 8
  %2 = load i64, ptr %n0, align 8
  %3 = load i64, ptr %n0, align 8
  %shr = ashr i64 %3, 1
  %4 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %2, i64 %shr)
  %5 = extractvalue { i64, i1 } %4, 1
  %6 = extractvalue { i64, i1 } %4, 0
  store i64 %6, ptr %n, align 8
  br i1 %5, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 9223372036854775807, ptr %n, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i64, ptr %n_max.addr, align 8
  %cmp = icmp sle i64 0, %7
  br i1 %cmp, label %land.lhs.true, label %if.end3

land.lhs.true:                                    ; preds = %if.end
  %8 = load i64, ptr %n_max.addr, align 8
  %9 = load i64, ptr %n, align 8
  %cmp1 = icmp slt i64 %8, %9
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %land.lhs.true
  %10 = load i64, ptr %n_max.addr, align 8
  store i64 %10, ptr %n, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %land.lhs.true, %if.end
  %11 = load i64, ptr %n, align 8
  %12 = load i64, ptr %s.addr, align 8
  %13 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %11, i64 %12)
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  store i64 %15, ptr %nbytes, align 8
  br i1 %14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end3
  br label %cond.end

cond.false:                                       ; preds = %if.end3
  %16 = load i64, ptr %nbytes, align 8
  %cmp4 = icmp slt i64 %16, 128
  %17 = zext i1 %cmp4 to i64
  %cond = select i1 %cmp4, i32 128, i32 0
  %conv = sext i32 %cond to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond5 = phi i64 [ 9223372036854775807, %cond.true ], [ %conv, %cond.false ]
  store i64 %cond5, ptr %adjusted_nbytes, align 8
  %18 = load i64, ptr %adjusted_nbytes, align 8
  %tobool = icmp ne i64 %18, 0
  br i1 %tobool, label %if.then6, label %if.end7

if.then6:                                         ; preds = %cond.end
  %19 = load i64, ptr %adjusted_nbytes, align 8
  %20 = load i64, ptr %s.addr, align 8
  %div = sdiv i64 %19, %20
  store i64 %div, ptr %n, align 8
  %21 = load i64, ptr %adjusted_nbytes, align 8
  %22 = load i64, ptr %adjusted_nbytes, align 8
  %23 = load i64, ptr %s.addr, align 8
  %rem = srem i64 %22, %23
  %sub = sub nsw i64 %21, %rem
  store i64 %sub, ptr %nbytes, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %cond.end
  %24 = load ptr, ptr %pa.addr, align 8
  %tobool8 = icmp ne ptr %24, null
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %if.end7
  %25 = load ptr, ptr %pn.addr, align 8
  store i64 0, ptr %25, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  %26 = load i64, ptr %n, align 8
  %27 = load i64, ptr %n0, align 8
  %sub11 = sub nsw i64 %26, %27
  %28 = load i64, ptr %n_incr_min.addr, align 8
  %cmp12 = icmp slt i64 %sub11, %28
  br i1 %cmp12, label %land.lhs.true14, label %if.end24

land.lhs.true14:                                  ; preds = %if.end10
  %29 = load i64, ptr %n0, align 8
  %30 = load i64, ptr %n_incr_min.addr, align 8
  %31 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %29, i64 %30)
  %32 = extractvalue { i64, i1 } %31, 1
  %33 = extractvalue { i64, i1 } %31, 0
  store i64 %33, ptr %n, align 8
  br i1 %32, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true14
  %34 = load i64, ptr %n_max.addr, align 8
  %cmp16 = icmp sle i64 0, %34
  br i1 %cmp16, label %land.lhs.true18, label %lor.lhs.false21

land.lhs.true18:                                  ; preds = %lor.lhs.false
  %35 = load i64, ptr %n_max.addr, align 8
  %36 = load i64, ptr %n, align 8
  %cmp19 = icmp slt i64 %35, %36
  br i1 %cmp19, label %if.then23, label %lor.lhs.false21

lor.lhs.false21:                                  ; preds = %land.lhs.true18, %lor.lhs.false
  %37 = load i64, ptr %n, align 8
  %38 = load i64, ptr %s.addr, align 8
  %39 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %37, i64 %38)
  %40 = extractvalue { i64, i1 } %39, 1
  %41 = extractvalue { i64, i1 } %39, 0
  store i64 %41, ptr %nbytes, align 8
  br i1 %40, label %if.then23, label %if.end24

if.then23:                                        ; preds = %lor.lhs.false21, %land.lhs.true18, %land.lhs.true14
  call void @xalloc_die() #25
  unreachable

if.end24:                                         ; preds = %lor.lhs.false21, %if.end10
  %42 = load ptr, ptr %pa.addr, align 8
  %43 = load i64, ptr %nbytes, align 8
  %call = call ptr @xrealloc(ptr noundef %42, i64 noundef %43) #28
  store ptr %call, ptr %pa.addr, align 8
  %44 = load i64, ptr %n, align 8
  %45 = load ptr, ptr %pn.addr, align 8
  store i64 %44, ptr %45, align 8
  %46 = load ptr, ptr %pa.addr, align 8
  ret ptr %46
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #14

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #14

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @xzalloc(i64 noundef %s) #17 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias nonnull ptr @xcalloc(i64 noundef %0, i64 noundef 1) #31
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(0,1) uwtable
define dso_local noalias nonnull ptr @xcalloc(i64 noundef %n, i64 noundef %s) #19 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call noalias ptr @calloc(i64 noundef %0, i64 noundef %1) #32
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

; Function Attrs: nounwind allocsize(0,1)
declare noalias ptr @calloc(i64 noundef, i64 noundef) #20

; Function Attrs: noinline nounwind optnone allocsize(0) uwtable
define dso_local noalias nonnull ptr @xizalloc(i64 noundef %s) #17 {
entry:
  %s.addr = alloca i64, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias nonnull ptr @xicalloc(i64 noundef %0, i64 noundef 1) #31
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(0,1) uwtable
define dso_local noalias nonnull ptr @xicalloc(i64 noundef %n, i64 noundef %s) #19 {
entry:
  %n.addr = alloca i64, align 8
  %s.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %n.addr, align 8
  %1 = load i64, ptr %s.addr, align 8
  %call = call noalias ptr @icalloc(i64 noundef %0, i64 noundef %1)
  %call1 = call ptr @check_nonnull(ptr noundef %call) #23
  ret ptr %call1
}

declare noalias ptr @icalloc(i64 noundef, i64 noundef) #2

; Function Attrs: noinline nounwind optnone allocsize(1) uwtable
define dso_local noalias nonnull ptr @xmemdup(ptr noundef %p, i64 noundef %s) #18 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias nonnull ptr @xmalloc(i64 noundef %0) #27
  %1 = load ptr, ptr %p.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %call, ptr align 1 %1, i64 %2, i1 false)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone allocsize(1) uwtable
define dso_local noalias nonnull ptr @ximemdup(ptr noundef %p, i64 noundef %s) #18 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %call = call noalias nonnull ptr @ximalloc(i64 noundef %0) #27
  %1 = load ptr, ptr %p.addr, align 8
  %2 = load i64, ptr %s.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %call, ptr align 1 %1, i64 %2, i1 false)
  ret ptr %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @ximemdup0(ptr noundef %p, i64 noundef %s) #3 {
entry:
  %p.addr = alloca ptr, align 8
  %s.addr = alloca i64, align 8
  %result = alloca ptr, align 8
  store ptr %p, ptr %p.addr, align 8
  store i64 %s, ptr %s.addr, align 8
  %0 = load i64, ptr %s.addr, align 8
  %add = add nsw i64 %0, 1
  %call = call noalias nonnull ptr @ximalloc(i64 noundef %add) #27
  store ptr %call, ptr %result, align 8
  %1 = load ptr, ptr %result, align 8
  %2 = load i64, ptr %s.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %1, i64 %2
  store i8 0, ptr %arrayidx, align 1
  %3 = load ptr, ptr %result, align 8
  %4 = load ptr, ptr %p.addr, align 8
  %5 = load i64, ptr %s.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %3, ptr align 1 %4, i64 %5, i1 false)
  ret ptr %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local noalias nonnull ptr @xstrdup(ptr noundef %string) #3 {
entry:
  %string.addr = alloca ptr, align 8
  store ptr %string, ptr %string.addr, align 8
  %0 = load ptr, ptr %string.addr, align 8
  %1 = load ptr, ptr %string.addr, align 8
  %call = call i64 @strlen(ptr noundef %1) #23
  %add = add i64 %call, 1
  %call1 = call noalias nonnull ptr @xmemdup(ptr noundef %0, i64 noundef %add) #28
  ret ptr %call1
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define dso_local void @xalloc_die() #0 {
entry:
  %__errstatus = alloca i32, align 4
  %0 = load volatile i32, ptr @exit_failure, align 4
  store i32 %0, ptr %__errstatus, align 4
  %1 = load i32, ptr %__errstatus, align 4
  %call = call ptr @dgettext(ptr noundef @.str.1.198, ptr noundef @.str.2.199) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef %1, i32 noundef 0, ptr noundef @.str.200, ptr noundef %call) #24
  %2 = load i32, ptr %__errstatus, align 4
  %cmp = icmp ne i32 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  unreachable

unreachable.cont:                                 ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %unreachable.cont
  call void @abort() #22
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xmemcoll(ptr noundef %s1, i64 noundef %s1len, ptr noundef %s2, i64 noundef %s2len) #3 {
entry:
  %s1.addr = alloca ptr, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca ptr, align 8
  %s2len.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  %collation_errno = alloca i32, align 4
  store ptr %s1, ptr %s1.addr, align 8
  store i64 %s1len, ptr %s1len.addr, align 8
  store ptr %s2, ptr %s2.addr, align 8
  store i64 %s2len, ptr %s2len.addr, align 8
  %0 = load ptr, ptr %s1.addr, align 8
  %1 = load i64, ptr %s1len.addr, align 8
  %2 = load ptr, ptr %s2.addr, align 8
  %3 = load i64, ptr %s2len.addr, align 8
  %call = call i32 @memcoll(ptr noundef %0, i64 noundef %1, ptr noundef %2, i64 noundef %3)
  store i32 %call, ptr %diff, align 4
  %call1 = call ptr @__errno_location() #26
  %4 = load i32, ptr %call1, align 4
  store i32 %4, ptr %collation_errno, align 4
  %5 = load i32, ptr %collation_errno, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, ptr %collation_errno, align 4
  %7 = load ptr, ptr %s1.addr, align 8
  %8 = load i64, ptr %s1len.addr, align 8
  %9 = load ptr, ptr %s2.addr, align 8
  %10 = load i64, ptr %s2len.addr, align 8
  call void @collate_error(i32 noundef %6, ptr noundef %7, i64 noundef %8, ptr noundef %9, i64 noundef %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load i32, ptr %diff, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @collate_error(i32 noundef %collation_errno, ptr noundef %s1, i64 noundef %s1len, ptr noundef %s2, i64 noundef %s2len) #3 {
entry:
  %collation_errno.addr = alloca i32, align 4
  %s1.addr = alloca ptr, align 8
  %s1len.addr = alloca i64, align 8
  %s2.addr = alloca ptr, align 8
  %s2len.addr = alloca i64, align 8
  %__errstatus = alloca i32, align 4
  store i32 %collation_errno, ptr %collation_errno.addr, align 4
  store ptr %s1, ptr %s1.addr, align 8
  store i64 %s1len, ptr %s1len.addr, align 8
  store ptr %s2, ptr %s2.addr, align 8
  store i64 %s2len, ptr %s2len.addr, align 8
  %0 = load i32, ptr %collation_errno.addr, align 4
  %call = call ptr @dgettext(ptr noundef @.str.1.203, ptr noundef @.str.2.204) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %0, ptr noundef @.str.205, ptr noundef %call) #24
  %call1 = call ptr @dgettext(ptr noundef @.str.1.203, ptr noundef @.str.3.206) #21
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef 0, ptr noundef @.str.205, ptr noundef %call1) #24
  %1 = load volatile i32, ptr @exit_failure, align 4
  store i32 %1, ptr %__errstatus, align 4
  %2 = load i32, ptr %__errstatus, align 4
  %call2 = call ptr @dgettext(ptr noundef @.str.1.203, ptr noundef @.str.4.207) #21
  %3 = load ptr, ptr %s1.addr, align 8
  %4 = load i64, ptr %s1len.addr, align 8
  %call3 = call ptr @quotearg_n_style_mem(i32 noundef 0, i32 noundef 8, ptr noundef %3, i64 noundef %4)
  %5 = load ptr, ptr %s2.addr, align 8
  %6 = load i64, ptr %s2len.addr, align 8
  %call4 = call ptr @quotearg_n_style_mem(i32 noundef 1, i32 noundef 8, ptr noundef %5, i64 noundef %6)
  call void (i32, i32, ptr, ...) @error(i32 noundef %2, i32 noundef 0, ptr noundef %call2, ptr noundef %call3, ptr noundef %call4) #24
  %7 = load i32, ptr %__errstatus, align 4
  %cmp = icmp ne i32 %7, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  unreachable

unreachable.cont:                                 ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %unreachable.cont
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xmemcoll0(ptr noundef %s1, i64 noundef %s1size, ptr noundef %s2, i64 noundef %s2size) #3 {
entry:
  %s1.addr = alloca ptr, align 8
  %s1size.addr = alloca i64, align 8
  %s2.addr = alloca ptr, align 8
  %s2size.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  %collation_errno = alloca i32, align 4
  store ptr %s1, ptr %s1.addr, align 8
  store i64 %s1size, ptr %s1size.addr, align 8
  store ptr %s2, ptr %s2.addr, align 8
  store i64 %s2size, ptr %s2size.addr, align 8
  %0 = load ptr, ptr %s1.addr, align 8
  %1 = load i64, ptr %s1size.addr, align 8
  %2 = load ptr, ptr %s2.addr, align 8
  %3 = load i64, ptr %s2size.addr, align 8
  %call = call i32 @memcoll0(ptr noundef %0, i64 noundef %1, ptr noundef %2, i64 noundef %3)
  store i32 %call, ptr %diff, align 4
  %call1 = call ptr @__errno_location() #26
  %4 = load i32, ptr %call1, align 4
  store i32 %4, ptr %collation_errno, align 4
  %5 = load i32, ptr %collation_errno, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, ptr %collation_errno, align 4
  %7 = load ptr, ptr %s1.addr, align 8
  %8 = load i64, ptr %s1size.addr, align 8
  %sub = sub i64 %8, 1
  %9 = load ptr, ptr %s2.addr, align 8
  %10 = load i64, ptr %s2size.addr, align 8
  %sub2 = sub i64 %10, 1
  call void @collate_error(i32 noundef %6, ptr noundef %7, i64 noundef %sub, ptr noundef %9, i64 noundef %sub2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load i32, ptr %diff, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xstrtoimax(ptr noundef %nptr, ptr noundef %endptr, i32 noundef %base, ptr noundef %val, ptr noundef %valid_suffixes) #3 {
entry:
  %retval = alloca i32, align 4
  %nptr.addr = alloca ptr, align 8
  %endptr.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %val.addr = alloca ptr, align 8
  %valid_suffixes.addr = alloca ptr, align 8
  %t_ptr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %tmp = alloca i64, align 8
  %err = alloca i32, align 4
  %xbase = alloca i32, align 4
  %suffixes = alloca i32, align 4
  %overflow = alloca i32, align 4
  store ptr %nptr, ptr %nptr.addr, align 8
  store ptr %endptr, ptr %endptr.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store ptr %val, ptr %val.addr, align 8
  store ptr %valid_suffixes, ptr %valid_suffixes.addr, align 8
  %0 = load ptr, ptr %endptr.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %endptr.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ %t_ptr, %cond.false ]
  store ptr %cond, ptr %p, align 8
  %call = call ptr @__errno_location() #26
  store i32 0, ptr %call, align 4
  %2 = load ptr, ptr %nptr.addr, align 8
  %3 = load ptr, ptr %p, align 8
  %4 = load i32, ptr %base.addr, align 4
  %call1 = call i64 @__isoc23_strtoimax(ptr noundef %2, ptr noundef %3, i32 noundef %4) #21
  store i64 %call1, ptr %tmp, align 8
  store i32 0, ptr %err, align 4
  %5 = load ptr, ptr %p, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr %nptr.addr, align 8
  %cmp = icmp eq ptr %6, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %8 = load ptr, ptr %valid_suffixes.addr, align 8
  %tobool2 = icmp ne ptr %8, null
  br i1 %tobool2, label %land.lhs.true, label %if.then8

land.lhs.true:                                    ; preds = %if.then
  %9 = load ptr, ptr %nptr.addr, align 8
  %10 = load i8, ptr %9, align 1
  %conv = sext i8 %10 to i32
  %tobool3 = icmp ne i32 %conv, 0
  br i1 %tobool3, label %land.lhs.true4, label %if.then8

land.lhs.true4:                                   ; preds = %land.lhs.true
  %11 = load ptr, ptr %valid_suffixes.addr, align 8
  %12 = load ptr, ptr %nptr.addr, align 8
  %13 = load i8, ptr %12, align 1
  %conv5 = sext i8 %13 to i32
  %call6 = call ptr @strchr(ptr noundef %11, i32 noundef %conv5) #23
  %tobool7 = icmp ne ptr %call6, null
  br i1 %tobool7, label %if.end, label %if.then8

if.then8:                                         ; preds = %land.lhs.true4, %land.lhs.true, %if.then
  store i32 4, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true4
  store i64 1, ptr %tmp, align 8
  br label %if.end19

if.else:                                          ; preds = %cond.end
  %call9 = call ptr @__errno_location() #26
  %14 = load i32, ptr %call9, align 4
  %cmp10 = icmp ne i32 %14, 0
  br i1 %cmp10, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.else
  %call13 = call ptr @__errno_location() #26
  %15 = load i32, ptr %call13, align 4
  %cmp14 = icmp ne i32 %15, 34
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.then12
  store i32 4, ptr %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.then12
  store i32 1, ptr %err, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end
  %16 = load ptr, ptr %valid_suffixes.addr, align 8
  %tobool20 = icmp ne ptr %16, null
  br i1 %tobool20, label %if.end22, label %if.then21

if.then21:                                        ; preds = %if.end19
  %17 = load i64, ptr %tmp, align 8
  %18 = load ptr, ptr %val.addr, align 8
  store i64 %17, ptr %18, align 8
  %19 = load i32, ptr %err, align 4
  store i32 %19, ptr %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end19
  %20 = load ptr, ptr %p, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = load i8, ptr %21, align 1
  %conv23 = sext i8 %22 to i32
  %cmp24 = icmp ne i32 %conv23, 0
  br i1 %cmp24, label %if.then26, label %if.end84

if.then26:                                        ; preds = %if.end22
  store i32 1024, ptr %xbase, align 4
  store i32 1, ptr %suffixes, align 4
  %23 = load ptr, ptr %valid_suffixes.addr, align 8
  %24 = load ptr, ptr %p, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = load i8, ptr %25, align 1
  %conv27 = sext i8 %26 to i32
  %call28 = call ptr @strchr(ptr noundef %23, i32 noundef %conv27) #23
  %tobool29 = icmp ne ptr %call28, null
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.then26
  %27 = load i64, ptr %tmp, align 8
  %28 = load ptr, ptr %val.addr, align 8
  store i64 %27, ptr %28, align 8
  %29 = load i32, ptr %err, align 4
  %or = or i32 %29, 2
  store i32 %or, ptr %retval, align 4
  br label %return

if.end31:                                         ; preds = %if.then26
  %30 = load ptr, ptr %p, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = load i8, ptr %31, align 1
  %conv32 = sext i8 %32 to i32
  switch i32 %conv32, label %sw.epilog48 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31
  %33 = load ptr, ptr %valid_suffixes.addr, align 8
  %call33 = call ptr @strchr(ptr noundef %33, i32 noundef 48) #23
  %tobool34 = icmp ne ptr %call33, null
  br i1 %tobool34, label %if.then35, label %if.end47

if.then35:                                        ; preds = %sw.bb
  %34 = load ptr, ptr %p, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %34, i64 0
  %35 = load ptr, ptr %arrayidx, align 8
  %arrayidx36 = getelementptr inbounds i8, ptr %35, i64 1
  %36 = load i8, ptr %arrayidx36, align 1
  %conv37 = sext i8 %36 to i32
  switch i32 %conv37, label %sw.epilog [
    i32 105, label %sw.bb38
    i32 66, label %sw.bb46
    i32 68, label %sw.bb46
  ]

sw.bb38:                                          ; preds = %if.then35
  %37 = load ptr, ptr %p, align 8
  %arrayidx39 = getelementptr inbounds ptr, ptr %37, i64 0
  %38 = load ptr, ptr %arrayidx39, align 8
  %arrayidx40 = getelementptr inbounds i8, ptr %38, i64 2
  %39 = load i8, ptr %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %cmp42 = icmp eq i32 %conv41, 66
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %sw.bb38
  %40 = load i32, ptr %suffixes, align 4
  %add = add nsw i32 %40, 2
  store i32 %add, ptr %suffixes, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %sw.bb38
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.then35, %if.then35
  store i32 1000, ptr %xbase, align 4
  %41 = load i32, ptr %suffixes, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, ptr %suffixes, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb46, %if.end45, %if.then35
  br label %if.end47

if.end47:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog48

sw.epilog48:                                      ; preds = %if.end47, %if.end31
  %42 = load ptr, ptr %p, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = load i8, ptr %43, align 1
  %conv49 = sext i8 %44 to i32
  switch i32 %conv49, label %sw.default [
    i32 98, label %sw.bb50
    i32 66, label %sw.bb52
    i32 99, label %sw.bb54
    i32 69, label %sw.bb55
    i32 71, label %sw.bb57
    i32 103, label %sw.bb57
    i32 107, label %sw.bb59
    i32 75, label %sw.bb59
    i32 77, label %sw.bb61
    i32 109, label %sw.bb61
    i32 80, label %sw.bb63
    i32 81, label %sw.bb65
    i32 82, label %sw.bb67
    i32 84, label %sw.bb69
    i32 116, label %sw.bb69
    i32 119, label %sw.bb71
    i32 89, label %sw.bb73
    i32 90, label %sw.bb75
  ]

sw.bb50:                                          ; preds = %sw.epilog48
  %call51 = call i32 @bkm_scale(ptr noundef %tmp, i32 noundef 512)
  store i32 %call51, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb52:                                          ; preds = %sw.epilog48
  %call53 = call i32 @bkm_scale(ptr noundef %tmp, i32 noundef 1024)
  store i32 %call53, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb54:                                          ; preds = %sw.epilog48
  store i32 0, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb55:                                          ; preds = %sw.epilog48
  %45 = load i32, ptr %xbase, align 4
  %call56 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %45, i32 noundef 6)
  store i32 %call56, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb57:                                          ; preds = %sw.epilog48, %sw.epilog48
  %46 = load i32, ptr %xbase, align 4
  %call58 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %46, i32 noundef 3)
  store i32 %call58, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb59:                                          ; preds = %sw.epilog48, %sw.epilog48
  %47 = load i32, ptr %xbase, align 4
  %call60 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %47, i32 noundef 1)
  store i32 %call60, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb61:                                          ; preds = %sw.epilog48, %sw.epilog48
  %48 = load i32, ptr %xbase, align 4
  %call62 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %48, i32 noundef 2)
  store i32 %call62, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb63:                                          ; preds = %sw.epilog48
  %49 = load i32, ptr %xbase, align 4
  %call64 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %49, i32 noundef 5)
  store i32 %call64, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb65:                                          ; preds = %sw.epilog48
  %50 = load i32, ptr %xbase, align 4
  %call66 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %50, i32 noundef 10)
  store i32 %call66, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb67:                                          ; preds = %sw.epilog48
  %51 = load i32, ptr %xbase, align 4
  %call68 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %51, i32 noundef 9)
  store i32 %call68, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb69:                                          ; preds = %sw.epilog48, %sw.epilog48
  %52 = load i32, ptr %xbase, align 4
  %call70 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %52, i32 noundef 4)
  store i32 %call70, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb71:                                          ; preds = %sw.epilog48
  %call72 = call i32 @bkm_scale(ptr noundef %tmp, i32 noundef 2)
  store i32 %call72, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb73:                                          ; preds = %sw.epilog48
  %53 = load i32, ptr %xbase, align 4
  %call74 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %53, i32 noundef 8)
  store i32 %call74, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb75:                                          ; preds = %sw.epilog48
  %54 = load i32, ptr %xbase, align 4
  %call76 = call i32 @bkm_scale_by_power(ptr noundef %tmp, i32 noundef %54, i32 noundef 7)
  store i32 %call76, ptr %overflow, align 4
  br label %sw.epilog78

sw.default:                                       ; preds = %sw.epilog48
  %55 = load i64, ptr %tmp, align 8
  %56 = load ptr, ptr %val.addr, align 8
  store i64 %55, ptr %56, align 8
  %57 = load i32, ptr %err, align 4
  %or77 = or i32 %57, 2
  store i32 %or77, ptr %retval, align 4
  br label %return

sw.epilog78:                                      ; preds = %sw.bb75, %sw.bb73, %sw.bb71, %sw.bb69, %sw.bb67, %sw.bb65, %sw.bb63, %sw.bb61, %sw.bb59, %sw.bb57, %sw.bb55, %sw.bb54, %sw.bb52, %sw.bb50
  %58 = load i32, ptr %overflow, align 4
  %59 = load i32, ptr %err, align 4
  %or79 = or i32 %59, %58
  store i32 %or79, ptr %err, align 4
  %60 = load i32, ptr %suffixes, align 4
  %61 = load ptr, ptr %p, align 8
  %62 = load ptr, ptr %61, align 8
  %idx.ext = sext i32 %60 to i64
  %add.ptr = getelementptr inbounds i8, ptr %62, i64 %idx.ext
  store ptr %add.ptr, ptr %61, align 8
  %63 = load ptr, ptr %p, align 8
  %64 = load ptr, ptr %63, align 8
  %65 = load i8, ptr %64, align 1
  %tobool80 = icmp ne i8 %65, 0
  br i1 %tobool80, label %if.then81, label %if.end83

if.then81:                                        ; preds = %sw.epilog78
  %66 = load i32, ptr %err, align 4
  %or82 = or i32 %66, 2
  store i32 %or82, ptr %err, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.then81, %sw.epilog78
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end22
  %67 = load i64, ptr %tmp, align 8
  %68 = load ptr, ptr %val.addr, align 8
  store i64 %67, ptr %68, align 8
  %69 = load i32, ptr %err, align 4
  store i32 %69, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end84, %sw.default, %if.then30, %if.then21, %if.then16, %if.then8
  %70 = load i32, ptr %retval, align 4
  ret i32 %70
}

; Function Attrs: nounwind
declare i64 @__isoc23_strtoimax(ptr noundef, ptr noundef, i32 noundef) #1

; Function Attrs: nounwind willreturn memory(read)
declare ptr @strchr(ptr noundef, i32 noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale(ptr noundef %x, i32 noundef %scale_factor) #3 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca ptr, align 8
  %scale_factor.addr = alloca i32, align 4
  %scaled = alloca i64, align 8
  store ptr %x, ptr %x.addr, align 8
  store i32 %scale_factor, ptr %scale_factor.addr, align 4
  %0 = load ptr, ptr %x.addr, align 8
  %1 = load i64, ptr %0, align 8
  %2 = load i32, ptr %scale_factor.addr, align 4
  %3 = sext i32 %2 to i64
  %4 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %3)
  %5 = extractvalue { i64, i1 } %4, 1
  %6 = extractvalue { i64, i1 } %4, 0
  store i64 %6, ptr %scaled, align 8
  br i1 %5, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load ptr, ptr %x.addr, align 8
  %8 = load i64, ptr %7, align 8
  %cmp = icmp slt i64 %8, 0
  %9 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i64 -9223372036854775808, i64 9223372036854775807
  %10 = load ptr, ptr %x.addr, align 8
  store i64 %cond, ptr %10, align 8
  store i32 1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %11 = load i64, ptr %scaled, align 8
  %12 = load ptr, ptr %x.addr, align 8
  store i64 %11, ptr %12, align 8
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i32, ptr %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power(ptr noundef %x, i32 noundef %base, i32 noundef %power) #3 {
entry:
  %x.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4
  store ptr %x, ptr %x.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store i32 %power, ptr %power.addr, align 4
  store i32 0, ptr %err, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, ptr %power.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, ptr %power.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load ptr, ptr %x.addr, align 8
  %2 = load i32, ptr %base.addr, align 4
  %call = call i32 @bkm_scale(ptr noundef %1, i32 noundef %2)
  %3 = load i32, ptr %err, align 4
  %or = or i32 %3, %call
  store i32 %or, ptr %err, align 4
  br label %while.cond, !llvm.loop !60

while.end:                                        ; preds = %while.cond
  %4 = load i32, ptr %err, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xstrtol(ptr noundef %nptr, ptr noundef %endptr, i32 noundef %base, ptr noundef %val, ptr noundef %valid_suffixes) #3 {
entry:
  %retval = alloca i32, align 4
  %nptr.addr = alloca ptr, align 8
  %endptr.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %val.addr = alloca ptr, align 8
  %valid_suffixes.addr = alloca ptr, align 8
  %t_ptr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %tmp = alloca i64, align 8
  %err = alloca i32, align 4
  %xbase = alloca i32, align 4
  %suffixes = alloca i32, align 4
  %overflow = alloca i32, align 4
  store ptr %nptr, ptr %nptr.addr, align 8
  store ptr %endptr, ptr %endptr.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store ptr %val, ptr %val.addr, align 8
  store ptr %valid_suffixes, ptr %valid_suffixes.addr, align 8
  %0 = load ptr, ptr %endptr.addr, align 8
  %tobool = icmp ne ptr %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %endptr.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %1, %cond.true ], [ %t_ptr, %cond.false ]
  store ptr %cond, ptr %p, align 8
  %call = call ptr @__errno_location() #26
  store i32 0, ptr %call, align 4
  %2 = load ptr, ptr %nptr.addr, align 8
  %3 = load ptr, ptr %p, align 8
  %4 = load i32, ptr %base.addr, align 4
  %call1 = call i64 @__isoc23_strtol(ptr noundef %2, ptr noundef %3, i32 noundef %4) #21
  store i64 %call1, ptr %tmp, align 8
  store i32 0, ptr %err, align 4
  %5 = load ptr, ptr %p, align 8
  %6 = load ptr, ptr %5, align 8
  %7 = load ptr, ptr %nptr.addr, align 8
  %cmp = icmp eq ptr %6, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %8 = load ptr, ptr %valid_suffixes.addr, align 8
  %tobool2 = icmp ne ptr %8, null
  br i1 %tobool2, label %land.lhs.true, label %if.then8

land.lhs.true:                                    ; preds = %if.then
  %9 = load ptr, ptr %nptr.addr, align 8
  %10 = load i8, ptr %9, align 1
  %conv = sext i8 %10 to i32
  %tobool3 = icmp ne i32 %conv, 0
  br i1 %tobool3, label %land.lhs.true4, label %if.then8

land.lhs.true4:                                   ; preds = %land.lhs.true
  %11 = load ptr, ptr %valid_suffixes.addr, align 8
  %12 = load ptr, ptr %nptr.addr, align 8
  %13 = load i8, ptr %12, align 1
  %conv5 = sext i8 %13 to i32
  %call6 = call ptr @strchr(ptr noundef %11, i32 noundef %conv5) #23
  %tobool7 = icmp ne ptr %call6, null
  br i1 %tobool7, label %if.end, label %if.then8

if.then8:                                         ; preds = %land.lhs.true4, %land.lhs.true, %if.then
  store i32 4, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true4
  store i64 1, ptr %tmp, align 8
  br label %if.end19

if.else:                                          ; preds = %cond.end
  %call9 = call ptr @__errno_location() #26
  %14 = load i32, ptr %call9, align 4
  %cmp10 = icmp ne i32 %14, 0
  br i1 %cmp10, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.else
  %call13 = call ptr @__errno_location() #26
  %15 = load i32, ptr %call13, align 4
  %cmp14 = icmp ne i32 %15, 34
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.then12
  store i32 4, ptr %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.then12
  store i32 1, ptr %err, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end
  %16 = load ptr, ptr %valid_suffixes.addr, align 8
  %tobool20 = icmp ne ptr %16, null
  br i1 %tobool20, label %if.end22, label %if.then21

if.then21:                                        ; preds = %if.end19
  %17 = load i64, ptr %tmp, align 8
  %18 = load ptr, ptr %val.addr, align 8
  store i64 %17, ptr %18, align 8
  %19 = load i32, ptr %err, align 4
  store i32 %19, ptr %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end19
  %20 = load ptr, ptr %p, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = load i8, ptr %21, align 1
  %conv23 = sext i8 %22 to i32
  %cmp24 = icmp ne i32 %conv23, 0
  br i1 %cmp24, label %if.then26, label %if.end84

if.then26:                                        ; preds = %if.end22
  store i32 1024, ptr %xbase, align 4
  store i32 1, ptr %suffixes, align 4
  %23 = load ptr, ptr %valid_suffixes.addr, align 8
  %24 = load ptr, ptr %p, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = load i8, ptr %25, align 1
  %conv27 = sext i8 %26 to i32
  %call28 = call ptr @strchr(ptr noundef %23, i32 noundef %conv27) #23
  %tobool29 = icmp ne ptr %call28, null
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.then26
  %27 = load i64, ptr %tmp, align 8
  %28 = load ptr, ptr %val.addr, align 8
  store i64 %27, ptr %28, align 8
  %29 = load i32, ptr %err, align 4
  %or = or i32 %29, 2
  store i32 %or, ptr %retval, align 4
  br label %return

if.end31:                                         ; preds = %if.then26
  %30 = load ptr, ptr %p, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = load i8, ptr %31, align 1
  %conv32 = sext i8 %32 to i32
  switch i32 %conv32, label %sw.epilog48 [
    i32 69, label %sw.bb
    i32 71, label %sw.bb
    i32 103, label %sw.bb
    i32 107, label %sw.bb
    i32 75, label %sw.bb
    i32 77, label %sw.bb
    i32 109, label %sw.bb
    i32 80, label %sw.bb
    i32 81, label %sw.bb
    i32 82, label %sw.bb
    i32 84, label %sw.bb
    i32 116, label %sw.bb
    i32 89, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31, %if.end31
  %33 = load ptr, ptr %valid_suffixes.addr, align 8
  %call33 = call ptr @strchr(ptr noundef %33, i32 noundef 48) #23
  %tobool34 = icmp ne ptr %call33, null
  br i1 %tobool34, label %if.then35, label %if.end47

if.then35:                                        ; preds = %sw.bb
  %34 = load ptr, ptr %p, align 8
  %arrayidx = getelementptr inbounds ptr, ptr %34, i64 0
  %35 = load ptr, ptr %arrayidx, align 8
  %arrayidx36 = getelementptr inbounds i8, ptr %35, i64 1
  %36 = load i8, ptr %arrayidx36, align 1
  %conv37 = sext i8 %36 to i32
  switch i32 %conv37, label %sw.epilog [
    i32 105, label %sw.bb38
    i32 66, label %sw.bb46
    i32 68, label %sw.bb46
  ]

sw.bb38:                                          ; preds = %if.then35
  %37 = load ptr, ptr %p, align 8
  %arrayidx39 = getelementptr inbounds ptr, ptr %37, i64 0
  %38 = load ptr, ptr %arrayidx39, align 8
  %arrayidx40 = getelementptr inbounds i8, ptr %38, i64 2
  %39 = load i8, ptr %arrayidx40, align 1
  %conv41 = sext i8 %39 to i32
  %cmp42 = icmp eq i32 %conv41, 66
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %sw.bb38
  %40 = load i32, ptr %suffixes, align 4
  %add = add nsw i32 %40, 2
  store i32 %add, ptr %suffixes, align 4
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %sw.bb38
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.then35, %if.then35
  store i32 1000, ptr %xbase, align 4
  %41 = load i32, ptr %suffixes, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, ptr %suffixes, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb46, %if.end45, %if.then35
  br label %if.end47

if.end47:                                         ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog48

sw.epilog48:                                      ; preds = %if.end47, %if.end31
  %42 = load ptr, ptr %p, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = load i8, ptr %43, align 1
  %conv49 = sext i8 %44 to i32
  switch i32 %conv49, label %sw.default [
    i32 98, label %sw.bb50
    i32 66, label %sw.bb52
    i32 99, label %sw.bb54
    i32 69, label %sw.bb55
    i32 71, label %sw.bb57
    i32 103, label %sw.bb57
    i32 107, label %sw.bb59
    i32 75, label %sw.bb59
    i32 77, label %sw.bb61
    i32 109, label %sw.bb61
    i32 80, label %sw.bb63
    i32 81, label %sw.bb65
    i32 82, label %sw.bb67
    i32 84, label %sw.bb69
    i32 116, label %sw.bb69
    i32 119, label %sw.bb71
    i32 89, label %sw.bb73
    i32 90, label %sw.bb75
  ]

sw.bb50:                                          ; preds = %sw.epilog48
  %call51 = call i32 @bkm_scale.212(ptr noundef %tmp, i32 noundef 512)
  store i32 %call51, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb52:                                          ; preds = %sw.epilog48
  %call53 = call i32 @bkm_scale.212(ptr noundef %tmp, i32 noundef 1024)
  store i32 %call53, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb54:                                          ; preds = %sw.epilog48
  store i32 0, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb55:                                          ; preds = %sw.epilog48
  %45 = load i32, ptr %xbase, align 4
  %call56 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %45, i32 noundef 6)
  store i32 %call56, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb57:                                          ; preds = %sw.epilog48, %sw.epilog48
  %46 = load i32, ptr %xbase, align 4
  %call58 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %46, i32 noundef 3)
  store i32 %call58, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb59:                                          ; preds = %sw.epilog48, %sw.epilog48
  %47 = load i32, ptr %xbase, align 4
  %call60 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %47, i32 noundef 1)
  store i32 %call60, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb61:                                          ; preds = %sw.epilog48, %sw.epilog48
  %48 = load i32, ptr %xbase, align 4
  %call62 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %48, i32 noundef 2)
  store i32 %call62, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb63:                                          ; preds = %sw.epilog48
  %49 = load i32, ptr %xbase, align 4
  %call64 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %49, i32 noundef 5)
  store i32 %call64, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb65:                                          ; preds = %sw.epilog48
  %50 = load i32, ptr %xbase, align 4
  %call66 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %50, i32 noundef 10)
  store i32 %call66, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb67:                                          ; preds = %sw.epilog48
  %51 = load i32, ptr %xbase, align 4
  %call68 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %51, i32 noundef 9)
  store i32 %call68, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb69:                                          ; preds = %sw.epilog48, %sw.epilog48
  %52 = load i32, ptr %xbase, align 4
  %call70 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %52, i32 noundef 4)
  store i32 %call70, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb71:                                          ; preds = %sw.epilog48
  %call72 = call i32 @bkm_scale.212(ptr noundef %tmp, i32 noundef 2)
  store i32 %call72, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb73:                                          ; preds = %sw.epilog48
  %53 = load i32, ptr %xbase, align 4
  %call74 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %53, i32 noundef 8)
  store i32 %call74, ptr %overflow, align 4
  br label %sw.epilog78

sw.bb75:                                          ; preds = %sw.epilog48
  %54 = load i32, ptr %xbase, align 4
  %call76 = call i32 @bkm_scale_by_power.213(ptr noundef %tmp, i32 noundef %54, i32 noundef 7)
  store i32 %call76, ptr %overflow, align 4
  br label %sw.epilog78

sw.default:                                       ; preds = %sw.epilog48
  %55 = load i64, ptr %tmp, align 8
  %56 = load ptr, ptr %val.addr, align 8
  store i64 %55, ptr %56, align 8
  %57 = load i32, ptr %err, align 4
  %or77 = or i32 %57, 2
  store i32 %or77, ptr %retval, align 4
  br label %return

sw.epilog78:                                      ; preds = %sw.bb75, %sw.bb73, %sw.bb71, %sw.bb69, %sw.bb67, %sw.bb65, %sw.bb63, %sw.bb61, %sw.bb59, %sw.bb57, %sw.bb55, %sw.bb54, %sw.bb52, %sw.bb50
  %58 = load i32, ptr %overflow, align 4
  %59 = load i32, ptr %err, align 4
  %or79 = or i32 %59, %58
  store i32 %or79, ptr %err, align 4
  %60 = load i32, ptr %suffixes, align 4
  %61 = load ptr, ptr %p, align 8
  %62 = load ptr, ptr %61, align 8
  %idx.ext = sext i32 %60 to i64
  %add.ptr = getelementptr inbounds i8, ptr %62, i64 %idx.ext
  store ptr %add.ptr, ptr %61, align 8
  %63 = load ptr, ptr %p, align 8
  %64 = load ptr, ptr %63, align 8
  %65 = load i8, ptr %64, align 1
  %tobool80 = icmp ne i8 %65, 0
  br i1 %tobool80, label %if.then81, label %if.end83

if.then81:                                        ; preds = %sw.epilog78
  %66 = load i32, ptr %err, align 4
  %or82 = or i32 %66, 2
  store i32 %or82, ptr %err, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.then81, %sw.epilog78
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end22
  %67 = load i64, ptr %tmp, align 8
  %68 = load ptr, ptr %val.addr, align 8
  store i64 %67, ptr %68, align 8
  %69 = load i32, ptr %err, align 4
  store i32 %69, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end84, %sw.default, %if.then30, %if.then21, %if.then16, %if.then8
  %70 = load i32, ptr %retval, align 4
  ret i32 %70
}

; Function Attrs: nounwind
declare i64 @__isoc23_strtol(ptr noundef, ptr noundef, i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale.212(ptr noundef %x, i32 noundef %scale_factor) #3 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca ptr, align 8
  %scale_factor.addr = alloca i32, align 4
  %scaled = alloca i64, align 8
  store ptr %x, ptr %x.addr, align 8
  store i32 %scale_factor, ptr %scale_factor.addr, align 4
  %0 = load ptr, ptr %x.addr, align 8
  %1 = load i64, ptr %0, align 8
  %2 = load i32, ptr %scale_factor.addr, align 4
  %3 = sext i32 %2 to i64
  %4 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %1, i64 %3)
  %5 = extractvalue { i64, i1 } %4, 1
  %6 = extractvalue { i64, i1 } %4, 0
  store i64 %6, ptr %scaled, align 8
  br i1 %5, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load ptr, ptr %x.addr, align 8
  %8 = load i64, ptr %7, align 8
  %cmp = icmp slt i64 %8, 0
  %9 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i64 -9223372036854775808, i64 9223372036854775807
  %10 = load ptr, ptr %x.addr, align 8
  store i64 %cond, ptr %10, align 8
  store i32 1, ptr %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %11 = load i64, ptr %scaled, align 8
  %12 = load ptr, ptr %x.addr, align 8
  store i64 %11, ptr %12, align 8
  store i32 0, ptr %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i32, ptr %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power.213(ptr noundef %x, i32 noundef %base, i32 noundef %power) #3 {
entry:
  %x.addr = alloca ptr, align 8
  %base.addr = alloca i32, align 4
  %power.addr = alloca i32, align 4
  %err = alloca i32, align 4
  store ptr %x, ptr %x.addr, align 8
  store i32 %base, ptr %base.addr, align 4
  store i32 %power, ptr %power.addr, align 4
  store i32 0, ptr %err, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, ptr %power.addr, align 4
  %dec = add nsw i32 %0, -1
  store i32 %dec, ptr %power.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load ptr, ptr %x.addr, align 8
  %2 = load i32, ptr %base.addr, align 4
  %call = call i32 @bkm_scale.212(ptr noundef %1, i32 noundef %2)
  %3 = load i32, ptr %err, align 4
  %or = or i32 %3, %call
  store i32 %or, ptr %err, align 4
  br label %while.cond, !llvm.loop !61

while.end:                                        ; preds = %while.cond
  %4 = load i32, ptr %err, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @yyparse(ptr noundef %pc) #3 {
entry:
  %pc.addr = alloca ptr, align 8
  %yychar = alloca i32, align 4
  %yylval = alloca %union.YYSTYPE, align 8
  %yynerrs = alloca i32, align 4
  %yystate = alloca i32, align 4
  %yyerrstatus = alloca i32, align 4
  %yystacksize = alloca i64, align 8
  %yyssa = alloca [20 x i8], align 16
  %yyss = alloca ptr, align 8
  %yyssp = alloca ptr, align 8
  %yyvsa = alloca [20 x %union.YYSTYPE], align 16
  %yyvs = alloca ptr, align 8
  %yyvsp = alloca ptr, align 8
  %yyn = alloca i32, align 4
  %yyresult = alloca i32, align 4
  %yytoken = alloca i32, align 4
  %yyval = alloca %union.YYSTYPE, align 8
  %yylen = alloca i32, align 4
  %yysize = alloca i64, align 8
  %yyss1 = alloca ptr, align 8
  %yyptr = alloca ptr, align 8
  %yynewbytes = alloca i64, align 8
  %yynewbytes20 = alloca i64, align 8
  %digits274 = alloca i64, align 8
  %.compoundliteral = alloca %struct.relative_time, align 8
  %.compoundliteral404 = alloca %struct.relative_time, align 8
  %.compoundliteral413 = alloca %struct.relative_time, align 8
  %.compoundliteral420 = alloca %struct.relative_time, align 8
  %.compoundliteral428 = alloca %struct.relative_time, align 8
  %.compoundliteral437 = alloca %struct.relative_time, align 8
  %.compoundliteral444 = alloca %struct.relative_time, align 8
  %.compoundliteral455 = alloca %struct.relative_time, align 8
  %.compoundliteral467 = alloca %struct.relative_time, align 8
  %.compoundliteral475 = alloca %struct.relative_time, align 8
  %.compoundliteral482 = alloca %struct.relative_time, align 8
  %.compoundliteral492 = alloca %struct.relative_time, align 8
  %.compoundliteral500 = alloca %struct.relative_time, align 8
  %.compoundliteral508 = alloca %struct.relative_time, align 8
  %.compoundliteral519 = alloca %struct.relative_time, align 8
  %.compoundliteral528 = alloca %struct.relative_time, align 8
  %.compoundliteral538 = alloca %struct.relative_time, align 8
  %.compoundliteral549 = alloca %struct.relative_time, align 8
  %.compoundliteral563 = alloca %struct.relative_time, align 8
  %.compoundliteral579 = alloca %struct.relative_time, align 8
  %.compoundliteral589 = alloca %struct.relative_time, align 8
  %.compoundliteral601 = alloca %struct.relative_time, align 8
  %.compoundliteral613 = alloca %struct.relative_time, align 8
  %.compoundliteral628 = alloca %struct.relative_time, align 8
  %.compoundliteral640 = alloca %struct.relative_time, align 8
  %.compoundliteral652 = alloca %struct.relative_time, align 8
  %.compoundliteral664 = alloca %struct.relative_time, align 8
  %.compoundliteral680 = alloca %struct.timespec, align 8
  %.compoundliteral691 = alloca %struct.timespec, align 8
  %yylhs = alloca i32, align 4
  %yyi = alloca i32, align 4
  store ptr %pc, ptr %pc.addr, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yylval, ptr align 8 @yyparse.yyval_default, i64 56, i1 false)
  store i32 0, ptr %yynerrs, align 4
  store i32 0, ptr %yystate, align 4
  store i32 0, ptr %yyerrstatus, align 4
  store i64 20, ptr %yystacksize, align 8
  %arraydecay = getelementptr inbounds [20 x i8], ptr %yyssa, i64 0, i64 0
  store ptr %arraydecay, ptr %yyss, align 8
  %0 = load ptr, ptr %yyss, align 8
  store ptr %0, ptr %yyssp, align 8
  %arraydecay1 = getelementptr inbounds [20 x %union.YYSTYPE], ptr %yyvsa, i64 0, i64 0
  store ptr %arraydecay1, ptr %yyvs, align 8
  %1 = load ptr, ptr %yyvs, align 8
  store ptr %1, ptr %yyvsp, align 8
  store i32 -2, ptr %yytoken, align 4
  store i32 0, ptr %yylen, align 4
  store i32 -2, ptr %yychar, align 4
  br label %yysetstate

yynewstate:                                       ; preds = %for.end, %cond.end742, %if.end95
  %2 = load ptr, ptr %yyssp, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %2, i32 1
  store ptr %incdec.ptr, ptr %yyssp, align 8
  br label %yysetstate

yysetstate:                                       ; preds = %yynewstate, %entry
  %3 = load i32, ptr %yystate, align 4
  %conv = trunc i32 %3 to i8
  %4 = load ptr, ptr %yyssp, align 8
  store i8 %conv, ptr %4, align 1
  %5 = load ptr, ptr %yyss, align 8
  %6 = load i64, ptr %yystacksize, align 8
  %add.ptr = getelementptr inbounds i8, ptr %5, i64 %6
  %add.ptr2 = getelementptr inbounds i8, ptr %add.ptr, i64 -1
  %7 = load ptr, ptr %yyssp, align 8
  %cmp = icmp ule ptr %add.ptr2, %7
  br i1 %cmp, label %if.then, label %if.end42

if.then:                                          ; preds = %yysetstate
  %8 = load ptr, ptr %yyssp, align 8
  %9 = load ptr, ptr %yyss, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %8 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add = add nsw i64 %sub.ptr.sub, 1
  store i64 %add, ptr %yysize, align 8
  %10 = load i64, ptr %yystacksize, align 8
  %cmp4 = icmp sle i64 20, %10
  br i1 %cmp4, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then
  br label %yyexhaustedlab

if.end:                                           ; preds = %if.then
  %11 = load i64, ptr %yystacksize, align 8
  %mul = mul nsw i64 %11, 2
  store i64 %mul, ptr %yystacksize, align 8
  %12 = load i64, ptr %yystacksize, align 8
  %cmp7 = icmp slt i64 20, %12
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i64 20, ptr %yystacksize, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end
  %13 = load ptr, ptr %yyss, align 8
  store ptr %13, ptr %yyss1, align 8
  %14 = load i64, ptr %yystacksize, align 8
  %mul11 = mul nsw i64 %14, 57
  %add12 = add nsw i64 %mul11, 55
  %call = call noalias ptr @malloc(i64 noundef %add12) #29
  store ptr %call, ptr %yyptr, align 8
  %15 = load ptr, ptr %yyptr, align 8
  %tobool = icmp ne ptr %15, null
  br i1 %tobool, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end10
  br label %yyexhaustedlab

if.end14:                                         ; preds = %if.end10
  br label %do.body

do.body:                                          ; preds = %if.end14
  %16 = load ptr, ptr %yyptr, align 8
  %17 = load ptr, ptr %yyss, align 8
  %18 = load i64, ptr %yysize, align 8
  %mul15 = mul i64 %18, 1
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %16, ptr align 1 %17, i64 %mul15, i1 false)
  %19 = load ptr, ptr %yyptr, align 8
  store ptr %19, ptr %yyss, align 8
  %20 = load i64, ptr %yystacksize, align 8
  %mul16 = mul nsw i64 %20, 1
  %add17 = add nsw i64 %mul16, 55
  store i64 %add17, ptr %yynewbytes, align 8
  %21 = load i64, ptr %yynewbytes, align 8
  %div = sdiv i64 %21, 56
  %22 = load ptr, ptr %yyptr, align 8
  %add.ptr18 = getelementptr inbounds %union.yyalloc, ptr %22, i64 %div
  store ptr %add.ptr18, ptr %yyptr, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body19

do.body19:                                        ; preds = %do.end
  %23 = load ptr, ptr %yyptr, align 8
  %24 = load ptr, ptr %yyvs, align 8
  %25 = load i64, ptr %yysize, align 8
  %mul21 = mul i64 %25, 56
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %23, ptr align 8 %24, i64 %mul21, i1 false)
  %26 = load ptr, ptr %yyptr, align 8
  store ptr %26, ptr %yyvs, align 8
  %27 = load i64, ptr %yystacksize, align 8
  %mul22 = mul nsw i64 %27, 56
  %add23 = add nsw i64 %mul22, 55
  store i64 %add23, ptr %yynewbytes20, align 8
  %28 = load i64, ptr %yynewbytes20, align 8
  %div24 = sdiv i64 %28, 56
  %29 = load ptr, ptr %yyptr, align 8
  %add.ptr25 = getelementptr inbounds %union.yyalloc, ptr %29, i64 %div24
  store ptr %add.ptr25, ptr %yyptr, align 8
  br label %do.end26

do.end26:                                         ; preds = %do.body19
  %30 = load ptr, ptr %yyss1, align 8
  %arraydecay27 = getelementptr inbounds [20 x i8], ptr %yyssa, i64 0, i64 0
  %cmp28 = icmp ne ptr %30, %arraydecay27
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %do.end26
  %31 = load ptr, ptr %yyss1, align 8
  call void @free(ptr noundef %31) #21
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %do.end26
  %32 = load ptr, ptr %yyss, align 8
  %33 = load i64, ptr %yysize, align 8
  %add.ptr32 = getelementptr inbounds i8, ptr %32, i64 %33
  %add.ptr33 = getelementptr inbounds i8, ptr %add.ptr32, i64 -1
  store ptr %add.ptr33, ptr %yyssp, align 8
  %34 = load ptr, ptr %yyvs, align 8
  %35 = load i64, ptr %yysize, align 8
  %add.ptr34 = getelementptr inbounds %union.YYSTYPE, ptr %34, i64 %35
  %add.ptr35 = getelementptr inbounds %union.YYSTYPE, ptr %add.ptr34, i64 -1
  store ptr %add.ptr35, ptr %yyvsp, align 8
  %36 = load ptr, ptr %yyss, align 8
  %37 = load i64, ptr %yystacksize, align 8
  %add.ptr36 = getelementptr inbounds i8, ptr %36, i64 %37
  %add.ptr37 = getelementptr inbounds i8, ptr %add.ptr36, i64 -1
  %38 = load ptr, ptr %yyssp, align 8
  %cmp38 = icmp ule ptr %add.ptr37, %38
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.end31
  br label %yyabortlab

if.end41:                                         ; preds = %if.end31
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %yysetstate
  %39 = load i32, ptr %yystate, align 4
  %cmp43 = icmp eq i32 %39, 12
  br i1 %cmp43, label %if.then45, label %if.end46

if.then45:                                        ; preds = %if.end42
  br label %yyacceptlab

if.end46:                                         ; preds = %if.end42
  br label %yybackup

yybackup:                                         ; preds = %if.end46
  %40 = load i32, ptr %yystate, align 4
  %idxprom = sext i32 %40 to i64
  %arrayidx = getelementptr inbounds [115 x i8], ptr @yypact, i64 0, i64 %idxprom
  %41 = load i8, ptr %arrayidx, align 1
  %conv47 = sext i8 %41 to i32
  store i32 %conv47, ptr %yyn, align 4
  %42 = load i32, ptr %yyn, align 4
  %cmp48 = icmp eq i32 %42, -91
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %yybackup
  br label %yydefault

if.end51:                                         ; preds = %yybackup
  %43 = load i32, ptr %yychar, align 4
  %cmp52 = icmp eq i32 %43, -2
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %if.end51
  %44 = load ptr, ptr %pc.addr, align 8
  %call55 = call i32 @yylex(ptr noundef %yylval, ptr noundef %44)
  store i32 %call55, ptr %yychar, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %if.end51
  %45 = load i32, ptr %yychar, align 4
  %cmp57 = icmp sle i32 %45, 0
  br i1 %cmp57, label %if.then59, label %if.else

if.then59:                                        ; preds = %if.end56
  store i32 0, ptr %yychar, align 4
  store i32 0, ptr %yytoken, align 4
  br label %if.end72

if.else:                                          ; preds = %if.end56
  %46 = load i32, ptr %yychar, align 4
  %cmp60 = icmp eq i32 %46, 256
  br i1 %cmp60, label %if.then62, label %if.else63

if.then62:                                        ; preds = %if.else
  store i32 257, ptr %yychar, align 4
  store i32 1, ptr %yytoken, align 4
  br label %yyerrlab1

if.else63:                                        ; preds = %if.else
  %47 = load i32, ptr %yychar, align 4
  %cmp64 = icmp sle i32 0, %47
  br i1 %cmp64, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.else63
  %48 = load i32, ptr %yychar, align 4
  %cmp66 = icmp sle i32 %48, 277
  br i1 %cmp66, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %49 = load i32, ptr %yychar, align 4
  %idxprom68 = sext i32 %49 to i64
  %arrayidx69 = getelementptr inbounds [278 x i8], ptr @yytranslate, i64 0, i64 %idxprom68
  %50 = load i8, ptr %arrayidx69, align 1
  %conv70 = sext i8 %50 to i32
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.else63
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv70, %cond.true ], [ 2, %cond.false ]
  store i32 %cond, ptr %yytoken, align 4
  br label %if.end71

if.end71:                                         ; preds = %cond.end
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then59
  %51 = load i32, ptr %yytoken, align 4
  %52 = load i32, ptr %yyn, align 4
  %add73 = add nsw i32 %52, %51
  store i32 %add73, ptr %yyn, align 4
  %53 = load i32, ptr %yyn, align 4
  %cmp74 = icmp slt i32 %53, 0
  br i1 %cmp74, label %if.then84, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end72
  %54 = load i32, ptr %yyn, align 4
  %cmp76 = icmp slt i32 114, %54
  br i1 %cmp76, label %if.then84, label %lor.lhs.false78

lor.lhs.false78:                                  ; preds = %lor.lhs.false
  %55 = load i32, ptr %yyn, align 4
  %idxprom79 = sext i32 %55 to i64
  %arrayidx80 = getelementptr inbounds [115 x i8], ptr @yycheck, i64 0, i64 %idxprom79
  %56 = load i8, ptr %arrayidx80, align 1
  %conv81 = sext i8 %56 to i32
  %57 = load i32, ptr %yytoken, align 4
  %cmp82 = icmp ne i32 %conv81, %57
  br i1 %cmp82, label %if.then84, label %if.end85

if.then84:                                        ; preds = %lor.lhs.false78, %lor.lhs.false, %if.end72
  br label %yydefault

if.end85:                                         ; preds = %lor.lhs.false78
  %58 = load i32, ptr %yyn, align 4
  %idxprom86 = sext i32 %58 to i64
  %arrayidx87 = getelementptr inbounds [115 x i8], ptr @yytable, i64 0, i64 %idxprom86
  %59 = load i8, ptr %arrayidx87, align 1
  %conv88 = sext i8 %59 to i32
  store i32 %conv88, ptr %yyn, align 4
  %60 = load i32, ptr %yyn, align 4
  %cmp89 = icmp sle i32 %60, 0
  br i1 %cmp89, label %if.then91, label %if.end92

if.then91:                                        ; preds = %if.end85
  %61 = load i32, ptr %yyn, align 4
  %sub = sub nsw i32 0, %61
  store i32 %sub, ptr %yyn, align 4
  br label %yyreduce

if.end92:                                         ; preds = %if.end85
  %62 = load i32, ptr %yyerrstatus, align 4
  %tobool93 = icmp ne i32 %62, 0
  br i1 %tobool93, label %if.then94, label %if.end95

if.then94:                                        ; preds = %if.end92
  %63 = load i32, ptr %yyerrstatus, align 4
  %dec = add nsw i32 %63, -1
  store i32 %dec, ptr %yyerrstatus, align 4
  br label %if.end95

if.end95:                                         ; preds = %if.then94, %if.end92
  %64 = load i32, ptr %yyn, align 4
  store i32 %64, ptr %yystate, align 4
  %65 = load ptr, ptr %yyvsp, align 8
  %incdec.ptr96 = getelementptr inbounds %union.YYSTYPE, ptr %65, i32 1
  store ptr %incdec.ptr96, ptr %yyvsp, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %incdec.ptr96, ptr align 8 %yylval, i64 56, i1 false)
  store i32 -2, ptr %yychar, align 4
  br label %yynewstate

yydefault:                                        ; preds = %if.then84, %if.then50
  %66 = load i32, ptr %yystate, align 4
  %idxprom97 = sext i32 %66 to i64
  %arrayidx98 = getelementptr inbounds [115 x i8], ptr @yydefact, i64 0, i64 %idxprom97
  %67 = load i8, ptr %arrayidx98, align 1
  %conv99 = sext i8 %67 to i32
  store i32 %conv99, ptr %yyn, align 4
  %68 = load i32, ptr %yyn, align 4
  %cmp100 = icmp eq i32 %68, 0
  br i1 %cmp100, label %if.then102, label %if.end103

if.then102:                                       ; preds = %yydefault
  br label %yyerrlab

if.end103:                                        ; preds = %yydefault
  br label %yyreduce

yyreduce:                                         ; preds = %if.end103, %if.then91
  %69 = load i32, ptr %yyn, align 4
  %idxprom104 = sext i32 %69 to i64
  %arrayidx105 = getelementptr inbounds [93 x i8], ptr @yyr2, i64 0, i64 %idxprom104
  %70 = load i8, ptr %arrayidx105, align 1
  %conv106 = sext i8 %70 to i32
  store i32 %conv106, ptr %yylen, align 4
  %71 = load ptr, ptr %yyvsp, align 8
  %72 = load i32, ptr %yylen, align 4
  %sub107 = sub nsw i32 1, %72
  %idxprom108 = sext i32 %sub107 to i64
  %arrayidx109 = getelementptr inbounds %union.YYSTYPE, ptr %71, i64 %idxprom108
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %arrayidx109, i64 56, i1 false)
  %73 = load i32, ptr %yyn, align 4
  switch i32 %73, label %sw.default [
    i32 4, label %sw.bb
    i32 7, label %sw.bb112
    i32 8, label %sw.bb115
    i32 9, label %sw.bb119
    i32 10, label %sw.bb122
    i32 11, label %sw.bb124
    i32 12, label %sw.bb127
    i32 13, label %sw.bb131
    i32 14, label %sw.bb134
    i32 15, label %sw.bb136
    i32 16, label %sw.bb138
    i32 19, label %sw.bb140
    i32 20, label %sw.bb144
    i32 21, label %sw.bb152
    i32 23, label %sw.bb163
    i32 24, label %sw.bb167
    i32 25, label %sw.bb173
    i32 28, label %sw.bb184
    i32 29, label %sw.bb192
    i32 30, label %sw.bb195
    i32 31, label %sw.bb198
    i32 32, label %sw.bb201
    i32 33, label %sw.bb203
    i32 34, label %sw.bb212
    i32 35, label %sw.bb219
    i32 36, label %sw.bb230
    i32 37, label %sw.bb235
    i32 38, label %sw.bb240
    i32 39, label %sw.bb243
    i32 40, label %sw.bb248
    i32 41, label %sw.bb254
    i32 42, label %sw.bb262
    i32 43, label %sw.bb267
    i32 44, label %sw.bb304
    i32 45, label %sw.bb320
    i32 46, label %sw.bb338
    i32 47, label %sw.bb344
    i32 48, label %sw.bb352
    i32 49, label %sw.bb358
    i32 51, label %sw.bb366
    i32 52, label %sw.bb379
    i32 53, label %sw.bb386
    i32 54, label %sw.bb391
    i32 55, label %sw.bb396
    i32 56, label %sw.bb403
    i32 57, label %sw.bb412
    i32 58, label %sw.bb419
    i32 59, label %sw.bb427
    i32 60, label %sw.bb436
    i32 61, label %sw.bb443
    i32 62, label %sw.bb454
    i32 63, label %sw.bb466
    i32 64, label %sw.bb474
    i32 65, label %sw.bb481
    i32 66, label %sw.bb491
    i32 67, label %sw.bb499
    i32 68, label %sw.bb507
    i32 69, label %sw.bb518
    i32 70, label %sw.bb527
    i32 71, label %sw.bb537
    i32 72, label %sw.bb548
    i32 73, label %sw.bb562
    i32 74, label %sw.bb578
    i32 76, label %sw.bb588
    i32 77, label %sw.bb600
    i32 78, label %sw.bb612
    i32 79, label %sw.bb627
    i32 80, label %sw.bb639
    i32 81, label %sw.bb651
    i32 82, label %sw.bb663
    i32 86, label %sw.bb674
    i32 88, label %sw.bb685
    i32 89, label %sw.bb696
    i32 90, label %sw.bb698
    i32 91, label %sw.bb704
    i32 92, label %sw.bb705
  ]

sw.bb:                                            ; preds = %yyreduce
  %74 = load ptr, ptr %pc.addr, align 8
  %seconds = getelementptr inbounds %struct.parser_control, ptr %74, i32 0, i32 11
  %75 = load ptr, ptr %yyvsp, align 8
  %arrayidx110 = getelementptr inbounds %union.YYSTYPE, ptr %75, i64 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %seconds, ptr align 8 %arrayidx110, i64 16, i1 false)
  %76 = load ptr, ptr %pc.addr, align 8
  %timespec_seen = getelementptr inbounds %struct.parser_control, ptr %76, i32 0, i32 13
  store i8 1, ptr %timespec_seen, align 8
  %call111 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.1.215) #21
  %77 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef %call111, ptr noundef %77)
  br label %sw.epilog

sw.bb112:                                         ; preds = %yyreduce
  %78 = load ptr, ptr %pc.addr, align 8
  %times_seen = getelementptr inbounds %struct.parser_control, ptr %78, i32 0, i32 20
  %79 = load i64, ptr %times_seen, align 8
  %inc = add nsw i64 %79, 1
  store i64 %inc, ptr %times_seen, align 8
  %80 = load ptr, ptr %pc.addr, align 8
  %dates_seen = getelementptr inbounds %struct.parser_control, ptr %80, i32 0, i32 15
  %81 = load i64, ptr %dates_seen, align 8
  %inc113 = add nsw i64 %81, 1
  store i64 %inc113, ptr %dates_seen, align 8
  %call114 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.2.216) #21
  %82 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef %call114, ptr noundef %82)
  br label %sw.epilog

sw.bb115:                                         ; preds = %yyreduce
  %83 = load ptr, ptr %pc.addr, align 8
  %times_seen116 = getelementptr inbounds %struct.parser_control, ptr %83, i32 0, i32 20
  %84 = load i64, ptr %times_seen116, align 8
  %inc117 = add nsw i64 %84, 1
  store i64 %inc117, ptr %times_seen116, align 8
  %call118 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.3.217) #21
  %85 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef %call118, ptr noundef %85)
  br label %sw.epilog

sw.bb119:                                         ; preds = %yyreduce
  %86 = load ptr, ptr %pc.addr, align 8
  %local_zones_seen = getelementptr inbounds %struct.parser_control, ptr %86, i32 0, i32 18
  %87 = load i64, ptr %local_zones_seen, align 8
  %inc120 = add nsw i64 %87, 1
  store i64 %inc120, ptr %local_zones_seen, align 8
  %call121 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.4.218) #21
  %88 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef %call121, ptr noundef %88)
  br label %sw.epilog

sw.bb122:                                         ; preds = %yyreduce
  %89 = load ptr, ptr %pc.addr, align 8
  %J_zones_seen = getelementptr inbounds %struct.parser_control, ptr %89, i32 0, i32 17
  %90 = load i64, ptr %J_zones_seen, align 8
  %inc123 = add nsw i64 %90, 1
  store i64 %inc123, ptr %J_zones_seen, align 8
  %91 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef @.str.5.219, ptr noundef %91)
  br label %sw.epilog

sw.bb124:                                         ; preds = %yyreduce
  %92 = load ptr, ptr %pc.addr, align 8
  %zones_seen = getelementptr inbounds %struct.parser_control, ptr %92, i32 0, i32 21
  %93 = load i64, ptr %zones_seen, align 8
  %inc125 = add nsw i64 %93, 1
  store i64 %inc125, ptr %zones_seen, align 8
  %call126 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.6.220) #21
  %94 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef %call126, ptr noundef %94)
  br label %sw.epilog

sw.bb127:                                         ; preds = %yyreduce
  %95 = load ptr, ptr %pc.addr, align 8
  %dates_seen128 = getelementptr inbounds %struct.parser_control, ptr %95, i32 0, i32 15
  %96 = load i64, ptr %dates_seen128, align 8
  %inc129 = add nsw i64 %96, 1
  store i64 %inc129, ptr %dates_seen128, align 8
  %call130 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.7.221) #21
  %97 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef %call130, ptr noundef %97)
  br label %sw.epilog

sw.bb131:                                         ; preds = %yyreduce
  %98 = load ptr, ptr %pc.addr, align 8
  %days_seen = getelementptr inbounds %struct.parser_control, ptr %98, i32 0, i32 16
  %99 = load i64, ptr %days_seen, align 8
  %inc132 = add nsw i64 %99, 1
  store i64 %inc132, ptr %days_seen, align 8
  %call133 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.8.222) #21
  %100 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef %call133, ptr noundef %100)
  br label %sw.epilog

sw.bb134:                                         ; preds = %yyreduce
  %call135 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.9.223) #21
  %101 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_relative_time(ptr noundef %call135, ptr noundef %101)
  br label %sw.epilog

sw.bb136:                                         ; preds = %yyreduce
  %call137 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.10.224) #21
  %102 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_current_time(ptr noundef %call137, ptr noundef %102)
  br label %sw.epilog

sw.bb138:                                         ; preds = %yyreduce
  %call139 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.11.225) #21
  %103 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_relative_time(ptr noundef %call139, ptr noundef %103)
  br label %sw.epilog

sw.bb140:                                         ; preds = %yyreduce
  %104 = load ptr, ptr %pc.addr, align 8
  %105 = load ptr, ptr %yyvsp, align 8
  %arrayidx141 = getelementptr inbounds %union.YYSTYPE, ptr %105, i64 -1
  %value = getelementptr inbounds %struct.textint, ptr %arrayidx141, i32 0, i32 1
  %106 = load i64, ptr %value, align 8
  call void @set_hhmmss(ptr noundef %104, i64 noundef %106, i64 noundef 0, i64 noundef 0, i32 noundef 0)
  %107 = load ptr, ptr %yyvsp, align 8
  %arrayidx142 = getelementptr inbounds %union.YYSTYPE, ptr %107, i64 0
  %108 = load i64, ptr %arrayidx142, align 8
  %conv143 = trunc i64 %108 to i32
  %109 = load ptr, ptr %pc.addr, align 8
  %meridian = getelementptr inbounds %struct.parser_control, ptr %109, i32 0, i32 5
  store i32 %conv143, ptr %meridian, align 4
  br label %sw.epilog

sw.bb144:                                         ; preds = %yyreduce
  %110 = load ptr, ptr %pc.addr, align 8
  %111 = load ptr, ptr %yyvsp, align 8
  %arrayidx145 = getelementptr inbounds %union.YYSTYPE, ptr %111, i64 -3
  %value146 = getelementptr inbounds %struct.textint, ptr %arrayidx145, i32 0, i32 1
  %112 = load i64, ptr %value146, align 8
  %113 = load ptr, ptr %yyvsp, align 8
  %arrayidx147 = getelementptr inbounds %union.YYSTYPE, ptr %113, i64 -1
  %value148 = getelementptr inbounds %struct.textint, ptr %arrayidx147, i32 0, i32 1
  %114 = load i64, ptr %value148, align 8
  call void @set_hhmmss(ptr noundef %110, i64 noundef %112, i64 noundef %114, i64 noundef 0, i32 noundef 0)
  %115 = load ptr, ptr %yyvsp, align 8
  %arrayidx149 = getelementptr inbounds %union.YYSTYPE, ptr %115, i64 0
  %116 = load i64, ptr %arrayidx149, align 8
  %conv150 = trunc i64 %116 to i32
  %117 = load ptr, ptr %pc.addr, align 8
  %meridian151 = getelementptr inbounds %struct.parser_control, ptr %117, i32 0, i32 5
  store i32 %conv150, ptr %meridian151, align 4
  br label %sw.epilog

sw.bb152:                                         ; preds = %yyreduce
  %118 = load ptr, ptr %pc.addr, align 8
  %119 = load ptr, ptr %yyvsp, align 8
  %arrayidx153 = getelementptr inbounds %union.YYSTYPE, ptr %119, i64 -5
  %value154 = getelementptr inbounds %struct.textint, ptr %arrayidx153, i32 0, i32 1
  %120 = load i64, ptr %value154, align 8
  %121 = load ptr, ptr %yyvsp, align 8
  %arrayidx155 = getelementptr inbounds %union.YYSTYPE, ptr %121, i64 -3
  %value156 = getelementptr inbounds %struct.textint, ptr %arrayidx155, i32 0, i32 1
  %122 = load i64, ptr %value156, align 8
  %123 = load ptr, ptr %yyvsp, align 8
  %arrayidx157 = getelementptr inbounds %union.YYSTYPE, ptr %123, i64 -1
  %tv_sec = getelementptr inbounds %struct.timespec, ptr %arrayidx157, i32 0, i32 0
  %124 = load i64, ptr %tv_sec, align 8
  %125 = load ptr, ptr %yyvsp, align 8
  %arrayidx158 = getelementptr inbounds %union.YYSTYPE, ptr %125, i64 -1
  %tv_nsec = getelementptr inbounds %struct.timespec, ptr %arrayidx158, i32 0, i32 1
  %126 = load i64, ptr %tv_nsec, align 8
  %conv159 = trunc i64 %126 to i32
  call void @set_hhmmss(ptr noundef %118, i64 noundef %120, i64 noundef %122, i64 noundef %124, i32 noundef %conv159)
  %127 = load ptr, ptr %yyvsp, align 8
  %arrayidx160 = getelementptr inbounds %union.YYSTYPE, ptr %127, i64 0
  %128 = load i64, ptr %arrayidx160, align 8
  %conv161 = trunc i64 %128 to i32
  %129 = load ptr, ptr %pc.addr, align 8
  %meridian162 = getelementptr inbounds %struct.parser_control, ptr %129, i32 0, i32 5
  store i32 %conv161, ptr %meridian162, align 4
  br label %sw.epilog

sw.bb163:                                         ; preds = %yyreduce
  %130 = load ptr, ptr %pc.addr, align 8
  %131 = load ptr, ptr %yyvsp, align 8
  %arrayidx164 = getelementptr inbounds %union.YYSTYPE, ptr %131, i64 -1
  %value165 = getelementptr inbounds %struct.textint, ptr %arrayidx164, i32 0, i32 1
  %132 = load i64, ptr %value165, align 8
  call void @set_hhmmss(ptr noundef %130, i64 noundef %132, i64 noundef 0, i64 noundef 0, i32 noundef 0)
  %133 = load ptr, ptr %pc.addr, align 8
  %meridian166 = getelementptr inbounds %struct.parser_control, ptr %133, i32 0, i32 5
  store i32 2, ptr %meridian166, align 4
  br label %sw.epilog

sw.bb167:                                         ; preds = %yyreduce
  %134 = load ptr, ptr %pc.addr, align 8
  %135 = load ptr, ptr %yyvsp, align 8
  %arrayidx168 = getelementptr inbounds %union.YYSTYPE, ptr %135, i64 -3
  %value169 = getelementptr inbounds %struct.textint, ptr %arrayidx168, i32 0, i32 1
  %136 = load i64, ptr %value169, align 8
  %137 = load ptr, ptr %yyvsp, align 8
  %arrayidx170 = getelementptr inbounds %union.YYSTYPE, ptr %137, i64 -1
  %value171 = getelementptr inbounds %struct.textint, ptr %arrayidx170, i32 0, i32 1
  %138 = load i64, ptr %value171, align 8
  call void @set_hhmmss(ptr noundef %134, i64 noundef %136, i64 noundef %138, i64 noundef 0, i32 noundef 0)
  %139 = load ptr, ptr %pc.addr, align 8
  %meridian172 = getelementptr inbounds %struct.parser_control, ptr %139, i32 0, i32 5
  store i32 2, ptr %meridian172, align 4
  br label %sw.epilog

sw.bb173:                                         ; preds = %yyreduce
  %140 = load ptr, ptr %pc.addr, align 8
  %141 = load ptr, ptr %yyvsp, align 8
  %arrayidx174 = getelementptr inbounds %union.YYSTYPE, ptr %141, i64 -5
  %value175 = getelementptr inbounds %struct.textint, ptr %arrayidx174, i32 0, i32 1
  %142 = load i64, ptr %value175, align 8
  %143 = load ptr, ptr %yyvsp, align 8
  %arrayidx176 = getelementptr inbounds %union.YYSTYPE, ptr %143, i64 -3
  %value177 = getelementptr inbounds %struct.textint, ptr %arrayidx176, i32 0, i32 1
  %144 = load i64, ptr %value177, align 8
  %145 = load ptr, ptr %yyvsp, align 8
  %arrayidx178 = getelementptr inbounds %union.YYSTYPE, ptr %145, i64 -1
  %tv_sec179 = getelementptr inbounds %struct.timespec, ptr %arrayidx178, i32 0, i32 0
  %146 = load i64, ptr %tv_sec179, align 8
  %147 = load ptr, ptr %yyvsp, align 8
  %arrayidx180 = getelementptr inbounds %union.YYSTYPE, ptr %147, i64 -1
  %tv_nsec181 = getelementptr inbounds %struct.timespec, ptr %arrayidx180, i32 0, i32 1
  %148 = load i64, ptr %tv_nsec181, align 8
  %conv182 = trunc i64 %148 to i32
  call void @set_hhmmss(ptr noundef %140, i64 noundef %142, i64 noundef %144, i64 noundef %146, i32 noundef %conv182)
  %149 = load ptr, ptr %pc.addr, align 8
  %meridian183 = getelementptr inbounds %struct.parser_control, ptr %149, i32 0, i32 5
  store i32 2, ptr %meridian183, align 4
  br label %sw.epilog

sw.bb184:                                         ; preds = %yyreduce
  %150 = load ptr, ptr %pc.addr, align 8
  %zones_seen185 = getelementptr inbounds %struct.parser_control, ptr %150, i32 0, i32 21
  %151 = load i64, ptr %zones_seen185, align 8
  %inc186 = add nsw i64 %151, 1
  store i64 %inc186, ptr %zones_seen185, align 8
  %152 = load ptr, ptr %pc.addr, align 8
  %153 = load ptr, ptr %yyvsp, align 8
  %arrayidx187 = getelementptr inbounds %union.YYSTYPE, ptr %153, i64 -1
  %154 = load ptr, ptr %yyvsp, align 8
  %arrayidx188 = getelementptr inbounds %union.YYSTYPE, ptr %154, i64 0
  %155 = load i64, ptr %arrayidx188, align 8
  %call189 = call zeroext i1 @time_zone_hhmm(ptr noundef %152, ptr noundef byval(%struct.textint) align 8 %arrayidx187, i64 noundef %155)
  br i1 %call189, label %if.end191, label %if.then190

if.then190:                                       ; preds = %sw.bb184
  br label %yyabortlab

if.end191:                                        ; preds = %sw.bb184
  br label %sw.epilog

sw.bb192:                                         ; preds = %yyreduce
  %156 = load ptr, ptr %yyvsp, align 8
  %arrayidx193 = getelementptr inbounds %union.YYSTYPE, ptr %156, i64 0
  %157 = load i64, ptr %arrayidx193, align 8
  %conv194 = trunc i64 %157 to i32
  %158 = load ptr, ptr %pc.addr, align 8
  %local_isdst = getelementptr inbounds %struct.parser_control, ptr %158, i32 0, i32 3
  store i32 %conv194, ptr %local_isdst, align 4
  br label %sw.epilog

sw.bb195:                                         ; preds = %yyreduce
  %159 = load ptr, ptr %pc.addr, align 8
  %local_isdst196 = getelementptr inbounds %struct.parser_control, ptr %159, i32 0, i32 3
  store i32 1, ptr %local_isdst196, align 4
  %160 = load ptr, ptr %pc.addr, align 8
  %dsts_seen = getelementptr inbounds %struct.parser_control, ptr %160, i32 0, i32 19
  %161 = load i64, ptr %dsts_seen, align 8
  %inc197 = add nsw i64 %161, 1
  store i64 %inc197, ptr %dsts_seen, align 8
  br label %sw.epilog

sw.bb198:                                         ; preds = %yyreduce
  %162 = load ptr, ptr %yyvsp, align 8
  %arrayidx199 = getelementptr inbounds %union.YYSTYPE, ptr %162, i64 0
  %163 = load i64, ptr %arrayidx199, align 8
  %conv200 = trunc i64 %163 to i32
  %164 = load ptr, ptr %pc.addr, align 8
  %time_zone = getelementptr inbounds %struct.parser_control, ptr %164, i32 0, i32 4
  store i32 %conv200, ptr %time_zone, align 8
  br label %sw.epilog

sw.bb201:                                         ; preds = %yyreduce
  %165 = load ptr, ptr %pc.addr, align 8
  %time_zone202 = getelementptr inbounds %struct.parser_control, ptr %165, i32 0, i32 4
  store i32 -25200, ptr %time_zone202, align 8
  br label %sw.epilog

sw.bb203:                                         ; preds = %yyreduce
  %166 = load ptr, ptr %yyvsp, align 8
  %arrayidx204 = getelementptr inbounds %union.YYSTYPE, ptr %166, i64 -1
  %167 = load i64, ptr %arrayidx204, align 8
  %conv205 = trunc i64 %167 to i32
  %168 = load ptr, ptr %pc.addr, align 8
  %time_zone206 = getelementptr inbounds %struct.parser_control, ptr %168, i32 0, i32 4
  store i32 %conv205, ptr %time_zone206, align 8
  %169 = load ptr, ptr %pc.addr, align 8
  %170 = load ptr, ptr %yyvsp, align 8
  %arrayidx207 = getelementptr inbounds %union.YYSTYPE, ptr %170, i64 0
  %call208 = call zeroext i1 @apply_relative_time(ptr noundef %169, ptr noundef byval(%struct.relative_time) align 8 %arrayidx207, i32 noundef 1)
  br i1 %call208, label %if.end210, label %if.then209

if.then209:                                       ; preds = %sw.bb203
  br label %yyabortlab

if.end210:                                        ; preds = %sw.bb203
  %call211 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.9.223) #21
  %171 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_relative_time(ptr noundef %call211, ptr noundef %171)
  br label %sw.epilog

sw.bb212:                                         ; preds = %yyreduce
  %172 = load ptr, ptr %pc.addr, align 8
  %time_zone213 = getelementptr inbounds %struct.parser_control, ptr %172, i32 0, i32 4
  store i32 -25200, ptr %time_zone213, align 8
  %173 = load ptr, ptr %pc.addr, align 8
  %174 = load ptr, ptr %yyvsp, align 8
  %arrayidx214 = getelementptr inbounds %union.YYSTYPE, ptr %174, i64 0
  %call215 = call zeroext i1 @apply_relative_time(ptr noundef %173, ptr noundef byval(%struct.relative_time) align 8 %arrayidx214, i32 noundef 1)
  br i1 %call215, label %if.end217, label %if.then216

if.then216:                                       ; preds = %sw.bb212
  br label %yyabortlab

if.end217:                                        ; preds = %sw.bb212
  %call218 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.9.223) #21
  %175 = load ptr, ptr %pc.addr, align 8
  call void @debug_print_relative_time(ptr noundef %call218, ptr noundef %175)
  br label %sw.epilog

sw.bb219:                                         ; preds = %yyreduce
  %176 = load ptr, ptr %pc.addr, align 8
  %177 = load ptr, ptr %yyvsp, align 8
  %arrayidx220 = getelementptr inbounds %union.YYSTYPE, ptr %177, i64 -1
  %178 = load ptr, ptr %yyvsp, align 8
  %arrayidx221 = getelementptr inbounds %union.YYSTYPE, ptr %178, i64 0
  %179 = load i64, ptr %arrayidx221, align 8
  %call222 = call zeroext i1 @time_zone_hhmm(ptr noundef %176, ptr noundef byval(%struct.textint) align 8 %arrayidx220, i64 noundef %179)
  br i1 %call222, label %if.end224, label %if.then223

if.then223:                                       ; preds = %sw.bb219
  br label %yyabortlab

if.end224:                                        ; preds = %sw.bb219
  %180 = load ptr, ptr %pc.addr, align 8
  %time_zone225 = getelementptr inbounds %struct.parser_control, ptr %180, i32 0, i32 4
  %181 = load i32, ptr %time_zone225, align 8
  %182 = load ptr, ptr %yyvsp, align 8
  %arrayidx226 = getelementptr inbounds %union.YYSTYPE, ptr %182, i64 -2
  %183 = load i64, ptr %arrayidx226, align 8
  %184 = load ptr, ptr %pc.addr, align 8
  %time_zone227 = getelementptr inbounds %struct.parser_control, ptr %184, i32 0, i32 4
  %185 = sext i32 %181 to i64
  %186 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %185, i64 %183)
  %187 = extractvalue { i64, i1 } %186, 1
  %188 = extractvalue { i64, i1 } %186, 0
  %189 = trunc i64 %188 to i32
  %190 = sext i32 %189 to i64
  %191 = icmp ne i64 %188, %190
  %192 = or i1 %187, %191
  store i32 %189, ptr %time_zone227, align 8
  br i1 %192, label %if.then228, label %if.end229

if.then228:                                       ; preds = %if.end224
  br label %yyabortlab

if.end229:                                        ; preds = %if.end224
  br label %sw.epilog

sw.bb230:                                         ; preds = %yyreduce
  %193 = load ptr, ptr %yyvsp, align 8
  %arrayidx231 = getelementptr inbounds %union.YYSTYPE, ptr %193, i64 0
  %194 = load i64, ptr %arrayidx231, align 8
  %add232 = add nsw i64 %194, 3600
  %conv233 = trunc i64 %add232 to i32
  %195 = load ptr, ptr %pc.addr, align 8
  %time_zone234 = getelementptr inbounds %struct.parser_control, ptr %195, i32 0, i32 4
  store i32 %conv233, ptr %time_zone234, align 8
  br label %sw.epilog

sw.bb235:                                         ; preds = %yyreduce
  %196 = load ptr, ptr %yyvsp, align 8
  %arrayidx236 = getelementptr inbounds %union.YYSTYPE, ptr %196, i64 -1
  %197 = load i64, ptr %arrayidx236, align 8
  %add237 = add nsw i64 %197, 3600
  %conv238 = trunc i64 %add237 to i32
  %198 = load ptr, ptr %pc.addr, align 8
  %time_zone239 = getelementptr inbounds %struct.parser_control, ptr %198, i32 0, i32 4
  store i32 %conv238, ptr %time_zone239, align 8
  br label %sw.epilog

sw.bb240:                                         ; preds = %yyreduce
  %199 = load ptr, ptr %pc.addr, align 8
  %day_ordinal = getelementptr inbounds %struct.parser_control, ptr %199, i32 0, i32 1
  store i64 0, ptr %day_ordinal, align 8
  %200 = load ptr, ptr %yyvsp, align 8
  %arrayidx241 = getelementptr inbounds %union.YYSTYPE, ptr %200, i64 0
  %201 = load i64, ptr %arrayidx241, align 8
  %conv242 = trunc i64 %201 to i32
  %202 = load ptr, ptr %pc.addr, align 8
  %day_number = getelementptr inbounds %struct.parser_control, ptr %202, i32 0, i32 2
  store i32 %conv242, ptr %day_number, align 8
  br label %sw.epilog

sw.bb243:                                         ; preds = %yyreduce
  %203 = load ptr, ptr %pc.addr, align 8
  %day_ordinal244 = getelementptr inbounds %struct.parser_control, ptr %203, i32 0, i32 1
  store i64 0, ptr %day_ordinal244, align 8
  %204 = load ptr, ptr %yyvsp, align 8
  %arrayidx245 = getelementptr inbounds %union.YYSTYPE, ptr %204, i64 -1
  %205 = load i64, ptr %arrayidx245, align 8
  %conv246 = trunc i64 %205 to i32
  %206 = load ptr, ptr %pc.addr, align 8
  %day_number247 = getelementptr inbounds %struct.parser_control, ptr %206, i32 0, i32 2
  store i32 %conv246, ptr %day_number247, align 8
  br label %sw.epilog

sw.bb248:                                         ; preds = %yyreduce
  %207 = load ptr, ptr %yyvsp, align 8
  %arrayidx249 = getelementptr inbounds %union.YYSTYPE, ptr %207, i64 -1
  %208 = load i64, ptr %arrayidx249, align 8
  %209 = load ptr, ptr %pc.addr, align 8
  %day_ordinal250 = getelementptr inbounds %struct.parser_control, ptr %209, i32 0, i32 1
  store i64 %208, ptr %day_ordinal250, align 8
  %210 = load ptr, ptr %yyvsp, align 8
  %arrayidx251 = getelementptr inbounds %union.YYSTYPE, ptr %210, i64 0
  %211 = load i64, ptr %arrayidx251, align 8
  %conv252 = trunc i64 %211 to i32
  %212 = load ptr, ptr %pc.addr, align 8
  %day_number253 = getelementptr inbounds %struct.parser_control, ptr %212, i32 0, i32 2
  store i32 %conv252, ptr %day_number253, align 8
  %213 = load ptr, ptr %pc.addr, align 8
  %debug_ordinal_day_seen = getelementptr inbounds %struct.parser_control, ptr %213, i32 0, i32 30
  store i8 1, ptr %debug_ordinal_day_seen, align 8
  br label %sw.epilog

sw.bb254:                                         ; preds = %yyreduce
  %214 = load ptr, ptr %yyvsp, align 8
  %arrayidx255 = getelementptr inbounds %union.YYSTYPE, ptr %214, i64 -1
  %value256 = getelementptr inbounds %struct.textint, ptr %arrayidx255, i32 0, i32 1
  %215 = load i64, ptr %value256, align 8
  %216 = load ptr, ptr %pc.addr, align 8
  %day_ordinal257 = getelementptr inbounds %struct.parser_control, ptr %216, i32 0, i32 1
  store i64 %215, ptr %day_ordinal257, align 8
  %217 = load ptr, ptr %yyvsp, align 8
  %arrayidx258 = getelementptr inbounds %union.YYSTYPE, ptr %217, i64 0
  %218 = load i64, ptr %arrayidx258, align 8
  %conv259 = trunc i64 %218 to i32
  %219 = load ptr, ptr %pc.addr, align 8
  %day_number260 = getelementptr inbounds %struct.parser_control, ptr %219, i32 0, i32 2
  store i32 %conv259, ptr %day_number260, align 8
  %220 = load ptr, ptr %pc.addr, align 8
  %debug_ordinal_day_seen261 = getelementptr inbounds %struct.parser_control, ptr %220, i32 0, i32 30
  store i8 1, ptr %debug_ordinal_day_seen261, align 8
  br label %sw.epilog

sw.bb262:                                         ; preds = %yyreduce
  %221 = load ptr, ptr %yyvsp, align 8
  %arrayidx263 = getelementptr inbounds %union.YYSTYPE, ptr %221, i64 -2
  %value264 = getelementptr inbounds %struct.textint, ptr %arrayidx263, i32 0, i32 1
  %222 = load i64, ptr %value264, align 8
  %223 = load ptr, ptr %pc.addr, align 8
  %month = getelementptr inbounds %struct.parser_control, ptr %223, i32 0, i32 7
  store i64 %222, ptr %month, align 8
  %224 = load ptr, ptr %yyvsp, align 8
  %arrayidx265 = getelementptr inbounds %union.YYSTYPE, ptr %224, i64 0
  %value266 = getelementptr inbounds %struct.textint, ptr %arrayidx265, i32 0, i32 1
  %225 = load i64, ptr %value266, align 8
  %226 = load ptr, ptr %pc.addr, align 8
  %day = getelementptr inbounds %struct.parser_control, ptr %226, i32 0, i32 8
  store i64 %225, ptr %day, align 8
  br label %sw.epilog

sw.bb267:                                         ; preds = %yyreduce
  %227 = load ptr, ptr %yyvsp, align 8
  %arrayidx268 = getelementptr inbounds %union.YYSTYPE, ptr %227, i64 -4
  %digits = getelementptr inbounds %struct.textint, ptr %arrayidx268, i32 0, i32 2
  %228 = load i64, ptr %digits, align 8
  %cmp269 = icmp sle i64 4, %228
  br i1 %cmp269, label %if.then271, label %if.else288

if.then271:                                       ; preds = %sw.bb267
  %229 = load ptr, ptr %pc.addr, align 8
  %call272 = call zeroext i1 @debugging(ptr noundef %229)
  br i1 %call272, label %if.then273, label %if.end280

if.then273:                                       ; preds = %if.then271
  %230 = load ptr, ptr %yyvsp, align 8
  %arrayidx275 = getelementptr inbounds %union.YYSTYPE, ptr %230, i64 -4
  %digits276 = getelementptr inbounds %struct.textint, ptr %arrayidx275, i32 0, i32 2
  %231 = load i64, ptr %digits276, align 8
  store i64 %231, ptr %digits274, align 8
  %call277 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.12.226) #21
  %232 = load ptr, ptr %yyvsp, align 8
  %arrayidx278 = getelementptr inbounds %union.YYSTYPE, ptr %232, i64 -4
  %value279 = getelementptr inbounds %struct.textint, ptr %arrayidx278, i32 0, i32 1
  %233 = load i64, ptr %value279, align 8
  %234 = load i64, ptr %digits274, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call277, i64 noundef %233, i64 noundef %234)
  br label %if.end280

if.end280:                                        ; preds = %if.then273, %if.then271
  %235 = load ptr, ptr %pc.addr, align 8
  %year = getelementptr inbounds %struct.parser_control, ptr %235, i32 0, i32 6
  %236 = load ptr, ptr %yyvsp, align 8
  %arrayidx281 = getelementptr inbounds %union.YYSTYPE, ptr %236, i64 -4
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %year, ptr align 8 %arrayidx281, i64 24, i1 false)
  %237 = load ptr, ptr %yyvsp, align 8
  %arrayidx282 = getelementptr inbounds %union.YYSTYPE, ptr %237, i64 -2
  %value283 = getelementptr inbounds %struct.textint, ptr %arrayidx282, i32 0, i32 1
  %238 = load i64, ptr %value283, align 8
  %239 = load ptr, ptr %pc.addr, align 8
  %month284 = getelementptr inbounds %struct.parser_control, ptr %239, i32 0, i32 7
  store i64 %238, ptr %month284, align 8
  %240 = load ptr, ptr %yyvsp, align 8
  %arrayidx285 = getelementptr inbounds %union.YYSTYPE, ptr %240, i64 0
  %value286 = getelementptr inbounds %struct.textint, ptr %arrayidx285, i32 0, i32 1
  %241 = load i64, ptr %value286, align 8
  %242 = load ptr, ptr %pc.addr, align 8
  %day287 = getelementptr inbounds %struct.parser_control, ptr %242, i32 0, i32 8
  store i64 %241, ptr %day287, align 8
  br label %if.end303

if.else288:                                       ; preds = %sw.bb267
  %243 = load ptr, ptr %pc.addr, align 8
  %call289 = call zeroext i1 @debugging(ptr noundef %243)
  br i1 %call289, label %if.then290, label %if.end294

if.then290:                                       ; preds = %if.else288
  %call291 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.13.227) #21
  %244 = load ptr, ptr %yyvsp, align 8
  %arrayidx292 = getelementptr inbounds %union.YYSTYPE, ptr %244, i64 -4
  %value293 = getelementptr inbounds %struct.textint, ptr %arrayidx292, i32 0, i32 1
  %245 = load i64, ptr %value293, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call291, i64 noundef %245)
  br label %if.end294

if.end294:                                        ; preds = %if.then290, %if.else288
  %246 = load ptr, ptr %yyvsp, align 8
  %arrayidx295 = getelementptr inbounds %union.YYSTYPE, ptr %246, i64 -4
  %value296 = getelementptr inbounds %struct.textint, ptr %arrayidx295, i32 0, i32 1
  %247 = load i64, ptr %value296, align 8
  %248 = load ptr, ptr %pc.addr, align 8
  %month297 = getelementptr inbounds %struct.parser_control, ptr %248, i32 0, i32 7
  store i64 %247, ptr %month297, align 8
  %249 = load ptr, ptr %yyvsp, align 8
  %arrayidx298 = getelementptr inbounds %union.YYSTYPE, ptr %249, i64 -2
  %value299 = getelementptr inbounds %struct.textint, ptr %arrayidx298, i32 0, i32 1
  %250 = load i64, ptr %value299, align 8
  %251 = load ptr, ptr %pc.addr, align 8
  %day300 = getelementptr inbounds %struct.parser_control, ptr %251, i32 0, i32 8
  store i64 %250, ptr %day300, align 8
  %252 = load ptr, ptr %pc.addr, align 8
  %year301 = getelementptr inbounds %struct.parser_control, ptr %252, i32 0, i32 6
  %253 = load ptr, ptr %yyvsp, align 8
  %arrayidx302 = getelementptr inbounds %union.YYSTYPE, ptr %253, i64 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %year301, ptr align 8 %arrayidx302, i64 24, i1 false)
  br label %if.end303

if.end303:                                        ; preds = %if.end294, %if.end280
  br label %sw.epilog

sw.bb304:                                         ; preds = %yyreduce
  %254 = load ptr, ptr %yyvsp, align 8
  %arrayidx305 = getelementptr inbounds %union.YYSTYPE, ptr %254, i64 -2
  %value306 = getelementptr inbounds %struct.textint, ptr %arrayidx305, i32 0, i32 1
  %255 = load i64, ptr %value306, align 8
  %256 = load ptr, ptr %pc.addr, align 8
  %day307 = getelementptr inbounds %struct.parser_control, ptr %256, i32 0, i32 8
  store i64 %255, ptr %day307, align 8
  %257 = load ptr, ptr %yyvsp, align 8
  %arrayidx308 = getelementptr inbounds %union.YYSTYPE, ptr %257, i64 -1
  %258 = load i64, ptr %arrayidx308, align 8
  %259 = load ptr, ptr %pc.addr, align 8
  %month309 = getelementptr inbounds %struct.parser_control, ptr %259, i32 0, i32 7
  store i64 %258, ptr %month309, align 8
  %260 = load ptr, ptr %yyvsp, align 8
  %arrayidx310 = getelementptr inbounds %union.YYSTYPE, ptr %260, i64 0
  %value311 = getelementptr inbounds %struct.textint, ptr %arrayidx310, i32 0, i32 1
  %261 = load i64, ptr %value311, align 8
  %262 = load ptr, ptr %pc.addr, align 8
  %year312 = getelementptr inbounds %struct.parser_control, ptr %262, i32 0, i32 6
  %value313 = getelementptr inbounds %struct.textint, ptr %year312, i32 0, i32 1
  %263 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %261)
  %264 = extractvalue { i64, i1 } %263, 1
  %265 = extractvalue { i64, i1 } %263, 0
  store i64 %265, ptr %value313, align 8
  br i1 %264, label %if.then314, label %if.end315

if.then314:                                       ; preds = %sw.bb304
  br label %yyabortlab

if.end315:                                        ; preds = %sw.bb304
  %266 = load ptr, ptr %yyvsp, align 8
  %arrayidx316 = getelementptr inbounds %union.YYSTYPE, ptr %266, i64 0
  %digits317 = getelementptr inbounds %struct.textint, ptr %arrayidx316, i32 0, i32 2
  %267 = load i64, ptr %digits317, align 8
  %268 = load ptr, ptr %pc.addr, align 8
  %year318 = getelementptr inbounds %struct.parser_control, ptr %268, i32 0, i32 6
  %digits319 = getelementptr inbounds %struct.textint, ptr %year318, i32 0, i32 2
  store i64 %267, ptr %digits319, align 8
  br label %sw.epilog

sw.bb320:                                         ; preds = %yyreduce
  %269 = load ptr, ptr %yyvsp, align 8
  %arrayidx321 = getelementptr inbounds %union.YYSTYPE, ptr %269, i64 -2
  %270 = load i64, ptr %arrayidx321, align 8
  %271 = load ptr, ptr %pc.addr, align 8
  %month322 = getelementptr inbounds %struct.parser_control, ptr %271, i32 0, i32 7
  store i64 %270, ptr %month322, align 8
  %272 = load ptr, ptr %yyvsp, align 8
  %arrayidx323 = getelementptr inbounds %union.YYSTYPE, ptr %272, i64 -1
  %value324 = getelementptr inbounds %struct.textint, ptr %arrayidx323, i32 0, i32 1
  %273 = load i64, ptr %value324, align 8
  %274 = load ptr, ptr %pc.addr, align 8
  %day325 = getelementptr inbounds %struct.parser_control, ptr %274, i32 0, i32 8
  %275 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %273)
  %276 = extractvalue { i64, i1 } %275, 1
  %277 = extractvalue { i64, i1 } %275, 0
  store i64 %277, ptr %day325, align 8
  br i1 %276, label %if.then326, label %if.end327

if.then326:                                       ; preds = %sw.bb320
  br label %yyabortlab

if.end327:                                        ; preds = %sw.bb320
  %278 = load ptr, ptr %yyvsp, align 8
  %arrayidx328 = getelementptr inbounds %union.YYSTYPE, ptr %278, i64 0
  %value329 = getelementptr inbounds %struct.textint, ptr %arrayidx328, i32 0, i32 1
  %279 = load i64, ptr %value329, align 8
  %280 = load ptr, ptr %pc.addr, align 8
  %year330 = getelementptr inbounds %struct.parser_control, ptr %280, i32 0, i32 6
  %value331 = getelementptr inbounds %struct.textint, ptr %year330, i32 0, i32 1
  %281 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %279)
  %282 = extractvalue { i64, i1 } %281, 1
  %283 = extractvalue { i64, i1 } %281, 0
  store i64 %283, ptr %value331, align 8
  br i1 %282, label %if.then332, label %if.end333

if.then332:                                       ; preds = %if.end327
  br label %yyabortlab

if.end333:                                        ; preds = %if.end327
  %284 = load ptr, ptr %yyvsp, align 8
  %arrayidx334 = getelementptr inbounds %union.YYSTYPE, ptr %284, i64 0
  %digits335 = getelementptr inbounds %struct.textint, ptr %arrayidx334, i32 0, i32 2
  %285 = load i64, ptr %digits335, align 8
  %286 = load ptr, ptr %pc.addr, align 8
  %year336 = getelementptr inbounds %struct.parser_control, ptr %286, i32 0, i32 6
  %digits337 = getelementptr inbounds %struct.textint, ptr %year336, i32 0, i32 2
  store i64 %285, ptr %digits337, align 8
  br label %sw.epilog

sw.bb338:                                         ; preds = %yyreduce
  %287 = load ptr, ptr %yyvsp, align 8
  %arrayidx339 = getelementptr inbounds %union.YYSTYPE, ptr %287, i64 -1
  %288 = load i64, ptr %arrayidx339, align 8
  %289 = load ptr, ptr %pc.addr, align 8
  %month340 = getelementptr inbounds %struct.parser_control, ptr %289, i32 0, i32 7
  store i64 %288, ptr %month340, align 8
  %290 = load ptr, ptr %yyvsp, align 8
  %arrayidx341 = getelementptr inbounds %union.YYSTYPE, ptr %290, i64 0
  %value342 = getelementptr inbounds %struct.textint, ptr %arrayidx341, i32 0, i32 1
  %291 = load i64, ptr %value342, align 8
  %292 = load ptr, ptr %pc.addr, align 8
  %day343 = getelementptr inbounds %struct.parser_control, ptr %292, i32 0, i32 8
  store i64 %291, ptr %day343, align 8
  br label %sw.epilog

sw.bb344:                                         ; preds = %yyreduce
  %293 = load ptr, ptr %yyvsp, align 8
  %arrayidx345 = getelementptr inbounds %union.YYSTYPE, ptr %293, i64 -3
  %294 = load i64, ptr %arrayidx345, align 8
  %295 = load ptr, ptr %pc.addr, align 8
  %month346 = getelementptr inbounds %struct.parser_control, ptr %295, i32 0, i32 7
  store i64 %294, ptr %month346, align 8
  %296 = load ptr, ptr %yyvsp, align 8
  %arrayidx347 = getelementptr inbounds %union.YYSTYPE, ptr %296, i64 -2
  %value348 = getelementptr inbounds %struct.textint, ptr %arrayidx347, i32 0, i32 1
  %297 = load i64, ptr %value348, align 8
  %298 = load ptr, ptr %pc.addr, align 8
  %day349 = getelementptr inbounds %struct.parser_control, ptr %298, i32 0, i32 8
  store i64 %297, ptr %day349, align 8
  %299 = load ptr, ptr %pc.addr, align 8
  %year350 = getelementptr inbounds %struct.parser_control, ptr %299, i32 0, i32 6
  %300 = load ptr, ptr %yyvsp, align 8
  %arrayidx351 = getelementptr inbounds %union.YYSTYPE, ptr %300, i64 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %year350, ptr align 8 %arrayidx351, i64 24, i1 false)
  br label %sw.epilog

sw.bb352:                                         ; preds = %yyreduce
  %301 = load ptr, ptr %yyvsp, align 8
  %arrayidx353 = getelementptr inbounds %union.YYSTYPE, ptr %301, i64 -1
  %value354 = getelementptr inbounds %struct.textint, ptr %arrayidx353, i32 0, i32 1
  %302 = load i64, ptr %value354, align 8
  %303 = load ptr, ptr %pc.addr, align 8
  %day355 = getelementptr inbounds %struct.parser_control, ptr %303, i32 0, i32 8
  store i64 %302, ptr %day355, align 8
  %304 = load ptr, ptr %yyvsp, align 8
  %arrayidx356 = getelementptr inbounds %union.YYSTYPE, ptr %304, i64 0
  %305 = load i64, ptr %arrayidx356, align 8
  %306 = load ptr, ptr %pc.addr, align 8
  %month357 = getelementptr inbounds %struct.parser_control, ptr %306, i32 0, i32 7
  store i64 %305, ptr %month357, align 8
  br label %sw.epilog

sw.bb358:                                         ; preds = %yyreduce
  %307 = load ptr, ptr %yyvsp, align 8
  %arrayidx359 = getelementptr inbounds %union.YYSTYPE, ptr %307, i64 -2
  %value360 = getelementptr inbounds %struct.textint, ptr %arrayidx359, i32 0, i32 1
  %308 = load i64, ptr %value360, align 8
  %309 = load ptr, ptr %pc.addr, align 8
  %day361 = getelementptr inbounds %struct.parser_control, ptr %309, i32 0, i32 8
  store i64 %308, ptr %day361, align 8
  %310 = load ptr, ptr %yyvsp, align 8
  %arrayidx362 = getelementptr inbounds %union.YYSTYPE, ptr %310, i64 -1
  %311 = load i64, ptr %arrayidx362, align 8
  %312 = load ptr, ptr %pc.addr, align 8
  %month363 = getelementptr inbounds %struct.parser_control, ptr %312, i32 0, i32 7
  store i64 %311, ptr %month363, align 8
  %313 = load ptr, ptr %pc.addr, align 8
  %year364 = getelementptr inbounds %struct.parser_control, ptr %313, i32 0, i32 6
  %314 = load ptr, ptr %yyvsp, align 8
  %arrayidx365 = getelementptr inbounds %union.YYSTYPE, ptr %314, i64 0
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %year364, ptr align 8 %arrayidx365, i64 24, i1 false)
  br label %sw.epilog

sw.bb366:                                         ; preds = %yyreduce
  %315 = load ptr, ptr %pc.addr, align 8
  %year367 = getelementptr inbounds %struct.parser_control, ptr %315, i32 0, i32 6
  %316 = load ptr, ptr %yyvsp, align 8
  %arrayidx368 = getelementptr inbounds %union.YYSTYPE, ptr %316, i64 -2
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %year367, ptr align 8 %arrayidx368, i64 24, i1 false)
  %317 = load ptr, ptr %yyvsp, align 8
  %arrayidx369 = getelementptr inbounds %union.YYSTYPE, ptr %317, i64 -1
  %value370 = getelementptr inbounds %struct.textint, ptr %arrayidx369, i32 0, i32 1
  %318 = load i64, ptr %value370, align 8
  %319 = load ptr, ptr %pc.addr, align 8
  %month371 = getelementptr inbounds %struct.parser_control, ptr %319, i32 0, i32 7
  %320 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %318)
  %321 = extractvalue { i64, i1 } %320, 1
  %322 = extractvalue { i64, i1 } %320, 0
  store i64 %322, ptr %month371, align 8
  br i1 %321, label %if.then372, label %if.end373

if.then372:                                       ; preds = %sw.bb366
  br label %yyabortlab

if.end373:                                        ; preds = %sw.bb366
  %323 = load ptr, ptr %yyvsp, align 8
  %arrayidx374 = getelementptr inbounds %union.YYSTYPE, ptr %323, i64 0
  %value375 = getelementptr inbounds %struct.textint, ptr %arrayidx374, i32 0, i32 1
  %324 = load i64, ptr %value375, align 8
  %325 = load ptr, ptr %pc.addr, align 8
  %day376 = getelementptr inbounds %struct.parser_control, ptr %325, i32 0, i32 8
  %326 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 0, i64 %324)
  %327 = extractvalue { i64, i1 } %326, 1
  %328 = extractvalue { i64, i1 } %326, 0
  store i64 %328, ptr %day376, align 8
  br i1 %327, label %if.then377, label %if.end378

if.then377:                                       ; preds = %if.end373
  br label %yyabortlab

if.end378:                                        ; preds = %if.end373
  br label %sw.epilog

sw.bb379:                                         ; preds = %yyreduce
  %329 = load ptr, ptr %pc.addr, align 8
  %330 = load ptr, ptr %yyvsp, align 8
  %arrayidx380 = getelementptr inbounds %union.YYSTYPE, ptr %330, i64 -1
  %331 = load ptr, ptr %yyvsp, align 8
  %arrayidx381 = getelementptr inbounds %union.YYSTYPE, ptr %331, i64 0
  %332 = load i64, ptr %arrayidx381, align 8
  %conv382 = trunc i64 %332 to i32
  %call383 = call zeroext i1 @apply_relative_time(ptr noundef %329, ptr noundef byval(%struct.relative_time) align 8 %arrayidx380, i32 noundef %conv382)
  br i1 %call383, label %if.end385, label %if.then384

if.then384:                                       ; preds = %sw.bb379
  br label %yyabortlab

if.end385:                                        ; preds = %sw.bb379
  br label %sw.epilog

sw.bb386:                                         ; preds = %yyreduce
  %333 = load ptr, ptr %pc.addr, align 8
  %334 = load ptr, ptr %yyvsp, align 8
  %arrayidx387 = getelementptr inbounds %union.YYSTYPE, ptr %334, i64 0
  %call388 = call zeroext i1 @apply_relative_time(ptr noundef %333, ptr noundef byval(%struct.relative_time) align 8 %arrayidx387, i32 noundef 1)
  br i1 %call388, label %if.end390, label %if.then389

if.then389:                                       ; preds = %sw.bb386
  br label %yyabortlab

if.end390:                                        ; preds = %sw.bb386
  br label %sw.epilog

sw.bb391:                                         ; preds = %yyreduce
  %335 = load ptr, ptr %pc.addr, align 8
  %336 = load ptr, ptr %yyvsp, align 8
  %arrayidx392 = getelementptr inbounds %union.YYSTYPE, ptr %336, i64 0
  %call393 = call zeroext i1 @apply_relative_time(ptr noundef %335, ptr noundef byval(%struct.relative_time) align 8 %arrayidx392, i32 noundef 1)
  br i1 %call393, label %if.end395, label %if.then394

if.then394:                                       ; preds = %sw.bb391
  br label %yyabortlab

if.end395:                                        ; preds = %sw.bb391
  br label %sw.epilog

sw.bb396:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral, i64 56, i1 false)
  %337 = load ptr, ptr %yyvsp, align 8
  %arrayidx401 = getelementptr inbounds %union.YYSTYPE, ptr %337, i64 -1
  %338 = load i64, ptr %arrayidx401, align 8
  %year402 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 0
  store i64 %338, ptr %year402, align 8
  br label %sw.epilog

sw.bb403:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral404, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral404, i64 56, i1 false)
  %339 = load ptr, ptr %yyvsp, align 8
  %arrayidx409 = getelementptr inbounds %union.YYSTYPE, ptr %339, i64 -1
  %value410 = getelementptr inbounds %struct.textint, ptr %arrayidx409, i32 0, i32 1
  %340 = load i64, ptr %value410, align 8
  %year411 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 0
  store i64 %340, ptr %year411, align 8
  br label %sw.epilog

sw.bb412:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral413, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral413, i64 56, i1 false)
  %year418 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 0
  store i64 1, ptr %year418, align 8
  br label %sw.epilog

sw.bb419:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral420, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral420, i64 56, i1 false)
  %341 = load ptr, ptr %yyvsp, align 8
  %arrayidx425 = getelementptr inbounds %union.YYSTYPE, ptr %341, i64 -1
  %342 = load i64, ptr %arrayidx425, align 8
  %month426 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 1
  store i64 %342, ptr %month426, align 8
  br label %sw.epilog

sw.bb427:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral428, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral428, i64 56, i1 false)
  %343 = load ptr, ptr %yyvsp, align 8
  %arrayidx433 = getelementptr inbounds %union.YYSTYPE, ptr %343, i64 -1
  %value434 = getelementptr inbounds %struct.textint, ptr %arrayidx433, i32 0, i32 1
  %344 = load i64, ptr %value434, align 8
  %month435 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 1
  store i64 %344, ptr %month435, align 8
  br label %sw.epilog

sw.bb436:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral437, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral437, i64 56, i1 false)
  %month442 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 1
  store i64 1, ptr %month442, align 8
  br label %sw.epilog

sw.bb443:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral444, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral444, i64 56, i1 false)
  %345 = load ptr, ptr %yyvsp, align 8
  %arrayidx449 = getelementptr inbounds %union.YYSTYPE, ptr %345, i64 -1
  %346 = load i64, ptr %arrayidx449, align 8
  %347 = load ptr, ptr %yyvsp, align 8
  %arrayidx450 = getelementptr inbounds %union.YYSTYPE, ptr %347, i64 0
  %348 = load i64, ptr %arrayidx450, align 8
  %day451 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 2
  %349 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %346, i64 %348)
  %350 = extractvalue { i64, i1 } %349, 1
  %351 = extractvalue { i64, i1 } %349, 0
  store i64 %351, ptr %day451, align 8
  br i1 %350, label %if.then452, label %if.end453

if.then452:                                       ; preds = %sw.bb443
  br label %yyabortlab

if.end453:                                        ; preds = %sw.bb443
  br label %sw.epilog

sw.bb454:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral455, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral455, i64 56, i1 false)
  %352 = load ptr, ptr %yyvsp, align 8
  %arrayidx460 = getelementptr inbounds %union.YYSTYPE, ptr %352, i64 -1
  %value461 = getelementptr inbounds %struct.textint, ptr %arrayidx460, i32 0, i32 1
  %353 = load i64, ptr %value461, align 8
  %354 = load ptr, ptr %yyvsp, align 8
  %arrayidx462 = getelementptr inbounds %union.YYSTYPE, ptr %354, i64 0
  %355 = load i64, ptr %arrayidx462, align 8
  %day463 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 2
  %356 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %353, i64 %355)
  %357 = extractvalue { i64, i1 } %356, 1
  %358 = extractvalue { i64, i1 } %356, 0
  store i64 %358, ptr %day463, align 8
  br i1 %357, label %if.then464, label %if.end465

if.then464:                                       ; preds = %sw.bb454
  br label %yyabortlab

if.end465:                                        ; preds = %sw.bb454
  br label %sw.epilog

sw.bb466:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral467, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral467, i64 56, i1 false)
  %359 = load ptr, ptr %yyvsp, align 8
  %arrayidx472 = getelementptr inbounds %union.YYSTYPE, ptr %359, i64 0
  %360 = load i64, ptr %arrayidx472, align 8
  %day473 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 2
  store i64 %360, ptr %day473, align 8
  br label %sw.epilog

sw.bb474:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral475, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral475, i64 56, i1 false)
  %361 = load ptr, ptr %yyvsp, align 8
  %arrayidx480 = getelementptr inbounds %union.YYSTYPE, ptr %361, i64 -1
  %362 = load i64, ptr %arrayidx480, align 8
  %hour = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 3
  store i64 %362, ptr %hour, align 8
  br label %sw.epilog

sw.bb481:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral482, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral482, i64 56, i1 false)
  %363 = load ptr, ptr %yyvsp, align 8
  %arrayidx488 = getelementptr inbounds %union.YYSTYPE, ptr %363, i64 -1
  %value489 = getelementptr inbounds %struct.textint, ptr %arrayidx488, i32 0, i32 1
  %364 = load i64, ptr %value489, align 8
  %hour490 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 3
  store i64 %364, ptr %hour490, align 8
  br label %sw.epilog

sw.bb491:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral492, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral492, i64 56, i1 false)
  %hour498 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 3
  store i64 1, ptr %hour498, align 8
  br label %sw.epilog

sw.bb499:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral500, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral500, i64 56, i1 false)
  %365 = load ptr, ptr %yyvsp, align 8
  %arrayidx506 = getelementptr inbounds %union.YYSTYPE, ptr %365, i64 -1
  %366 = load i64, ptr %arrayidx506, align 8
  %minutes = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 4
  store i64 %366, ptr %minutes, align 8
  br label %sw.epilog

sw.bb507:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral508, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral508, i64 56, i1 false)
  %367 = load ptr, ptr %yyvsp, align 8
  %arrayidx515 = getelementptr inbounds %union.YYSTYPE, ptr %367, i64 -1
  %value516 = getelementptr inbounds %struct.textint, ptr %arrayidx515, i32 0, i32 1
  %368 = load i64, ptr %value516, align 8
  %minutes517 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 4
  store i64 %368, ptr %minutes517, align 8
  br label %sw.epilog

sw.bb518:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral519, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral519, i64 56, i1 false)
  %minutes526 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 4
  store i64 1, ptr %minutes526, align 8
  br label %sw.epilog

sw.bb527:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral528, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral528, i64 56, i1 false)
  %369 = load ptr, ptr %yyvsp, align 8
  %arrayidx535 = getelementptr inbounds %union.YYSTYPE, ptr %369, i64 -1
  %370 = load i64, ptr %arrayidx535, align 8
  %seconds536 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 5
  store i64 %370, ptr %seconds536, align 8
  br label %sw.epilog

sw.bb537:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral538, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral538, i64 56, i1 false)
  %371 = load ptr, ptr %yyvsp, align 8
  %arrayidx545 = getelementptr inbounds %union.YYSTYPE, ptr %371, i64 -1
  %value546 = getelementptr inbounds %struct.textint, ptr %arrayidx545, i32 0, i32 1
  %372 = load i64, ptr %value546, align 8
  %seconds547 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 5
  store i64 %372, ptr %seconds547, align 8
  br label %sw.epilog

sw.bb548:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral549, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral549, i64 56, i1 false)
  %373 = load ptr, ptr %yyvsp, align 8
  %arrayidx556 = getelementptr inbounds %union.YYSTYPE, ptr %373, i64 -1
  %tv_sec557 = getelementptr inbounds %struct.timespec, ptr %arrayidx556, i32 0, i32 0
  %374 = load i64, ptr %tv_sec557, align 8
  %seconds558 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 5
  store i64 %374, ptr %seconds558, align 8
  %375 = load ptr, ptr %yyvsp, align 8
  %arrayidx559 = getelementptr inbounds %union.YYSTYPE, ptr %375, i64 -1
  %tv_nsec560 = getelementptr inbounds %struct.timespec, ptr %arrayidx559, i32 0, i32 1
  %376 = load i64, ptr %tv_nsec560, align 8
  %conv561 = trunc i64 %376 to i32
  %ns = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 6
  store i32 %conv561, ptr %ns, align 8
  br label %sw.epilog

sw.bb562:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral563, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral563, i64 56, i1 false)
  %377 = load ptr, ptr %yyvsp, align 8
  %arrayidx571 = getelementptr inbounds %union.YYSTYPE, ptr %377, i64 -1
  %tv_sec572 = getelementptr inbounds %struct.timespec, ptr %arrayidx571, i32 0, i32 0
  %378 = load i64, ptr %tv_sec572, align 8
  %seconds573 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 5
  store i64 %378, ptr %seconds573, align 8
  %379 = load ptr, ptr %yyvsp, align 8
  %arrayidx574 = getelementptr inbounds %union.YYSTYPE, ptr %379, i64 -1
  %tv_nsec575 = getelementptr inbounds %struct.timespec, ptr %arrayidx574, i32 0, i32 1
  %380 = load i64, ptr %tv_nsec575, align 8
  %conv576 = trunc i64 %380 to i32
  %ns577 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 6
  store i32 %conv576, ptr %ns577, align 8
  br label %sw.epilog

sw.bb578:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral579, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral579, i64 56, i1 false)
  %seconds587 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 5
  store i64 1, ptr %seconds587, align 8
  br label %sw.epilog

sw.bb588:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral589, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral589, i64 56, i1 false)
  %381 = load ptr, ptr %yyvsp, align 8
  %arrayidx597 = getelementptr inbounds %union.YYSTYPE, ptr %381, i64 -1
  %value598 = getelementptr inbounds %struct.textint, ptr %arrayidx597, i32 0, i32 1
  %382 = load i64, ptr %value598, align 8
  %year599 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 0
  store i64 %382, ptr %year599, align 8
  br label %sw.epilog

sw.bb600:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral601, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral601, i64 56, i1 false)
  %383 = load ptr, ptr %yyvsp, align 8
  %arrayidx609 = getelementptr inbounds %union.YYSTYPE, ptr %383, i64 -1
  %value610 = getelementptr inbounds %struct.textint, ptr %arrayidx609, i32 0, i32 1
  %384 = load i64, ptr %value610, align 8
  %month611 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 1
  store i64 %384, ptr %month611, align 8
  br label %sw.epilog

sw.bb612:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral613, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral613, i64 56, i1 false)
  %385 = load ptr, ptr %yyvsp, align 8
  %arrayidx621 = getelementptr inbounds %union.YYSTYPE, ptr %385, i64 -1
  %value622 = getelementptr inbounds %struct.textint, ptr %arrayidx621, i32 0, i32 1
  %386 = load i64, ptr %value622, align 8
  %387 = load ptr, ptr %yyvsp, align 8
  %arrayidx623 = getelementptr inbounds %union.YYSTYPE, ptr %387, i64 0
  %388 = load i64, ptr %arrayidx623, align 8
  %day624 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 2
  %389 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %386, i64 %388)
  %390 = extractvalue { i64, i1 } %389, 1
  %391 = extractvalue { i64, i1 } %389, 0
  store i64 %391, ptr %day624, align 8
  br i1 %390, label %if.then625, label %if.end626

if.then625:                                       ; preds = %sw.bb612
  br label %yyabortlab

if.end626:                                        ; preds = %sw.bb612
  br label %sw.epilog

sw.bb627:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral628, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral628, i64 56, i1 false)
  %392 = load ptr, ptr %yyvsp, align 8
  %arrayidx636 = getelementptr inbounds %union.YYSTYPE, ptr %392, i64 -1
  %value637 = getelementptr inbounds %struct.textint, ptr %arrayidx636, i32 0, i32 1
  %393 = load i64, ptr %value637, align 8
  %hour638 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 3
  store i64 %393, ptr %hour638, align 8
  br label %sw.epilog

sw.bb639:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral640, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral640, i64 56, i1 false)
  %394 = load ptr, ptr %yyvsp, align 8
  %arrayidx648 = getelementptr inbounds %union.YYSTYPE, ptr %394, i64 -1
  %value649 = getelementptr inbounds %struct.textint, ptr %arrayidx648, i32 0, i32 1
  %395 = load i64, ptr %value649, align 8
  %minutes650 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 4
  store i64 %395, ptr %minutes650, align 8
  br label %sw.epilog

sw.bb651:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral652, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral652, i64 56, i1 false)
  %396 = load ptr, ptr %yyvsp, align 8
  %arrayidx660 = getelementptr inbounds %union.YYSTYPE, ptr %396, i64 -1
  %value661 = getelementptr inbounds %struct.textint, ptr %arrayidx660, i32 0, i32 1
  %397 = load i64, ptr %value661, align 8
  %seconds662 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 5
  store i64 %397, ptr %seconds662, align 8
  br label %sw.epilog

sw.bb663:                                         ; preds = %yyreduce
  call void @llvm.memset.p0.i64(ptr align 8 %.compoundliteral664, i8 0, i64 56, i1 false)
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral664, i64 56, i1 false)
  %398 = load ptr, ptr %yyvsp, align 8
  %arrayidx672 = getelementptr inbounds %union.YYSTYPE, ptr %398, i64 0
  %399 = load i64, ptr %arrayidx672, align 8
  %day673 = getelementptr inbounds %struct.relative_time, ptr %yyval, i32 0, i32 2
  store i64 %399, ptr %day673, align 8
  br label %sw.epilog

sw.bb674:                                         ; preds = %yyreduce
  %400 = load ptr, ptr %yyvsp, align 8
  %arrayidx675 = getelementptr inbounds %union.YYSTYPE, ptr %400, i64 0
  %value676 = getelementptr inbounds %struct.textint, ptr %arrayidx675, i32 0, i32 1
  %401 = load i64, ptr %value676, align 8
  %call677 = call zeroext i1 @time_overflow(i64 noundef %401)
  br i1 %call677, label %if.then678, label %if.end679

if.then678:                                       ; preds = %sw.bb674
  br label %yyabortlab

if.end679:                                        ; preds = %sw.bb674
  %tv_sec681 = getelementptr inbounds %struct.timespec, ptr %.compoundliteral680, i32 0, i32 0
  %402 = load ptr, ptr %yyvsp, align 8
  %arrayidx682 = getelementptr inbounds %union.YYSTYPE, ptr %402, i64 0
  %value683 = getelementptr inbounds %struct.textint, ptr %arrayidx682, i32 0, i32 1
  %403 = load i64, ptr %value683, align 8
  store i64 %403, ptr %tv_sec681, align 8
  %tv_nsec684 = getelementptr inbounds %struct.timespec, ptr %.compoundliteral680, i32 0, i32 1
  store i64 0, ptr %tv_nsec684, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral680, i64 16, i1 false)
  br label %sw.epilog

sw.bb685:                                         ; preds = %yyreduce
  %404 = load ptr, ptr %yyvsp, align 8
  %arrayidx686 = getelementptr inbounds %union.YYSTYPE, ptr %404, i64 0
  %value687 = getelementptr inbounds %struct.textint, ptr %arrayidx686, i32 0, i32 1
  %405 = load i64, ptr %value687, align 8
  %call688 = call zeroext i1 @time_overflow(i64 noundef %405)
  br i1 %call688, label %if.then689, label %if.end690

if.then689:                                       ; preds = %sw.bb685
  br label %yyabortlab

if.end690:                                        ; preds = %sw.bb685
  %tv_sec692 = getelementptr inbounds %struct.timespec, ptr %.compoundliteral691, i32 0, i32 0
  %406 = load ptr, ptr %yyvsp, align 8
  %arrayidx693 = getelementptr inbounds %union.YYSTYPE, ptr %406, i64 0
  %value694 = getelementptr inbounds %struct.textint, ptr %arrayidx693, i32 0, i32 1
  %407 = load i64, ptr %value694, align 8
  store i64 %407, ptr %tv_sec692, align 8
  %tv_nsec695 = getelementptr inbounds %struct.timespec, ptr %.compoundliteral691, i32 0, i32 1
  store i64 0, ptr %tv_nsec695, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %yyval, ptr align 8 %.compoundliteral691, i64 16, i1 false)
  br label %sw.epilog

sw.bb696:                                         ; preds = %yyreduce
  %408 = load ptr, ptr %pc.addr, align 8
  %409 = load ptr, ptr %yyvsp, align 8
  %arrayidx697 = getelementptr inbounds %union.YYSTYPE, ptr %409, i64 0
  call void @digits_to_date_time(ptr noundef %408, ptr noundef byval(%struct.textint) align 8 %arrayidx697)
  br label %sw.epilog

sw.bb698:                                         ; preds = %yyreduce
  %410 = load ptr, ptr %pc.addr, align 8
  %411 = load ptr, ptr %yyvsp, align 8
  %arrayidx699 = getelementptr inbounds %union.YYSTYPE, ptr %411, i64 -1
  call void @digits_to_date_time(ptr noundef %410, ptr noundef byval(%struct.textint) align 8 %arrayidx699)
  %412 = load ptr, ptr %pc.addr, align 8
  %413 = load ptr, ptr %yyvsp, align 8
  %arrayidx700 = getelementptr inbounds %union.YYSTYPE, ptr %413, i64 0
  %call701 = call zeroext i1 @apply_relative_time(ptr noundef %412, ptr noundef byval(%struct.relative_time) align 8 %arrayidx700, i32 noundef 1)
  br i1 %call701, label %if.end703, label %if.then702

if.then702:                                       ; preds = %sw.bb698
  br label %yyabortlab

if.end703:                                        ; preds = %sw.bb698
  br label %sw.epilog

sw.bb704:                                         ; preds = %yyreduce
  store i64 -1, ptr %yyval, align 8
  br label %sw.epilog

sw.bb705:                                         ; preds = %yyreduce
  %414 = load ptr, ptr %yyvsp, align 8
  %arrayidx706 = getelementptr inbounds %union.YYSTYPE, ptr %414, i64 0
  %value707 = getelementptr inbounds %struct.textint, ptr %arrayidx706, i32 0, i32 1
  %415 = load i64, ptr %value707, align 8
  store i64 %415, ptr %yyval, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %yyreduce
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb705, %sw.bb704, %if.end703, %sw.bb696, %if.end690, %if.end679, %sw.bb663, %sw.bb651, %sw.bb639, %sw.bb627, %if.end626, %sw.bb600, %sw.bb588, %sw.bb578, %sw.bb562, %sw.bb548, %sw.bb537, %sw.bb527, %sw.bb518, %sw.bb507, %sw.bb499, %sw.bb491, %sw.bb481, %sw.bb474, %sw.bb466, %if.end465, %if.end453, %sw.bb436, %sw.bb427, %sw.bb419, %sw.bb412, %sw.bb403, %sw.bb396, %if.end395, %if.end390, %if.end385, %if.end378, %sw.bb358, %sw.bb352, %sw.bb344, %sw.bb338, %if.end333, %if.end315, %if.end303, %sw.bb262, %sw.bb254, %sw.bb248, %sw.bb243, %sw.bb240, %sw.bb235, %sw.bb230, %if.end229, %if.end217, %if.end210, %sw.bb201, %sw.bb198, %sw.bb195, %sw.bb192, %if.end191, %sw.bb173, %sw.bb167, %sw.bb163, %sw.bb152, %sw.bb144, %sw.bb140, %sw.bb138, %sw.bb136, %sw.bb134, %sw.bb131, %sw.bb127, %sw.bb124, %sw.bb122, %sw.bb119, %sw.bb115, %sw.bb112, %sw.bb
  %416 = load i32, ptr %yylen, align 4
  %417 = load ptr, ptr %yyvsp, align 8
  %idx.ext = sext i32 %416 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr708 = getelementptr inbounds %union.YYSTYPE, ptr %417, i64 %idx.neg
  store ptr %add.ptr708, ptr %yyvsp, align 8
  %418 = load i32, ptr %yylen, align 4
  %419 = load ptr, ptr %yyssp, align 8
  %idx.ext709 = sext i32 %418 to i64
  %idx.neg710 = sub i64 0, %idx.ext709
  %add.ptr711 = getelementptr inbounds i8, ptr %419, i64 %idx.neg710
  store ptr %add.ptr711, ptr %yyssp, align 8
  store i32 0, ptr %yylen, align 4
  %420 = load ptr, ptr %yyvsp, align 8
  %incdec.ptr712 = getelementptr inbounds %union.YYSTYPE, ptr %420, i32 1
  store ptr %incdec.ptr712, ptr %yyvsp, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %incdec.ptr712, ptr align 8 %yyval, i64 56, i1 false)
  %421 = load i32, ptr %yyn, align 4
  %idxprom713 = sext i32 %421 to i64
  %arrayidx714 = getelementptr inbounds [93 x i8], ptr @yyr1, i64 0, i64 %idxprom713
  %422 = load i8, ptr %arrayidx714, align 1
  %conv715 = sext i8 %422 to i32
  %sub716 = sub nsw i32 %conv715, 29
  store i32 %sub716, ptr %yylhs, align 4
  %423 = load i32, ptr %yylhs, align 4
  %idxprom717 = sext i32 %423 to i64
  %arrayidx718 = getelementptr inbounds [26 x i8], ptr @yypgoto, i64 0, i64 %idxprom717
  %424 = load i8, ptr %arrayidx718, align 1
  %conv719 = sext i8 %424 to i32
  %425 = load ptr, ptr %yyssp, align 8
  %426 = load i8, ptr %425, align 1
  %conv720 = sext i8 %426 to i32
  %add721 = add nsw i32 %conv719, %conv720
  store i32 %add721, ptr %yyi, align 4
  %427 = load i32, ptr %yyi, align 4
  %cmp722 = icmp sle i32 0, %427
  br i1 %cmp722, label %land.lhs.true724, label %cond.false738

land.lhs.true724:                                 ; preds = %sw.epilog
  %428 = load i32, ptr %yyi, align 4
  %cmp725 = icmp sle i32 %428, 114
  br i1 %cmp725, label %land.lhs.true727, label %cond.false738

land.lhs.true727:                                 ; preds = %land.lhs.true724
  %429 = load i32, ptr %yyi, align 4
  %idxprom728 = sext i32 %429 to i64
  %arrayidx729 = getelementptr inbounds [115 x i8], ptr @yycheck, i64 0, i64 %idxprom728
  %430 = load i8, ptr %arrayidx729, align 1
  %conv730 = sext i8 %430 to i32
  %431 = load ptr, ptr %yyssp, align 8
  %432 = load i8, ptr %431, align 1
  %conv731 = sext i8 %432 to i32
  %cmp732 = icmp eq i32 %conv730, %conv731
  br i1 %cmp732, label %cond.true734, label %cond.false738

cond.true734:                                     ; preds = %land.lhs.true727
  %433 = load i32, ptr %yyi, align 4
  %idxprom735 = sext i32 %433 to i64
  %arrayidx736 = getelementptr inbounds [115 x i8], ptr @yytable, i64 0, i64 %idxprom735
  %434 = load i8, ptr %arrayidx736, align 1
  %conv737 = sext i8 %434 to i32
  br label %cond.end742

cond.false738:                                    ; preds = %land.lhs.true727, %land.lhs.true724, %sw.epilog
  %435 = load i32, ptr %yylhs, align 4
  %idxprom739 = sext i32 %435 to i64
  %arrayidx740 = getelementptr inbounds [26 x i8], ptr @yydefgoto, i64 0, i64 %idxprom739
  %436 = load i8, ptr %arrayidx740, align 1
  %conv741 = sext i8 %436 to i32
  br label %cond.end742

cond.end742:                                      ; preds = %cond.false738, %cond.true734
  %cond743 = phi i32 [ %conv737, %cond.true734 ], [ %conv741, %cond.false738 ]
  store i32 %cond743, ptr %yystate, align 4
  br label %yynewstate

yyerrlab:                                         ; preds = %if.then102
  %437 = load i32, ptr %yychar, align 4
  %cmp744 = icmp eq i32 %437, -2
  br i1 %cmp744, label %cond.true746, label %cond.false747

cond.true746:                                     ; preds = %yyerrlab
  br label %cond.end760

cond.false747:                                    ; preds = %yyerrlab
  %438 = load i32, ptr %yychar, align 4
  %cmp748 = icmp sle i32 0, %438
  br i1 %cmp748, label %land.lhs.true750, label %cond.false757

land.lhs.true750:                                 ; preds = %cond.false747
  %439 = load i32, ptr %yychar, align 4
  %cmp751 = icmp sle i32 %439, 277
  br i1 %cmp751, label %cond.true753, label %cond.false757

cond.true753:                                     ; preds = %land.lhs.true750
  %440 = load i32, ptr %yychar, align 4
  %idxprom754 = sext i32 %440 to i64
  %arrayidx755 = getelementptr inbounds [278 x i8], ptr @yytranslate, i64 0, i64 %idxprom754
  %441 = load i8, ptr %arrayidx755, align 1
  %conv756 = sext i8 %441 to i32
  br label %cond.end758

cond.false757:                                    ; preds = %land.lhs.true750, %cond.false747
  br label %cond.end758

cond.end758:                                      ; preds = %cond.false757, %cond.true753
  %cond759 = phi i32 [ %conv756, %cond.true753 ], [ 2, %cond.false757 ]
  br label %cond.end760

cond.end760:                                      ; preds = %cond.end758, %cond.true746
  %cond761 = phi i32 [ -2, %cond.true746 ], [ %cond759, %cond.end758 ]
  store i32 %cond761, ptr %yytoken, align 4
  %442 = load i32, ptr %yyerrstatus, align 4
  %tobool762 = icmp ne i32 %442, 0
  br i1 %tobool762, label %if.end765, label %if.then763

if.then763:                                       ; preds = %cond.end760
  %443 = load i32, ptr %yynerrs, align 4
  %inc764 = add nsw i32 %443, 1
  store i32 %inc764, ptr %yynerrs, align 4
  %444 = load ptr, ptr %pc.addr, align 8
  call void @yyerror(ptr noundef %444, ptr noundef @.str.14.228)
  br label %if.end765

if.end765:                                        ; preds = %if.then763, %cond.end760
  %445 = load i32, ptr %yyerrstatus, align 4
  %cmp766 = icmp eq i32 %445, 3
  br i1 %cmp766, label %if.then768, label %if.end778

if.then768:                                       ; preds = %if.end765
  %446 = load i32, ptr %yychar, align 4
  %cmp769 = icmp sle i32 %446, 0
  br i1 %cmp769, label %if.then771, label %if.else776

if.then771:                                       ; preds = %if.then768
  %447 = load i32, ptr %yychar, align 4
  %cmp772 = icmp eq i32 %447, 0
  br i1 %cmp772, label %if.then774, label %if.end775

if.then774:                                       ; preds = %if.then771
  br label %yyabortlab

if.end775:                                        ; preds = %if.then771
  br label %if.end777

if.else776:                                       ; preds = %if.then768
  %448 = load i32, ptr %yytoken, align 4
  %449 = load ptr, ptr %pc.addr, align 8
  call void @yydestruct(ptr noundef @.str.15.229, i32 noundef %448, ptr noundef %yylval, ptr noundef %449)
  store i32 -2, ptr %yychar, align 4
  br label %if.end777

if.end777:                                        ; preds = %if.else776, %if.end775
  br label %if.end778

if.end778:                                        ; preds = %if.end777, %if.end765
  br label %yyerrlab1

yyerrorlab:                                       ; No predecessors!
  %450 = load i32, ptr %yynerrs, align 4
  %inc779 = add nsw i32 %450, 1
  store i32 %inc779, ptr %yynerrs, align 4
  %451 = load i32, ptr %yylen, align 4
  %452 = load ptr, ptr %yyvsp, align 8
  %idx.ext780 = sext i32 %451 to i64
  %idx.neg781 = sub i64 0, %idx.ext780
  %add.ptr782 = getelementptr inbounds %union.YYSTYPE, ptr %452, i64 %idx.neg781
  store ptr %add.ptr782, ptr %yyvsp, align 8
  %453 = load i32, ptr %yylen, align 4
  %454 = load ptr, ptr %yyssp, align 8
  %idx.ext783 = sext i32 %453 to i64
  %idx.neg784 = sub i64 0, %idx.ext783
  %add.ptr785 = getelementptr inbounds i8, ptr %454, i64 %idx.neg784
  store ptr %add.ptr785, ptr %yyssp, align 8
  store i32 0, ptr %yylen, align 4
  %455 = load ptr, ptr %yyssp, align 8
  %456 = load i8, ptr %455, align 1
  %conv786 = sext i8 %456 to i32
  store i32 %conv786, ptr %yystate, align 4
  br label %yyerrlab1

yyerrlab1:                                        ; preds = %yyerrorlab, %if.end778, %if.then62
  store i32 3, ptr %yyerrstatus, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end818, %yyerrlab1
  %457 = load i32, ptr %yystate, align 4
  %idxprom787 = sext i32 %457 to i64
  %arrayidx788 = getelementptr inbounds [115 x i8], ptr @yypact, i64 0, i64 %idxprom787
  %458 = load i8, ptr %arrayidx788, align 1
  %conv789 = sext i8 %458 to i32
  store i32 %conv789, ptr %yyn, align 4
  %459 = load i32, ptr %yyn, align 4
  %cmp790 = icmp eq i32 %459, -91
  br i1 %cmp790, label %if.end814, label %if.then792

if.then792:                                       ; preds = %for.cond
  %460 = load i32, ptr %yyn, align 4
  %add793 = add nsw i32 %460, 1
  store i32 %add793, ptr %yyn, align 4
  %461 = load i32, ptr %yyn, align 4
  %cmp794 = icmp sle i32 0, %461
  br i1 %cmp794, label %land.lhs.true796, label %if.end813

land.lhs.true796:                                 ; preds = %if.then792
  %462 = load i32, ptr %yyn, align 4
  %cmp797 = icmp sle i32 %462, 114
  br i1 %cmp797, label %land.lhs.true799, label %if.end813

land.lhs.true799:                                 ; preds = %land.lhs.true796
  %463 = load i32, ptr %yyn, align 4
  %idxprom800 = sext i32 %463 to i64
  %arrayidx801 = getelementptr inbounds [115 x i8], ptr @yycheck, i64 0, i64 %idxprom800
  %464 = load i8, ptr %arrayidx801, align 1
  %conv802 = sext i8 %464 to i32
  %cmp803 = icmp eq i32 %conv802, 1
  br i1 %cmp803, label %if.then805, label %if.end813

if.then805:                                       ; preds = %land.lhs.true799
  %465 = load i32, ptr %yyn, align 4
  %idxprom806 = sext i32 %465 to i64
  %arrayidx807 = getelementptr inbounds [115 x i8], ptr @yytable, i64 0, i64 %idxprom806
  %466 = load i8, ptr %arrayidx807, align 1
  %conv808 = sext i8 %466 to i32
  store i32 %conv808, ptr %yyn, align 4
  %467 = load i32, ptr %yyn, align 4
  %cmp809 = icmp slt i32 0, %467
  br i1 %cmp809, label %if.then811, label %if.end812

if.then811:                                       ; preds = %if.then805
  br label %for.end

if.end812:                                        ; preds = %if.then805
  br label %if.end813

if.end813:                                        ; preds = %if.end812, %land.lhs.true799, %land.lhs.true796, %if.then792
  br label %if.end814

if.end814:                                        ; preds = %if.end813, %for.cond
  %468 = load ptr, ptr %yyssp, align 8
  %469 = load ptr, ptr %yyss, align 8
  %cmp815 = icmp eq ptr %468, %469
  br i1 %cmp815, label %if.then817, label %if.end818

if.then817:                                       ; preds = %if.end814
  br label %yyabortlab

if.end818:                                        ; preds = %if.end814
  %470 = load i32, ptr %yystate, align 4
  %idxprom819 = sext i32 %470 to i64
  %arrayidx820 = getelementptr inbounds [115 x i8], ptr @yystos, i64 0, i64 %idxprom819
  %471 = load i8, ptr %arrayidx820, align 1
  %conv821 = sext i8 %471 to i32
  %472 = load ptr, ptr %yyvsp, align 8
  %473 = load ptr, ptr %pc.addr, align 8
  call void @yydestruct(ptr noundef @.str.16.230, i32 noundef %conv821, ptr noundef %472, ptr noundef %473)
  %474 = load ptr, ptr %yyvsp, align 8
  %add.ptr822 = getelementptr inbounds %union.YYSTYPE, ptr %474, i64 -1
  store ptr %add.ptr822, ptr %yyvsp, align 8
  %475 = load ptr, ptr %yyssp, align 8
  %add.ptr823 = getelementptr inbounds i8, ptr %475, i64 -1
  store ptr %add.ptr823, ptr %yyssp, align 8
  %476 = load ptr, ptr %yyssp, align 8
  %477 = load i8, ptr %476, align 1
  %conv824 = sext i8 %477 to i32
  store i32 %conv824, ptr %yystate, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then811
  %478 = load ptr, ptr %yyvsp, align 8
  %incdec.ptr825 = getelementptr inbounds %union.YYSTYPE, ptr %478, i32 1
  store ptr %incdec.ptr825, ptr %yyvsp, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %incdec.ptr825, ptr align 8 %yylval, i64 56, i1 false)
  %479 = load i32, ptr %yyn, align 4
  store i32 %479, ptr %yystate, align 4
  br label %yynewstate

yyacceptlab:                                      ; preds = %if.then45
  store i32 0, ptr %yyresult, align 4
  br label %yyreturnlab

yyabortlab:                                       ; preds = %if.then817, %if.then774, %if.then702, %if.then689, %if.then678, %if.then625, %if.then464, %if.then452, %if.then394, %if.then389, %if.then384, %if.then377, %if.then372, %if.then332, %if.then326, %if.then314, %if.then228, %if.then223, %if.then216, %if.then209, %if.then190, %if.then40
  store i32 1, ptr %yyresult, align 4
  br label %yyreturnlab

yyexhaustedlab:                                   ; preds = %if.then13, %if.then6
  %480 = load ptr, ptr %pc.addr, align 8
  call void @yyerror(ptr noundef %480, ptr noundef @.str.17.231)
  store i32 2, ptr %yyresult, align 4
  br label %yyreturnlab

yyreturnlab:                                      ; preds = %yyexhaustedlab, %yyabortlab, %yyacceptlab
  %481 = load i32, ptr %yychar, align 4
  %cmp826 = icmp ne i32 %481, -2
  br i1 %cmp826, label %if.then828, label %if.end841

if.then828:                                       ; preds = %yyreturnlab
  %482 = load i32, ptr %yychar, align 4
  %cmp829 = icmp sle i32 0, %482
  br i1 %cmp829, label %land.lhs.true831, label %cond.false838

land.lhs.true831:                                 ; preds = %if.then828
  %483 = load i32, ptr %yychar, align 4
  %cmp832 = icmp sle i32 %483, 277
  br i1 %cmp832, label %cond.true834, label %cond.false838

cond.true834:                                     ; preds = %land.lhs.true831
  %484 = load i32, ptr %yychar, align 4
  %idxprom835 = sext i32 %484 to i64
  %arrayidx836 = getelementptr inbounds [278 x i8], ptr @yytranslate, i64 0, i64 %idxprom835
  %485 = load i8, ptr %arrayidx836, align 1
  %conv837 = sext i8 %485 to i32
  br label %cond.end839

cond.false838:                                    ; preds = %land.lhs.true831, %if.then828
  br label %cond.end839

cond.end839:                                      ; preds = %cond.false838, %cond.true834
  %cond840 = phi i32 [ %conv837, %cond.true834 ], [ 2, %cond.false838 ]
  store i32 %cond840, ptr %yytoken, align 4
  %486 = load i32, ptr %yytoken, align 4
  %487 = load ptr, ptr %pc.addr, align 8
  call void @yydestruct(ptr noundef @.str.18.232, i32 noundef %486, ptr noundef %yylval, ptr noundef %487)
  br label %if.end841

if.end841:                                        ; preds = %cond.end839, %yyreturnlab
  %488 = load i32, ptr %yylen, align 4
  %489 = load ptr, ptr %yyvsp, align 8
  %idx.ext842 = sext i32 %488 to i64
  %idx.neg843 = sub i64 0, %idx.ext842
  %add.ptr844 = getelementptr inbounds %union.YYSTYPE, ptr %489, i64 %idx.neg843
  store ptr %add.ptr844, ptr %yyvsp, align 8
  %490 = load i32, ptr %yylen, align 4
  %491 = load ptr, ptr %yyssp, align 8
  %idx.ext845 = sext i32 %490 to i64
  %idx.neg846 = sub i64 0, %idx.ext845
  %add.ptr847 = getelementptr inbounds i8, ptr %491, i64 %idx.neg846
  store ptr %add.ptr847, ptr %yyssp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end841
  %492 = load ptr, ptr %yyssp, align 8
  %493 = load ptr, ptr %yyss, align 8
  %cmp848 = icmp ne ptr %492, %493
  br i1 %cmp848, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %494 = load ptr, ptr %yyssp, align 8
  %495 = load i8, ptr %494, align 1
  %conv850 = sext i8 %495 to i32
  %idxprom851 = sext i32 %conv850 to i64
  %arrayidx852 = getelementptr inbounds [115 x i8], ptr @yystos, i64 0, i64 %idxprom851
  %496 = load i8, ptr %arrayidx852, align 1
  %conv853 = sext i8 %496 to i32
  %497 = load ptr, ptr %yyvsp, align 8
  %498 = load ptr, ptr %pc.addr, align 8
  call void @yydestruct(ptr noundef @.str.19.233, i32 noundef %conv853, ptr noundef %497, ptr noundef %498)
  %499 = load ptr, ptr %yyvsp, align 8
  %add.ptr854 = getelementptr inbounds %union.YYSTYPE, ptr %499, i64 -1
  store ptr %add.ptr854, ptr %yyvsp, align 8
  %500 = load ptr, ptr %yyssp, align 8
  %add.ptr855 = getelementptr inbounds i8, ptr %500, i64 -1
  store ptr %add.ptr855, ptr %yyssp, align 8
  br label %while.cond, !llvm.loop !62

while.end:                                        ; preds = %while.cond
  %501 = load ptr, ptr %yyss, align 8
  %arraydecay856 = getelementptr inbounds [20 x i8], ptr %yyssa, i64 0, i64 0
  %cmp857 = icmp ne ptr %501, %arraydecay856
  br i1 %cmp857, label %if.then859, label %if.end860

if.then859:                                       ; preds = %while.end
  %502 = load ptr, ptr %yyss, align 8
  call void @free(ptr noundef %502) #21
  br label %if.end860

if.end860:                                        ; preds = %if.then859, %while.end
  %503 = load i32, ptr %yyresult, align 4
  ret i32 %503
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @yylex(ptr noundef %lvalp, ptr noundef %pc) #3 {
entry:
  %retval = alloca i32, align 4
  %lvalp.addr = alloca ptr, align 8
  %pc.addr = alloca ptr, align 8
  %c = alloca i8, align 1
  %p = alloca ptr, align 8
  %sign = alloca i32, align 4
  %value = alloca i64, align 8
  %s = alloca i64, align 8
  %digits = alloca i32, align 4
  %ns = alloca i32, align 4
  %.compoundliteral = alloca %struct.timespec, align 8
  %buff = alloca [20 x i8], align 16
  %p120 = alloca ptr, align 8
  %tp = alloca ptr, align 8
  %count = alloca i64, align 8
  store ptr %lvalp, ptr %lvalp.addr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %do.end185, %if.then32, %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.cond
  %0 = load ptr, ptr %pc.addr, align 8
  %input = getelementptr inbounds %struct.parser_control, ptr %0, i32 0, i32 0
  %1 = load ptr, ptr %input, align 8
  %2 = load i8, ptr %1, align 1
  store i8 %2, ptr %c, align 1
  %3 = load i8, ptr %c, align 1
  %conv = zext i8 %3 to i32
  %call = call zeroext i1 @c_isspace(i32 noundef %conv)
  br i1 %call, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load ptr, ptr %pc.addr, align 8
  %input1 = getelementptr inbounds %struct.parser_control, ptr %4, i32 0, i32 0
  %5 = load ptr, ptr %input1, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %5, i32 1
  store ptr %incdec.ptr, ptr %input1, align 8
  br label %while.cond, !llvm.loop !63

while.end:                                        ; preds = %while.cond
  %6 = load i8, ptr %c, align 1
  %conv2 = zext i8 %6 to i32
  %call3 = call zeroext i1 @c_isdigit(i32 noundef %conv2)
  br i1 %call3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %7 = load i8, ptr %c, align 1
  %conv5 = zext i8 %7 to i32
  %cmp = icmp eq i32 %conv5, 45
  br i1 %cmp, label %if.then, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %8 = load i8, ptr %c, align 1
  %conv8 = zext i8 %8 to i32
  %cmp9 = icmp eq i32 %conv8, 43
  br i1 %cmp9, label %if.then, label %if.end116

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false, %while.end
  %9 = load ptr, ptr %pc.addr, align 8
  %input11 = getelementptr inbounds %struct.parser_control, ptr %9, i32 0, i32 0
  %10 = load ptr, ptr %input11, align 8
  store ptr %10, ptr %p, align 8
  %11 = load i8, ptr %c, align 1
  %conv12 = zext i8 %11 to i32
  %cmp13 = icmp eq i32 %conv12, 45
  br i1 %cmp13, label %if.then19, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %if.then
  %12 = load i8, ptr %c, align 1
  %conv16 = zext i8 %12 to i32
  %cmp17 = icmp eq i32 %conv16, 43
  br i1 %cmp17, label %if.then19, label %if.else

if.then19:                                        ; preds = %lor.lhs.false15, %if.then
  %13 = load i8, ptr %c, align 1
  %conv20 = zext i8 %13 to i32
  %cmp21 = icmp eq i32 %conv20, 45
  %14 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 -1, i32 1
  store i32 %cond, ptr %sign, align 4
  br label %while.cond23

while.cond23:                                     ; preds = %while.body28, %if.then19
  %15 = load ptr, ptr %p, align 8
  %incdec.ptr24 = getelementptr inbounds i8, ptr %15, i32 1
  store ptr %incdec.ptr24, ptr %p, align 8
  %16 = load ptr, ptr %pc.addr, align 8
  %input25 = getelementptr inbounds %struct.parser_control, ptr %16, i32 0, i32 0
  store ptr %incdec.ptr24, ptr %input25, align 8
  %17 = load i8, ptr %incdec.ptr24, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1
  %conv26 = zext i8 %18 to i32
  %call27 = call zeroext i1 @c_isspace(i32 noundef %conv26)
  br i1 %call27, label %while.body28, label %while.end29

while.body28:                                     ; preds = %while.cond23
  br label %while.cond23, !llvm.loop !64

while.end29:                                      ; preds = %while.cond23
  %19 = load i8, ptr %c, align 1
  %conv30 = zext i8 %19 to i32
  %call31 = call zeroext i1 @c_isdigit(i32 noundef %conv30)
  br i1 %call31, label %if.end, label %if.then32

if.then32:                                        ; preds = %while.end29
  br label %for.cond

if.end:                                           ; preds = %while.end29
  br label %if.end33

if.else:                                          ; preds = %lor.lhs.false15
  store i32 0, ptr %sign, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.end
  store i64 0, ptr %value, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end33
  %20 = load i64, ptr %value, align 8
  %21 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %20, i64 10)
  %22 = extractvalue { i64, i1 } %21, 1
  %23 = extractvalue { i64, i1 } %21, 0
  store i64 %23, ptr %value, align 8
  br i1 %22, label %if.then34, label %if.end35

if.then34:                                        ; preds = %do.body
  store i32 63, ptr %retval, align 4
  br label %return

if.end35:                                         ; preds = %do.body
  %24 = load i64, ptr %value, align 8
  %25 = load i32, ptr %sign, align 4
  %cmp36 = icmp slt i32 %25, 0
  br i1 %cmp36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end35
  %26 = load i8, ptr %c, align 1
  %conv38 = zext i8 %26 to i32
  %sub = sub nsw i32 48, %conv38
  br label %cond.end

cond.false:                                       ; preds = %if.end35
  %27 = load i8, ptr %c, align 1
  %conv39 = zext i8 %27 to i32
  %sub40 = sub nsw i32 %conv39, 48
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond41 = phi i32 [ %sub, %cond.true ], [ %sub40, %cond.false ]
  %28 = sext i32 %cond41 to i64
  %29 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %24, i64 %28)
  %30 = extractvalue { i64, i1 } %29, 1
  %31 = extractvalue { i64, i1 } %29, 0
  store i64 %31, ptr %value, align 8
  br i1 %30, label %if.then42, label %if.end43

if.then42:                                        ; preds = %cond.end
  store i32 63, ptr %retval, align 4
  br label %return

if.end43:                                         ; preds = %cond.end
  %32 = load ptr, ptr %p, align 8
  %incdec.ptr44 = getelementptr inbounds i8, ptr %32, i32 1
  store ptr %incdec.ptr44, ptr %p, align 8
  %33 = load i8, ptr %incdec.ptr44, align 1
  store i8 %33, ptr %c, align 1
  br label %do.cond

do.cond:                                          ; preds = %if.end43
  %34 = load i8, ptr %c, align 1
  %conv45 = zext i8 %34 to i32
  %call46 = call zeroext i1 @c_isdigit(i32 noundef %conv45)
  br i1 %call46, label %do.body, label %do.end, !llvm.loop !65

do.end:                                           ; preds = %do.cond
  %35 = load i8, ptr %c, align 1
  %conv47 = zext i8 %35 to i32
  %cmp48 = icmp eq i32 %conv47, 46
  br i1 %cmp48, label %land.lhs.true, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %do.end
  %36 = load i8, ptr %c, align 1
  %conv51 = zext i8 %36 to i32
  %cmp52 = icmp eq i32 %conv51, 44
  br i1 %cmp52, label %land.lhs.true, label %if.else107

land.lhs.true:                                    ; preds = %lor.lhs.false50, %do.end
  %37 = load ptr, ptr %p, align 8
  %arrayidx = getelementptr inbounds i8, ptr %37, i64 1
  %38 = load i8, ptr %arrayidx, align 1
  %conv54 = sext i8 %38 to i32
  %call55 = call zeroext i1 @c_isdigit(i32 noundef %conv54)
  br i1 %call55, label %if.then57, label %if.else107

if.then57:                                        ; preds = %land.lhs.true
  %39 = load i64, ptr %value, align 8
  store i64 %39, ptr %s, align 8
  %40 = load ptr, ptr %p, align 8
  %incdec.ptr58 = getelementptr inbounds i8, ptr %40, i32 1
  store ptr %incdec.ptr58, ptr %p, align 8
  %41 = load ptr, ptr %p, align 8
  %incdec.ptr59 = getelementptr inbounds i8, ptr %41, i32 1
  store ptr %incdec.ptr59, ptr %p, align 8
  %42 = load i8, ptr %41, align 1
  %conv60 = sext i8 %42 to i32
  %sub61 = sub nsw i32 %conv60, 48
  store i32 %sub61, ptr %ns, align 4
  store i32 2, ptr %digits, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc, %if.then57
  %43 = load i32, ptr %digits, align 4
  %cmp63 = icmp sle i32 %43, 9
  br i1 %cmp63, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond62
  %44 = load i32, ptr %ns, align 4
  %mul = mul nsw i32 %44, 10
  store i32 %mul, ptr %ns, align 4
  %45 = load ptr, ptr %p, align 8
  %46 = load i8, ptr %45, align 1
  %conv65 = sext i8 %46 to i32
  %call66 = call zeroext i1 @c_isdigit(i32 noundef %conv65)
  br i1 %call66, label %if.then67, label %if.end71

if.then67:                                        ; preds = %for.body
  %47 = load ptr, ptr %p, align 8
  %incdec.ptr68 = getelementptr inbounds i8, ptr %47, i32 1
  store ptr %incdec.ptr68, ptr %p, align 8
  %48 = load i8, ptr %47, align 1
  %conv69 = sext i8 %48 to i32
  %sub70 = sub nsw i32 %conv69, 48
  %49 = load i32, ptr %ns, align 4
  %add = add nsw i32 %49, %sub70
  store i32 %add, ptr %ns, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then67, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end71
  %50 = load i32, ptr %digits, align 4
  %inc = add nsw i32 %50, 1
  store i32 %inc, ptr %digits, align 4
  br label %for.cond62, !llvm.loop !66

for.end:                                          ; preds = %for.cond62
  %51 = load i32, ptr %sign, align 4
  %cmp72 = icmp slt i32 %51, 0
  br i1 %cmp72, label %if.then74, label %if.end88

if.then74:                                        ; preds = %for.end
  br label %for.cond75

for.cond75:                                       ; preds = %for.inc85, %if.then74
  %52 = load ptr, ptr %p, align 8
  %53 = load i8, ptr %52, align 1
  %conv76 = sext i8 %53 to i32
  %call77 = call zeroext i1 @c_isdigit(i32 noundef %conv76)
  br i1 %call77, label %for.body78, label %for.end87

for.body78:                                       ; preds = %for.cond75
  %54 = load ptr, ptr %p, align 8
  %55 = load i8, ptr %54, align 1
  %conv79 = sext i8 %55 to i32
  %cmp80 = icmp ne i32 %conv79, 48
  br i1 %cmp80, label %if.then82, label %if.end84

if.then82:                                        ; preds = %for.body78
  %56 = load i32, ptr %ns, align 4
  %inc83 = add nsw i32 %56, 1
  store i32 %inc83, ptr %ns, align 4
  br label %for.end87

if.end84:                                         ; preds = %for.body78
  br label %for.inc85

for.inc85:                                        ; preds = %if.end84
  %57 = load ptr, ptr %p, align 8
  %incdec.ptr86 = getelementptr inbounds i8, ptr %57, i32 1
  store ptr %incdec.ptr86, ptr %p, align 8
  br label %for.cond75, !llvm.loop !67

for.end87:                                        ; preds = %if.then82, %for.cond75
  br label %if.end88

if.end88:                                         ; preds = %for.end87, %for.end
  br label %while.cond89

while.cond89:                                     ; preds = %while.body92, %if.end88
  %58 = load ptr, ptr %p, align 8
  %59 = load i8, ptr %58, align 1
  %conv90 = sext i8 %59 to i32
  %call91 = call zeroext i1 @c_isdigit(i32 noundef %conv90)
  br i1 %call91, label %while.body92, label %while.end94

while.body92:                                     ; preds = %while.cond89
  %60 = load ptr, ptr %p, align 8
  %incdec.ptr93 = getelementptr inbounds i8, ptr %60, i32 1
  store ptr %incdec.ptr93, ptr %p, align 8
  br label %while.cond89, !llvm.loop !68

while.end94:                                      ; preds = %while.cond89
  %61 = load i32, ptr %sign, align 4
  %cmp95 = icmp slt i32 %61, 0
  br i1 %cmp95, label %land.lhs.true97, label %if.end102

land.lhs.true97:                                  ; preds = %while.end94
  %62 = load i32, ptr %ns, align 4
  %tobool = icmp ne i32 %62, 0
  br i1 %tobool, label %if.then98, label %if.end102

if.then98:                                        ; preds = %land.lhs.true97
  %63 = load i64, ptr %s, align 8
  %64 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %63, i64 1)
  %65 = extractvalue { i64, i1 } %64, 1
  %66 = extractvalue { i64, i1 } %64, 0
  store i64 %66, ptr %s, align 8
  br i1 %65, label %if.then99, label %if.end100

if.then99:                                        ; preds = %if.then98
  store i32 63, ptr %retval, align 4
  br label %return

if.end100:                                        ; preds = %if.then98
  %67 = load i32, ptr %ns, align 4
  %sub101 = sub nsw i32 1000000000, %67
  store i32 %sub101, ptr %ns, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.end100, %land.lhs.true97, %while.end94
  %68 = load ptr, ptr %lvalp.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timespec, ptr %.compoundliteral, i32 0, i32 0
  %69 = load i64, ptr %s, align 8
  store i64 %69, ptr %tv_sec, align 8
  %tv_nsec = getelementptr inbounds %struct.timespec, ptr %.compoundliteral, i32 0, i32 1
  %70 = load i32, ptr %ns, align 4
  %conv103 = sext i32 %70 to i64
  store i64 %conv103, ptr %tv_nsec, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %68, ptr align 8 %.compoundliteral, i64 16, i1 false)
  %71 = load ptr, ptr %p, align 8
  %72 = load ptr, ptr %pc.addr, align 8
  %input104 = getelementptr inbounds %struct.parser_control, ptr %72, i32 0, i32 0
  store ptr %71, ptr %input104, align 8
  %73 = load i32, ptr %sign, align 4
  %tobool105 = icmp ne i32 %73, 0
  %74 = zext i1 %tobool105 to i64
  %cond106 = select i1 %tobool105, i32 276, i32 277
  store i32 %cond106, ptr %retval, align 4
  br label %return

if.else107:                                       ; preds = %land.lhs.true, %lor.lhs.false50
  %75 = load i32, ptr %sign, align 4
  %cmp108 = icmp slt i32 %75, 0
  %76 = load ptr, ptr %lvalp.addr, align 8
  %negative = getelementptr inbounds %struct.textint, ptr %76, i32 0, i32 0
  %frombool = zext i1 %cmp108 to i8
  store i8 %frombool, ptr %negative, align 8
  %77 = load i64, ptr %value, align 8
  %78 = load ptr, ptr %lvalp.addr, align 8
  %value110 = getelementptr inbounds %struct.textint, ptr %78, i32 0, i32 1
  store i64 %77, ptr %value110, align 8
  %79 = load ptr, ptr %p, align 8
  %80 = load ptr, ptr %pc.addr, align 8
  %input111 = getelementptr inbounds %struct.parser_control, ptr %80, i32 0, i32 0
  %81 = load ptr, ptr %input111, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %79 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %81 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %82 = load ptr, ptr %lvalp.addr, align 8
  %digits112 = getelementptr inbounds %struct.textint, ptr %82, i32 0, i32 2
  store i64 %sub.ptr.sub, ptr %digits112, align 8
  %83 = load ptr, ptr %p, align 8
  %84 = load ptr, ptr %pc.addr, align 8
  %input113 = getelementptr inbounds %struct.parser_control, ptr %84, i32 0, i32 0
  store ptr %83, ptr %input113, align 8
  %85 = load i32, ptr %sign, align 4
  %tobool114 = icmp ne i32 %85, 0
  %86 = zext i1 %tobool114 to i64
  %cond115 = select i1 %tobool114, i32 274, i32 275
  store i32 %cond115, ptr %retval, align 4
  br label %return

if.end116:                                        ; preds = %lor.lhs.false7
  %87 = load i8, ptr %c, align 1
  %conv117 = zext i8 %87 to i32
  %call118 = call zeroext i1 @c_isalpha(i32 noundef %conv117)
  br i1 %call118, label %if.then119, label %if.end151

if.then119:                                       ; preds = %if.end116
  %arraydecay = getelementptr inbounds [20 x i8], ptr %buff, i64 0, i64 0
  store ptr %arraydecay, ptr %p120, align 8
  br label %do.body121

do.body121:                                       ; preds = %lor.end, %if.then119
  %88 = load ptr, ptr %p120, align 8
  %arraydecay122 = getelementptr inbounds [20 x i8], ptr %buff, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, ptr %arraydecay122, i64 20
  %add.ptr123 = getelementptr inbounds i8, ptr %add.ptr, i64 -1
  %cmp124 = icmp ult ptr %88, %add.ptr123
  br i1 %cmp124, label %if.then126, label %if.end128

if.then126:                                       ; preds = %do.body121
  %89 = load i8, ptr %c, align 1
  %90 = load ptr, ptr %p120, align 8
  %incdec.ptr127 = getelementptr inbounds i8, ptr %90, i32 1
  store ptr %incdec.ptr127, ptr %p120, align 8
  store i8 %89, ptr %90, align 1
  br label %if.end128

if.end128:                                        ; preds = %if.then126, %do.body121
  %91 = load ptr, ptr %pc.addr, align 8
  %input129 = getelementptr inbounds %struct.parser_control, ptr %91, i32 0, i32 0
  %92 = load ptr, ptr %input129, align 8
  %incdec.ptr130 = getelementptr inbounds i8, ptr %92, i32 1
  store ptr %incdec.ptr130, ptr %input129, align 8
  %93 = load i8, ptr %incdec.ptr130, align 1
  store i8 %93, ptr %c, align 1
  br label %do.cond131

do.cond131:                                       ; preds = %if.end128
  %94 = load i8, ptr %c, align 1
  %conv132 = zext i8 %94 to i32
  %call133 = call zeroext i1 @c_isalpha(i32 noundef %conv132)
  br i1 %call133, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.cond131
  %95 = load i8, ptr %c, align 1
  %conv135 = zext i8 %95 to i32
  %cmp136 = icmp eq i32 %conv135, 46
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.cond131
  %96 = phi i1 [ true, %do.cond131 ], [ %cmp136, %lor.rhs ]
  br i1 %96, label %do.body121, label %do.end138, !llvm.loop !69

do.end138:                                        ; preds = %lor.end
  %97 = load ptr, ptr %p120, align 8
  store i8 0, ptr %97, align 1
  %98 = load ptr, ptr %pc.addr, align 8
  %arraydecay139 = getelementptr inbounds [20 x i8], ptr %buff, i64 0, i64 0
  %call140 = call ptr @lookup_word(ptr noundef %98, ptr noundef %arraydecay139)
  store ptr %call140, ptr %tp, align 8
  %99 = load ptr, ptr %tp, align 8
  %tobool141 = icmp ne ptr %99, null
  br i1 %tobool141, label %if.end148, label %if.then142

if.then142:                                       ; preds = %do.end138
  %100 = load ptr, ptr %pc.addr, align 8
  %call143 = call zeroext i1 @debugging(ptr noundef %100)
  br i1 %call143, label %if.then144, label %if.end147

if.then144:                                       ; preds = %if.then142
  %call145 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.48.261) #21
  %arraydecay146 = getelementptr inbounds [20 x i8], ptr %buff, i64 0, i64 0
  call void (ptr, ...) @dbg_printf(ptr noundef %call145, ptr noundef %arraydecay146)
  br label %if.end147

if.end147:                                        ; preds = %if.then144, %if.then142
  store i32 63, ptr %retval, align 4
  br label %return

if.end148:                                        ; preds = %do.end138
  %101 = load ptr, ptr %tp, align 8
  %value149 = getelementptr inbounds %struct.table, ptr %101, i32 0, i32 2
  %102 = load i32, ptr %value149, align 4
  %conv150 = sext i32 %102 to i64
  %103 = load ptr, ptr %lvalp.addr, align 8
  store i64 %conv150, ptr %103, align 8
  %104 = load ptr, ptr %tp, align 8
  %type = getelementptr inbounds %struct.table, ptr %104, i32 0, i32 1
  %105 = load i32, ptr %type, align 8
  store i32 %105, ptr %retval, align 4
  br label %return

if.end151:                                        ; preds = %if.end116
  %106 = load i8, ptr %c, align 1
  %conv152 = zext i8 %106 to i32
  %cmp153 = icmp ne i32 %conv152, 40
  br i1 %cmp153, label %if.then155, label %if.end160

if.then155:                                       ; preds = %if.end151
  %107 = load ptr, ptr %pc.addr, align 8
  %input156 = getelementptr inbounds %struct.parser_control, ptr %107, i32 0, i32 0
  %108 = load ptr, ptr %input156, align 8
  %incdec.ptr157 = getelementptr inbounds i8, ptr %108, i32 1
  store ptr %incdec.ptr157, ptr %input156, align 8
  %109 = load i8, ptr %108, align 1
  %call158 = call zeroext i8 @to_uchar(i8 noundef signext %109)
  %conv159 = zext i8 %call158 to i32
  store i32 %conv159, ptr %retval, align 4
  br label %return

if.end160:                                        ; preds = %if.end151
  store i64 0, ptr %count, align 8
  br label %do.body161

do.body161:                                       ; preds = %do.cond182, %if.end160
  %110 = load ptr, ptr %pc.addr, align 8
  %input162 = getelementptr inbounds %struct.parser_control, ptr %110, i32 0, i32 0
  %111 = load ptr, ptr %input162, align 8
  %incdec.ptr163 = getelementptr inbounds i8, ptr %111, i32 1
  store ptr %incdec.ptr163, ptr %input162, align 8
  %112 = load i8, ptr %111, align 1
  store i8 %112, ptr %c, align 1
  %113 = load i8, ptr %c, align 1
  %conv164 = zext i8 %113 to i32
  %cmp165 = icmp eq i32 %conv164, 0
  br i1 %cmp165, label %if.then167, label %if.end169

if.then167:                                       ; preds = %do.body161
  %114 = load i8, ptr %c, align 1
  %conv168 = zext i8 %114 to i32
  store i32 %conv168, ptr %retval, align 4
  br label %return

if.end169:                                        ; preds = %do.body161
  %115 = load i8, ptr %c, align 1
  %conv170 = zext i8 %115 to i32
  %cmp171 = icmp eq i32 %conv170, 40
  br i1 %cmp171, label %if.then173, label %if.else175

if.then173:                                       ; preds = %if.end169
  %116 = load i64, ptr %count, align 8
  %inc174 = add nsw i64 %116, 1
  store i64 %inc174, ptr %count, align 8
  br label %if.end181

if.else175:                                       ; preds = %if.end169
  %117 = load i8, ptr %c, align 1
  %conv176 = zext i8 %117 to i32
  %cmp177 = icmp eq i32 %conv176, 41
  br i1 %cmp177, label %if.then179, label %if.end180

if.then179:                                       ; preds = %if.else175
  %118 = load i64, ptr %count, align 8
  %dec = add nsw i64 %118, -1
  store i64 %dec, ptr %count, align 8
  br label %if.end180

if.end180:                                        ; preds = %if.then179, %if.else175
  br label %if.end181

if.end181:                                        ; preds = %if.end180, %if.then173
  br label %do.cond182

do.cond182:                                       ; preds = %if.end181
  %119 = load i64, ptr %count, align 8
  %cmp183 = icmp ne i64 %119, 0
  br i1 %cmp183, label %do.body161, label %do.end185, !llvm.loop !70

do.end185:                                        ; preds = %do.cond182
  br label %for.cond

return:                                           ; preds = %if.then167, %if.then155, %if.end148, %if.end147, %if.else107, %if.end102, %if.then99, %if.then42, %if.then34
  %120 = load i32, ptr %retval, align 4
  ret i32 %120
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @debug_print_current_time(ptr noundef %item, ptr noundef %pc) #3 {
entry:
  %item.addr = alloca ptr, align 8
  %pc.addr = alloca ptr, align 8
  %space = alloca i8, align 1
  %sec = alloca i64, align 8
  %nsec = alloca i32, align 4
  %tmp = alloca [100 x i8], align 16
  %time_zone_buf = alloca [27 x i8], align 16
  %sec88 = alloca i64, align 8
  store ptr %item, ptr %item.addr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  store i8 0, ptr %space, align 1
  %0 = load ptr, ptr %pc.addr, align 8
  %call = call zeroext i1 @debugging(ptr noundef %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.21.236) #21
  %1 = load ptr, ptr %item.addr, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call1, ptr noundef %1)
  %2 = load ptr, ptr %pc.addr, align 8
  %dates_seen = getelementptr inbounds %struct.parser_control, ptr %2, i32 0, i32 15
  %3 = load i64, ptr %dates_seen, align 8
  %tobool = icmp ne i64 %3, 0
  br i1 %tobool, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %if.end
  %4 = load ptr, ptr %pc.addr, align 8
  %debug_dates_seen = getelementptr inbounds %struct.parser_control, ptr %4, i32 0, i32 24
  %5 = load i8, ptr %debug_dates_seen, align 2
  %tobool2 = trunc i8 %5 to i1
  br i1 %tobool2, label %if.end6, label %if.then3

if.then3:                                         ; preds = %land.lhs.true
  %6 = load ptr, ptr @stderr, align 8
  %7 = load ptr, ptr %pc.addr, align 8
  %year = getelementptr inbounds %struct.parser_control, ptr %7, i32 0, i32 6
  %value = getelementptr inbounds %struct.textint, ptr %year, i32 0, i32 1
  %8 = load i64, ptr %value, align 8
  %9 = load ptr, ptr %pc.addr, align 8
  %month = getelementptr inbounds %struct.parser_control, ptr %9, i32 0, i32 7
  %10 = load i64, ptr %month, align 8
  %11 = load ptr, ptr %pc.addr, align 8
  %day = getelementptr inbounds %struct.parser_control, ptr %11, i32 0, i32 8
  %12 = load i64, ptr %day, align 8
  %call4 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %6, ptr noundef @.str.22.246, i64 noundef %8, i64 noundef %10, i64 noundef %12)
  %13 = load ptr, ptr %pc.addr, align 8
  %debug_dates_seen5 = getelementptr inbounds %struct.parser_control, ptr %13, i32 0, i32 24
  store i8 1, ptr %debug_dates_seen5, align 2
  store i8 1, ptr %space, align 1
  br label %if.end6

if.end6:                                          ; preds = %if.then3, %land.lhs.true, %if.end
  %14 = load ptr, ptr %pc.addr, align 8
  %year_seen = getelementptr inbounds %struct.parser_control, ptr %14, i32 0, i32 22
  %15 = load i8, ptr %year_seen, align 8
  %tobool7 = trunc i8 %15 to i1
  %conv = zext i1 %tobool7 to i32
  %16 = load ptr, ptr %pc.addr, align 8
  %debug_year_seen = getelementptr inbounds %struct.parser_control, ptr %16, i32 0, i32 29
  %17 = load i8, ptr %debug_year_seen, align 1
  %tobool8 = trunc i8 %17 to i1
  %conv9 = zext i1 %tobool8 to i32
  %cmp = icmp ne i32 %conv, %conv9
  br i1 %cmp, label %if.then11, label %if.end23

if.then11:                                        ; preds = %if.end6
  %18 = load i8, ptr %space, align 1
  %tobool12 = trunc i8 %18 to i1
  br i1 %tobool12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.then11
  %19 = load ptr, ptr @stderr, align 8
  %call14 = call i32 @fputc(i32 noundef 32, ptr noundef %19)
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.then11
  %20 = load ptr, ptr @stderr, align 8
  %call16 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.23.247) #21
  %21 = load ptr, ptr %pc.addr, align 8
  %year17 = getelementptr inbounds %struct.parser_control, ptr %21, i32 0, i32 6
  %value18 = getelementptr inbounds %struct.textint, ptr %year17, i32 0, i32 1
  %22 = load i64, ptr %value18, align 8
  %call19 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %20, ptr noundef %call16, i64 noundef %22)
  %23 = load ptr, ptr %pc.addr, align 8
  %year_seen20 = getelementptr inbounds %struct.parser_control, ptr %23, i32 0, i32 22
  %24 = load i8, ptr %year_seen20, align 8
  %tobool21 = trunc i8 %24 to i1
  %25 = load ptr, ptr %pc.addr, align 8
  %debug_year_seen22 = getelementptr inbounds %struct.parser_control, ptr %25, i32 0, i32 29
  %frombool = zext i1 %tobool21 to i8
  store i8 %frombool, ptr %debug_year_seen22, align 1
  store i8 1, ptr %space, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.end15, %if.end6
  %26 = load ptr, ptr %pc.addr, align 8
  %times_seen = getelementptr inbounds %struct.parser_control, ptr %26, i32 0, i32 20
  %27 = load i64, ptr %times_seen, align 8
  %tobool24 = icmp ne i64 %27, 0
  br i1 %tobool24, label %land.lhs.true25, label %if.end45

land.lhs.true25:                                  ; preds = %if.end23
  %28 = load ptr, ptr %pc.addr, align 8
  %debug_times_seen = getelementptr inbounds %struct.parser_control, ptr %28, i32 0, i32 27
  %29 = load i8, ptr %debug_times_seen, align 1
  %tobool26 = trunc i8 %29 to i1
  br i1 %tobool26, label %if.end45, label %if.then27

if.then27:                                        ; preds = %land.lhs.true25
  %30 = load ptr, ptr %pc.addr, align 8
  %seconds = getelementptr inbounds %struct.parser_control, ptr %30, i32 0, i32 11
  %tv_sec = getelementptr inbounds %struct.timespec, ptr %seconds, i32 0, i32 0
  %31 = load i64, ptr %tv_sec, align 8
  store i64 %31, ptr %sec, align 8
  %32 = load ptr, ptr @stderr, align 8
  %33 = load i8, ptr %space, align 1
  %tobool28 = trunc i8 %33 to i1
  %lnot = xor i1 %tobool28, true
  %lnot.ext = zext i1 %lnot to i32
  %idxprom = sext i32 %lnot.ext to i64
  %arrayidx = getelementptr inbounds [19 x i8], ptr @.str.24.248, i64 0, i64 %idxprom
  %34 = load ptr, ptr %pc.addr, align 8
  %hour = getelementptr inbounds %struct.parser_control, ptr %34, i32 0, i32 9
  %35 = load i64, ptr %hour, align 8
  %36 = load ptr, ptr %pc.addr, align 8
  %minutes = getelementptr inbounds %struct.parser_control, ptr %36, i32 0, i32 10
  %37 = load i64, ptr %minutes, align 8
  %38 = load i64, ptr %sec, align 8
  %call29 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %32, ptr noundef %arrayidx, i64 noundef %35, i64 noundef %37, i64 noundef %38)
  %39 = load ptr, ptr %pc.addr, align 8
  %seconds30 = getelementptr inbounds %struct.parser_control, ptr %39, i32 0, i32 11
  %tv_nsec = getelementptr inbounds %struct.timespec, ptr %seconds30, i32 0, i32 1
  %40 = load i64, ptr %tv_nsec, align 8
  %cmp31 = icmp ne i64 %40, 0
  br i1 %cmp31, label %if.then33, label %if.end38

if.then33:                                        ; preds = %if.then27
  %41 = load ptr, ptr %pc.addr, align 8
  %seconds34 = getelementptr inbounds %struct.parser_control, ptr %41, i32 0, i32 11
  %tv_nsec35 = getelementptr inbounds %struct.timespec, ptr %seconds34, i32 0, i32 1
  %42 = load i64, ptr %tv_nsec35, align 8
  %conv36 = trunc i64 %42 to i32
  store i32 %conv36, ptr %nsec, align 4
  %43 = load ptr, ptr @stderr, align 8
  %44 = load i32, ptr %nsec, align 4
  %call37 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %43, ptr noundef @.str.25.249, i32 noundef %44)
  br label %if.end38

if.end38:                                         ; preds = %if.then33, %if.then27
  %45 = load ptr, ptr %pc.addr, align 8
  %meridian = getelementptr inbounds %struct.parser_control, ptr %45, i32 0, i32 5
  %46 = load i32, ptr %meridian, align 4
  %cmp39 = icmp eq i32 %46, 1
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end38
  %47 = load ptr, ptr @stderr, align 8
  %call42 = call i32 @fputs(ptr noundef @.str.26.250, ptr noundef %47)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %if.end38
  %48 = load ptr, ptr %pc.addr, align 8
  %debug_times_seen44 = getelementptr inbounds %struct.parser_control, ptr %48, i32 0, i32 27
  store i8 1, ptr %debug_times_seen44, align 1
  store i8 1, ptr %space, align 1
  br label %if.end45

if.end45:                                         ; preds = %if.end43, %land.lhs.true25, %if.end23
  %49 = load ptr, ptr %pc.addr, align 8
  %days_seen = getelementptr inbounds %struct.parser_control, ptr %49, i32 0, i32 16
  %50 = load i64, ptr %days_seen, align 8
  %tobool46 = icmp ne i64 %50, 0
  br i1 %tobool46, label %land.lhs.true47, label %if.end58

land.lhs.true47:                                  ; preds = %if.end45
  %51 = load ptr, ptr %pc.addr, align 8
  %debug_days_seen = getelementptr inbounds %struct.parser_control, ptr %51, i32 0, i32 25
  %52 = load i8, ptr %debug_days_seen, align 1
  %tobool48 = trunc i8 %52 to i1
  br i1 %tobool48, label %if.end58, label %if.then49

if.then49:                                        ; preds = %land.lhs.true47
  %53 = load i8, ptr %space, align 1
  %tobool50 = trunc i8 %53 to i1
  br i1 %tobool50, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then49
  %54 = load ptr, ptr @stderr, align 8
  %call52 = call i32 @fputc(i32 noundef 32, ptr noundef %54)
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then49
  %55 = load ptr, ptr @stderr, align 8
  %call54 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.27.251) #21
  %56 = load ptr, ptr %pc.addr, align 8
  %arraydecay = getelementptr inbounds [100 x i8], ptr %tmp, i64 0, i64 0
  %call55 = call ptr @str_days(ptr noundef %56, ptr noundef %arraydecay, i32 noundef 100)
  %57 = load ptr, ptr %pc.addr, align 8
  %day_ordinal = getelementptr inbounds %struct.parser_control, ptr %57, i32 0, i32 1
  %58 = load i64, ptr %day_ordinal, align 8
  %59 = load ptr, ptr %pc.addr, align 8
  %day_number = getelementptr inbounds %struct.parser_control, ptr %59, i32 0, i32 2
  %60 = load i32, ptr %day_number, align 8
  %call56 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %55, ptr noundef %call54, ptr noundef %call55, i64 noundef %58, i32 noundef %60)
  %61 = load ptr, ptr %pc.addr, align 8
  %debug_days_seen57 = getelementptr inbounds %struct.parser_control, ptr %61, i32 0, i32 25
  store i8 1, ptr %debug_days_seen57, align 1
  store i8 1, ptr %space, align 1
  br label %if.end58

if.end58:                                         ; preds = %if.end53, %land.lhs.true47, %if.end45
  %62 = load ptr, ptr %pc.addr, align 8
  %local_zones_seen = getelementptr inbounds %struct.parser_control, ptr %62, i32 0, i32 18
  %63 = load i64, ptr %local_zones_seen, align 8
  %tobool59 = icmp ne i64 %63, 0
  br i1 %tobool59, label %land.lhs.true60, label %if.end71

land.lhs.true60:                                  ; preds = %if.end58
  %64 = load ptr, ptr %pc.addr, align 8
  %debug_local_zones_seen = getelementptr inbounds %struct.parser_control, ptr %64, i32 0, i32 26
  %65 = load i8, ptr %debug_local_zones_seen, align 4
  %tobool61 = trunc i8 %65 to i1
  br i1 %tobool61, label %if.end71, label %if.then62

if.then62:                                        ; preds = %land.lhs.true60
  %66 = load ptr, ptr @stderr, align 8
  %67 = load i8, ptr %space, align 1
  %tobool63 = trunc i8 %67 to i1
  %lnot64 = xor i1 %tobool63, true
  %lnot.ext65 = zext i1 %lnot64 to i32
  %idxprom66 = sext i32 %lnot.ext65 to i64
  %arrayidx67 = getelementptr inbounds [12 x i8], ptr @.str.28.252, i64 0, i64 %idxprom66
  %68 = load ptr, ptr %pc.addr, align 8
  %local_isdst = getelementptr inbounds %struct.parser_control, ptr %68, i32 0, i32 3
  %69 = load i32, ptr %local_isdst, align 4
  %70 = load ptr, ptr %pc.addr, align 8
  %dsts_seen = getelementptr inbounds %struct.parser_control, ptr %70, i32 0, i32 19
  %71 = load i64, ptr %dsts_seen, align 8
  %tobool68 = icmp ne i64 %71, 0
  %72 = zext i1 %tobool68 to i64
  %cond = select i1 %tobool68, ptr @.str.29.253, ptr @.str.30.254
  %call69 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %66, ptr noundef %arrayidx67, i32 noundef %69, ptr noundef %cond)
  %73 = load ptr, ptr %pc.addr, align 8
  %debug_local_zones_seen70 = getelementptr inbounds %struct.parser_control, ptr %73, i32 0, i32 26
  store i8 1, ptr %debug_local_zones_seen70, align 4
  store i8 1, ptr %space, align 1
  br label %if.end71

if.end71:                                         ; preds = %if.then62, %land.lhs.true60, %if.end58
  %74 = load ptr, ptr %pc.addr, align 8
  %zones_seen = getelementptr inbounds %struct.parser_control, ptr %74, i32 0, i32 21
  %75 = load i64, ptr %zones_seen, align 8
  %tobool72 = icmp ne i64 %75, 0
  br i1 %tobool72, label %land.lhs.true73, label %if.end85

land.lhs.true73:                                  ; preds = %if.end71
  %76 = load ptr, ptr %pc.addr, align 8
  %debug_zones_seen = getelementptr inbounds %struct.parser_control, ptr %76, i32 0, i32 28
  %77 = load i8, ptr %debug_zones_seen, align 2
  %tobool74 = trunc i8 %77 to i1
  br i1 %tobool74, label %if.end85, label %if.then75

if.then75:                                        ; preds = %land.lhs.true73
  %78 = load ptr, ptr @stderr, align 8
  %79 = load i8, ptr %space, align 1
  %tobool76 = trunc i8 %79 to i1
  %lnot77 = xor i1 %tobool76, true
  %lnot.ext78 = zext i1 %lnot77 to i32
  %idxprom79 = sext i32 %lnot.ext78 to i64
  %arrayidx80 = getelementptr inbounds [7 x i8], ptr @.str.31.255, i64 0, i64 %idxprom79
  %80 = load ptr, ptr %pc.addr, align 8
  %time_zone = getelementptr inbounds %struct.parser_control, ptr %80, i32 0, i32 4
  %81 = load i32, ptr %time_zone, align 8
  %arraydecay81 = getelementptr inbounds [27 x i8], ptr %time_zone_buf, i64 0, i64 0
  %call82 = call ptr @time_zone_str(i32 noundef %81, ptr noundef %arraydecay81)
  %call83 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %78, ptr noundef %arrayidx80, ptr noundef %call82)
  %82 = load ptr, ptr %pc.addr, align 8
  %debug_zones_seen84 = getelementptr inbounds %struct.parser_control, ptr %82, i32 0, i32 28
  store i8 1, ptr %debug_zones_seen84, align 2
  store i8 1, ptr %space, align 1
  br label %if.end85

if.end85:                                         ; preds = %if.then75, %land.lhs.true73, %if.end71
  %83 = load ptr, ptr %pc.addr, align 8
  %timespec_seen = getelementptr inbounds %struct.parser_control, ptr %83, i32 0, i32 13
  %84 = load i8, ptr %timespec_seen, align 8
  %tobool86 = trunc i8 %84 to i1
  br i1 %tobool86, label %if.then87, label %if.end97

if.then87:                                        ; preds = %if.end85
  %85 = load ptr, ptr %pc.addr, align 8
  %seconds89 = getelementptr inbounds %struct.parser_control, ptr %85, i32 0, i32 11
  %tv_sec90 = getelementptr inbounds %struct.timespec, ptr %seconds89, i32 0, i32 0
  %86 = load i64, ptr %tv_sec90, align 8
  store i64 %86, ptr %sec88, align 8
  %87 = load i8, ptr %space, align 1
  %tobool91 = trunc i8 %87 to i1
  br i1 %tobool91, label %if.then92, label %if.end94

if.then92:                                        ; preds = %if.then87
  %88 = load ptr, ptr @stderr, align 8
  %call93 = call i32 @fputc(i32 noundef 32, ptr noundef %88)
  br label %if.end94

if.end94:                                         ; preds = %if.then92, %if.then87
  %89 = load ptr, ptr @stderr, align 8
  %call95 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.32.256) #21
  %90 = load i64, ptr %sec88, align 8
  %call96 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %89, ptr noundef %call95, i64 noundef %90)
  br label %if.end97

if.end97:                                         ; preds = %if.end94, %if.end85
  %91 = load ptr, ptr @stderr, align 8
  %call98 = call i32 @fputc(i32 noundef 10, ptr noundef %91)
  br label %return

return:                                           ; preds = %if.end97, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @debug_print_relative_time(ptr noundef %item, ptr noundef %pc) #3 {
entry:
  %item.addr = alloca ptr, align 8
  %pc.addr = alloca ptr, align 8
  %space = alloca i8, align 1
  store ptr %item, ptr %item.addr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  store i8 0, ptr %space, align 1
  %0 = load ptr, ptr %pc.addr, align 8
  %call = call zeroext i1 @debugging(ptr noundef %0)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.21.236) #21
  %1 = load ptr, ptr %item.addr, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call1, ptr noundef %1)
  %2 = load ptr, ptr %pc.addr, align 8
  %rel = getelementptr inbounds %struct.parser_control, ptr %2, i32 0, i32 12
  %year = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 0
  %3 = load i64, ptr %year, align 8
  %cmp = icmp eq i64 %3, 0
  br i1 %cmp, label %land.lhs.true, label %if.end22

land.lhs.true:                                    ; preds = %if.end
  %4 = load ptr, ptr %pc.addr, align 8
  %rel2 = getelementptr inbounds %struct.parser_control, ptr %4, i32 0, i32 12
  %month = getelementptr inbounds %struct.relative_time, ptr %rel2, i32 0, i32 1
  %5 = load i64, ptr %month, align 8
  %cmp3 = icmp eq i64 %5, 0
  br i1 %cmp3, label %land.lhs.true4, label %if.end22

land.lhs.true4:                                   ; preds = %land.lhs.true
  %6 = load ptr, ptr %pc.addr, align 8
  %rel5 = getelementptr inbounds %struct.parser_control, ptr %6, i32 0, i32 12
  %day = getelementptr inbounds %struct.relative_time, ptr %rel5, i32 0, i32 2
  %7 = load i64, ptr %day, align 8
  %cmp6 = icmp eq i64 %7, 0
  br i1 %cmp6, label %land.lhs.true7, label %if.end22

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %8 = load ptr, ptr %pc.addr, align 8
  %rel8 = getelementptr inbounds %struct.parser_control, ptr %8, i32 0, i32 12
  %hour = getelementptr inbounds %struct.relative_time, ptr %rel8, i32 0, i32 3
  %9 = load i64, ptr %hour, align 8
  %cmp9 = icmp eq i64 %9, 0
  br i1 %cmp9, label %land.lhs.true10, label %if.end22

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %10 = load ptr, ptr %pc.addr, align 8
  %rel11 = getelementptr inbounds %struct.parser_control, ptr %10, i32 0, i32 12
  %minutes = getelementptr inbounds %struct.relative_time, ptr %rel11, i32 0, i32 4
  %11 = load i64, ptr %minutes, align 8
  %cmp12 = icmp eq i64 %11, 0
  br i1 %cmp12, label %land.lhs.true13, label %if.end22

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %12 = load ptr, ptr %pc.addr, align 8
  %rel14 = getelementptr inbounds %struct.parser_control, ptr %12, i32 0, i32 12
  %seconds = getelementptr inbounds %struct.relative_time, ptr %rel14, i32 0, i32 5
  %13 = load i64, ptr %seconds, align 8
  %cmp15 = icmp eq i64 %13, 0
  br i1 %cmp15, label %land.lhs.true16, label %if.end22

land.lhs.true16:                                  ; preds = %land.lhs.true13
  %14 = load ptr, ptr %pc.addr, align 8
  %rel17 = getelementptr inbounds %struct.parser_control, ptr %14, i32 0, i32 12
  %ns = getelementptr inbounds %struct.relative_time, ptr %rel17, i32 0, i32 6
  %15 = load i32, ptr %ns, align 8
  %cmp18 = icmp eq i32 %15, 0
  br i1 %cmp18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %land.lhs.true16
  %call20 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.37.237) #21
  %16 = load ptr, ptr @stderr, align 8
  %call21 = call i32 @fputs(ptr noundef %call20, ptr noundef %16)
  br label %return

if.end22:                                         ; preds = %land.lhs.true16, %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %if.end
  %17 = load i8, ptr %space, align 1
  %tobool = trunc i8 %17 to i1
  %18 = load ptr, ptr %pc.addr, align 8
  %rel23 = getelementptr inbounds %struct.parser_control, ptr %18, i32 0, i32 12
  %year24 = getelementptr inbounds %struct.relative_time, ptr %rel23, i32 0, i32 0
  %19 = load i64, ptr %year24, align 8
  %call25 = call zeroext i1 @print_rel_part(i1 noundef zeroext %tobool, i64 noundef %19, ptr noundef @.str.38.238)
  %frombool = zext i1 %call25 to i8
  store i8 %frombool, ptr %space, align 1
  %20 = load i8, ptr %space, align 1
  %tobool26 = trunc i8 %20 to i1
  %21 = load ptr, ptr %pc.addr, align 8
  %rel27 = getelementptr inbounds %struct.parser_control, ptr %21, i32 0, i32 12
  %month28 = getelementptr inbounds %struct.relative_time, ptr %rel27, i32 0, i32 1
  %22 = load i64, ptr %month28, align 8
  %call29 = call zeroext i1 @print_rel_part(i1 noundef zeroext %tobool26, i64 noundef %22, ptr noundef @.str.39.239)
  %frombool30 = zext i1 %call29 to i8
  store i8 %frombool30, ptr %space, align 1
  %23 = load i8, ptr %space, align 1
  %tobool31 = trunc i8 %23 to i1
  %24 = load ptr, ptr %pc.addr, align 8
  %rel32 = getelementptr inbounds %struct.parser_control, ptr %24, i32 0, i32 12
  %day33 = getelementptr inbounds %struct.relative_time, ptr %rel32, i32 0, i32 2
  %25 = load i64, ptr %day33, align 8
  %call34 = call zeroext i1 @print_rel_part(i1 noundef zeroext %tobool31, i64 noundef %25, ptr noundef @.str.40.240)
  %frombool35 = zext i1 %call34 to i8
  store i8 %frombool35, ptr %space, align 1
  %26 = load i8, ptr %space, align 1
  %tobool36 = trunc i8 %26 to i1
  %27 = load ptr, ptr %pc.addr, align 8
  %rel37 = getelementptr inbounds %struct.parser_control, ptr %27, i32 0, i32 12
  %hour38 = getelementptr inbounds %struct.relative_time, ptr %rel37, i32 0, i32 3
  %28 = load i64, ptr %hour38, align 8
  %call39 = call zeroext i1 @print_rel_part(i1 noundef zeroext %tobool36, i64 noundef %28, ptr noundef @.str.41.241)
  %frombool40 = zext i1 %call39 to i8
  store i8 %frombool40, ptr %space, align 1
  %29 = load i8, ptr %space, align 1
  %tobool41 = trunc i8 %29 to i1
  %30 = load ptr, ptr %pc.addr, align 8
  %rel42 = getelementptr inbounds %struct.parser_control, ptr %30, i32 0, i32 12
  %minutes43 = getelementptr inbounds %struct.relative_time, ptr %rel42, i32 0, i32 4
  %31 = load i64, ptr %minutes43, align 8
  %call44 = call zeroext i1 @print_rel_part(i1 noundef zeroext %tobool41, i64 noundef %31, ptr noundef @.str.42.242)
  %frombool45 = zext i1 %call44 to i8
  store i8 %frombool45, ptr %space, align 1
  %32 = load i8, ptr %space, align 1
  %tobool46 = trunc i8 %32 to i1
  %33 = load ptr, ptr %pc.addr, align 8
  %rel47 = getelementptr inbounds %struct.parser_control, ptr %33, i32 0, i32 12
  %seconds48 = getelementptr inbounds %struct.relative_time, ptr %rel47, i32 0, i32 5
  %34 = load i64, ptr %seconds48, align 8
  %call49 = call zeroext i1 @print_rel_part(i1 noundef zeroext %tobool46, i64 noundef %34, ptr noundef @.str.43.243)
  %frombool50 = zext i1 %call49 to i8
  store i8 %frombool50, ptr %space, align 1
  %35 = load i8, ptr %space, align 1
  %tobool51 = trunc i8 %35 to i1
  %36 = load ptr, ptr %pc.addr, align 8
  %rel52 = getelementptr inbounds %struct.parser_control, ptr %36, i32 0, i32 12
  %ns53 = getelementptr inbounds %struct.relative_time, ptr %rel52, i32 0, i32 6
  %37 = load i32, ptr %ns53, align 8
  %conv = sext i32 %37 to i64
  %call54 = call zeroext i1 @print_rel_part(i1 noundef zeroext %tobool51, i64 noundef %conv, ptr noundef @.str.44.244)
  %38 = load ptr, ptr @stderr, align 8
  %call55 = call i32 @fputc(i32 noundef 10, ptr noundef %38)
  br label %return

return:                                           ; preds = %if.end22, %if.then19, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_hhmmss(ptr noundef %pc, i64 noundef %hour, i64 noundef %minutes, i64 noundef %sec, i32 noundef %nsec) #3 {
entry:
  %pc.addr = alloca ptr, align 8
  %hour.addr = alloca i64, align 8
  %minutes.addr = alloca i64, align 8
  %sec.addr = alloca i64, align 8
  %nsec.addr = alloca i32, align 4
  %.compoundliteral = alloca %struct.timespec, align 8
  store ptr %pc, ptr %pc.addr, align 8
  store i64 %hour, ptr %hour.addr, align 8
  store i64 %minutes, ptr %minutes.addr, align 8
  store i64 %sec, ptr %sec.addr, align 8
  store i32 %nsec, ptr %nsec.addr, align 4
  %0 = load i64, ptr %hour.addr, align 8
  %1 = load ptr, ptr %pc.addr, align 8
  %hour1 = getelementptr inbounds %struct.parser_control, ptr %1, i32 0, i32 9
  store i64 %0, ptr %hour1, align 8
  %2 = load i64, ptr %minutes.addr, align 8
  %3 = load ptr, ptr %pc.addr, align 8
  %minutes2 = getelementptr inbounds %struct.parser_control, ptr %3, i32 0, i32 10
  store i64 %2, ptr %minutes2, align 8
  %4 = load ptr, ptr %pc.addr, align 8
  %seconds = getelementptr inbounds %struct.parser_control, ptr %4, i32 0, i32 11
  %tv_sec = getelementptr inbounds %struct.timespec, ptr %.compoundliteral, i32 0, i32 0
  %5 = load i64, ptr %sec.addr, align 8
  store i64 %5, ptr %tv_sec, align 8
  %tv_nsec = getelementptr inbounds %struct.timespec, ptr %.compoundliteral, i32 0, i32 1
  %6 = load i32, ptr %nsec.addr, align 4
  %conv = sext i32 %6 to i64
  store i64 %conv, ptr %tv_nsec, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %seconds, ptr align 8 %.compoundliteral, i64 16, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @time_zone_hhmm(ptr noundef %pc, ptr noundef byval(%struct.textint) align 8 %s, i64 noundef %mm) #3 {
entry:
  %retval = alloca i1, align 1
  %pc.addr = alloca ptr, align 8
  %mm.addr = alloca i64, align 8
  %n_minutes = alloca i64, align 8
  %overflow = alloca i8, align 1
  store ptr %pc, ptr %pc.addr, align 8
  store i64 %mm, ptr %mm.addr, align 8
  store i8 0, ptr %overflow, align 1
  %digits = getelementptr inbounds %struct.textint, ptr %s, i32 0, i32 2
  %0 = load i64, ptr %digits, align 8
  %cmp = icmp sle i64 %0, 2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, ptr %mm.addr, align 8
  %cmp1 = icmp slt i64 %1, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %value = getelementptr inbounds %struct.textint, ptr %s, i32 0, i32 1
  %2 = load i64, ptr %value, align 8
  %mul = mul nsw i64 %2, 100
  store i64 %mul, ptr %value, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load i64, ptr %mm.addr, align 8
  %cmp2 = icmp slt i64 %3, 0
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %value4 = getelementptr inbounds %struct.textint, ptr %s, i32 0, i32 1
  %4 = load i64, ptr %value4, align 8
  %div = sdiv i64 %4, 100
  %mul5 = mul nsw i64 %div, 60
  %value6 = getelementptr inbounds %struct.textint, ptr %s, i32 0, i32 1
  %5 = load i64, ptr %value6, align 8
  %rem = srem i64 %5, 100
  %add = add nsw i64 %mul5, %rem
  store i64 %add, ptr %n_minutes, align 8
  br label %if.end19

if.else:                                          ; preds = %if.end
  %value7 = getelementptr inbounds %struct.textint, ptr %s, i32 0, i32 1
  %6 = load i64, ptr %value7, align 8
  %7 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %6, i64 60)
  %8 = extractvalue { i64, i1 } %7, 1
  %9 = extractvalue { i64, i1 } %7, 0
  store i64 %9, ptr %n_minutes, align 8
  %conv = zext i1 %8 to i32
  %10 = load i8, ptr %overflow, align 1
  %tobool = trunc i8 %10 to i1
  %conv8 = zext i1 %tobool to i32
  %or = or i32 %conv8, %conv
  %tobool9 = icmp ne i32 %or, 0
  %frombool = zext i1 %tobool9 to i8
  store i8 %frombool, ptr %overflow, align 1
  %negative = getelementptr inbounds %struct.textint, ptr %s, i32 0, i32 0
  %11 = load i8, ptr %negative, align 8
  %tobool10 = trunc i8 %11 to i1
  br i1 %tobool10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %12 = load i64, ptr %n_minutes, align 8
  %13 = load i64, ptr %mm.addr, align 8
  %14 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %12, i64 %13)
  %15 = extractvalue { i64, i1 } %14, 1
  %16 = extractvalue { i64, i1 } %14, 0
  store i64 %16, ptr %n_minutes, align 8
  %conv12 = zext i1 %15 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %17 = load i64, ptr %n_minutes, align 8
  %18 = load i64, ptr %mm.addr, align 8
  %19 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %17, i64 %18)
  %20 = extractvalue { i64, i1 } %19, 1
  %21 = extractvalue { i64, i1 } %19, 0
  store i64 %21, ptr %n_minutes, align 8
  %conv13 = zext i1 %20 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv12, %cond.true ], [ %conv13, %cond.false ]
  %22 = load i8, ptr %overflow, align 1
  %tobool14 = trunc i8 %22 to i1
  %conv15 = zext i1 %tobool14 to i32
  %or16 = or i32 %conv15, %cond
  %tobool17 = icmp ne i32 %or16, 0
  %frombool18 = zext i1 %tobool17 to i8
  store i8 %frombool18, ptr %overflow, align 1
  br label %if.end19

if.end19:                                         ; preds = %cond.end, %if.then3
  %23 = load i8, ptr %overflow, align 1
  %tobool20 = trunc i8 %23 to i1
  br i1 %tobool20, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end19
  %24 = load i64, ptr %n_minutes, align 8
  %cmp22 = icmp sle i64 -1440, %24
  br i1 %cmp22, label %land.lhs.true24, label %if.then27

land.lhs.true24:                                  ; preds = %lor.lhs.false
  %25 = load i64, ptr %n_minutes, align 8
  %cmp25 = icmp sle i64 %25, 1440
  br i1 %cmp25, label %if.end28, label %if.then27

if.then27:                                        ; preds = %land.lhs.true24, %lor.lhs.false, %if.end19
  store i1 false, ptr %retval, align 1
  br label %return

if.end28:                                         ; preds = %land.lhs.true24
  %26 = load i64, ptr %n_minutes, align 8
  %mul29 = mul nsw i64 %26, 60
  %conv30 = trunc i64 %mul29 to i32
  %27 = load ptr, ptr %pc.addr, align 8
  %time_zone = getelementptr inbounds %struct.parser_control, ptr %27, i32 0, i32 4
  store i32 %conv30, ptr %time_zone, align 8
  store i1 true, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end28, %if.then27
  %28 = load i1, ptr %retval, align 1
  ret i1 %28
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @apply_relative_time(ptr noundef %pc, ptr noundef byval(%struct.relative_time) align 8 %rel, i32 noundef %factor) #3 {
entry:
  %retval = alloca i1, align 1
  %pc.addr = alloca ptr, align 8
  %factor.addr = alloca i32, align 4
  store ptr %pc, ptr %pc.addr, align 8
  store i32 %factor, ptr %factor.addr, align 4
  %0 = load i32, ptr %factor.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load ptr, ptr %pc.addr, align 8
  %rel1 = getelementptr inbounds %struct.parser_control, ptr %1, i32 0, i32 12
  %ns = getelementptr inbounds %struct.relative_time, ptr %rel1, i32 0, i32 6
  %2 = load i32, ptr %ns, align 8
  %ns2 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 6
  %3 = load i32, ptr %ns2, align 8
  %4 = load ptr, ptr %pc.addr, align 8
  %rel3 = getelementptr inbounds %struct.parser_control, ptr %4, i32 0, i32 12
  %ns4 = getelementptr inbounds %struct.relative_time, ptr %rel3, i32 0, i32 6
  %5 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %2, i32 %3)
  %6 = extractvalue { i32, i1 } %5, 1
  %7 = extractvalue { i32, i1 } %5, 0
  store i32 %7, ptr %ns4, align 8
  %conv = zext i1 %6 to i32
  %8 = load ptr, ptr %pc.addr, align 8
  %rel5 = getelementptr inbounds %struct.parser_control, ptr %8, i32 0, i32 12
  %seconds = getelementptr inbounds %struct.relative_time, ptr %rel5, i32 0, i32 5
  %9 = load i64, ptr %seconds, align 8
  %seconds6 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 5
  %10 = load i64, ptr %seconds6, align 8
  %11 = load ptr, ptr %pc.addr, align 8
  %rel7 = getelementptr inbounds %struct.parser_control, ptr %11, i32 0, i32 12
  %seconds8 = getelementptr inbounds %struct.relative_time, ptr %rel7, i32 0, i32 5
  %12 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %9, i64 %10)
  %13 = extractvalue { i64, i1 } %12, 1
  %14 = extractvalue { i64, i1 } %12, 0
  store i64 %14, ptr %seconds8, align 8
  %conv9 = zext i1 %13 to i32
  %or = or i32 %conv, %conv9
  %15 = load ptr, ptr %pc.addr, align 8
  %rel10 = getelementptr inbounds %struct.parser_control, ptr %15, i32 0, i32 12
  %minutes = getelementptr inbounds %struct.relative_time, ptr %rel10, i32 0, i32 4
  %16 = load i64, ptr %minutes, align 8
  %minutes11 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 4
  %17 = load i64, ptr %minutes11, align 8
  %18 = load ptr, ptr %pc.addr, align 8
  %rel12 = getelementptr inbounds %struct.parser_control, ptr %18, i32 0, i32 12
  %minutes13 = getelementptr inbounds %struct.relative_time, ptr %rel12, i32 0, i32 4
  %19 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %16, i64 %17)
  %20 = extractvalue { i64, i1 } %19, 1
  %21 = extractvalue { i64, i1 } %19, 0
  store i64 %21, ptr %minutes13, align 8
  %conv14 = zext i1 %20 to i32
  %or15 = or i32 %or, %conv14
  %22 = load ptr, ptr %pc.addr, align 8
  %rel16 = getelementptr inbounds %struct.parser_control, ptr %22, i32 0, i32 12
  %hour = getelementptr inbounds %struct.relative_time, ptr %rel16, i32 0, i32 3
  %23 = load i64, ptr %hour, align 8
  %hour17 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 3
  %24 = load i64, ptr %hour17, align 8
  %25 = load ptr, ptr %pc.addr, align 8
  %rel18 = getelementptr inbounds %struct.parser_control, ptr %25, i32 0, i32 12
  %hour19 = getelementptr inbounds %struct.relative_time, ptr %rel18, i32 0, i32 3
  %26 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %23, i64 %24)
  %27 = extractvalue { i64, i1 } %26, 1
  %28 = extractvalue { i64, i1 } %26, 0
  store i64 %28, ptr %hour19, align 8
  %conv20 = zext i1 %27 to i32
  %or21 = or i32 %or15, %conv20
  %29 = load ptr, ptr %pc.addr, align 8
  %rel22 = getelementptr inbounds %struct.parser_control, ptr %29, i32 0, i32 12
  %day = getelementptr inbounds %struct.relative_time, ptr %rel22, i32 0, i32 2
  %30 = load i64, ptr %day, align 8
  %day23 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 2
  %31 = load i64, ptr %day23, align 8
  %32 = load ptr, ptr %pc.addr, align 8
  %rel24 = getelementptr inbounds %struct.parser_control, ptr %32, i32 0, i32 12
  %day25 = getelementptr inbounds %struct.relative_time, ptr %rel24, i32 0, i32 2
  %33 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %30, i64 %31)
  %34 = extractvalue { i64, i1 } %33, 1
  %35 = extractvalue { i64, i1 } %33, 0
  store i64 %35, ptr %day25, align 8
  %conv26 = zext i1 %34 to i32
  %or27 = or i32 %or21, %conv26
  %36 = load ptr, ptr %pc.addr, align 8
  %rel28 = getelementptr inbounds %struct.parser_control, ptr %36, i32 0, i32 12
  %month = getelementptr inbounds %struct.relative_time, ptr %rel28, i32 0, i32 1
  %37 = load i64, ptr %month, align 8
  %month29 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 1
  %38 = load i64, ptr %month29, align 8
  %39 = load ptr, ptr %pc.addr, align 8
  %rel30 = getelementptr inbounds %struct.parser_control, ptr %39, i32 0, i32 12
  %month31 = getelementptr inbounds %struct.relative_time, ptr %rel30, i32 0, i32 1
  %40 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %37, i64 %38)
  %41 = extractvalue { i64, i1 } %40, 1
  %42 = extractvalue { i64, i1 } %40, 0
  store i64 %42, ptr %month31, align 8
  %conv32 = zext i1 %41 to i32
  %or33 = or i32 %or27, %conv32
  %43 = load ptr, ptr %pc.addr, align 8
  %rel34 = getelementptr inbounds %struct.parser_control, ptr %43, i32 0, i32 12
  %year = getelementptr inbounds %struct.relative_time, ptr %rel34, i32 0, i32 0
  %44 = load i64, ptr %year, align 8
  %year35 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 0
  %45 = load i64, ptr %year35, align 8
  %46 = load ptr, ptr %pc.addr, align 8
  %rel36 = getelementptr inbounds %struct.parser_control, ptr %46, i32 0, i32 12
  %year37 = getelementptr inbounds %struct.relative_time, ptr %rel36, i32 0, i32 0
  %47 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %44, i64 %45)
  %48 = extractvalue { i64, i1 } %47, 1
  %49 = extractvalue { i64, i1 } %47, 0
  store i64 %49, ptr %year37, align 8
  %conv38 = zext i1 %48 to i32
  %or39 = or i32 %or33, %conv38
  %tobool = icmp ne i32 %or39, 0
  br i1 %tobool, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  %50 = load ptr, ptr %pc.addr, align 8
  %rel40 = getelementptr inbounds %struct.parser_control, ptr %50, i32 0, i32 12
  %ns41 = getelementptr inbounds %struct.relative_time, ptr %rel40, i32 0, i32 6
  %51 = load i32, ptr %ns41, align 8
  %ns42 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 6
  %52 = load i32, ptr %ns42, align 8
  %53 = load ptr, ptr %pc.addr, align 8
  %rel43 = getelementptr inbounds %struct.parser_control, ptr %53, i32 0, i32 12
  %ns44 = getelementptr inbounds %struct.relative_time, ptr %rel43, i32 0, i32 6
  %54 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %51, i32 %52)
  %55 = extractvalue { i32, i1 } %54, 1
  %56 = extractvalue { i32, i1 } %54, 0
  store i32 %56, ptr %ns44, align 8
  %conv45 = zext i1 %55 to i32
  %57 = load ptr, ptr %pc.addr, align 8
  %rel46 = getelementptr inbounds %struct.parser_control, ptr %57, i32 0, i32 12
  %seconds47 = getelementptr inbounds %struct.relative_time, ptr %rel46, i32 0, i32 5
  %58 = load i64, ptr %seconds47, align 8
  %seconds48 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 5
  %59 = load i64, ptr %seconds48, align 8
  %60 = load ptr, ptr %pc.addr, align 8
  %rel49 = getelementptr inbounds %struct.parser_control, ptr %60, i32 0, i32 12
  %seconds50 = getelementptr inbounds %struct.relative_time, ptr %rel49, i32 0, i32 5
  %61 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %58, i64 %59)
  %62 = extractvalue { i64, i1 } %61, 1
  %63 = extractvalue { i64, i1 } %61, 0
  store i64 %63, ptr %seconds50, align 8
  %conv51 = zext i1 %62 to i32
  %or52 = or i32 %conv45, %conv51
  %64 = load ptr, ptr %pc.addr, align 8
  %rel53 = getelementptr inbounds %struct.parser_control, ptr %64, i32 0, i32 12
  %minutes54 = getelementptr inbounds %struct.relative_time, ptr %rel53, i32 0, i32 4
  %65 = load i64, ptr %minutes54, align 8
  %minutes55 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 4
  %66 = load i64, ptr %minutes55, align 8
  %67 = load ptr, ptr %pc.addr, align 8
  %rel56 = getelementptr inbounds %struct.parser_control, ptr %67, i32 0, i32 12
  %minutes57 = getelementptr inbounds %struct.relative_time, ptr %rel56, i32 0, i32 4
  %68 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %65, i64 %66)
  %69 = extractvalue { i64, i1 } %68, 1
  %70 = extractvalue { i64, i1 } %68, 0
  store i64 %70, ptr %minutes57, align 8
  %conv58 = zext i1 %69 to i32
  %or59 = or i32 %or52, %conv58
  %71 = load ptr, ptr %pc.addr, align 8
  %rel60 = getelementptr inbounds %struct.parser_control, ptr %71, i32 0, i32 12
  %hour61 = getelementptr inbounds %struct.relative_time, ptr %rel60, i32 0, i32 3
  %72 = load i64, ptr %hour61, align 8
  %hour62 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 3
  %73 = load i64, ptr %hour62, align 8
  %74 = load ptr, ptr %pc.addr, align 8
  %rel63 = getelementptr inbounds %struct.parser_control, ptr %74, i32 0, i32 12
  %hour64 = getelementptr inbounds %struct.relative_time, ptr %rel63, i32 0, i32 3
  %75 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %72, i64 %73)
  %76 = extractvalue { i64, i1 } %75, 1
  %77 = extractvalue { i64, i1 } %75, 0
  store i64 %77, ptr %hour64, align 8
  %conv65 = zext i1 %76 to i32
  %or66 = or i32 %or59, %conv65
  %78 = load ptr, ptr %pc.addr, align 8
  %rel67 = getelementptr inbounds %struct.parser_control, ptr %78, i32 0, i32 12
  %day68 = getelementptr inbounds %struct.relative_time, ptr %rel67, i32 0, i32 2
  %79 = load i64, ptr %day68, align 8
  %day69 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 2
  %80 = load i64, ptr %day69, align 8
  %81 = load ptr, ptr %pc.addr, align 8
  %rel70 = getelementptr inbounds %struct.parser_control, ptr %81, i32 0, i32 12
  %day71 = getelementptr inbounds %struct.relative_time, ptr %rel70, i32 0, i32 2
  %82 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %79, i64 %80)
  %83 = extractvalue { i64, i1 } %82, 1
  %84 = extractvalue { i64, i1 } %82, 0
  store i64 %84, ptr %day71, align 8
  %conv72 = zext i1 %83 to i32
  %or73 = or i32 %or66, %conv72
  %85 = load ptr, ptr %pc.addr, align 8
  %rel74 = getelementptr inbounds %struct.parser_control, ptr %85, i32 0, i32 12
  %month75 = getelementptr inbounds %struct.relative_time, ptr %rel74, i32 0, i32 1
  %86 = load i64, ptr %month75, align 8
  %month76 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 1
  %87 = load i64, ptr %month76, align 8
  %88 = load ptr, ptr %pc.addr, align 8
  %rel77 = getelementptr inbounds %struct.parser_control, ptr %88, i32 0, i32 12
  %month78 = getelementptr inbounds %struct.relative_time, ptr %rel77, i32 0, i32 1
  %89 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %86, i64 %87)
  %90 = extractvalue { i64, i1 } %89, 1
  %91 = extractvalue { i64, i1 } %89, 0
  store i64 %91, ptr %month78, align 8
  %conv79 = zext i1 %90 to i32
  %or80 = or i32 %or73, %conv79
  %92 = load ptr, ptr %pc.addr, align 8
  %rel81 = getelementptr inbounds %struct.parser_control, ptr %92, i32 0, i32 12
  %year82 = getelementptr inbounds %struct.relative_time, ptr %rel81, i32 0, i32 0
  %93 = load i64, ptr %year82, align 8
  %year83 = getelementptr inbounds %struct.relative_time, ptr %rel, i32 0, i32 0
  %94 = load i64, ptr %year83, align 8
  %95 = load ptr, ptr %pc.addr, align 8
  %rel84 = getelementptr inbounds %struct.parser_control, ptr %95, i32 0, i32 12
  %year85 = getelementptr inbounds %struct.relative_time, ptr %rel84, i32 0, i32 0
  %96 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %93, i64 %94)
  %97 = extractvalue { i64, i1 } %96, 1
  %98 = extractvalue { i64, i1 } %96, 0
  store i64 %98, ptr %year85, align 8
  %conv86 = zext i1 %97 to i32
  %or87 = or i32 %or80, %conv86
  %tobool88 = icmp ne i32 %or87, 0
  br i1 %tobool88, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true
  %99 = load ptr, ptr %pc.addr, align 8
  %rels_seen = getelementptr inbounds %struct.parser_control, ptr %99, i32 0, i32 14
  store i8 1, ptr %rels_seen, align 1
  store i1 true, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %100 = load i1, ptr %retval, align 1
  ret i1 %100
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @debugging(ptr noundef %pc) #3 {
entry:
  %pc.addr = alloca ptr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  %0 = load ptr, ptr %pc.addr, align 8
  %parse_datetime_debug = getelementptr inbounds %struct.parser_control, ptr %0, i32 0, i32 23
  %1 = load i8, ptr %parse_datetime_debug, align 1
  %tobool = trunc i8 %1 to i1
  ret i1 %tobool
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dbg_printf(ptr noundef %msgid, ...) #3 {
entry:
  %msgid.addr = alloca ptr, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  store ptr %msgid, ptr %msgid.addr, align 8
  call void @dbg_herald()
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %args, i64 0, i64 0
  call void @llvm.va_start(ptr %arraydecay)
  %0 = load ptr, ptr @stderr, align 8
  %1 = load ptr, ptr %msgid.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %args, i64 0, i64 0
  %call = call i32 @vfprintf(ptr noundef %0, ptr noundef %1, ptr noundef %arraydecay1)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %args, i64 0, i64 0
  call void @llvm.va_end(ptr %arraydecay2)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #14

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @time_overflow(i64 noundef %n) #3 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, ptr %n.addr, align 8
  br i1 false, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %0 = load i64, ptr %n.addr, align 8
  %cmp = icmp sle i64 -9223372036854775808, %0
  br i1 %cmp, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  %1 = load i64, ptr %n.addr, align 8
  %cmp1 = icmp sle i64 0, %1
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %2 = load i64, ptr %n.addr, align 8
  %cmp2 = icmp sle i64 %2, 9223372036854775807
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %3 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %cmp2, %land.rhs ]
  %lnot = xor i1 %3, true
  ret i1 %lnot
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @digits_to_date_time(ptr noundef %pc, ptr noundef byval(%struct.textint) align 8 %text_int) #3 {
entry:
  %pc.addr = alloca ptr, align 8
  %.compoundliteral = alloca %struct.timespec, align 8
  store ptr %pc, ptr %pc.addr, align 8
  %0 = load ptr, ptr %pc.addr, align 8
  %dates_seen = getelementptr inbounds %struct.parser_control, ptr %0, i32 0, i32 15
  %1 = load i64, ptr %dates_seen, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load ptr, ptr %pc.addr, align 8
  %year = getelementptr inbounds %struct.parser_control, ptr %2, i32 0, i32 6
  %digits = getelementptr inbounds %struct.textint, ptr %year, i32 0, i32 2
  %3 = load i64, ptr %digits, align 8
  %tobool1 = icmp ne i64 %3, 0
  br i1 %tobool1, label %if.else, label %land.lhs.true2

land.lhs.true2:                                   ; preds = %land.lhs.true
  %4 = load ptr, ptr %pc.addr, align 8
  %rels_seen = getelementptr inbounds %struct.parser_control, ptr %4, i32 0, i32 14
  %5 = load i8, ptr %rels_seen, align 1
  %tobool3 = trunc i8 %5 to i1
  br i1 %tobool3, label %if.else, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %6 = load ptr, ptr %pc.addr, align 8
  %times_seen = getelementptr inbounds %struct.parser_control, ptr %6, i32 0, i32 20
  %7 = load i64, ptr %times_seen, align 8
  %tobool5 = icmp ne i64 %7, 0
  br i1 %tobool5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true4
  %digits6 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 2
  %8 = load i64, ptr %digits6, align 8
  %cmp = icmp slt i64 2, %8
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true4
  %9 = load ptr, ptr %pc.addr, align 8
  %year_seen = getelementptr inbounds %struct.parser_control, ptr %9, i32 0, i32 22
  store i8 1, ptr %year_seen, align 8
  %10 = load ptr, ptr %pc.addr, align 8
  %year7 = getelementptr inbounds %struct.parser_control, ptr %10, i32 0, i32 6
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %year7, ptr align 8 %text_int, i64 24, i1 false)
  br label %if.end36

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true2, %land.lhs.true, %entry
  %digits8 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 2
  %11 = load i64, ptr %digits8, align 8
  %cmp9 = icmp slt i64 4, %11
  br i1 %cmp9, label %if.then10, label %if.else21

if.then10:                                        ; preds = %if.else
  %12 = load ptr, ptr %pc.addr, align 8
  %dates_seen11 = getelementptr inbounds %struct.parser_control, ptr %12, i32 0, i32 15
  %13 = load i64, ptr %dates_seen11, align 8
  %inc = add nsw i64 %13, 1
  store i64 %inc, ptr %dates_seen11, align 8
  %value = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 1
  %14 = load i64, ptr %value, align 8
  %rem = srem i64 %14, 100
  %15 = load ptr, ptr %pc.addr, align 8
  %day = getelementptr inbounds %struct.parser_control, ptr %15, i32 0, i32 8
  store i64 %rem, ptr %day, align 8
  %value12 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 1
  %16 = load i64, ptr %value12, align 8
  %div = sdiv i64 %16, 100
  %rem13 = srem i64 %div, 100
  %17 = load ptr, ptr %pc.addr, align 8
  %month = getelementptr inbounds %struct.parser_control, ptr %17, i32 0, i32 7
  store i64 %rem13, ptr %month, align 8
  %value14 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 1
  %18 = load i64, ptr %value14, align 8
  %div15 = sdiv i64 %18, 10000
  %19 = load ptr, ptr %pc.addr, align 8
  %year16 = getelementptr inbounds %struct.parser_control, ptr %19, i32 0, i32 6
  %value17 = getelementptr inbounds %struct.textint, ptr %year16, i32 0, i32 1
  store i64 %div15, ptr %value17, align 8
  %digits18 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 2
  %20 = load i64, ptr %digits18, align 8
  %sub = sub nsw i64 %20, 4
  %21 = load ptr, ptr %pc.addr, align 8
  %year19 = getelementptr inbounds %struct.parser_control, ptr %21, i32 0, i32 6
  %digits20 = getelementptr inbounds %struct.textint, ptr %year19, i32 0, i32 2
  store i64 %sub, ptr %digits20, align 8
  br label %if.end35

if.else21:                                        ; preds = %if.else
  %22 = load ptr, ptr %pc.addr, align 8
  %times_seen22 = getelementptr inbounds %struct.parser_control, ptr %22, i32 0, i32 20
  %23 = load i64, ptr %times_seen22, align 8
  %inc23 = add nsw i64 %23, 1
  store i64 %inc23, ptr %times_seen22, align 8
  %digits24 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 2
  %24 = load i64, ptr %digits24, align 8
  %cmp25 = icmp sle i64 %24, 2
  br i1 %cmp25, label %if.then26, label %if.else28

if.then26:                                        ; preds = %if.else21
  %value27 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 1
  %25 = load i64, ptr %value27, align 8
  %26 = load ptr, ptr %pc.addr, align 8
  %hour = getelementptr inbounds %struct.parser_control, ptr %26, i32 0, i32 9
  store i64 %25, ptr %hour, align 8
  %27 = load ptr, ptr %pc.addr, align 8
  %minutes = getelementptr inbounds %struct.parser_control, ptr %27, i32 0, i32 10
  store i64 0, ptr %minutes, align 8
  br label %if.end

if.else28:                                        ; preds = %if.else21
  %value29 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 1
  %28 = load i64, ptr %value29, align 8
  %div30 = sdiv i64 %28, 100
  %29 = load ptr, ptr %pc.addr, align 8
  %hour31 = getelementptr inbounds %struct.parser_control, ptr %29, i32 0, i32 9
  store i64 %div30, ptr %hour31, align 8
  %value32 = getelementptr inbounds %struct.textint, ptr %text_int, i32 0, i32 1
  %30 = load i64, ptr %value32, align 8
  %rem33 = srem i64 %30, 100
  %31 = load ptr, ptr %pc.addr, align 8
  %minutes34 = getelementptr inbounds %struct.parser_control, ptr %31, i32 0, i32 10
  store i64 %rem33, ptr %minutes34, align 8
  br label %if.end

if.end:                                           ; preds = %if.else28, %if.then26
  %32 = load ptr, ptr %pc.addr, align 8
  %seconds = getelementptr inbounds %struct.parser_control, ptr %32, i32 0, i32 11
  %tv_sec = getelementptr inbounds %struct.timespec, ptr %.compoundliteral, i32 0, i32 0
  store i64 0, ptr %tv_sec, align 8
  %tv_nsec = getelementptr inbounds %struct.timespec, ptr %.compoundliteral, i32 0, i32 1
  store i64 0, ptr %tv_nsec, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %seconds, ptr align 8 %.compoundliteral, i64 16, i1 false)
  %33 = load ptr, ptr %pc.addr, align 8
  %meridian = getelementptr inbounds %struct.parser_control, ptr %33, i32 0, i32 5
  store i32 2, ptr %meridian, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.end, %if.then10
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @yyerror(ptr noundef %pc, ptr noundef %s) #3 {
entry:
  %pc.addr = alloca ptr, align 8
  %s.addr = alloca ptr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  store ptr %s, ptr %s.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @yydestruct(ptr noundef %yymsg, i32 noundef %yykind, ptr noundef %yyvaluep, ptr noundef %pc) #3 {
entry:
  %yymsg.addr = alloca ptr, align 8
  %yykind.addr = alloca i32, align 4
  %yyvaluep.addr = alloca ptr, align 8
  %pc.addr = alloca ptr, align 8
  store ptr %yymsg, ptr %yymsg.addr, align 8
  store i32 %yykind, ptr %yykind.addr, align 4
  store ptr %yyvaluep, ptr %yyvaluep.addr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  %0 = load ptr, ptr %yyvaluep.addr, align 8
  %1 = load ptr, ptr %pc.addr, align 8
  %2 = load ptr, ptr %yymsg.addr, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store ptr @.str.47.234, ptr %yymsg.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, ptr %yykind.addr, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dbg_herald() #3 {
entry:
  %0 = load ptr, ptr @stderr, align 8
  %call = call i32 @fputs(ptr noundef @.str.46.235, ptr noundef %0)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #14

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #14

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_rel_part(i1 noundef zeroext %space, i64 noundef %val, ptr noundef %name) #3 {
entry:
  %retval = alloca i1, align 1
  %space.addr = alloca i8, align 1
  %val.addr = alloca i64, align 8
  %name.addr = alloca ptr, align 8
  %frombool = zext i1 %space to i8
  store i8 %frombool, ptr %space.addr, align 1
  store i64 %val, ptr %val.addr, align 8
  store ptr %name, ptr %name.addr, align 8
  %0 = load i64, ptr %val.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8, ptr %space.addr, align 1
  %tobool = trunc i8 %1 to i1
  store i1 %tobool, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %2 = load ptr, ptr @stderr, align 8
  %3 = load i8, ptr %space.addr, align 1
  %tobool1 = trunc i8 %3 to i1
  %lnot = xor i1 %tobool1, true
  %lnot.ext = zext i1 %lnot to i32
  %idxprom = sext i32 %lnot.ext to i64
  %arrayidx = getelementptr inbounds [9 x i8], ptr @.str.45.245, i64 0, i64 %idxprom
  %4 = load i64, ptr %val.addr, align 8
  %5 = load ptr, ptr %name.addr, align 8
  %call = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %2, ptr noundef %arrayidx, i64 noundef %4, ptr noundef %5)
  store i1 true, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i1, ptr %retval, align 1
  ret i1 %6
}

declare i32 @fputc(i32 noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @str_days(ptr noundef %pc, ptr noundef %buffer, i32 noundef %n) #3 {
entry:
  %pc.addr = alloca ptr, align 8
  %buffer.addr = alloca ptr, align 8
  %n.addr = alloca i32, align 4
  %len = alloca i32, align 4
  store ptr %pc, ptr %pc.addr, align 8
  store ptr %buffer, ptr %buffer.addr, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load ptr, ptr %pc.addr, align 8
  %debug_ordinal_day_seen = getelementptr inbounds %struct.parser_control, ptr %0, i32 0, i32 30
  %1 = load i8, ptr %debug_ordinal_day_seen, align 8
  %tobool = trunc i8 %1 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load ptr, ptr %pc.addr, align 8
  %day_ordinal = getelementptr inbounds %struct.parser_control, ptr %2, i32 0, i32 1
  %3 = load i64, ptr %day_ordinal, align 8
  %cmp = icmp sle i64 -1, %3
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then
  %4 = load ptr, ptr %pc.addr, align 8
  %day_ordinal1 = getelementptr inbounds %struct.parser_control, ptr %4, i32 0, i32 1
  %5 = load i64, ptr %day_ordinal1, align 8
  %cmp2 = icmp sle i64 %5, 12
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %6 = load ptr, ptr %buffer.addr, align 8
  %7 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %7 to i64
  %8 = load ptr, ptr %pc.addr, align 8
  %day_ordinal3 = getelementptr inbounds %struct.parser_control, ptr %8, i32 0, i32 1
  %9 = load i64, ptr %day_ordinal3, align 8
  %add = add nsw i64 %9, 1
  %arrayidx = getelementptr inbounds [14 x [11 x i8]], ptr @str_days.ordinal_values, i64 0, i64 %add
  %arraydecay = getelementptr inbounds [11 x i8], ptr %arrayidx, i64 0, i64 0
  %call = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %6, i64 noundef %conv, ptr noundef @.str.33.258, ptr noundef %arraydecay) #21
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then
  %10 = load ptr, ptr %buffer.addr, align 8
  %11 = load i32, ptr %n.addr, align 4
  %conv4 = sext i32 %11 to i64
  %12 = load ptr, ptr %pc.addr, align 8
  %day_ordinal5 = getelementptr inbounds %struct.parser_control, ptr %12, i32 0, i32 1
  %13 = load i64, ptr %day_ordinal5, align 8
  %call6 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %10, i64 noundef %conv4, ptr noundef @.str.34.259, i64 noundef %13) #21
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %call6, %cond.false ]
  store i32 %cond, ptr %len, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %14 = load ptr, ptr %buffer.addr, align 8
  %arrayidx7 = getelementptr inbounds i8, ptr %14, i64 0
  store i8 0, ptr %arrayidx7, align 1
  store i32 0, ptr %len, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %15 = load ptr, ptr %pc.addr, align 8
  %day_number = getelementptr inbounds %struct.parser_control, ptr %15, i32 0, i32 2
  %16 = load i32, ptr %day_number, align 8
  %cmp8 = icmp sle i32 0, %16
  br i1 %cmp8, label %land.lhs.true10, label %if.else30

land.lhs.true10:                                  ; preds = %if.end
  %17 = load ptr, ptr %pc.addr, align 8
  %day_number11 = getelementptr inbounds %struct.parser_control, ptr %17, i32 0, i32 2
  %18 = load i32, ptr %day_number11, align 8
  %cmp12 = icmp sle i32 %18, 6
  br i1 %cmp12, label %land.lhs.true14, label %if.else30

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %19 = load i32, ptr %len, align 4
  %cmp15 = icmp sle i32 0, %19
  br i1 %cmp15, label %land.lhs.true17, label %if.else30

land.lhs.true17:                                  ; preds = %land.lhs.true14
  %20 = load i32, ptr %len, align 4
  %21 = load i32, ptr %n.addr, align 4
  %cmp18 = icmp slt i32 %20, %21
  br i1 %cmp18, label %if.then20, label %if.else30

if.then20:                                        ; preds = %land.lhs.true17
  %22 = load ptr, ptr %buffer.addr, align 8
  %23 = load i32, ptr %len, align 4
  %idx.ext = sext i32 %23 to i64
  %add.ptr = getelementptr inbounds i8, ptr %22, i64 %idx.ext
  %24 = load i32, ptr %n.addr, align 4
  %25 = load i32, ptr %len, align 4
  %sub = sub nsw i32 %24, %25
  %conv21 = sext i32 %sub to i64
  %26 = load i32, ptr %len, align 4
  %cmp22 = icmp eq i32 %26, 0
  %conv23 = zext i1 %cmp22 to i32
  %idxprom = sext i32 %conv23 to i64
  %arrayidx24 = getelementptr inbounds [4 x i8], ptr @.str.35.260, i64 0, i64 %idxprom
  %27 = load ptr, ptr %pc.addr, align 8
  %day_number25 = getelementptr inbounds %struct.parser_control, ptr %27, i32 0, i32 2
  %28 = load i32, ptr %day_number25, align 8
  %idxprom26 = sext i32 %28 to i64
  %arrayidx27 = getelementptr inbounds [7 x [4 x i8]], ptr @str_days.days_values, i64 0, i64 %idxprom26
  %arraydecay28 = getelementptr inbounds [4 x i8], ptr %arrayidx27, i64 0, i64 0
  %call29 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %add.ptr, i64 noundef %conv21, ptr noundef %arrayidx24, ptr noundef %arraydecay28) #21
  br label %if.end31

if.else30:                                        ; preds = %land.lhs.true17, %land.lhs.true14, %land.lhs.true10, %if.end
  br label %if.end31

if.end31:                                         ; preds = %if.else30, %if.then20
  %29 = load ptr, ptr %buffer.addr, align 8
  ret ptr %29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @time_zone_str(i32 noundef %time_zone, ptr noundef %time_zone_buf) #3 {
entry:
  %time_zone.addr = alloca i32, align 4
  %time_zone_buf.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %sign = alloca i8, align 1
  %hour = alloca i32, align 4
  %offset_from_hour = alloca i32, align 4
  %mm = alloca i32, align 4
  %ss = alloca i32, align 4
  store i32 %time_zone, ptr %time_zone.addr, align 4
  store ptr %time_zone_buf, ptr %time_zone_buf.addr, align 8
  %0 = load ptr, ptr %time_zone_buf.addr, align 8
  store ptr %0, ptr %p, align 8
  %1 = load i32, ptr %time_zone.addr, align 4
  %cmp = icmp slt i32 %1, 0
  %2 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 45, i32 43
  %conv = trunc i32 %cond to i8
  store i8 %conv, ptr %sign, align 1
  %3 = load i32, ptr %time_zone.addr, align 4
  %div = sdiv i32 %3, 3600
  %4 = call i32 @llvm.abs.i32(i32 %div, i1 true)
  store i32 %4, ptr %hour, align 4
  %5 = load ptr, ptr %time_zone_buf.addr, align 8
  %6 = load i8, ptr %sign, align 1
  %conv1 = sext i8 %6 to i32
  %7 = load i32, ptr %hour, align 4
  %call = call i32 (ptr, ptr, ...) @sprintf(ptr noundef %5, ptr noundef @.str.36.257, i32 noundef %conv1, i32 noundef %7) #21
  %8 = load ptr, ptr %p, align 8
  %idx.ext = sext i32 %call to i64
  %add.ptr = getelementptr inbounds i8, ptr %8, i64 %idx.ext
  store ptr %add.ptr, ptr %p, align 8
  %9 = load i32, ptr %time_zone.addr, align 4
  %rem = srem i32 %9, 3600
  %10 = call i32 @llvm.abs.i32(i32 %rem, i1 true)
  store i32 %10, ptr %offset_from_hour, align 4
  %11 = load i32, ptr %offset_from_hour, align 4
  %cmp2 = icmp ne i32 %11, 0
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %entry
  %12 = load i32, ptr %offset_from_hour, align 4
  %div4 = sdiv i32 %12, 60
  store i32 %div4, ptr %mm, align 4
  %13 = load i32, ptr %offset_from_hour, align 4
  %rem5 = srem i32 %13, 60
  store i32 %rem5, ptr %ss, align 4
  %14 = load ptr, ptr %p, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %14, i32 1
  store ptr %incdec.ptr, ptr %p, align 8
  store i8 58, ptr %14, align 1
  %15 = load i32, ptr %mm, align 4
  %div6 = sdiv i32 %15, 10
  %add = add nsw i32 48, %div6
  %conv7 = trunc i32 %add to i8
  %16 = load ptr, ptr %p, align 8
  %incdec.ptr8 = getelementptr inbounds i8, ptr %16, i32 1
  store ptr %incdec.ptr8, ptr %p, align 8
  store i8 %conv7, ptr %16, align 1
  %17 = load i32, ptr %mm, align 4
  %rem9 = srem i32 %17, 10
  %add10 = add nsw i32 48, %rem9
  %conv11 = trunc i32 %add10 to i8
  %18 = load ptr, ptr %p, align 8
  %incdec.ptr12 = getelementptr inbounds i8, ptr %18, i32 1
  store ptr %incdec.ptr12, ptr %p, align 8
  store i8 %conv11, ptr %18, align 1
  %19 = load i32, ptr %ss, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then13, label %if.end

if.then13:                                        ; preds = %if.then
  %20 = load ptr, ptr %p, align 8
  %incdec.ptr14 = getelementptr inbounds i8, ptr %20, i32 1
  store ptr %incdec.ptr14, ptr %p, align 8
  store i8 58, ptr %20, align 1
  %21 = load i32, ptr %ss, align 4
  %div15 = sdiv i32 %21, 10
  %add16 = add nsw i32 48, %div15
  %conv17 = trunc i32 %add16 to i8
  %22 = load ptr, ptr %p, align 8
  %incdec.ptr18 = getelementptr inbounds i8, ptr %22, i32 1
  store ptr %incdec.ptr18, ptr %p, align 8
  store i8 %conv17, ptr %22, align 1
  %23 = load i32, ptr %ss, align 4
  %rem19 = srem i32 %23, 10
  %add20 = add nsw i32 48, %rem19
  %conv21 = trunc i32 %add20 to i8
  %24 = load ptr, ptr %p, align 8
  %incdec.ptr22 = getelementptr inbounds i8, ptr %24, i32 1
  store ptr %incdec.ptr22, ptr %p, align 8
  store i8 %conv21, ptr %24, align 1
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.then
  %25 = load ptr, ptr %p, align 8
  store i8 0, ptr %25, align 1
  br label %if.end23

if.end23:                                         ; preds = %if.end, %entry
  %26 = load ptr, ptr %time_zone_buf.addr, align 8
  ret ptr %26
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #14

; Function Attrs: nounwind
declare i32 @sprintf(ptr noundef, ptr noundef, ...) #1

declare zeroext i1 @c_isspace(i32 noundef) #2

declare zeroext i1 @c_isdigit(i32 noundef) #2

declare zeroext i1 @c_isalpha(i32 noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @lookup_word(ptr noundef %pc, ptr noundef %word) #3 {
entry:
  %retval = alloca ptr, align 8
  %pc.addr = alloca ptr, align 8
  %word.addr = alloca ptr, align 8
  %p = alloca ptr, align 8
  %q = alloca ptr, align 8
  %wordlen = alloca i64, align 8
  %tp = alloca ptr, align 8
  %period_found = alloca i8, align 1
  %abbrev = alloca i8, align 1
  store ptr %pc, ptr %pc.addr, align 8
  store ptr %word, ptr %word.addr, align 8
  %0 = load ptr, ptr %word.addr, align 8
  store ptr %0, ptr %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load ptr, ptr %p, align 8
  %2 = load i8, ptr %1, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %p, align 8
  %4 = load i8, ptr %3, align 1
  %call = call zeroext i8 @to_uchar(i8 noundef signext %4)
  %conv = zext i8 %call to i32
  %call1 = call i32 @c_toupper(i32 noundef %conv)
  %conv2 = trunc i32 %call1 to i8
  %5 = load ptr, ptr %p, align 8
  store i8 %conv2, ptr %5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load ptr, ptr %p, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %6, i32 1
  store ptr %incdec.ptr, ptr %p, align 8
  br label %for.cond, !llvm.loop !71

for.end:                                          ; preds = %for.cond
  store ptr @meridian_table, ptr %tp, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %7 = load ptr, ptr %tp, align 8
  %name = getelementptr inbounds %struct.table, ptr %7, i32 0, i32 0
  %8 = load ptr, ptr %name, align 8
  %tobool4 = icmp ne ptr %8, null
  br i1 %tobool4, label %for.body5, label %for.end11

for.body5:                                        ; preds = %for.cond3
  %9 = load ptr, ptr %word.addr, align 8
  %10 = load ptr, ptr %tp, align 8
  %name6 = getelementptr inbounds %struct.table, ptr %10, i32 0, i32 0
  %11 = load ptr, ptr %name6, align 8
  %call7 = call i32 @strcmp(ptr noundef %9, ptr noundef %11) #23
  %cmp = icmp eq i32 %call7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body5
  %12 = load ptr, ptr %tp, align 8
  store ptr %12, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body5
  br label %for.inc9

for.inc9:                                         ; preds = %if.end
  %13 = load ptr, ptr %tp, align 8
  %incdec.ptr10 = getelementptr inbounds %struct.table, ptr %13, i32 1
  store ptr %incdec.ptr10, ptr %tp, align 8
  br label %for.cond3, !llvm.loop !72

for.end11:                                        ; preds = %for.cond3
  %14 = load ptr, ptr %word.addr, align 8
  %call12 = call i64 @strlen(ptr noundef %14) #23
  store i64 %call12, ptr %wordlen, align 8
  %15 = load i64, ptr %wordlen, align 8
  %cmp13 = icmp eq i64 %15, 3
  br i1 %cmp13, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %for.end11
  %16 = load i64, ptr %wordlen, align 8
  %cmp15 = icmp eq i64 %16, 4
  br i1 %cmp15, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %17 = load ptr, ptr %word.addr, align 8
  %arrayidx = getelementptr inbounds i8, ptr %17, i64 3
  %18 = load i8, ptr %arrayidx, align 1
  %conv17 = sext i8 %18 to i32
  %cmp18 = icmp eq i32 %conv17, 46
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %19 = phi i1 [ false, %lor.rhs ], [ %cmp18, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %for.end11
  %20 = phi i1 [ true, %for.end11 ], [ %19, %land.end ]
  %frombool = zext i1 %20 to i8
  store i8 %frombool, ptr %abbrev, align 1
  store ptr @month_and_day_table, ptr %tp, align 8
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc34, %lor.end
  %21 = load ptr, ptr %tp, align 8
  %name21 = getelementptr inbounds %struct.table, ptr %21, i32 0, i32 0
  %22 = load ptr, ptr %name21, align 8
  %tobool22 = icmp ne ptr %22, null
  br i1 %tobool22, label %for.body23, label %for.end36

for.body23:                                       ; preds = %for.cond20
  %23 = load i8, ptr %abbrev, align 1
  %tobool24 = trunc i8 %23 to i1
  br i1 %tobool24, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body23
  %24 = load ptr, ptr %word.addr, align 8
  %25 = load ptr, ptr %tp, align 8
  %name26 = getelementptr inbounds %struct.table, ptr %25, i32 0, i32 0
  %26 = load ptr, ptr %name26, align 8
  %call27 = call i32 @strncmp(ptr noundef %24, ptr noundef %26, i64 noundef 3) #23
  br label %cond.end

cond.false:                                       ; preds = %for.body23
  %27 = load ptr, ptr %word.addr, align 8
  %28 = load ptr, ptr %tp, align 8
  %name28 = getelementptr inbounds %struct.table, ptr %28, i32 0, i32 0
  %29 = load ptr, ptr %name28, align 8
  %call29 = call i32 @strcmp(ptr noundef %27, ptr noundef %29) #23
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call27, %cond.true ], [ %call29, %cond.false ]
  %cmp30 = icmp eq i32 %cond, 0
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %cond.end
  %30 = load ptr, ptr %tp, align 8
  store ptr %30, ptr %retval, align 8
  br label %return

if.end33:                                         ; preds = %cond.end
  br label %for.inc34

for.inc34:                                        ; preds = %if.end33
  %31 = load ptr, ptr %tp, align 8
  %incdec.ptr35 = getelementptr inbounds %struct.table, ptr %31, i32 1
  store ptr %incdec.ptr35, ptr %tp, align 8
  br label %for.cond20, !llvm.loop !73

for.end36:                                        ; preds = %for.cond20
  %32 = load ptr, ptr %pc.addr, align 8
  %33 = load ptr, ptr %word.addr, align 8
  %call37 = call ptr @lookup_zone(ptr noundef %32, ptr noundef %33) #23
  store ptr %call37, ptr %tp, align 8
  %tobool38 = icmp ne ptr %call37, null
  br i1 %tobool38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %for.end36
  %34 = load ptr, ptr %tp, align 8
  store ptr %34, ptr %retval, align 8
  br label %return

if.end40:                                         ; preds = %for.end36
  %35 = load ptr, ptr %word.addr, align 8
  %36 = load ptr, ptr @dst_table, align 16
  %call41 = call i32 @strcmp(ptr noundef %35, ptr noundef %36) #23
  %cmp42 = icmp eq i32 %call41, 0
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.end40
  store ptr @dst_table, ptr %retval, align 8
  br label %return

if.end45:                                         ; preds = %if.end40
  store ptr @time_units_table, ptr %tp, align 8
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc56, %if.end45
  %37 = load ptr, ptr %tp, align 8
  %name47 = getelementptr inbounds %struct.table, ptr %37, i32 0, i32 0
  %38 = load ptr, ptr %name47, align 8
  %tobool48 = icmp ne ptr %38, null
  br i1 %tobool48, label %for.body49, label %for.end58

for.body49:                                       ; preds = %for.cond46
  %39 = load ptr, ptr %word.addr, align 8
  %40 = load ptr, ptr %tp, align 8
  %name50 = getelementptr inbounds %struct.table, ptr %40, i32 0, i32 0
  %41 = load ptr, ptr %name50, align 8
  %call51 = call i32 @strcmp(ptr noundef %39, ptr noundef %41) #23
  %cmp52 = icmp eq i32 %call51, 0
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %for.body49
  %42 = load ptr, ptr %tp, align 8
  store ptr %42, ptr %retval, align 8
  br label %return

if.end55:                                         ; preds = %for.body49
  br label %for.inc56

for.inc56:                                        ; preds = %if.end55
  %43 = load ptr, ptr %tp, align 8
  %incdec.ptr57 = getelementptr inbounds %struct.table, ptr %43, i32 1
  store ptr %incdec.ptr57, ptr %tp, align 8
  br label %for.cond46, !llvm.loop !74

for.end58:                                        ; preds = %for.cond46
  %44 = load ptr, ptr %word.addr, align 8
  %45 = load i64, ptr %wordlen, align 8
  %sub = sub nsw i64 %45, 1
  %arrayidx59 = getelementptr inbounds i8, ptr %44, i64 %sub
  %46 = load i8, ptr %arrayidx59, align 1
  %conv60 = sext i8 %46 to i32
  %cmp61 = icmp eq i32 %conv60, 83
  br i1 %cmp61, label %if.then63, label %if.end81

if.then63:                                        ; preds = %for.end58
  %47 = load ptr, ptr %word.addr, align 8
  %48 = load i64, ptr %wordlen, align 8
  %sub64 = sub nsw i64 %48, 1
  %arrayidx65 = getelementptr inbounds i8, ptr %47, i64 %sub64
  store i8 0, ptr %arrayidx65, align 1
  store ptr @time_units_table, ptr %tp, align 8
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc76, %if.then63
  %49 = load ptr, ptr %tp, align 8
  %name67 = getelementptr inbounds %struct.table, ptr %49, i32 0, i32 0
  %50 = load ptr, ptr %name67, align 8
  %tobool68 = icmp ne ptr %50, null
  br i1 %tobool68, label %for.body69, label %for.end78

for.body69:                                       ; preds = %for.cond66
  %51 = load ptr, ptr %word.addr, align 8
  %52 = load ptr, ptr %tp, align 8
  %name70 = getelementptr inbounds %struct.table, ptr %52, i32 0, i32 0
  %53 = load ptr, ptr %name70, align 8
  %call71 = call i32 @strcmp(ptr noundef %51, ptr noundef %53) #23
  %cmp72 = icmp eq i32 %call71, 0
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %for.body69
  %54 = load ptr, ptr %tp, align 8
  store ptr %54, ptr %retval, align 8
  br label %return

if.end75:                                         ; preds = %for.body69
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %55 = load ptr, ptr %tp, align 8
  %incdec.ptr77 = getelementptr inbounds %struct.table, ptr %55, i32 1
  store ptr %incdec.ptr77, ptr %tp, align 8
  br label %for.cond66, !llvm.loop !75

for.end78:                                        ; preds = %for.cond66
  %56 = load ptr, ptr %word.addr, align 8
  %57 = load i64, ptr %wordlen, align 8
  %sub79 = sub nsw i64 %57, 1
  %arrayidx80 = getelementptr inbounds i8, ptr %56, i64 %sub79
  store i8 83, ptr %arrayidx80, align 1
  br label %if.end81

if.end81:                                         ; preds = %for.end78, %for.end58
  store ptr @relative_time_table, ptr %tp, align 8
  br label %for.cond82

for.cond82:                                       ; preds = %for.inc92, %if.end81
  %58 = load ptr, ptr %tp, align 8
  %name83 = getelementptr inbounds %struct.table, ptr %58, i32 0, i32 0
  %59 = load ptr, ptr %name83, align 8
  %tobool84 = icmp ne ptr %59, null
  br i1 %tobool84, label %for.body85, label %for.end94

for.body85:                                       ; preds = %for.cond82
  %60 = load ptr, ptr %word.addr, align 8
  %61 = load ptr, ptr %tp, align 8
  %name86 = getelementptr inbounds %struct.table, ptr %61, i32 0, i32 0
  %62 = load ptr, ptr %name86, align 8
  %call87 = call i32 @strcmp(ptr noundef %60, ptr noundef %62) #23
  %cmp88 = icmp eq i32 %call87, 0
  br i1 %cmp88, label %if.then90, label %if.end91

if.then90:                                        ; preds = %for.body85
  %63 = load ptr, ptr %tp, align 8
  store ptr %63, ptr %retval, align 8
  br label %return

if.end91:                                         ; preds = %for.body85
  br label %for.inc92

for.inc92:                                        ; preds = %if.end91
  %64 = load ptr, ptr %tp, align 8
  %incdec.ptr93 = getelementptr inbounds %struct.table, ptr %64, i32 1
  store ptr %incdec.ptr93, ptr %tp, align 8
  br label %for.cond82, !llvm.loop !76

for.end94:                                        ; preds = %for.cond82
  %65 = load i64, ptr %wordlen, align 8
  %cmp95 = icmp eq i64 %65, 1
  br i1 %cmp95, label %if.then97, label %if.end114

if.then97:                                        ; preds = %for.end94
  store ptr @military_table, ptr %tp, align 8
  br label %for.cond98

for.cond98:                                       ; preds = %for.inc111, %if.then97
  %66 = load ptr, ptr %tp, align 8
  %name99 = getelementptr inbounds %struct.table, ptr %66, i32 0, i32 0
  %67 = load ptr, ptr %name99, align 8
  %tobool100 = icmp ne ptr %67, null
  br i1 %tobool100, label %for.body101, label %for.end113

for.body101:                                      ; preds = %for.cond98
  %68 = load ptr, ptr %word.addr, align 8
  %arrayidx102 = getelementptr inbounds i8, ptr %68, i64 0
  %69 = load i8, ptr %arrayidx102, align 1
  %conv103 = sext i8 %69 to i32
  %70 = load ptr, ptr %tp, align 8
  %name104 = getelementptr inbounds %struct.table, ptr %70, i32 0, i32 0
  %71 = load ptr, ptr %name104, align 8
  %arrayidx105 = getelementptr inbounds i8, ptr %71, i64 0
  %72 = load i8, ptr %arrayidx105, align 1
  %conv106 = sext i8 %72 to i32
  %cmp107 = icmp eq i32 %conv103, %conv106
  br i1 %cmp107, label %if.then109, label %if.end110

if.then109:                                       ; preds = %for.body101
  %73 = load ptr, ptr %tp, align 8
  store ptr %73, ptr %retval, align 8
  br label %return

if.end110:                                        ; preds = %for.body101
  br label %for.inc111

for.inc111:                                       ; preds = %if.end110
  %74 = load ptr, ptr %tp, align 8
  %incdec.ptr112 = getelementptr inbounds %struct.table, ptr %74, i32 1
  store ptr %incdec.ptr112, ptr %tp, align 8
  br label %for.cond98, !llvm.loop !77

for.end113:                                       ; preds = %for.cond98
  br label %if.end114

if.end114:                                        ; preds = %for.end113, %for.end94
  store i8 0, ptr %period_found, align 1
  %75 = load ptr, ptr %word.addr, align 8
  store ptr %75, ptr %q, align 8
  store ptr %75, ptr %p, align 8
  br label %for.cond115

for.cond115:                                      ; preds = %for.inc124, %if.end114
  %76 = load ptr, ptr %q, align 8
  %77 = load i8, ptr %76, align 1
  %78 = load ptr, ptr %p, align 8
  store i8 %77, ptr %78, align 1
  %tobool116 = icmp ne i8 %77, 0
  br i1 %tobool116, label %for.body117, label %for.end126

for.body117:                                      ; preds = %for.cond115
  %79 = load ptr, ptr %q, align 8
  %80 = load i8, ptr %79, align 1
  %conv118 = sext i8 %80 to i32
  %cmp119 = icmp eq i32 %conv118, 46
  br i1 %cmp119, label %if.then121, label %if.else

if.then121:                                       ; preds = %for.body117
  store i8 1, ptr %period_found, align 1
  br label %if.end123

if.else:                                          ; preds = %for.body117
  %81 = load ptr, ptr %p, align 8
  %incdec.ptr122 = getelementptr inbounds i8, ptr %81, i32 1
  store ptr %incdec.ptr122, ptr %p, align 8
  br label %if.end123

if.end123:                                        ; preds = %if.else, %if.then121
  br label %for.inc124

for.inc124:                                       ; preds = %if.end123
  %82 = load ptr, ptr %q, align 8
  %incdec.ptr125 = getelementptr inbounds i8, ptr %82, i32 1
  store ptr %incdec.ptr125, ptr %q, align 8
  br label %for.cond115, !llvm.loop !78

for.end126:                                       ; preds = %for.cond115
  %83 = load i8, ptr %period_found, align 1
  %tobool127 = trunc i8 %83 to i1
  br i1 %tobool127, label %land.lhs.true, label %if.end132

land.lhs.true:                                    ; preds = %for.end126
  %84 = load ptr, ptr %pc.addr, align 8
  %85 = load ptr, ptr %word.addr, align 8
  %call129 = call ptr @lookup_zone(ptr noundef %84, ptr noundef %85) #23
  store ptr %call129, ptr %tp, align 8
  %tobool130 = icmp ne ptr %call129, null
  br i1 %tobool130, label %if.then131, label %if.end132

if.then131:                                       ; preds = %land.lhs.true
  %86 = load ptr, ptr %tp, align 8
  store ptr %86, ptr %retval, align 8
  br label %return

if.end132:                                        ; preds = %land.lhs.true, %for.end126
  store ptr null, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.end132, %if.then131, %if.then109, %if.then90, %if.then74, %if.then54, %if.then44, %if.then39, %if.then32, %if.then
  %87 = load ptr, ptr %retval, align 8
  ret ptr %87
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @to_uchar(i8 noundef signext %ch) #3 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, ptr %ch.addr, align 1
  %0 = load i8, ptr %ch.addr, align 1
  ret i8 %0
}

declare i32 @c_toupper(i32 noundef) #2

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define internal ptr @lookup_zone(ptr noundef %pc, ptr noundef %name) #10 {
entry:
  %retval = alloca ptr, align 8
  %pc.addr = alloca ptr, align 8
  %name.addr = alloca ptr, align 8
  %tp = alloca ptr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  store ptr %name, ptr %name.addr, align 8
  store ptr @universal_time_zone_table, ptr %tp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load ptr, ptr %tp, align 8
  %name1 = getelementptr inbounds %struct.table, ptr %0, i32 0, i32 0
  %1 = load ptr, ptr %name1, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %name.addr, align 8
  %3 = load ptr, ptr %tp, align 8
  %name2 = getelementptr inbounds %struct.table, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %name2, align 8
  %call = call i32 @strcmp(ptr noundef %2, ptr noundef %4) #23
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load ptr, ptr %tp, align 8
  store ptr %5, ptr %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load ptr, ptr %tp, align 8
  %incdec.ptr = getelementptr inbounds %struct.table, ptr %6, i32 1
  store ptr %incdec.ptr, ptr %tp, align 8
  br label %for.cond, !llvm.loop !79

for.end:                                          ; preds = %for.cond
  %7 = load ptr, ptr %pc.addr, align 8
  %local_time_zone_table = getelementptr inbounds %struct.parser_control, ptr %7, i32 0, i32 31
  %arraydecay = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table, i64 0, i64 0
  store ptr %arraydecay, ptr %tp, align 8
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc12, %for.end
  %8 = load ptr, ptr %tp, align 8
  %name4 = getelementptr inbounds %struct.table, ptr %8, i32 0, i32 0
  %9 = load ptr, ptr %name4, align 8
  %tobool5 = icmp ne ptr %9, null
  br i1 %tobool5, label %for.body6, label %for.end14

for.body6:                                        ; preds = %for.cond3
  %10 = load ptr, ptr %name.addr, align 8
  %11 = load ptr, ptr %tp, align 8
  %name7 = getelementptr inbounds %struct.table, ptr %11, i32 0, i32 0
  %12 = load ptr, ptr %name7, align 8
  %call8 = call i32 @strcmp(ptr noundef %10, ptr noundef %12) #23
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %for.body6
  %13 = load ptr, ptr %tp, align 8
  store ptr %13, ptr %retval, align 8
  br label %return

if.end11:                                         ; preds = %for.body6
  br label %for.inc12

for.inc12:                                        ; preds = %if.end11
  %14 = load ptr, ptr %tp, align 8
  %incdec.ptr13 = getelementptr inbounds %struct.table, ptr %14, i32 1
  store ptr %incdec.ptr13, ptr %tp, align 8
  br label %for.cond3, !llvm.loop !80

for.end14:                                        ; preds = %for.cond3
  store ptr @time_zone_table, ptr %tp, align 8
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc24, %for.end14
  %15 = load ptr, ptr %tp, align 8
  %name16 = getelementptr inbounds %struct.table, ptr %15, i32 0, i32 0
  %16 = load ptr, ptr %name16, align 8
  %tobool17 = icmp ne ptr %16, null
  br i1 %tobool17, label %for.body18, label %for.end26

for.body18:                                       ; preds = %for.cond15
  %17 = load ptr, ptr %name.addr, align 8
  %18 = load ptr, ptr %tp, align 8
  %name19 = getelementptr inbounds %struct.table, ptr %18, i32 0, i32 0
  %19 = load ptr, ptr %name19, align 8
  %call20 = call i32 @strcmp(ptr noundef %17, ptr noundef %19) #23
  %cmp21 = icmp eq i32 %call20, 0
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %for.body18
  %20 = load ptr, ptr %tp, align 8
  store ptr %20, ptr %retval, align 8
  br label %return

if.end23:                                         ; preds = %for.body18
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23
  %21 = load ptr, ptr %tp, align 8
  %incdec.ptr25 = getelementptr inbounds %struct.table, ptr %21, i32 1
  store ptr %incdec.ptr25, ptr %tp, align 8
  br label %for.cond15, !llvm.loop !81

for.end26:                                        ; preds = %for.cond15
  store ptr null, ptr %retval, align 8
  br label %return

return:                                           ; preds = %for.end26, %if.then22, %if.then10, %if.then
  %22 = load ptr, ptr %retval, align 8
  ret ptr %22
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @parse_datetime2(ptr noundef %result, ptr noundef %p, ptr noundef %now, i32 noundef %flags, ptr noundef %tzdefault, ptr noundef %tzstring) #3 {
entry:
  %result.addr = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  %now.addr = alloca ptr, align 8
  %flags.addr = alloca i32, align 4
  %tzdefault.addr = alloca ptr, align 8
  %tzstring.addr = alloca ptr, align 8
  store ptr %result, ptr %result.addr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %now, ptr %now.addr, align 8
  store i32 %flags, ptr %flags.addr, align 4
  store ptr %tzdefault, ptr %tzdefault.addr, align 8
  store ptr %tzstring, ptr %tzstring.addr, align 8
  %0 = load ptr, ptr %result.addr, align 8
  %1 = load ptr, ptr %p.addr, align 8
  %2 = load ptr, ptr %now.addr, align 8
  %3 = load i32, ptr %flags.addr, align 4
  %4 = load ptr, ptr %tzdefault.addr, align 8
  %5 = load ptr, ptr %tzstring.addr, align 8
  %call = call zeroext i1 @parse_datetime_body(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3, ptr noundef %4, ptr noundef %5)
  ret i1 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @parse_datetime_body(ptr noundef %result, ptr noundef %p, ptr noundef %now, i32 noundef %flags, ptr noundef %tzdefault, ptr noundef %tzstring) #3 {
entry:
  %result.addr = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  %now.addr = alloca ptr, align 8
  %flags.addr = alloca i32, align 4
  %tzdefault.addr = alloca ptr, align 8
  %tzstring.addr = alloca ptr, align 8
  %tm = alloca %struct.tm, align 8
  %tm0 = alloca %struct.tm, align 8
  %time_zone_buf = alloca [27 x i8], align 16
  %dbg_tm = alloca [100 x i8], align 16
  %ok = alloca i8, align 1
  %input_sentinel = alloca ptr, align 8
  %tz1alloc = alloca ptr, align 8
  %tz1buf = alloca [100 x i8], align 16
  %gettime_buffer = alloca %struct.timespec, align 8
  %Start = alloca i64, align 8
  %Start_ns = alloca i32, align 4
  %c = alloca i8, align 1
  %tz = alloca ptr, align 8
  %rel_time_0 = alloca %struct.relative_time, align 8
  %tzbase = alloca ptr, align 8
  %tzsize = alloca i64, align 8
  %s = alloca ptr, align 8
  %tz1 = alloca ptr, align 8
  %tz1string = alloca ptr, align 8
  %z = alloca ptr, align 8
  %tmp = alloca %struct.tm, align 8
  %pc = alloca %struct.parser_control, align 8
  %.compoundliteral = alloca %struct.timespec, align 8
  %quarter = alloca i32, align 4
  %probe = alloca i64, align 8
  %probe_tm = alloca %struct.tm, align 8
  %mrd = alloca ptr, align 8
  %repaired = alloca i8, align 1
  %time_zone_seen = alloca i8, align 1
  %tz2buf = alloca [30 x i8], align 16
  %tz2 = alloca ptr, align 8
  %dbg_ord = alloca [100 x i8], align 16
  %dayincr = alloca i64, align 8
  %day_ordinal = alloca i64, align 8
  %year551 = alloca i32, align 4
  %month552 = alloca i32, align 4
  %day553 = alloca i32, align 4
  %tm_year_buf = alloca [13 x i8], align 1
  %overflow = alloca i8, align 1
  %utcoff = alloca i64, align 8
  %delta = alloca i64, align 8
  %t1 = alloca i64, align 8
  %Starti = alloca i64, align 8
  %orig_ns = alloca i64, align 8
  %sum_ns = alloca i64, align 8
  %normalized_ns = alloca i32, align 4
  %d4 = alloca i32, align 4
  %d1 = alloca i64, align 8
  %t1697 = alloca i64, align 8
  %d2 = alloca i64, align 8
  %t2 = alloca i64, align 8
  %t3 = alloca i64, align 8
  %t4 = alloca i64, align 8
  %t4i = alloca i64, align 8
  %lmt = alloca %struct.tm, align 8
  %sec = alloca i64, align 8
  %nsec = alloca i32, align 4
  %gmt = alloca %struct.tm, align 8
  %lmt787 = alloca %struct.tm, align 8
  %got_utc = alloca i8, align 1
  %got_utcoff = alloca i8, align 1
  %utcoff803 = alloca i64, align 8
  store ptr %result, ptr %result.addr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %now, ptr %now.addr, align 8
  store i32 %flags, ptr %flags.addr, align 4
  store ptr %tzdefault, ptr %tzdefault.addr, align 8
  store ptr %tzstring, ptr %tzstring.addr, align 8
  store i8 0, ptr %ok, align 1
  %0 = load ptr, ptr %p.addr, align 8
  %1 = load ptr, ptr %p.addr, align 8
  %call = call i64 @strlen(ptr noundef %1) #23
  %add.ptr = getelementptr inbounds i8, ptr %0, i64 %call
  store ptr %add.ptr, ptr %input_sentinel, align 8
  store ptr null, ptr %tz1alloc, align 8
  %2 = load ptr, ptr %now.addr, align 8
  %tobool = icmp ne ptr %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @gettime(ptr noundef %gettime_buffer)
  store ptr %gettime_buffer, ptr %now.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load ptr, ptr %now.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timespec, ptr %3, i32 0, i32 0
  %4 = load i64, ptr %tv_sec, align 8
  store i64 %4, ptr %Start, align 8
  %5 = load ptr, ptr %now.addr, align 8
  %tv_nsec = getelementptr inbounds %struct.timespec, ptr %5, i32 0, i32 1
  %6 = load i64, ptr %tv_nsec, align 8
  %conv = trunc i64 %6 to i32
  store i32 %conv, ptr %Start_ns, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %7 = load ptr, ptr %p.addr, align 8
  %8 = load i8, ptr %7, align 1
  store i8 %8, ptr %c, align 1
  %9 = load i8, ptr %c, align 1
  %conv1 = zext i8 %9 to i32
  %call2 = call zeroext i1 @c_isspace(i32 noundef %conv1)
  br i1 %call2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load ptr, ptr %p.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, ptr %10, i32 1
  store ptr %incdec.ptr, ptr %p.addr, align 8
  br label %while.cond, !llvm.loop !82

while.end:                                        ; preds = %while.cond
  %11 = load ptr, ptr %tzdefault.addr, align 8
  store ptr %11, ptr %tz, align 8
  call void @llvm.memset.p0.i64(ptr align 8 %rel_time_0, i8 0, i64 56, i1 false)
  %12 = load ptr, ptr %p.addr, align 8
  %call3 = call i32 @strncmp(ptr noundef %12, ptr noundef @.str.183, i64 noundef 4) #23
  %cmp = icmp eq i32 %call3, 0
  br i1 %cmp, label %if.then5, label %if.end60

if.then5:                                         ; preds = %while.end
  %13 = load ptr, ptr %p.addr, align 8
  %add.ptr6 = getelementptr inbounds i8, ptr %13, i64 4
  store ptr %add.ptr6, ptr %tzbase, align 8
  store i64 1, ptr %tzsize, align 8
  %14 = load ptr, ptr %tzbase, align 8
  store ptr %14, ptr %s, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc57, %if.then5
  %15 = load ptr, ptr %s, align 8
  %16 = load i8, ptr %15, align 1
  %tobool7 = icmp ne i8 %16, 0
  br i1 %tobool7, label %for.body, label %for.end59

for.body:                                         ; preds = %for.cond
  %17 = load ptr, ptr %s, align 8
  %18 = load i8, ptr %17, align 1
  %conv8 = sext i8 %18 to i32
  %cmp9 = icmp eq i32 %conv8, 92
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %for.body
  %19 = load ptr, ptr %s, align 8
  %incdec.ptr12 = getelementptr inbounds i8, ptr %19, i32 1
  store ptr %incdec.ptr12, ptr %s, align 8
  %20 = load ptr, ptr %s, align 8
  %21 = load i8, ptr %20, align 1
  %conv13 = sext i8 %21 to i32
  %cmp14 = icmp eq i32 %conv13, 92
  br i1 %cmp14, label %if.end20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then11
  %22 = load ptr, ptr %s, align 8
  %23 = load i8, ptr %22, align 1
  %conv16 = sext i8 %23 to i32
  %cmp17 = icmp eq i32 %conv16, 34
  br i1 %cmp17, label %if.end20, label %if.then19

if.then19:                                        ; preds = %lor.lhs.false
  br label %for.end59

if.end20:                                         ; preds = %lor.lhs.false, %if.then11
  br label %if.end56

if.else:                                          ; preds = %for.body
  %24 = load ptr, ptr %s, align 8
  %25 = load i8, ptr %24, align 1
  %conv21 = sext i8 %25 to i32
  %cmp22 = icmp eq i32 %conv21, 34
  br i1 %cmp22, label %if.then24, label %if.end55

if.then24:                                        ; preds = %if.else
  %arraydecay = getelementptr inbounds [100 x i8], ptr %tz1buf, i64 0, i64 0
  store ptr %arraydecay, ptr %tz1string, align 8
  %26 = load i64, ptr %tzsize, align 8
  %cmp25 = icmp slt i64 100, %26
  br i1 %cmp25, label %if.then27, label %if.end32

if.then27:                                        ; preds = %if.then24
  %27 = load i64, ptr %tzsize, align 8
  %call28 = call noalias ptr @malloc(i64 noundef %27) #29
  store ptr %call28, ptr %tz1alloc, align 8
  %28 = load ptr, ptr %tz1alloc, align 8
  %tobool29 = icmp ne ptr %28, null
  br i1 %tobool29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.then27
  br label %fail

if.end31:                                         ; preds = %if.then27
  %29 = load ptr, ptr %tz1alloc, align 8
  store ptr %29, ptr %tz1string, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.then24
  %30 = load ptr, ptr %tz1string, align 8
  store ptr %30, ptr %z, align 8
  %31 = load ptr, ptr %tzbase, align 8
  store ptr %31, ptr %s, align 8
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc, %if.end32
  %32 = load ptr, ptr %s, align 8
  %33 = load i8, ptr %32, align 1
  %conv34 = sext i8 %33 to i32
  %cmp35 = icmp ne i32 %conv34, 34
  br i1 %cmp35, label %for.body37, label %for.end

for.body37:                                       ; preds = %for.cond33
  %34 = load ptr, ptr %s, align 8
  %35 = load i8, ptr %34, align 1
  %conv38 = sext i8 %35 to i32
  %cmp39 = icmp eq i32 %conv38, 92
  %conv40 = zext i1 %cmp39 to i32
  %36 = load ptr, ptr %s, align 8
  %idx.ext = sext i32 %conv40 to i64
  %add.ptr41 = getelementptr inbounds i8, ptr %36, i64 %idx.ext
  store ptr %add.ptr41, ptr %s, align 8
  %37 = load i8, ptr %add.ptr41, align 1
  %38 = load ptr, ptr %z, align 8
  %incdec.ptr42 = getelementptr inbounds i8, ptr %38, i32 1
  store ptr %incdec.ptr42, ptr %z, align 8
  store i8 %37, ptr %38, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body37
  %39 = load ptr, ptr %s, align 8
  %incdec.ptr43 = getelementptr inbounds i8, ptr %39, i32 1
  store ptr %incdec.ptr43, ptr %s, align 8
  br label %for.cond33, !llvm.loop !83

for.end:                                          ; preds = %for.cond33
  %40 = load ptr, ptr %z, align 8
  store i8 0, ptr %40, align 1
  %41 = load ptr, ptr %tz1string, align 8
  %call44 = call ptr @tzalloc(ptr noundef %41)
  store ptr %call44, ptr %tz1, align 8
  %42 = load ptr, ptr %tz1, align 8
  %tobool45 = icmp ne ptr %42, null
  br i1 %tobool45, label %if.end47, label %if.then46

if.then46:                                        ; preds = %for.end
  br label %fail

if.end47:                                         ; preds = %for.end
  %43 = load ptr, ptr %tz1, align 8
  store ptr %43, ptr %tz, align 8
  %44 = load ptr, ptr %tz1string, align 8
  store ptr %44, ptr %tzstring.addr, align 8
  %45 = load ptr, ptr %s, align 8
  %add.ptr48 = getelementptr inbounds i8, ptr %45, i64 1
  store ptr %add.ptr48, ptr %p.addr, align 8
  br label %while.cond49

while.cond49:                                     ; preds = %while.body52, %if.end47
  %46 = load ptr, ptr %p.addr, align 8
  %47 = load i8, ptr %46, align 1
  store i8 %47, ptr %c, align 1
  %48 = load i8, ptr %c, align 1
  %conv50 = zext i8 %48 to i32
  %call51 = call zeroext i1 @c_isspace(i32 noundef %conv50)
  br i1 %call51, label %while.body52, label %while.end54

while.body52:                                     ; preds = %while.cond49
  %49 = load ptr, ptr %p.addr, align 8
  %incdec.ptr53 = getelementptr inbounds i8, ptr %49, i32 1
  store ptr %incdec.ptr53, ptr %p.addr, align 8
  br label %while.cond49, !llvm.loop !84

while.end54:                                      ; preds = %while.cond49
  br label %for.end59

if.end55:                                         ; preds = %if.else
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end20
  br label %for.inc57

for.inc57:                                        ; preds = %if.end56
  %50 = load ptr, ptr %s, align 8
  %incdec.ptr58 = getelementptr inbounds i8, ptr %50, i32 1
  store ptr %incdec.ptr58, ptr %s, align 8
  %51 = load i64, ptr %tzsize, align 8
  %inc = add nsw i64 %51, 1
  store i64 %inc, ptr %tzsize, align 8
  br label %for.cond, !llvm.loop !85

for.end59:                                        ; preds = %while.end54, %if.then19, %for.cond
  br label %if.end60

if.end60:                                         ; preds = %for.end59, %while.end
  %52 = load ptr, ptr %tz, align 8
  %53 = load ptr, ptr %now.addr, align 8
  %tv_sec61 = getelementptr inbounds %struct.timespec, ptr %53, i32 0, i32 0
  %call62 = call ptr @localtime_rz(ptr noundef %52, ptr noundef %tv_sec61, ptr noundef %tmp)
  %tobool63 = icmp ne ptr %call62, null
  br i1 %tobool63, label %if.end65, label %if.then64

if.then64:                                        ; preds = %if.end60
  br label %fail

if.end65:                                         ; preds = %if.end60
  %54 = load ptr, ptr %p.addr, align 8
  %55 = load i8, ptr %54, align 1
  %conv66 = sext i8 %55 to i32
  %cmp67 = icmp eq i32 %conv66, 0
  br i1 %cmp67, label %if.then69, label %if.end70

if.then69:                                        ; preds = %if.end65
  store ptr @.str.184, ptr %p.addr, align 8
  br label %if.end70

if.end70:                                         ; preds = %if.then69, %if.end65
  %56 = load ptr, ptr %p.addr, align 8
  %input = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 0
  store ptr %56, ptr %input, align 8
  %57 = load i32, ptr %flags.addr, align 4
  %and = and i32 %57, 1
  %cmp71 = icmp ne i32 %and, 0
  %parse_datetime_debug = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 23
  %frombool = zext i1 %cmp71 to i8
  store i8 %frombool, ptr %parse_datetime_debug, align 1
  %tm_year = getelementptr inbounds %struct.tm, ptr %tmp, i32 0, i32 5
  %58 = load i32, ptr %tm_year, align 4
  %year = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 6
  %value = getelementptr inbounds %struct.textint, ptr %year, i32 0, i32 1
  %59 = sext i32 %58 to i64
  %60 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %59, i64 1900)
  %61 = extractvalue { i64, i1 } %60, 1
  %62 = extractvalue { i64, i1 } %60, 0
  store i64 %62, ptr %value, align 8
  br i1 %61, label %if.then73, label %if.end78

if.then73:                                        ; preds = %if.end70
  %call74 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call74, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.then73
  %call76 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.185) #21
  call void @dbg_fputs(ptr noundef %call76)
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.then73
  br label %fail

if.end78:                                         ; preds = %if.end70
  %year79 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 6
  %digits = getelementptr inbounds %struct.textint, ptr %year79, i32 0, i32 2
  store i64 0, ptr %digits, align 8
  %tm_mon = getelementptr inbounds %struct.tm, ptr %tmp, i32 0, i32 4
  %63 = load i32, ptr %tm_mon, align 8
  %add = add nsw i32 %63, 1
  %conv80 = sext i32 %add to i64
  %month = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 7
  store i64 %conv80, ptr %month, align 8
  %tm_mday = getelementptr inbounds %struct.tm, ptr %tmp, i32 0, i32 3
  %64 = load i32, ptr %tm_mday, align 4
  %conv81 = sext i32 %64 to i64
  %day = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 8
  store i64 %conv81, ptr %day, align 8
  %tm_hour = getelementptr inbounds %struct.tm, ptr %tmp, i32 0, i32 2
  %65 = load i32, ptr %tm_hour, align 8
  %conv82 = sext i32 %65 to i64
  %hour = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 9
  store i64 %conv82, ptr %hour, align 8
  %tm_min = getelementptr inbounds %struct.tm, ptr %tmp, i32 0, i32 1
  %66 = load i32, ptr %tm_min, align 4
  %conv83 = sext i32 %66 to i64
  %minutes = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 10
  store i64 %conv83, ptr %minutes, align 8
  %seconds = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 11
  %tv_sec84 = getelementptr inbounds %struct.timespec, ptr %.compoundliteral, i32 0, i32 0
  %tm_sec = getelementptr inbounds %struct.tm, ptr %tmp, i32 0, i32 0
  %67 = load i32, ptr %tm_sec, align 8
  %conv85 = sext i32 %67 to i64
  store i64 %conv85, ptr %tv_sec84, align 8
  %tv_nsec86 = getelementptr inbounds %struct.timespec, ptr %.compoundliteral, i32 0, i32 1
  %68 = load i32, ptr %Start_ns, align 4
  %conv87 = sext i32 %68 to i64
  store i64 %conv87, ptr %tv_nsec86, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %seconds, ptr align 8 %.compoundliteral, i64 16, i1 false)
  %tm_isdst = getelementptr inbounds %struct.tm, ptr %tmp, i32 0, i32 8
  %69 = load i32, ptr %tm_isdst, align 8
  %tm_isdst88 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  store i32 %69, ptr %tm_isdst88, align 8
  %meridian = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 5
  store i32 2, ptr %meridian, align 4
  %rel = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %rel, ptr align 8 %rel_time_0, i64 56, i1 false)
  %timespec_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 13
  store i8 0, ptr %timespec_seen, align 8
  %rels_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 14
  store i8 0, ptr %rels_seen, align 1
  %dates_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 15
  store i64 0, ptr %dates_seen, align 8
  %days_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 16
  store i64 0, ptr %days_seen, align 8
  %times_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 20
  store i64 0, ptr %times_seen, align 8
  %J_zones_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 17
  store i64 0, ptr %J_zones_seen, align 8
  %local_zones_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 18
  store i64 0, ptr %local_zones_seen, align 8
  %dsts_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 19
  store i64 0, ptr %dsts_seen, align 8
  %zones_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 21
  store i64 0, ptr %zones_seen, align 8
  %year_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 22
  store i8 0, ptr %year_seen, align 8
  %debug_dates_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 24
  store i8 0, ptr %debug_dates_seen, align 2
  %debug_days_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 25
  store i8 0, ptr %debug_days_seen, align 1
  %debug_times_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 27
  store i8 0, ptr %debug_times_seen, align 1
  %debug_local_zones_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 26
  store i8 0, ptr %debug_local_zones_seen, align 4
  %debug_zones_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 28
  store i8 0, ptr %debug_zones_seen, align 2
  %debug_year_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 29
  store i8 0, ptr %debug_year_seen, align 1
  %debug_ordinal_day_seen = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 30
  store i8 0, ptr %debug_ordinal_day_seen, align 8
  %local_time_zone_table = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 31
  %arrayidx = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table, i64 0, i64 0
  %name = getelementptr inbounds %struct.table, ptr %arrayidx, i32 0, i32 0
  store ptr null, ptr %name, align 8
  call void @populate_local_time_zone_table(ptr noundef %pc, ptr noundef %tmp)
  store i32 1, ptr %quarter, align 4
  br label %for.cond89

for.cond89:                                       ; preds = %for.inc132, %if.end78
  %70 = load i32, ptr %quarter, align 4
  %cmp90 = icmp sle i32 %70, 3
  br i1 %cmp90, label %for.body92, label %for.end134

for.body92:                                       ; preds = %for.cond89
  %71 = load i64, ptr %Start, align 8
  %72 = load i32, ptr %quarter, align 4
  %mul = mul nsw i32 %72, 7776000
  %73 = sext i32 %mul to i64
  %74 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %71, i64 %73)
  %75 = extractvalue { i64, i1 } %74, 1
  %76 = extractvalue { i64, i1 } %74, 0
  store i64 %76, ptr %probe, align 8
  br i1 %75, label %if.then93, label %if.end94

if.then93:                                        ; preds = %for.body92
  br label %for.end134

if.end94:                                         ; preds = %for.body92
  %77 = load ptr, ptr %tz, align 8
  %call95 = call ptr @localtime_rz(ptr noundef %77, ptr noundef %probe, ptr noundef %probe_tm)
  %tobool96 = icmp ne ptr %call95, null
  br i1 %tobool96, label %land.lhs.true, label %if.end131

land.lhs.true:                                    ; preds = %if.end94
  %local_time_zone_table97 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 31
  %arrayidx98 = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table97, i64 0, i64 0
  %name99 = getelementptr inbounds %struct.table, ptr %arrayidx98, i32 0, i32 0
  %78 = load ptr, ptr %name99, align 8
  %tobool100 = icmp ne ptr %78, null
  br i1 %tobool100, label %lor.lhs.false101, label %if.then108

lor.lhs.false101:                                 ; preds = %land.lhs.true
  %tm_isdst102 = getelementptr inbounds %struct.tm, ptr %probe_tm, i32 0, i32 8
  %79 = load i32, ptr %tm_isdst102, align 8
  %local_time_zone_table103 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 31
  %arrayidx104 = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table103, i64 0, i64 0
  %value105 = getelementptr inbounds %struct.table, ptr %arrayidx104, i32 0, i32 2
  %80 = load i32, ptr %value105, align 4
  %cmp106 = icmp ne i32 %79, %80
  br i1 %cmp106, label %if.then108, label %if.end131

if.then108:                                       ; preds = %lor.lhs.false101, %land.lhs.true
  call void @populate_local_time_zone_table(ptr noundef %pc, ptr noundef %probe_tm)
  %local_time_zone_table109 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 31
  %arrayidx110 = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table109, i64 0, i64 1
  %name111 = getelementptr inbounds %struct.table, ptr %arrayidx110, i32 0, i32 0
  %81 = load ptr, ptr %name111, align 8
  %tobool112 = icmp ne ptr %81, null
  br i1 %tobool112, label %if.then113, label %if.end130

if.then113:                                       ; preds = %if.then108
  %local_time_zone_table114 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 31
  %arrayidx115 = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table114, i64 0, i64 0
  %name116 = getelementptr inbounds %struct.table, ptr %arrayidx115, i32 0, i32 0
  %82 = load ptr, ptr %name116, align 8
  %local_time_zone_table117 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 31
  %arrayidx118 = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table117, i64 0, i64 1
  %name119 = getelementptr inbounds %struct.table, ptr %arrayidx118, i32 0, i32 0
  %83 = load ptr, ptr %name119, align 8
  %call120 = call i32 @strcmp(ptr noundef %82, ptr noundef %83) #23
  %tobool121 = icmp ne i32 %call120, 0
  br i1 %tobool121, label %if.end129, label %if.then122

if.then122:                                       ; preds = %if.then113
  %local_time_zone_table123 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 31
  %arrayidx124 = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table123, i64 0, i64 0
  %value125 = getelementptr inbounds %struct.table, ptr %arrayidx124, i32 0, i32 2
  store i32 -1, ptr %value125, align 4
  %local_time_zone_table126 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 31
  %arrayidx127 = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table126, i64 0, i64 1
  %name128 = getelementptr inbounds %struct.table, ptr %arrayidx127, i32 0, i32 0
  store ptr null, ptr %name128, align 8
  br label %if.end129

if.end129:                                        ; preds = %if.then122, %if.then113
  br label %for.end134

if.end130:                                        ; preds = %if.then108
  br label %if.end131

if.end131:                                        ; preds = %if.end130, %lor.lhs.false101, %if.end94
  br label %for.inc132

for.inc132:                                       ; preds = %if.end131
  %84 = load i32, ptr %quarter, align 4
  %inc133 = add nsw i32 %84, 1
  store i32 %inc133, ptr %quarter, align 4
  br label %for.cond89, !llvm.loop !86

for.end134:                                       ; preds = %if.end129, %if.then93, %for.cond89
  %call135 = call i32 @yyparse(ptr noundef %pc)
  %cmp136 = icmp ne i32 %call135, 0
  br i1 %cmp136, label %if.then138, label %if.end148

if.then138:                                       ; preds = %for.end134
  %call139 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call139, label %if.then140, label %if.end147

if.then140:                                       ; preds = %if.then138
  %85 = load ptr, ptr %input_sentinel, align 8
  %input141 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 0
  %86 = load ptr, ptr %input141, align 8
  %cmp142 = icmp ule ptr %85, %86
  br i1 %cmp142, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then140
  %call144 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.186) #21
  br label %cond.end

cond.false:                                       ; preds = %if.then140
  %call145 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.187) #21
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi ptr [ %call144, %cond.true ], [ %call145, %cond.false ]
  %input146 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 0
  %87 = load ptr, ptr %input146, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %cond, ptr noundef %87)
  br label %if.end147

if.end147:                                        ; preds = %cond.end, %if.then138
  br label %fail

if.end148:                                        ; preds = %for.end134
  %call149 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call149, label %if.then150, label %if.end208

if.then150:                                       ; preds = %if.end148
  %call151 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.188) #21
  call void @dbg_fputs(ptr noundef %call151)
  %timespec_seen152 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 13
  %88 = load i8, ptr %timespec_seen152, align 8
  %tobool153 = trunc i8 %88 to i1
  br i1 %tobool153, label %if.then154, label %if.else157

if.then154:                                       ; preds = %if.then150
  %call155 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.189) #21
  %89 = load ptr, ptr @stderr, align 8
  %call156 = call i32 @fputs(ptr noundef %call155, ptr noundef %89)
  br label %if.end188

if.else157:                                       ; preds = %if.then150
  %zones_seen158 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 21
  %90 = load i64, ptr %zones_seen158, align 8
  %tobool159 = icmp ne i64 %90, 0
  br i1 %tobool159, label %if.then160, label %if.else163

if.then160:                                       ; preds = %if.else157
  %call161 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.190) #21
  %91 = load ptr, ptr @stderr, align 8
  %call162 = call i32 @fputs(ptr noundef %call161, ptr noundef %91)
  br label %if.end187

if.else163:                                       ; preds = %if.else157
  %92 = load ptr, ptr %tzstring.addr, align 8
  %tobool164 = icmp ne ptr %92, null
  br i1 %tobool164, label %if.then165, label %if.else183

if.then165:                                       ; preds = %if.else163
  %93 = load ptr, ptr %tz, align 8
  %94 = load ptr, ptr %tzdefault.addr, align 8
  %cmp166 = icmp ne ptr %93, %94
  br i1 %cmp166, label %if.then168, label %if.else171

if.then168:                                       ; preds = %if.then165
  %95 = load ptr, ptr @stderr, align 8
  %call169 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.191) #21
  %96 = load ptr, ptr %tzstring.addr, align 8
  %call170 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %95, ptr noundef %call169, ptr noundef %96)
  br label %if.end182

if.else171:                                       ; preds = %if.then165
  %97 = load ptr, ptr %tzstring.addr, align 8
  %call172 = call i32 @strcmp(ptr noundef %97, ptr noundef @.str.192) #23
  %cmp173 = icmp eq i32 %call172, 0
  br i1 %cmp173, label %if.then175, label %if.else178

if.then175:                                       ; preds = %if.else171
  %call176 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.193) #21
  %98 = load ptr, ptr @stderr, align 8
  %call177 = call i32 @fputs(ptr noundef %call176, ptr noundef %98)
  br label %if.end181

if.else178:                                       ; preds = %if.else171
  %99 = load ptr, ptr @stderr, align 8
  %call179 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.194) #21
  %100 = load ptr, ptr %tzstring.addr, align 8
  %call180 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %99, ptr noundef %call179, ptr noundef %100)
  br label %if.end181

if.end181:                                        ; preds = %if.else178, %if.then175
  br label %if.end182

if.end182:                                        ; preds = %if.end181, %if.then168
  br label %if.end186

if.else183:                                       ; preds = %if.else163
  %call184 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.195) #21
  %101 = load ptr, ptr @stderr, align 8
  %call185 = call i32 @fputs(ptr noundef %call184, ptr noundef %101)
  br label %if.end186

if.end186:                                        ; preds = %if.else183, %if.end182
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.then160
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then154
  %local_zones_seen189 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 18
  %102 = load i64, ptr %local_zones_seen189, align 8
  %tobool190 = icmp ne i64 %102, 0
  br i1 %tobool190, label %land.lhs.true191, label %if.end199

land.lhs.true191:                                 ; preds = %if.end188
  %zones_seen192 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 21
  %103 = load i64, ptr %zones_seen192, align 8
  %tobool193 = icmp ne i64 %103, 0
  br i1 %tobool193, label %if.end199, label %land.lhs.true194

land.lhs.true194:                                 ; preds = %land.lhs.true191
  %local_isdst = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 3
  %104 = load i32, ptr %local_isdst, align 4
  %cmp195 = icmp slt i32 0, %104
  br i1 %cmp195, label %if.then197, label %if.end199

if.then197:                                       ; preds = %land.lhs.true194
  %105 = load ptr, ptr @stderr, align 8
  %call198 = call i32 @fputs(ptr noundef @.str.196, ptr noundef %105)
  br label %if.end199

if.end199:                                        ; preds = %if.then197, %land.lhs.true194, %land.lhs.true191, %if.end188
  %zones_seen200 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 21
  %106 = load i64, ptr %zones_seen200, align 8
  %tobool201 = icmp ne i64 %106, 0
  br i1 %tobool201, label %if.then202, label %if.end206

if.then202:                                       ; preds = %if.end199
  %107 = load ptr, ptr @stderr, align 8
  %time_zone = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 4
  %108 = load i32, ptr %time_zone, align 8
  %arraydecay203 = getelementptr inbounds [27 x i8], ptr %time_zone_buf, i64 0, i64 0
  %call204 = call ptr @time_zone_str(i32 noundef %108, ptr noundef %arraydecay203)
  %call205 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %107, ptr noundef @.str.197, ptr noundef %call204)
  br label %if.end206

if.end206:                                        ; preds = %if.then202, %if.end199
  %109 = load ptr, ptr @stderr, align 8
  %call207 = call i32 @fputc(i32 noundef 10, ptr noundef %109)
  br label %if.end208

if.end208:                                        ; preds = %if.end206, %if.end148
  %timespec_seen209 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 13
  %110 = load i8, ptr %timespec_seen209, align 8
  %tobool210 = trunc i8 %110 to i1
  br i1 %tobool210, label %if.then211, label %if.else213

if.then211:                                       ; preds = %if.end208
  %111 = load ptr, ptr %result.addr, align 8
  %seconds212 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 11
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %111, ptr align 8 %seconds212, i64 16, i1 false)
  br label %if.end767

if.else213:                                       ; preds = %if.end208
  %times_seen214 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 20
  %112 = load i64, ptr %times_seen214, align 8
  %dates_seen215 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 15
  %113 = load i64, ptr %dates_seen215, align 8
  %or = or i64 %112, %113
  %days_seen216 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 16
  %114 = load i64, ptr %days_seen216, align 8
  %or217 = or i64 %or, %114
  %dsts_seen218 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 19
  %115 = load i64, ptr %dsts_seen218, align 8
  %or219 = or i64 %or217, %115
  %J_zones_seen220 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 17
  %116 = load i64, ptr %J_zones_seen220, align 8
  %local_zones_seen221 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 18
  %117 = load i64, ptr %local_zones_seen221, align 8
  %add222 = add nsw i64 %116, %117
  %zones_seen223 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 21
  %118 = load i64, ptr %zones_seen223, align 8
  %add224 = add nsw i64 %add222, %118
  %or225 = or i64 %or219, %add224
  %cmp226 = icmp slt i64 1, %or225
  br i1 %cmp226, label %if.then228, label %if.end266

if.then228:                                       ; preds = %if.else213
  %call229 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call229, label %if.then230, label %if.end265

if.then230:                                       ; preds = %if.then228
  %times_seen231 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 20
  %119 = load i64, ptr %times_seen231, align 8
  %cmp232 = icmp sgt i64 %119, 1
  br i1 %cmp232, label %if.then234, label %if.end236

if.then234:                                       ; preds = %if.then230
  %call235 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.198) #21
  call void @dbg_fputs(ptr noundef %call235)
  br label %if.end236

if.end236:                                        ; preds = %if.then234, %if.then230
  %dates_seen237 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 15
  %120 = load i64, ptr %dates_seen237, align 8
  %cmp238 = icmp sgt i64 %120, 1
  br i1 %cmp238, label %if.then240, label %if.end242

if.then240:                                       ; preds = %if.end236
  %call241 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.199) #21
  call void @dbg_fputs(ptr noundef %call241)
  br label %if.end242

if.end242:                                        ; preds = %if.then240, %if.end236
  %days_seen243 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 16
  %121 = load i64, ptr %days_seen243, align 8
  %cmp244 = icmp sgt i64 %121, 1
  br i1 %cmp244, label %if.then246, label %if.end248

if.then246:                                       ; preds = %if.end242
  %call247 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.200.290) #21
  call void @dbg_fputs(ptr noundef %call247)
  br label %if.end248

if.end248:                                        ; preds = %if.then246, %if.end242
  %dsts_seen249 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 19
  %122 = load i64, ptr %dsts_seen249, align 8
  %cmp250 = icmp sgt i64 %122, 1
  br i1 %cmp250, label %if.then252, label %if.end254

if.then252:                                       ; preds = %if.end248
  %call253 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.201) #21
  call void @dbg_fputs(ptr noundef %call253)
  br label %if.end254

if.end254:                                        ; preds = %if.then252, %if.end248
  %J_zones_seen255 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 17
  %123 = load i64, ptr %J_zones_seen255, align 8
  %local_zones_seen256 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 18
  %124 = load i64, ptr %local_zones_seen256, align 8
  %add257 = add nsw i64 %123, %124
  %zones_seen258 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 21
  %125 = load i64, ptr %zones_seen258, align 8
  %add259 = add nsw i64 %add257, %125
  %cmp260 = icmp sgt i64 %add259, 1
  br i1 %cmp260, label %if.then262, label %if.end264

if.then262:                                       ; preds = %if.end254
  %call263 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.202) #21
  call void @dbg_fputs(ptr noundef %call263)
  br label %if.end264

if.end264:                                        ; preds = %if.then262, %if.end254
  br label %if.end265

if.end265:                                        ; preds = %if.end264, %if.then228
  br label %fail

if.end266:                                        ; preds = %if.else213
  %year267 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 6
  %call268 = call zeroext i1 @debugging(ptr noundef %pc)
  %tm_year269 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 5
  %call270 = call zeroext i1 @to_tm_year(ptr noundef byval(%struct.textint) align 8 %year267, i1 noundef zeroext %call268, ptr noundef %tm_year269)
  br i1 %call270, label %lor.lhs.false271, label %if.then279

lor.lhs.false271:                                 ; preds = %if.end266
  %month272 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 7
  %126 = load i64, ptr %month272, align 8
  %tm_mon273 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 4
  %127 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %126, i64 -1)
  %128 = extractvalue { i64, i1 } %127, 1
  %129 = extractvalue { i64, i1 } %127, 0
  %130 = trunc i64 %129 to i32
  %131 = sext i32 %130 to i64
  %132 = icmp ne i64 %129, %131
  %133 = or i1 %128, %132
  store i32 %130, ptr %tm_mon273, align 8
  br i1 %133, label %if.then279, label %lor.lhs.false275

lor.lhs.false275:                                 ; preds = %lor.lhs.false271
  %day276 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 8
  %134 = load i64, ptr %day276, align 8
  %tm_mday277 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  %135 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %134, i64 0)
  %136 = extractvalue { i64, i1 } %135, 1
  %137 = extractvalue { i64, i1 } %135, 0
  %138 = trunc i64 %137 to i32
  %139 = sext i32 %138 to i64
  %140 = icmp ne i64 %137, %139
  %141 = or i1 %136, %140
  store i32 %138, ptr %tm_mday277, align 4
  br i1 %141, label %if.then279, label %if.end284

if.then279:                                       ; preds = %lor.lhs.false275, %lor.lhs.false271, %if.end266
  %call280 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call280, label %if.then281, label %if.end283

if.then281:                                       ; preds = %if.then279
  %call282 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.203) #21
  call void @dbg_fputs(ptr noundef %call282)
  br label %if.end283

if.end283:                                        ; preds = %if.then281, %if.then279
  br label %fail

if.end284:                                        ; preds = %lor.lhs.false275
  %times_seen285 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 20
  %142 = load i64, ptr %times_seen285, align 8
  %tobool286 = icmp ne i64 %142, 0
  br i1 %tobool286, label %if.then297, label %lor.lhs.false287

lor.lhs.false287:                                 ; preds = %if.end284
  %rels_seen288 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 14
  %143 = load i8, ptr %rels_seen288, align 1
  %tobool289 = trunc i8 %143 to i1
  br i1 %tobool289, label %land.lhs.true291, label %if.else343

land.lhs.true291:                                 ; preds = %lor.lhs.false287
  %dates_seen292 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 15
  %144 = load i64, ptr %dates_seen292, align 8
  %tobool293 = icmp ne i64 %144, 0
  br i1 %tobool293, label %if.else343, label %land.lhs.true294

land.lhs.true294:                                 ; preds = %land.lhs.true291
  %days_seen295 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 16
  %145 = load i64, ptr %days_seen295, align 8
  %tobool296 = icmp ne i64 %145, 0
  br i1 %tobool296, label %if.else343, label %if.then297

if.then297:                                       ; preds = %land.lhs.true294, %if.end284
  %hour298 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 9
  %146 = load i64, ptr %hour298, align 8
  %meridian299 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 5
  %147 = load i32, ptr %meridian299, align 4
  %call300 = call i32 @to_hour(i64 noundef %146, i32 noundef %147)
  %tm_hour301 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 2
  store i32 %call300, ptr %tm_hour301, align 8
  %tm_hour302 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 2
  %148 = load i32, ptr %tm_hour302, align 8
  %cmp303 = icmp slt i32 %148, 0
  br i1 %cmp303, label %if.then305, label %if.end322

if.then305:                                       ; preds = %if.then297
  %meridian306 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 5
  %149 = load i32, ptr %meridian306, align 4
  %cmp307 = icmp eq i32 %149, 0
  br i1 %cmp307, label %cond.true309, label %cond.false310

cond.true309:                                     ; preds = %if.then305
  br label %cond.end315

cond.false310:                                    ; preds = %if.then305
  %meridian311 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 5
  %150 = load i32, ptr %meridian311, align 4
  %cmp312 = icmp eq i32 %150, 1
  %151 = zext i1 %cmp312 to i64
  %cond314 = select i1 %cmp312, ptr @.str.26.250, ptr @.str.30.254
  br label %cond.end315

cond.end315:                                      ; preds = %cond.false310, %cond.true309
  %cond316 = phi ptr [ @.str.204, %cond.true309 ], [ %cond314, %cond.false310 ]
  store ptr %cond316, ptr %mrd, align 8
  %call317 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call317, label %if.then318, label %if.end321

if.then318:                                       ; preds = %cond.end315
  %call319 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.205.291) #21
  %hour320 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 9
  %152 = load i64, ptr %hour320, align 8
  %153 = load ptr, ptr %mrd, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call319, i64 noundef %152, ptr noundef %153)
  br label %if.end321

if.end321:                                        ; preds = %if.then318, %cond.end315
  br label %fail

if.end322:                                        ; preds = %if.then297
  %minutes323 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 10
  %154 = load i64, ptr %minutes323, align 8
  %conv324 = trunc i64 %154 to i32
  %tm_min325 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 1
  store i32 %conv324, ptr %tm_min325, align 4
  %seconds326 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 11
  %tv_sec327 = getelementptr inbounds %struct.timespec, ptr %seconds326, i32 0, i32 0
  %155 = load i64, ptr %tv_sec327, align 8
  %conv328 = trunc i64 %155 to i32
  %tm_sec329 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 0
  store i32 %conv328, ptr %tm_sec329, align 8
  %call330 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call330, label %if.then331, label %if.end342

if.then331:                                       ; preds = %if.end322
  %times_seen332 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 20
  %156 = load i64, ptr %times_seen332, align 8
  %tobool333 = icmp ne i64 %156, 0
  br i1 %tobool333, label %cond.true334, label %cond.false336

cond.true334:                                     ; preds = %if.then331
  %call335 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.206) #21
  br label %cond.end338

cond.false336:                                    ; preds = %if.then331
  %call337 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.207) #21
  br label %cond.end338

cond.end338:                                      ; preds = %cond.false336, %cond.true334
  %cond339 = phi ptr [ %call335, %cond.true334 ], [ %call337, %cond.false336 ]
  %arraydecay340 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call341 = call ptr @debug_strftime(ptr noundef %tm, ptr noundef %arraydecay340, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %cond339, ptr noundef %call341)
  br label %if.end342

if.end342:                                        ; preds = %cond.end338, %if.end322
  br label %if.end353

if.else343:                                       ; preds = %land.lhs.true294, %land.lhs.true291, %lor.lhs.false287
  %tm_sec344 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 0
  store i32 0, ptr %tm_sec344, align 8
  %tm_min345 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 1
  store i32 0, ptr %tm_min345, align 4
  %tm_hour346 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 2
  store i32 0, ptr %tm_hour346, align 8
  %seconds347 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 11
  %tv_nsec348 = getelementptr inbounds %struct.timespec, ptr %seconds347, i32 0, i32 1
  store i64 0, ptr %tv_nsec348, align 8
  %call349 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call349, label %if.then350, label %if.end352

if.then350:                                       ; preds = %if.else343
  %call351 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.208) #21
  call void (ptr, ...) @dbg_printf(ptr noundef %call351, ptr noundef @.str.209)
  br label %if.end352

if.end352:                                        ; preds = %if.then350, %if.else343
  br label %if.end353

if.end353:                                        ; preds = %if.end352, %if.end342
  %dates_seen354 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 15
  %157 = load i64, ptr %dates_seen354, align 8
  %days_seen355 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 16
  %158 = load i64, ptr %days_seen355, align 8
  %or356 = or i64 %157, %158
  %times_seen357 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 20
  %159 = load i64, ptr %times_seen357, align 8
  %or358 = or i64 %or356, %159
  %tobool359 = icmp ne i64 %or358, 0
  br i1 %tobool359, label %if.then360, label %if.end362

if.then360:                                       ; preds = %if.end353
  %tm_isdst361 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  store i32 -1, ptr %tm_isdst361, align 8
  br label %if.end362

if.end362:                                        ; preds = %if.then360, %if.end353
  %local_zones_seen363 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 18
  %160 = load i64, ptr %local_zones_seen363, align 8
  %tobool364 = icmp ne i64 %160, 0
  br i1 %tobool364, label %if.then365, label %if.end368

if.then365:                                       ; preds = %if.end362
  %local_isdst366 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 3
  %161 = load i32, ptr %local_isdst366, align 4
  %tm_isdst367 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  store i32 %161, ptr %tm_isdst367, align 8
  br label %if.end368

if.end368:                                        ; preds = %if.then365, %if.end362
  %tm_sec369 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 0
  %162 = load i32, ptr %tm_sec369, align 8
  %tm_sec370 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 0
  store i32 %162, ptr %tm_sec370, align 8
  %tm_min371 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 1
  %163 = load i32, ptr %tm_min371, align 4
  %tm_min372 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 1
  store i32 %163, ptr %tm_min372, align 4
  %tm_hour373 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 2
  %164 = load i32, ptr %tm_hour373, align 8
  %tm_hour374 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 2
  store i32 %164, ptr %tm_hour374, align 8
  %tm_mday375 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  %165 = load i32, ptr %tm_mday375, align 4
  %tm_mday376 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 3
  store i32 %165, ptr %tm_mday376, align 4
  %tm_mon377 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 4
  %166 = load i32, ptr %tm_mon377, align 8
  %tm_mon378 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 4
  store i32 %166, ptr %tm_mon378, align 8
  %tm_year379 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 5
  %167 = load i32, ptr %tm_year379, align 4
  %tm_year380 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 5
  store i32 %167, ptr %tm_year380, align 4
  %tm_isdst381 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  %168 = load i32, ptr %tm_isdst381, align 8
  %tm_isdst382 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 8
  store i32 %168, ptr %tm_isdst382, align 8
  %tm_wday = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 6
  store i32 -1, ptr %tm_wday, align 8
  %169 = load ptr, ptr %tz, align 8
  %call383 = call i64 @mktime_z(ptr noundef %169, ptr noundef %tm)
  store i64 %call383, ptr %Start, align 8
  %call384 = call zeroext i1 @mktime_ok(ptr noundef %tm0, ptr noundef %tm)
  br i1 %call384, label %if.end431, label %if.then385

if.then385:                                       ; preds = %if.end368
  store i8 0, ptr %repaired, align 1
  %zones_seen386 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 21
  %170 = load i64, ptr %zones_seen386, align 8
  %cmp387 = icmp ne i64 %170, 0
  %frombool389 = zext i1 %cmp387 to i8
  store i8 %frombool389, ptr %time_zone_seen, align 1
  %171 = load i8, ptr %time_zone_seen, align 1
  %tobool390 = trunc i8 %171 to i1
  br i1 %tobool390, label %if.then391, label %if.end426

if.then391:                                       ; preds = %if.then385
  %arrayidx392 = getelementptr inbounds [30 x i8], ptr %tz2buf, i64 0, i64 2
  store i8 88, ptr %arrayidx392, align 2
  %arrayidx393 = getelementptr inbounds [30 x i8], ptr %tz2buf, i64 0, i64 1
  store i8 88, ptr %arrayidx393, align 1
  %arrayidx394 = getelementptr inbounds [30 x i8], ptr %tz2buf, i64 0, i64 0
  store i8 88, ptr %arrayidx394, align 16
  %time_zone395 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 4
  %172 = load i32, ptr %time_zone395, align 8
  %arrayidx396 = getelementptr inbounds [30 x i8], ptr %tz2buf, i64 0, i64 3
  %call397 = call ptr @time_zone_str(i32 noundef %172, ptr noundef %arrayidx396)
  %arraydecay398 = getelementptr inbounds [30 x i8], ptr %tz2buf, i64 0, i64 0
  %call399 = call ptr @tzalloc(ptr noundef %arraydecay398)
  store ptr %call399, ptr %tz2, align 8
  %173 = load ptr, ptr %tz2, align 8
  %tobool400 = icmp ne ptr %173, null
  br i1 %tobool400, label %if.end407, label %if.then401

if.then401:                                       ; preds = %if.then391
  %call402 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call402, label %if.then403, label %if.end406

if.then403:                                       ; preds = %if.then401
  %call404 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.210) #21
  %arraydecay405 = getelementptr inbounds [30 x i8], ptr %tz2buf, i64 0, i64 0
  call void (ptr, ...) @dbg_printf(ptr noundef %call404, ptr noundef %arraydecay405)
  br label %if.end406

if.end406:                                        ; preds = %if.then403, %if.then401
  br label %fail

if.end407:                                        ; preds = %if.then391
  %tm_sec408 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 0
  %174 = load i32, ptr %tm_sec408, align 8
  %tm_sec409 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 0
  store i32 %174, ptr %tm_sec409, align 8
  %tm_min410 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 1
  %175 = load i32, ptr %tm_min410, align 4
  %tm_min411 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 1
  store i32 %175, ptr %tm_min411, align 4
  %tm_hour412 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 2
  %176 = load i32, ptr %tm_hour412, align 8
  %tm_hour413 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 2
  store i32 %176, ptr %tm_hour413, align 8
  %tm_mday414 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 3
  %177 = load i32, ptr %tm_mday414, align 4
  %tm_mday415 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  store i32 %177, ptr %tm_mday415, align 4
  %tm_mon416 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 4
  %178 = load i32, ptr %tm_mon416, align 8
  %tm_mon417 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 4
  store i32 %178, ptr %tm_mon417, align 8
  %tm_year418 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 5
  %179 = load i32, ptr %tm_year418, align 4
  %tm_year419 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 5
  store i32 %179, ptr %tm_year419, align 4
  %tm_isdst420 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 8
  %180 = load i32, ptr %tm_isdst420, align 8
  %tm_isdst421 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  store i32 %180, ptr %tm_isdst421, align 8
  %tm_wday422 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 6
  store i32 -1, ptr %tm_wday422, align 8
  %181 = load ptr, ptr %tz2, align 8
  %call423 = call i64 @mktime_z(ptr noundef %181, ptr noundef %tm)
  store i64 %call423, ptr %Start, align 8
  %call424 = call zeroext i1 @mktime_ok(ptr noundef %tm0, ptr noundef %tm)
  %frombool425 = zext i1 %call424 to i8
  store i8 %frombool425, ptr %repaired, align 1
  %182 = load ptr, ptr %tz2, align 8
  call void @tzfree(ptr noundef %182)
  br label %if.end426

if.end426:                                        ; preds = %if.end407, %if.then385
  %183 = load i8, ptr %repaired, align 1
  %tobool427 = trunc i8 %183 to i1
  br i1 %tobool427, label %if.end430, label %if.then428

if.then428:                                       ; preds = %if.end426
  %184 = load i8, ptr %time_zone_seen, align 1
  %tobool429 = trunc i8 %184 to i1
  call void @debug_mktime_not_ok(ptr noundef %tm0, ptr noundef %tm, ptr noundef %pc, i1 noundef zeroext %tobool429)
  br label %fail

if.end430:                                        ; preds = %if.end426
  br label %if.end431

if.end431:                                        ; preds = %if.end430, %if.end368
  %days_seen432 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 16
  %185 = load i64, ptr %days_seen432, align 8
  %tobool433 = icmp ne i64 %185, 0
  br i1 %tobool433, label %land.lhs.true434, label %if.end484

land.lhs.true434:                                 ; preds = %if.end431
  %dates_seen435 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 15
  %186 = load i64, ptr %dates_seen435, align 8
  %tobool436 = icmp ne i64 %186, 0
  br i1 %tobool436, label %if.end484, label %if.then437

if.then437:                                       ; preds = %land.lhs.true434
  %tm_yday = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 7
  store i32 -1, ptr %tm_yday, align 4
  %day_ordinal438 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 1
  %187 = load i64, ptr %day_ordinal438, align 8
  %day_ordinal439 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 1
  %188 = load i64, ptr %day_ordinal439, align 8
  %cmp440 = icmp slt i64 0, %188
  br i1 %cmp440, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then437
  %tm_wday442 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 6
  %189 = load i32, ptr %tm_wday442, align 8
  %day_number = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 2
  %190 = load i32, ptr %day_number, align 8
  %cmp443 = icmp ne i32 %189, %190
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then437
  %191 = phi i1 [ false, %if.then437 ], [ %cmp443, %land.rhs ]
  %land.ext = zext i1 %191 to i32
  %conv445 = sext i32 %land.ext to i64
  %sub = sub nsw i64 %187, %conv445
  store i64 %sub, ptr %day_ordinal, align 8
  %192 = load i64, ptr %day_ordinal, align 8
  %193 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %192, i64 7)
  %194 = extractvalue { i64, i1 } %193, 1
  %195 = extractvalue { i64, i1 } %193, 0
  store i64 %195, ptr %dayincr, align 8
  br i1 %194, label %if.end460, label %lor.lhs.false447

lor.lhs.false447:                                 ; preds = %land.end
  %day_number448 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 2
  %196 = load i32, ptr %day_number448, align 8
  %tm_wday449 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 6
  %197 = load i32, ptr %tm_wday449, align 8
  %sub450 = sub nsw i32 %196, %197
  %add451 = add nsw i32 %sub450, 7
  %rem = srem i32 %add451, 7
  %198 = load i64, ptr %dayincr, align 8
  %199 = sext i32 %rem to i64
  %200 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %199, i64 %198)
  %201 = extractvalue { i64, i1 } %200, 1
  %202 = extractvalue { i64, i1 } %200, 0
  store i64 %202, ptr %dayincr, align 8
  br i1 %201, label %if.end460, label %lor.lhs.false453

lor.lhs.false453:                                 ; preds = %lor.lhs.false447
  %203 = load i64, ptr %dayincr, align 8
  %tm_mday454 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  %204 = load i32, ptr %tm_mday454, align 4
  %tm_mday455 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  %205 = sext i32 %204 to i64
  %206 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %203, i64 %205)
  %207 = extractvalue { i64, i1 } %206, 1
  %208 = extractvalue { i64, i1 } %206, 0
  %209 = trunc i64 %208 to i32
  %210 = sext i32 %209 to i64
  %211 = icmp ne i64 %208, %210
  %212 = or i1 %207, %211
  store i32 %209, ptr %tm_mday455, align 4
  br i1 %212, label %if.end460, label %if.then457

if.then457:                                       ; preds = %lor.lhs.false453
  %tm_isdst458 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  store i32 -1, ptr %tm_isdst458, align 8
  %213 = load ptr, ptr %tz, align 8
  %call459 = call i64 @mktime_z(ptr noundef %213, ptr noundef %tm)
  store i64 %call459, ptr %Start, align 8
  br label %if.end460

if.end460:                                        ; preds = %if.then457, %lor.lhs.false453, %lor.lhs.false447, %land.end
  %tm_yday461 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 7
  %214 = load i32, ptr %tm_yday461, align 4
  %cmp462 = icmp slt i32 %214, 0
  br i1 %cmp462, label %if.then464, label %if.end475

if.then464:                                       ; preds = %if.end460
  %call465 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call465, label %if.then466, label %if.end474

if.then466:                                       ; preds = %if.then464
  %call467 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.211) #21
  %arraydecay468 = getelementptr inbounds [100 x i8], ptr %dbg_ord, i64 0, i64 0
  %call469 = call ptr @str_days(ptr noundef %pc, ptr noundef %arraydecay468, i32 noundef 100)
  %day_ordinal470 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 1
  %215 = load i64, ptr %day_ordinal470, align 8
  %day_number471 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 2
  %216 = load i32, ptr %day_number471, align 8
  %arraydecay472 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call473 = call ptr @debug_strfdatetime(ptr noundef %tm, ptr noundef %pc, ptr noundef %arraydecay472, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call467, ptr noundef %call469, i64 noundef %215, i32 noundef %216, ptr noundef %call473)
  br label %if.end474

if.end474:                                        ; preds = %if.then466, %if.then464
  br label %fail

if.end475:                                        ; preds = %if.end460
  %call476 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call476, label %if.then477, label %if.end483

if.then477:                                       ; preds = %if.end475
  %call478 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.212) #21
  %arraydecay479 = getelementptr inbounds [100 x i8], ptr %dbg_ord, i64 0, i64 0
  %call480 = call ptr @str_days(ptr noundef %pc, ptr noundef %arraydecay479, i32 noundef 100)
  %arraydecay481 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call482 = call ptr @debug_strfdatetime(ptr noundef %tm, ptr noundef %pc, ptr noundef %arraydecay481, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call478, ptr noundef %call480, ptr noundef %call482)
  br label %if.end483

if.end483:                                        ; preds = %if.then477, %if.end475
  br label %if.end484

if.end484:                                        ; preds = %if.end483, %land.lhs.true434, %if.end431
  %call485 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call485, label %if.then486, label %if.end510

if.then486:                                       ; preds = %if.end484
  %dates_seen487 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 15
  %217 = load i64, ptr %dates_seen487, align 8
  %tobool488 = icmp ne i64 %217, 0
  br i1 %tobool488, label %if.end496, label %land.lhs.true489

land.lhs.true489:                                 ; preds = %if.then486
  %days_seen490 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 16
  %218 = load i64, ptr %days_seen490, align 8
  %tobool491 = icmp ne i64 %218, 0
  br i1 %tobool491, label %if.end496, label %if.then492

if.then492:                                       ; preds = %land.lhs.true489
  %call493 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.213) #21
  %arraydecay494 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call495 = call ptr @debug_strfdate(ptr noundef %tm, ptr noundef %arraydecay494, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call493, ptr noundef %call495)
  br label %if.end496

if.end496:                                        ; preds = %if.then492, %land.lhs.true489, %if.then486
  %days_seen497 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 16
  %219 = load i64, ptr %days_seen497, align 8
  %tobool498 = icmp ne i64 %219, 0
  br i1 %tobool498, label %land.lhs.true499, label %if.end506

land.lhs.true499:                                 ; preds = %if.end496
  %dates_seen500 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 15
  %220 = load i64, ptr %dates_seen500, align 8
  %tobool501 = icmp ne i64 %220, 0
  br i1 %tobool501, label %if.then502, label %if.end506

if.then502:                                       ; preds = %land.lhs.true499
  %call503 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.214.292) #21
  %arraydecay504 = getelementptr inbounds [100 x i8], ptr %dbg_ord, i64 0, i64 0
  %call505 = call ptr @str_days(ptr noundef %pc, ptr noundef %arraydecay504, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call503, ptr noundef %call505)
  br label %if.end506

if.end506:                                        ; preds = %if.then502, %land.lhs.true499, %if.end496
  %call507 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.215) #21
  %arraydecay508 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call509 = call ptr @debug_strfdatetime(ptr noundef %tm, ptr noundef %pc, ptr noundef %arraydecay508, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call507, ptr noundef %call509)
  br label %if.end510

if.end510:                                        ; preds = %if.end506, %if.end484
  %rel511 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %year512 = getelementptr inbounds %struct.relative_time, ptr %rel511, i32 0, i32 0
  %221 = load i64, ptr %year512, align 8
  %rel513 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %month514 = getelementptr inbounds %struct.relative_time, ptr %rel513, i32 0, i32 1
  %222 = load i64, ptr %month514, align 8
  %or515 = or i64 %221, %222
  %rel516 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %day517 = getelementptr inbounds %struct.relative_time, ptr %rel516, i32 0, i32 2
  %223 = load i64, ptr %day517, align 8
  %or518 = or i64 %or515, %223
  %tobool519 = icmp ne i64 %or518, 0
  br i1 %tobool519, label %if.then520, label %if.end653

if.then520:                                       ; preds = %if.end510
  %call521 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call521, label %if.then522, label %if.end550

if.then522:                                       ; preds = %if.then520
  %rel523 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %year524 = getelementptr inbounds %struct.relative_time, ptr %rel523, i32 0, i32 0
  %224 = load i64, ptr %year524, align 8
  %cmp525 = icmp ne i64 %224, 0
  br i1 %cmp525, label %land.lhs.true532, label %lor.lhs.false527

lor.lhs.false527:                                 ; preds = %if.then522
  %rel528 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %month529 = getelementptr inbounds %struct.relative_time, ptr %rel528, i32 0, i32 1
  %225 = load i64, ptr %month529, align 8
  %cmp530 = icmp ne i64 %225, 0
  br i1 %cmp530, label %land.lhs.true532, label %if.end538

land.lhs.true532:                                 ; preds = %lor.lhs.false527, %if.then522
  %tm_mday533 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  %226 = load i32, ptr %tm_mday533, align 4
  %cmp534 = icmp ne i32 %226, 15
  br i1 %cmp534, label %if.then536, label %if.end538

if.then536:                                       ; preds = %land.lhs.true532
  %call537 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.216) #21
  call void @dbg_fputs(ptr noundef %call537)
  br label %if.end538

if.end538:                                        ; preds = %if.then536, %land.lhs.true532, %lor.lhs.false527
  %rel539 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %day540 = getelementptr inbounds %struct.relative_time, ptr %rel539, i32 0, i32 2
  %227 = load i64, ptr %day540, align 8
  %cmp541 = icmp ne i64 %227, 0
  br i1 %cmp541, label %land.lhs.true543, label %if.end549

land.lhs.true543:                                 ; preds = %if.end538
  %tm_hour544 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 2
  %228 = load i32, ptr %tm_hour544, align 8
  %cmp545 = icmp ne i32 %228, 12
  br i1 %cmp545, label %if.then547, label %if.end549

if.then547:                                       ; preds = %land.lhs.true543
  %call548 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.217) #21
  call void @dbg_fputs(ptr noundef %call548)
  br label %if.end549

if.end549:                                        ; preds = %if.then547, %land.lhs.true543, %if.end538
  br label %if.end550

if.end550:                                        ; preds = %if.end549, %if.then520
  %tm_year554 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 5
  %229 = load i32, ptr %tm_year554, align 4
  %rel555 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %year556 = getelementptr inbounds %struct.relative_time, ptr %rel555, i32 0, i32 0
  %230 = load i64, ptr %year556, align 8
  %231 = sext i32 %229 to i64
  %232 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %231, i64 %230)
  %233 = extractvalue { i64, i1 } %232, 1
  %234 = extractvalue { i64, i1 } %232, 0
  %235 = trunc i64 %234 to i32
  %236 = sext i32 %235 to i64
  %237 = icmp ne i64 %234, %236
  %238 = or i1 %233, %237
  store i32 %235, ptr %year551, align 4
  br i1 %238, label %if.then568, label %lor.lhs.false558

lor.lhs.false558:                                 ; preds = %if.end550
  %tm_mon559 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 4
  %239 = load i32, ptr %tm_mon559, align 8
  %rel560 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %month561 = getelementptr inbounds %struct.relative_time, ptr %rel560, i32 0, i32 1
  %240 = load i64, ptr %month561, align 8
  %241 = sext i32 %239 to i64
  %242 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %241, i64 %240)
  %243 = extractvalue { i64, i1 } %242, 1
  %244 = extractvalue { i64, i1 } %242, 0
  %245 = trunc i64 %244 to i32
  %246 = sext i32 %245 to i64
  %247 = icmp ne i64 %244, %246
  %248 = or i1 %243, %247
  store i32 %245, ptr %month552, align 4
  br i1 %248, label %if.then568, label %lor.lhs.false563

lor.lhs.false563:                                 ; preds = %lor.lhs.false558
  %tm_mday564 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  %249 = load i32, ptr %tm_mday564, align 4
  %rel565 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %day566 = getelementptr inbounds %struct.relative_time, ptr %rel565, i32 0, i32 2
  %250 = load i64, ptr %day566, align 8
  %251 = sext i32 %249 to i64
  %252 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %251, i64 %250)
  %253 = extractvalue { i64, i1 } %252, 1
  %254 = extractvalue { i64, i1 } %252, 0
  %255 = trunc i64 %254 to i32
  %256 = sext i32 %255 to i64
  %257 = icmp ne i64 %254, %256
  %258 = or i1 %253, %257
  store i32 %255, ptr %day553, align 4
  br i1 %258, label %if.then568, label %if.end573

if.then568:                                       ; preds = %lor.lhs.false563, %lor.lhs.false558, %if.end550
  %call569 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call569, label %if.then570, label %if.end572

if.then570:                                       ; preds = %if.then568
  %call571 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.218) #21
  call void (ptr, ...) @dbg_printf(ptr noundef %call571, ptr noundef @.str.219, i32 noundef 2158)
  br label %if.end572

if.end572:                                        ; preds = %if.then570, %if.then568
  br label %fail

if.end573:                                        ; preds = %lor.lhs.false563
  %259 = load i32, ptr %year551, align 4
  %tm_year574 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 5
  store i32 %259, ptr %tm_year574, align 4
  %260 = load i32, ptr %month552, align 4
  %tm_mon575 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 4
  store i32 %260, ptr %tm_mon575, align 8
  %261 = load i32, ptr %day553, align 4
  %tm_mday576 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  store i32 %261, ptr %tm_mday576, align 4
  %tm_hour577 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 2
  %262 = load i32, ptr %tm_hour577, align 8
  %tm_hour578 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 2
  store i32 %262, ptr %tm_hour578, align 8
  %tm_min579 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 1
  %263 = load i32, ptr %tm_min579, align 4
  %tm_min580 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 1
  store i32 %263, ptr %tm_min580, align 4
  %tm_sec581 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 0
  %264 = load i32, ptr %tm_sec581, align 8
  %tm_sec582 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 0
  store i32 %264, ptr %tm_sec582, align 8
  %tm_isdst583 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 8
  %265 = load i32, ptr %tm_isdst583, align 8
  %tm_isdst584 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  store i32 %265, ptr %tm_isdst584, align 8
  %tm_wday585 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 6
  store i32 -1, ptr %tm_wday585, align 8
  %266 = load ptr, ptr %tz, align 8
  %call586 = call i64 @mktime_z(ptr noundef %266, ptr noundef %tm)
  store i64 %call586, ptr %Start, align 8
  %tm_wday587 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 6
  %267 = load i32, ptr %tm_wday587, align 8
  %cmp588 = icmp slt i32 %267, 0
  br i1 %cmp588, label %if.then590, label %if.end597

if.then590:                                       ; preds = %if.end573
  %call591 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call591, label %if.then592, label %if.end596

if.then592:                                       ; preds = %if.then590
  %call593 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.220) #21
  %arraydecay594 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call595 = call ptr @debug_strfdatetime(ptr noundef %tm, ptr noundef %pc, ptr noundef %arraydecay594, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call593, ptr noundef %call595)
  br label %if.end596

if.end596:                                        ; preds = %if.then592, %if.then590
  br label %fail

if.end597:                                        ; preds = %if.end573
  %call598 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call598, label %if.then599, label %if.end652

if.then599:                                       ; preds = %if.end597
  %call600 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.221) #21
  %rel601 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %year602 = getelementptr inbounds %struct.relative_time, ptr %rel601, i32 0, i32 0
  %268 = load i64, ptr %year602, align 8
  %rel603 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %month604 = getelementptr inbounds %struct.relative_time, ptr %rel603, i32 0, i32 1
  %269 = load i64, ptr %month604, align 8
  %rel605 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %day606 = getelementptr inbounds %struct.relative_time, ptr %rel605, i32 0, i32 2
  %270 = load i64, ptr %day606, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call600, i64 noundef %268, i64 noundef %269, i64 noundef %270)
  %call607 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.222) #21
  %arraydecay608 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call609 = call ptr @debug_strfdatetime(ptr noundef %tm, ptr noundef %pc, ptr noundef %arraydecay608, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call607, ptr noundef %call609)
  %tm_isdst610 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 8
  %271 = load i32, ptr %tm_isdst610, align 8
  %cmp611 = icmp ne i32 %271, -1
  br i1 %cmp611, label %land.lhs.true613, label %if.end620

land.lhs.true613:                                 ; preds = %if.then599
  %tm_isdst614 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  %272 = load i32, ptr %tm_isdst614, align 8
  %tm_isdst615 = getelementptr inbounds %struct.tm, ptr %tm0, i32 0, i32 8
  %273 = load i32, ptr %tm_isdst615, align 8
  %cmp616 = icmp ne i32 %272, %273
  br i1 %cmp616, label %if.then618, label %if.end620

if.then618:                                       ; preds = %land.lhs.true613
  %call619 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.223) #21
  call void @dbg_fputs(ptr noundef %call619)
  br label %if.end620

if.end620:                                        ; preds = %if.then618, %land.lhs.true613, %if.then599
  %rel621 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %day622 = getelementptr inbounds %struct.relative_time, ptr %rel621, i32 0, i32 2
  %274 = load i64, ptr %day622, align 8
  %cmp623 = icmp eq i64 %274, 0
  br i1 %cmp623, label %land.lhs.true625, label %if.end651

land.lhs.true625:                                 ; preds = %if.end620
  %tm_mday626 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  %275 = load i32, ptr %tm_mday626, align 4
  %276 = load i32, ptr %day553, align 4
  %cmp627 = icmp ne i32 %275, %276
  br i1 %cmp627, label %if.then638, label %lor.lhs.false629

lor.lhs.false629:                                 ; preds = %land.lhs.true625
  %rel630 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %month631 = getelementptr inbounds %struct.relative_time, ptr %rel630, i32 0, i32 1
  %277 = load i64, ptr %month631, align 8
  %cmp632 = icmp eq i64 %277, 0
  br i1 %cmp632, label %land.lhs.true634, label %if.end651

land.lhs.true634:                                 ; preds = %lor.lhs.false629
  %tm_mon635 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 4
  %278 = load i32, ptr %tm_mon635, align 8
  %279 = load i32, ptr %month552, align 4
  %cmp636 = icmp ne i32 %278, %279
  br i1 %cmp636, label %if.then638, label %if.end651

if.then638:                                       ; preds = %land.lhs.true634, %land.lhs.true625
  %call639 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.224) #21
  call void @dbg_fputs(ptr noundef %call639)
  %call640 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.225) #21
  %280 = load i32, ptr %year551, align 4
  %arraydecay641 = getelementptr inbounds [13 x i8], ptr %tm_year_buf, i64 0, i64 0
  %call642 = call ptr @tm_year_str(i32 noundef %280, ptr noundef %arraydecay641)
  %281 = load i32, ptr %month552, align 4
  %add643 = add nsw i32 %281, 1
  %282 = load i32, ptr %day553, align 4
  call void (ptr, ...) @dbg_printf(ptr noundef %call640, ptr noundef %call642, i32 noundef %add643, i32 noundef %282)
  %call644 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.226) #21
  %tm_year645 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 5
  %283 = load i32, ptr %tm_year645, align 4
  %arraydecay646 = getelementptr inbounds [13 x i8], ptr %tm_year_buf, i64 0, i64 0
  %call647 = call ptr @tm_year_str(i32 noundef %283, ptr noundef %arraydecay646)
  %tm_mon648 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 4
  %284 = load i32, ptr %tm_mon648, align 8
  %add649 = add nsw i32 %284, 1
  %tm_mday650 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 3
  %285 = load i32, ptr %tm_mday650, align 4
  call void (ptr, ...) @dbg_printf(ptr noundef %call644, ptr noundef %call647, i32 noundef %add649, i32 noundef %285)
  br label %if.end651

if.end651:                                        ; preds = %if.then638, %land.lhs.true634, %lor.lhs.false629, %if.end620
  br label %if.end652

if.end652:                                        ; preds = %if.end651, %if.end597
  br label %if.end653

if.end653:                                        ; preds = %if.end652, %if.end510
  %zones_seen654 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 21
  %286 = load i64, ptr %zones_seen654, align 8
  %tobool655 = icmp ne i64 %286, 0
  br i1 %tobool655, label %if.then656, label %if.end678

if.then656:                                       ; preds = %if.end653
  store i8 0, ptr %overflow, align 1
  %tm_gmtoff = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 9
  %287 = load i64, ptr %tm_gmtoff, align 8
  store i64 %287, ptr %utcoff, align 8
  %time_zone657 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 4
  %288 = load i32, ptr %time_zone657, align 8
  %289 = load i64, ptr %utcoff, align 8
  %290 = sext i32 %288 to i64
  %291 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %290, i64 %289)
  %292 = extractvalue { i64, i1 } %291, 1
  %293 = extractvalue { i64, i1 } %291, 0
  store i64 %293, ptr %delta, align 8
  %conv658 = zext i1 %292 to i32
  %294 = load i8, ptr %overflow, align 1
  %tobool659 = trunc i8 %294 to i1
  %conv660 = zext i1 %tobool659 to i32
  %or661 = or i32 %conv660, %conv658
  %tobool662 = icmp ne i32 %or661, 0
  %frombool663 = zext i1 %tobool662 to i8
  store i8 %frombool663, ptr %overflow, align 1
  %295 = load i64, ptr %Start, align 8
  %296 = load i64, ptr %delta, align 8
  %297 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %295, i64 %296)
  %298 = extractvalue { i64, i1 } %297, 1
  %299 = extractvalue { i64, i1 } %297, 0
  store i64 %299, ptr %t1, align 8
  %conv664 = zext i1 %298 to i32
  %300 = load i8, ptr %overflow, align 1
  %tobool665 = trunc i8 %300 to i1
  %conv666 = zext i1 %tobool665 to i32
  %or667 = or i32 %conv666, %conv664
  %tobool668 = icmp ne i32 %or667, 0
  %frombool669 = zext i1 %tobool668 to i8
  store i8 %frombool669, ptr %overflow, align 1
  %301 = load i8, ptr %overflow, align 1
  %tobool670 = trunc i8 %301 to i1
  br i1 %tobool670, label %if.then671, label %if.end677

if.then671:                                       ; preds = %if.then656
  %call672 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call672, label %if.then673, label %if.end676

if.then673:                                       ; preds = %if.then671
  %call674 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.227) #21
  %time_zone675 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 4
  %302 = load i32, ptr %time_zone675, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call674, i32 noundef %302)
  br label %if.end676

if.end676:                                        ; preds = %if.then673, %if.then671
  br label %fail

if.end677:                                        ; preds = %if.then656
  %303 = load i64, ptr %t1, align 8
  store i64 %303, ptr %Start, align 8
  br label %if.end678

if.end678:                                        ; preds = %if.end677, %if.end653
  %call679 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call679, label %if.then680, label %if.end684

if.then680:                                       ; preds = %if.end678
  %304 = load i64, ptr %Start, align 8
  store i64 %304, ptr %Starti, align 8
  %call681 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.228) #21
  %arraydecay682 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call683 = call ptr @debug_strfdatetime(ptr noundef %tm, ptr noundef %pc, ptr noundef %arraydecay682, i32 noundef 100)
  %305 = load i64, ptr %Starti, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call681, ptr noundef %call683, i64 noundef %305)
  br label %if.end684

if.end684:                                        ; preds = %if.then680, %if.end678
  %seconds685 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 11
  %tv_nsec686 = getelementptr inbounds %struct.timespec, ptr %seconds685, i32 0, i32 1
  %306 = load i64, ptr %tv_nsec686, align 8
  store i64 %306, ptr %orig_ns, align 8
  %307 = load i64, ptr %orig_ns, align 8
  %rel687 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %ns = getelementptr inbounds %struct.relative_time, ptr %rel687, i32 0, i32 6
  %308 = load i32, ptr %ns, align 8
  %conv688 = sext i32 %308 to i64
  %add689 = add nsw i64 %307, %conv688
  store i64 %add689, ptr %sum_ns, align 8
  %309 = load i64, ptr %sum_ns, align 8
  %rem690 = srem i64 %309, 1000000000
  %add691 = add nsw i64 %rem690, 1000000000
  %rem692 = srem i64 %add691, 1000000000
  %conv693 = trunc i64 %rem692 to i32
  store i32 %conv693, ptr %normalized_ns, align 4
  %310 = load i64, ptr %sum_ns, align 8
  %311 = load i32, ptr %normalized_ns, align 4
  %conv694 = sext i32 %311 to i64
  %sub695 = sub nsw i64 %310, %conv694
  %div = sdiv i64 %sub695, 1000000000
  %conv696 = trunc i64 %div to i32
  store i32 %conv696, ptr %d4, align 4
  %rel698 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %hour699 = getelementptr inbounds %struct.relative_time, ptr %rel698, i32 0, i32 3
  %312 = load i64, ptr %hour699, align 8
  %313 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %312, i64 3600)
  %314 = extractvalue { i64, i1 } %313, 1
  %315 = extractvalue { i64, i1 } %313, 0
  store i64 %315, ptr %d1, align 8
  br i1 %314, label %if.then715, label %lor.lhs.false701

lor.lhs.false701:                                 ; preds = %if.end684
  %316 = load i64, ptr %Start, align 8
  %317 = load i64, ptr %d1, align 8
  %318 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %316, i64 %317)
  %319 = extractvalue { i64, i1 } %318, 1
  %320 = extractvalue { i64, i1 } %318, 0
  store i64 %320, ptr %t1697, align 8
  br i1 %319, label %if.then715, label %lor.lhs.false703

lor.lhs.false703:                                 ; preds = %lor.lhs.false701
  %rel704 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %minutes705 = getelementptr inbounds %struct.relative_time, ptr %rel704, i32 0, i32 4
  %321 = load i64, ptr %minutes705, align 8
  %322 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %321, i64 60)
  %323 = extractvalue { i64, i1 } %322, 1
  %324 = extractvalue { i64, i1 } %322, 0
  store i64 %324, ptr %d2, align 8
  br i1 %323, label %if.then715, label %lor.lhs.false707

lor.lhs.false707:                                 ; preds = %lor.lhs.false703
  %325 = load i64, ptr %t1697, align 8
  %326 = load i64, ptr %d2, align 8
  %327 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %325, i64 %326)
  %328 = extractvalue { i64, i1 } %327, 1
  %329 = extractvalue { i64, i1 } %327, 0
  store i64 %329, ptr %t2, align 8
  br i1 %328, label %if.then715, label %lor.lhs.false709

lor.lhs.false709:                                 ; preds = %lor.lhs.false707
  %330 = load i64, ptr %t2, align 8
  %rel710 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %seconds711 = getelementptr inbounds %struct.relative_time, ptr %rel710, i32 0, i32 5
  %331 = load i64, ptr %seconds711, align 8
  %332 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %330, i64 %331)
  %333 = extractvalue { i64, i1 } %332, 1
  %334 = extractvalue { i64, i1 } %332, 0
  store i64 %334, ptr %t3, align 8
  br i1 %333, label %if.then715, label %lor.lhs.false713

lor.lhs.false713:                                 ; preds = %lor.lhs.false709
  %335 = load i64, ptr %t3, align 8
  %336 = load i32, ptr %d4, align 4
  %337 = sext i32 %336 to i64
  %338 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %335, i64 %337)
  %339 = extractvalue { i64, i1 } %338, 1
  %340 = extractvalue { i64, i1 } %338, 0
  store i64 %340, ptr %t4, align 8
  br i1 %339, label %if.then715, label %if.end720

if.then715:                                       ; preds = %lor.lhs.false713, %lor.lhs.false709, %lor.lhs.false707, %lor.lhs.false703, %lor.lhs.false701, %if.end684
  %call716 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call716, label %if.then717, label %if.end719

if.then717:                                       ; preds = %if.then715
  %call718 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.229) #21
  call void @dbg_fputs(ptr noundef %call718)
  br label %if.end719

if.end719:                                        ; preds = %if.then717, %if.then715
  br label %fail

if.end720:                                        ; preds = %lor.lhs.false713
  %341 = load i64, ptr %t4, align 8
  %342 = load ptr, ptr %result.addr, align 8
  %tv_sec721 = getelementptr inbounds %struct.timespec, ptr %342, i32 0, i32 0
  store i64 %341, ptr %tv_sec721, align 8
  %343 = load i32, ptr %normalized_ns, align 4
  %conv722 = sext i32 %343 to i64
  %344 = load ptr, ptr %result.addr, align 8
  %tv_nsec723 = getelementptr inbounds %struct.timespec, ptr %344, i32 0, i32 1
  store i64 %conv722, ptr %tv_nsec723, align 8
  %call724 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call724, label %land.lhs.true726, label %if.end766

land.lhs.true726:                                 ; preds = %if.end720
  %rel727 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %hour728 = getelementptr inbounds %struct.relative_time, ptr %rel727, i32 0, i32 3
  %345 = load i64, ptr %hour728, align 8
  %rel729 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %minutes730 = getelementptr inbounds %struct.relative_time, ptr %rel729, i32 0, i32 4
  %346 = load i64, ptr %minutes730, align 8
  %or731 = or i64 %345, %346
  %rel732 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %seconds733 = getelementptr inbounds %struct.relative_time, ptr %rel732, i32 0, i32 5
  %347 = load i64, ptr %seconds733, align 8
  %or734 = or i64 %or731, %347
  %rel735 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %ns736 = getelementptr inbounds %struct.relative_time, ptr %rel735, i32 0, i32 6
  %348 = load i32, ptr %ns736, align 8
  %conv737 = sext i32 %348 to i64
  %or738 = or i64 %or734, %conv737
  %tobool739 = icmp ne i64 %or738, 0
  br i1 %tobool739, label %if.then740, label %if.end766

if.then740:                                       ; preds = %land.lhs.true726
  %call741 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.230) #21
  %rel742 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %hour743 = getelementptr inbounds %struct.relative_time, ptr %rel742, i32 0, i32 3
  %349 = load i64, ptr %hour743, align 8
  %rel744 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %minutes745 = getelementptr inbounds %struct.relative_time, ptr %rel744, i32 0, i32 4
  %350 = load i64, ptr %minutes745, align 8
  %rel746 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %seconds747 = getelementptr inbounds %struct.relative_time, ptr %rel746, i32 0, i32 5
  %351 = load i64, ptr %seconds747, align 8
  %rel748 = getelementptr inbounds %struct.parser_control, ptr %pc, i32 0, i32 12
  %ns749 = getelementptr inbounds %struct.relative_time, ptr %rel748, i32 0, i32 6
  %352 = load i32, ptr %ns749, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call741, i64 noundef %349, i64 noundef %350, i64 noundef %351, i32 noundef %352)
  %353 = load i64, ptr %t4, align 8
  store i64 %353, ptr %t4i, align 8
  %call750 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.231) #21
  %354 = load i64, ptr %t4i, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call750, i64 noundef %354)
  %tm_isdst751 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  %355 = load i32, ptr %tm_isdst751, align 8
  %cmp752 = icmp ne i32 %355, -1
  br i1 %cmp752, label %land.lhs.true754, label %if.end765

land.lhs.true754:                                 ; preds = %if.then740
  %356 = load ptr, ptr %tz, align 8
  %357 = load ptr, ptr %result.addr, align 8
  %tv_sec755 = getelementptr inbounds %struct.timespec, ptr %357, i32 0, i32 0
  %call756 = call ptr @localtime_rz(ptr noundef %356, ptr noundef %tv_sec755, ptr noundef %lmt)
  %tobool757 = icmp ne ptr %call756, null
  br i1 %tobool757, label %land.lhs.true758, label %if.end765

land.lhs.true758:                                 ; preds = %land.lhs.true754
  %tm_isdst759 = getelementptr inbounds %struct.tm, ptr %tm, i32 0, i32 8
  %358 = load i32, ptr %tm_isdst759, align 8
  %tm_isdst760 = getelementptr inbounds %struct.tm, ptr %lmt, i32 0, i32 8
  %359 = load i32, ptr %tm_isdst760, align 8
  %cmp761 = icmp ne i32 %358, %359
  br i1 %cmp761, label %if.then763, label %if.end765

if.then763:                                       ; preds = %land.lhs.true758
  %call764 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.232) #21
  call void @dbg_fputs(ptr noundef %call764)
  br label %if.end765

if.end765:                                        ; preds = %if.then763, %land.lhs.true758, %land.lhs.true754, %if.then740
  br label %if.end766

if.end766:                                        ; preds = %if.end765, %land.lhs.true726, %if.end720
  br label %if.end767

if.end767:                                        ; preds = %if.end766, %if.then211
  %call768 = call zeroext i1 @debugging(ptr noundef %pc)
  br i1 %call768, label %if.then769, label %if.end819

if.then769:                                       ; preds = %if.end767
  %360 = load ptr, ptr %tzstring.addr, align 8
  %tobool770 = icmp ne ptr %360, null
  br i1 %tobool770, label %if.else773, label %if.then771

if.then771:                                       ; preds = %if.then769
  %call772 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.233) #21
  call void @dbg_fputs(ptr noundef %call772)
  br label %if.end782

if.else773:                                       ; preds = %if.then769
  %361 = load ptr, ptr %tzstring.addr, align 8
  %call774 = call i32 @strcmp(ptr noundef %361, ptr noundef @.str.192) #23
  %cmp775 = icmp eq i32 %call774, 0
  br i1 %cmp775, label %if.then777, label %if.else779

if.then777:                                       ; preds = %if.else773
  %call778 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.234) #21
  call void @dbg_fputs(ptr noundef %call778)
  br label %if.end781

if.else779:                                       ; preds = %if.else773
  %call780 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.235) #21
  %362 = load ptr, ptr %tzstring.addr, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call780, ptr noundef %362)
  br label %if.end781

if.end781:                                        ; preds = %if.else779, %if.then777
  br label %if.end782

if.end782:                                        ; preds = %if.end781, %if.then771
  %363 = load ptr, ptr %result.addr, align 8
  %tv_sec783 = getelementptr inbounds %struct.timespec, ptr %363, i32 0, i32 0
  %364 = load i64, ptr %tv_sec783, align 8
  store i64 %364, ptr %sec, align 8
  %365 = load ptr, ptr %result.addr, align 8
  %tv_nsec784 = getelementptr inbounds %struct.timespec, ptr %365, i32 0, i32 1
  %366 = load i64, ptr %tv_nsec784, align 8
  %conv785 = trunc i64 %366 to i32
  store i32 %conv785, ptr %nsec, align 4
  %call786 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.236) #21
  %367 = load i64, ptr %sec, align 8
  %368 = load i32, ptr %nsec, align 4
  call void (ptr, ...) @dbg_printf(ptr noundef %call786, i64 noundef %367, i32 noundef %368)
  %369 = load ptr, ptr %result.addr, align 8
  %tv_sec788 = getelementptr inbounds %struct.timespec, ptr %369, i32 0, i32 0
  %call789 = call ptr @gmtime_r(ptr noundef %tv_sec788, ptr noundef %gmt) #21
  %tobool790 = icmp ne ptr %call789, null
  %lnot = xor i1 %tobool790, true
  %lnot791 = xor i1 %lnot, true
  %frombool792 = zext i1 %lnot791 to i8
  store i8 %frombool792, ptr %got_utc, align 1
  %370 = load i8, ptr %got_utc, align 1
  %tobool793 = trunc i8 %370 to i1
  br i1 %tobool793, label %if.then794, label %if.end798

if.then794:                                       ; preds = %if.end782
  %call795 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.237) #21
  %arraydecay796 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call797 = call ptr @debug_strfdatetime(ptr noundef %gmt, ptr noundef null, ptr noundef %arraydecay796, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call795, ptr noundef %call797)
  br label %if.end798

if.end798:                                        ; preds = %if.then794, %if.end782
  %371 = load ptr, ptr %tz, align 8
  %372 = load ptr, ptr %result.addr, align 8
  %tv_sec799 = getelementptr inbounds %struct.timespec, ptr %372, i32 0, i32 0
  %call800 = call ptr @localtime_rz(ptr noundef %371, ptr noundef %tv_sec799, ptr noundef %lmt787)
  %tobool801 = icmp ne ptr %call800, null
  br i1 %tobool801, label %if.then802, label %if.end818

if.then802:                                       ; preds = %if.end798
  store i8 1, ptr %got_utcoff, align 1
  %tm_gmtoff804 = getelementptr inbounds %struct.tm, ptr %lmt787, i32 0, i32 9
  %373 = load i64, ptr %tm_gmtoff804, align 8
  store i64 %373, ptr %utcoff803, align 8
  %374 = load i8, ptr %got_utcoff, align 1
  %tobool805 = trunc i8 %374 to i1
  br i1 %tobool805, label %if.then806, label %if.else813

if.then806:                                       ; preds = %if.then802
  %call807 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.238) #21
  %arraydecay808 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call809 = call ptr @debug_strfdatetime(ptr noundef %lmt787, ptr noundef null, ptr noundef %arraydecay808, i32 noundef 100)
  %375 = load i64, ptr %utcoff803, align 8
  %conv810 = trunc i64 %375 to i32
  %arraydecay811 = getelementptr inbounds [27 x i8], ptr %time_zone_buf, i64 0, i64 0
  %call812 = call ptr @time_zone_str(i32 noundef %conv810, ptr noundef %arraydecay811)
  call void (ptr, ...) @dbg_printf(ptr noundef %call807, ptr noundef %call809, ptr noundef %call812)
  br label %if.end817

if.else813:                                       ; preds = %if.then802
  %call814 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.239) #21
  %arraydecay815 = getelementptr inbounds [100 x i8], ptr %dbg_tm, i64 0, i64 0
  %call816 = call ptr @debug_strfdatetime(ptr noundef %lmt787, ptr noundef null, ptr noundef %arraydecay815, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call814, ptr noundef %call816)
  br label %if.end817

if.end817:                                        ; preds = %if.else813, %if.then806
  br label %if.end818

if.end818:                                        ; preds = %if.end817, %if.end798
  br label %if.end819

if.end819:                                        ; preds = %if.end818, %if.end767
  store i8 1, ptr %ok, align 1
  br label %fail

fail:                                             ; preds = %if.end819, %if.end719, %if.end676, %if.end596, %if.end572, %if.end474, %if.then428, %if.end406, %if.end321, %if.end283, %if.end265, %if.end147, %if.end77, %if.then64, %if.then46, %if.then30
  %376 = load ptr, ptr %tz, align 8
  %377 = load ptr, ptr %tzdefault.addr, align 8
  %cmp820 = icmp ne ptr %376, %377
  br i1 %cmp820, label %if.then822, label %if.end823

if.then822:                                       ; preds = %fail
  %378 = load ptr, ptr %tz, align 8
  call void @tzfree(ptr noundef %378)
  br label %if.end823

if.end823:                                        ; preds = %if.then822, %fail
  %379 = load ptr, ptr %tz1alloc, align 8
  call void @free(ptr noundef %379) #21
  %380 = load i8, ptr %ok, align 1
  %tobool824 = trunc i8 %380 to i1
  ret i1 %tobool824
}

declare void @gettime(ptr noundef) #2

declare ptr @tzalloc(ptr noundef) #2

declare ptr @localtime_rz(ptr noundef, ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dbg_fputs(ptr noundef %msgid) #3 {
entry:
  %msgid.addr = alloca ptr, align 8
  store ptr %msgid, ptr %msgid.addr, align 8
  call void @dbg_herald()
  %0 = load ptr, ptr %msgid.addr, align 8
  %1 = load ptr, ptr @stderr, align 8
  %call = call i32 @fputs(ptr noundef %0, ptr noundef %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @populate_local_time_zone_table(ptr noundef %pc, ptr noundef %tm) #3 {
entry:
  %pc.addr = alloca ptr, align 8
  %tm.addr = alloca ptr, align 8
  %first_entry_exists = alloca i8, align 1
  %e = alloca ptr, align 8
  %zone = alloca ptr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  store ptr %tm, ptr %tm.addr, align 8
  %0 = load ptr, ptr %pc.addr, align 8
  %local_time_zone_table = getelementptr inbounds %struct.parser_control, ptr %0, i32 0, i32 31
  %arrayidx = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table, i64 0, i64 0
  %name = getelementptr inbounds %struct.table, ptr %arrayidx, i32 0, i32 0
  %1 = load ptr, ptr %name, align 8
  %tobool = icmp ne ptr %1, null
  %lnot = xor i1 %tobool, true
  %lnot1 = xor i1 %lnot, true
  %frombool = zext i1 %lnot1 to i8
  store i8 %frombool, ptr %first_entry_exists, align 1
  %2 = load ptr, ptr %pc.addr, align 8
  %local_time_zone_table2 = getelementptr inbounds %struct.parser_control, ptr %2, i32 0, i32 31
  %3 = load i8, ptr %first_entry_exists, align 1
  %tobool3 = trunc i8 %3 to i1
  %idxprom = zext i1 %tobool3 to i64
  %arrayidx4 = getelementptr inbounds [3 x %struct.table], ptr %local_time_zone_table2, i64 0, i64 %idxprom
  store ptr %arrayidx4, ptr %e, align 8
  %4 = load ptr, ptr %e, align 8
  %type = getelementptr inbounds %struct.table, ptr %4, i32 0, i32 1
  store i32 269, ptr %type, align 8
  %5 = load ptr, ptr %tm.addr, align 8
  %tm_isdst = getelementptr inbounds %struct.tm, ptr %5, i32 0, i32 8
  %6 = load i32, ptr %tm_isdst, align 8
  %7 = load ptr, ptr %e, align 8
  %value = getelementptr inbounds %struct.table, ptr %7, i32 0, i32 2
  store i32 %6, ptr %value, align 4
  store ptr null, ptr %zone, align 8
  %8 = load ptr, ptr %tm.addr, align 8
  %tm_zone = getelementptr inbounds %struct.tm, ptr %8, i32 0, i32 10
  %9 = load ptr, ptr %tm_zone, align 8
  %arrayidx5 = getelementptr inbounds i8, ptr %9, i64 0
  %10 = load i8, ptr %arrayidx5, align 1
  %tobool6 = icmp ne i8 %10, 0
  br i1 %tobool6, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load ptr, ptr %tm.addr, align 8
  %tm_zone7 = getelementptr inbounds %struct.tm, ptr %11, i32 0, i32 10
  %12 = load ptr, ptr %tm_zone7, align 8
  store ptr %12, ptr %zone, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load ptr, ptr %zone, align 8
  %14 = load ptr, ptr %e, align 8
  %name8 = getelementptr inbounds %struct.table, ptr %14, i32 0, i32 0
  store ptr %13, ptr %name8, align 8
  %15 = load ptr, ptr %e, align 8
  %arrayidx9 = getelementptr inbounds %struct.table, ptr %15, i64 1
  %name10 = getelementptr inbounds %struct.table, ptr %arrayidx9, i32 0, i32 0
  store ptr null, ptr %name10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @to_tm_year(ptr noundef byval(%struct.textint) align 8 %textyear, i1 noundef zeroext %debug, ptr noundef %tm_year) #3 {
entry:
  %retval = alloca i1, align 1
  %debug.addr = alloca i8, align 1
  %tm_year.addr = alloca ptr, align 8
  %year = alloca i64, align 8
  %frombool = zext i1 %debug to i8
  store i8 %frombool, ptr %debug.addr, align 1
  store ptr %tm_year, ptr %tm_year.addr, align 8
  %value = getelementptr inbounds %struct.textint, ptr %textyear, i32 0, i32 1
  %0 = load i64, ptr %value, align 8
  store i64 %0, ptr %year, align 8
  %1 = load i64, ptr %year, align 8
  %cmp = icmp sle i64 0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %entry
  %digits = getelementptr inbounds %struct.textint, ptr %textyear, i32 0, i32 2
  %2 = load i64, ptr %digits, align 8
  %cmp1 = icmp eq i64 %2, 2
  br i1 %cmp1, label %if.then, label %if.end5

if.then:                                          ; preds = %land.lhs.true
  %3 = load i64, ptr %year, align 8
  %cmp2 = icmp slt i64 %3, 69
  %4 = zext i1 %cmp2 to i64
  %cond = select i1 %cmp2, i32 2000, i32 1900
  %conv = sext i32 %cond to i64
  %5 = load i64, ptr %year, align 8
  %add = add nsw i64 %5, %conv
  store i64 %add, ptr %year, align 8
  %6 = load i8, ptr %debug.addr, align 1
  %tobool = trunc i8 %6 to i1
  br i1 %tobool, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %call = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.240) #21
  %value4 = getelementptr inbounds %struct.textint, ptr %textyear, i32 0, i32 1
  %7 = load i64, ptr %value4, align 8
  %8 = load i64, ptr %year, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call, i64 noundef %7, i64 noundef %8)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end5

if.end5:                                          ; preds = %if.end, %land.lhs.true, %entry
  %9 = load i64, ptr %year, align 8
  %cmp6 = icmp slt i64 %9, 0
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end5
  %10 = load i64, ptr %year, align 8
  %11 = load ptr, ptr %tm_year.addr, align 8
  %12 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 -1900, i64 %10)
  %13 = extractvalue { i64, i1 } %12, 1
  %14 = extractvalue { i64, i1 } %12, 0
  %15 = trunc i64 %14 to i32
  %16 = sext i32 %15 to i64
  %17 = icmp ne i64 %14, %16
  %18 = or i1 %13, %17
  store i32 %15, ptr %11, align 4
  br i1 %18, label %if.then10, label %if.end15

cond.false:                                       ; preds = %if.end5
  %19 = load i64, ptr %year, align 8
  %20 = load ptr, ptr %tm_year.addr, align 8
  %21 = call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %19, i64 1900)
  %22 = extractvalue { i64, i1 } %21, 1
  %23 = extractvalue { i64, i1 } %21, 0
  %24 = trunc i64 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = icmp ne i64 %23, %25
  %27 = or i1 %22, %26
  store i32 %24, ptr %20, align 4
  br i1 %27, label %if.then10, label %if.end15

if.then10:                                        ; preds = %cond.false, %cond.true
  %28 = load i8, ptr %debug.addr, align 1
  %tobool11 = trunc i8 %28 to i1
  br i1 %tobool11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.then10
  %call13 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.241) #21
  %29 = load i64, ptr %year, align 8
  call void (ptr, ...) @dbg_printf(ptr noundef %call13, i64 noundef %29)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.then10
  store i1 false, ptr %retval, align 1
  br label %return

if.end15:                                         ; preds = %cond.false, %cond.true
  store i1 true, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end15, %if.end14
  %30 = load i1, ptr %retval, align 1
  ret i1 %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @to_hour(i64 noundef %hours, i32 noundef %meridian) #3 {
entry:
  %retval = alloca i32, align 4
  %hours.addr = alloca i64, align 8
  %meridian.addr = alloca i32, align 4
  store i64 %hours, ptr %hours.addr, align 8
  store i32 %meridian, ptr %meridian.addr, align 4
  %0 = load i32, ptr %meridian.addr, align 4
  switch i32 %0, label %sw.default [
    i32 2, label %sw.bb
    i32 0, label %sw.bb2
    i32 1, label %sw.bb17
  ]

sw.default:                                       ; preds = %entry
  br label %sw.bb

sw.bb:                                            ; preds = %sw.default, %entry
  %1 = load i64, ptr %hours.addr, align 8
  %cmp = icmp sle i64 0, %1
  br i1 %cmp, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %sw.bb
  %2 = load i64, ptr %hours.addr, align 8
  %cmp1 = icmp slt i64 %2, 24
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %3 = load i64, ptr %hours.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %sw.bb
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ -1, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, ptr %retval, align 4
  br label %return

sw.bb2:                                           ; preds = %entry
  %4 = load i64, ptr %hours.addr, align 8
  %cmp3 = icmp slt i64 0, %4
  br i1 %cmp3, label %land.lhs.true5, label %cond.false9

land.lhs.true5:                                   ; preds = %sw.bb2
  %5 = load i64, ptr %hours.addr, align 8
  %cmp6 = icmp slt i64 %5, 12
  br i1 %cmp6, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %land.lhs.true5
  %6 = load i64, ptr %hours.addr, align 8
  br label %cond.end14

cond.false9:                                      ; preds = %land.lhs.true5, %sw.bb2
  %7 = load i64, ptr %hours.addr, align 8
  %cmp10 = icmp eq i64 %7, 12
  %8 = zext i1 %cmp10 to i64
  %cond12 = select i1 %cmp10, i32 0, i32 -1
  %conv13 = sext i32 %cond12 to i64
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false9, %cond.true8
  %cond15 = phi i64 [ %6, %cond.true8 ], [ %conv13, %cond.false9 ]
  %conv16 = trunc i64 %cond15 to i32
  store i32 %conv16, ptr %retval, align 4
  br label %return

sw.bb17:                                          ; preds = %entry
  %9 = load i64, ptr %hours.addr, align 8
  %cmp18 = icmp slt i64 0, %9
  br i1 %cmp18, label %land.lhs.true20, label %cond.false24

land.lhs.true20:                                  ; preds = %sw.bb17
  %10 = load i64, ptr %hours.addr, align 8
  %cmp21 = icmp slt i64 %10, 12
  br i1 %cmp21, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %land.lhs.true20
  %11 = load i64, ptr %hours.addr, align 8
  %add = add nsw i64 %11, 12
  br label %cond.end29

cond.false24:                                     ; preds = %land.lhs.true20, %sw.bb17
  %12 = load i64, ptr %hours.addr, align 8
  %cmp25 = icmp eq i64 %12, 12
  %13 = zext i1 %cmp25 to i64
  %cond27 = select i1 %cmp25, i32 12, i32 -1
  %conv28 = sext i32 %cond27 to i64
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false24, %cond.true23
  %cond30 = phi i64 [ %add, %cond.true23 ], [ %conv28, %cond.false24 ]
  %conv31 = trunc i64 %cond30 to i32
  store i32 %conv31, ptr %retval, align 4
  br label %return

return:                                           ; preds = %cond.end29, %cond.end14, %cond.end
  %14 = load i32, ptr %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @debug_strftime(ptr noundef %tm, ptr noundef %buf, i32 noundef %n) #3 {
entry:
  %tm.addr = alloca ptr, align 8
  %buf.addr = alloca ptr, align 8
  %n.addr = alloca i32, align 4
  store ptr %tm, ptr %tm.addr, align 8
  store ptr %buf, ptr %buf.addr, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load ptr, ptr %buf.addr, align 8
  %1 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %1 to i64
  %2 = load ptr, ptr %tm.addr, align 8
  %tm_hour = getelementptr inbounds %struct.tm, ptr %2, i32 0, i32 2
  %3 = load i32, ptr %tm_hour, align 8
  %4 = load ptr, ptr %tm.addr, align 8
  %tm_min = getelementptr inbounds %struct.tm, ptr %4, i32 0, i32 1
  %5 = load i32, ptr %tm_min, align 4
  %6 = load ptr, ptr %tm.addr, align 8
  %tm_sec = getelementptr inbounds %struct.tm, ptr %6, i32 0, i32 0
  %7 = load i32, ptr %tm_sec, align 8
  %call = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %0, i64 noundef %conv, ptr noundef @.str.242, i32 noundef %3, i32 noundef %5, i32 noundef %7) #21
  %8 = load ptr, ptr %buf.addr, align 8
  ret ptr %8
}

declare i64 @mktime_z(ptr noundef, ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @mktime_ok(ptr noundef %tm0, ptr noundef %tm1) #3 {
entry:
  %retval = alloca i1, align 1
  %tm0.addr = alloca ptr, align 8
  %tm1.addr = alloca ptr, align 8
  store ptr %tm0, ptr %tm0.addr, align 8
  store ptr %tm1, ptr %tm1.addr, align 8
  %0 = load ptr, ptr %tm1.addr, align 8
  %tm_wday = getelementptr inbounds %struct.tm, ptr %0, i32 0, i32 6
  %1 = load i32, ptr %tm_wday, align 8
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %2 = load ptr, ptr %tm0.addr, align 8
  %tm_sec = getelementptr inbounds %struct.tm, ptr %2, i32 0, i32 0
  %3 = load i32, ptr %tm_sec, align 8
  %4 = load ptr, ptr %tm1.addr, align 8
  %tm_sec1 = getelementptr inbounds %struct.tm, ptr %4, i32 0, i32 0
  %5 = load i32, ptr %tm_sec1, align 8
  %xor = xor i32 %3, %5
  %6 = load ptr, ptr %tm0.addr, align 8
  %tm_min = getelementptr inbounds %struct.tm, ptr %6, i32 0, i32 1
  %7 = load i32, ptr %tm_min, align 4
  %8 = load ptr, ptr %tm1.addr, align 8
  %tm_min2 = getelementptr inbounds %struct.tm, ptr %8, i32 0, i32 1
  %9 = load i32, ptr %tm_min2, align 4
  %xor3 = xor i32 %7, %9
  %or = or i32 %xor, %xor3
  %10 = load ptr, ptr %tm0.addr, align 8
  %tm_hour = getelementptr inbounds %struct.tm, ptr %10, i32 0, i32 2
  %11 = load i32, ptr %tm_hour, align 8
  %12 = load ptr, ptr %tm1.addr, align 8
  %tm_hour4 = getelementptr inbounds %struct.tm, ptr %12, i32 0, i32 2
  %13 = load i32, ptr %tm_hour4, align 8
  %xor5 = xor i32 %11, %13
  %or6 = or i32 %or, %xor5
  %14 = load ptr, ptr %tm0.addr, align 8
  %tm_mday = getelementptr inbounds %struct.tm, ptr %14, i32 0, i32 3
  %15 = load i32, ptr %tm_mday, align 4
  %16 = load ptr, ptr %tm1.addr, align 8
  %tm_mday7 = getelementptr inbounds %struct.tm, ptr %16, i32 0, i32 3
  %17 = load i32, ptr %tm_mday7, align 4
  %xor8 = xor i32 %15, %17
  %or9 = or i32 %or6, %xor8
  %18 = load ptr, ptr %tm0.addr, align 8
  %tm_mon = getelementptr inbounds %struct.tm, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %tm_mon, align 8
  %20 = load ptr, ptr %tm1.addr, align 8
  %tm_mon10 = getelementptr inbounds %struct.tm, ptr %20, i32 0, i32 4
  %21 = load i32, ptr %tm_mon10, align 8
  %xor11 = xor i32 %19, %21
  %or12 = or i32 %or9, %xor11
  %22 = load ptr, ptr %tm0.addr, align 8
  %tm_year = getelementptr inbounds %struct.tm, ptr %22, i32 0, i32 5
  %23 = load i32, ptr %tm_year, align 4
  %24 = load ptr, ptr %tm1.addr, align 8
  %tm_year13 = getelementptr inbounds %struct.tm, ptr %24, i32 0, i32 5
  %25 = load i32, ptr %tm_year13, align 4
  %xor14 = xor i32 %23, %25
  %or15 = or i32 %or12, %xor14
  %tobool = icmp ne i32 %or15, 0
  %lnot = xor i1 %tobool, true
  store i1 %lnot, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %26 = load i1, ptr %retval, align 1
  ret i1 %26
}

declare void @tzfree(ptr noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @debug_mktime_not_ok(ptr noundef %tm0, ptr noundef %tm1, ptr noundef %pc, i1 noundef zeroext %time_zone_seen) #3 {
entry:
  %tm0.addr = alloca ptr, align 8
  %tm1.addr = alloca ptr, align 8
  %pc.addr = alloca ptr, align 8
  %time_zone_seen.addr = alloca i8, align 1
  %tmp = alloca [100 x i8], align 16
  %i = alloca i32, align 4
  %eq_sec = alloca i8, align 1
  %eq_min = alloca i8, align 1
  %eq_hour = alloca i8, align 1
  %eq_mday = alloca i8, align 1
  %eq_month = alloca i8, align 1
  %eq_year = alloca i8, align 1
  %dst_shift = alloca i8, align 1
  store ptr %tm0, ptr %tm0.addr, align 8
  store ptr %tm1, ptr %tm1.addr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  %frombool = zext i1 %time_zone_seen to i8
  store i8 %frombool, ptr %time_zone_seen.addr, align 1
  %0 = load ptr, ptr %tm0.addr, align 8
  %tm_sec = getelementptr inbounds %struct.tm, ptr %0, i32 0, i32 0
  %1 = load i32, ptr %tm_sec, align 8
  %2 = load ptr, ptr %tm1.addr, align 8
  %tm_sec1 = getelementptr inbounds %struct.tm, ptr %2, i32 0, i32 0
  %3 = load i32, ptr %tm_sec1, align 8
  %cmp = icmp eq i32 %1, %3
  %frombool2 = zext i1 %cmp to i8
  store i8 %frombool2, ptr %eq_sec, align 1
  %4 = load ptr, ptr %tm0.addr, align 8
  %tm_min = getelementptr inbounds %struct.tm, ptr %4, i32 0, i32 1
  %5 = load i32, ptr %tm_min, align 4
  %6 = load ptr, ptr %tm1.addr, align 8
  %tm_min3 = getelementptr inbounds %struct.tm, ptr %6, i32 0, i32 1
  %7 = load i32, ptr %tm_min3, align 4
  %cmp4 = icmp eq i32 %5, %7
  %frombool5 = zext i1 %cmp4 to i8
  store i8 %frombool5, ptr %eq_min, align 1
  %8 = load ptr, ptr %tm0.addr, align 8
  %tm_hour = getelementptr inbounds %struct.tm, ptr %8, i32 0, i32 2
  %9 = load i32, ptr %tm_hour, align 8
  %10 = load ptr, ptr %tm1.addr, align 8
  %tm_hour6 = getelementptr inbounds %struct.tm, ptr %10, i32 0, i32 2
  %11 = load i32, ptr %tm_hour6, align 8
  %cmp7 = icmp eq i32 %9, %11
  %frombool8 = zext i1 %cmp7 to i8
  store i8 %frombool8, ptr %eq_hour, align 1
  %12 = load ptr, ptr %tm0.addr, align 8
  %tm_mday = getelementptr inbounds %struct.tm, ptr %12, i32 0, i32 3
  %13 = load i32, ptr %tm_mday, align 4
  %14 = load ptr, ptr %tm1.addr, align 8
  %tm_mday9 = getelementptr inbounds %struct.tm, ptr %14, i32 0, i32 3
  %15 = load i32, ptr %tm_mday9, align 4
  %cmp10 = icmp eq i32 %13, %15
  %frombool11 = zext i1 %cmp10 to i8
  store i8 %frombool11, ptr %eq_mday, align 1
  %16 = load ptr, ptr %tm0.addr, align 8
  %tm_mon = getelementptr inbounds %struct.tm, ptr %16, i32 0, i32 4
  %17 = load i32, ptr %tm_mon, align 8
  %18 = load ptr, ptr %tm1.addr, align 8
  %tm_mon12 = getelementptr inbounds %struct.tm, ptr %18, i32 0, i32 4
  %19 = load i32, ptr %tm_mon12, align 8
  %cmp13 = icmp eq i32 %17, %19
  %frombool14 = zext i1 %cmp13 to i8
  store i8 %frombool14, ptr %eq_month, align 1
  %20 = load ptr, ptr %tm0.addr, align 8
  %tm_year = getelementptr inbounds %struct.tm, ptr %20, i32 0, i32 5
  %21 = load i32, ptr %tm_year, align 4
  %22 = load ptr, ptr %tm1.addr, align 8
  %tm_year15 = getelementptr inbounds %struct.tm, ptr %22, i32 0, i32 5
  %23 = load i32, ptr %tm_year15, align 4
  %cmp16 = icmp eq i32 %21, %23
  %frombool17 = zext i1 %cmp16 to i8
  store i8 %frombool17, ptr %eq_year, align 1
  %24 = load i8, ptr %eq_sec, align 1
  %tobool = trunc i8 %24 to i1
  br i1 %tobool, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %25 = load i8, ptr %eq_min, align 1
  %tobool18 = trunc i8 %25 to i1
  br i1 %tobool18, label %land.lhs.true19, label %land.end

land.lhs.true19:                                  ; preds = %land.lhs.true
  %26 = load i8, ptr %eq_hour, align 1
  %tobool20 = trunc i8 %26 to i1
  br i1 %tobool20, label %land.end, label %land.lhs.true21

land.lhs.true21:                                  ; preds = %land.lhs.true19
  %27 = load i8, ptr %eq_mday, align 1
  %tobool22 = trunc i8 %27 to i1
  br i1 %tobool22, label %land.lhs.true23, label %land.end

land.lhs.true23:                                  ; preds = %land.lhs.true21
  %28 = load i8, ptr %eq_month, align 1
  %tobool24 = trunc i8 %28 to i1
  br i1 %tobool24, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true23
  %29 = load i8, ptr %eq_year, align 1
  %tobool25 = trunc i8 %29 to i1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true23, %land.lhs.true21, %land.lhs.true19, %land.lhs.true, %entry
  %30 = phi i1 [ false, %land.lhs.true23 ], [ false, %land.lhs.true21 ], [ false, %land.lhs.true19 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool25, %land.rhs ]
  %frombool26 = zext i1 %30 to i8
  store i8 %frombool26, ptr %dst_shift, align 1
  %31 = load ptr, ptr %pc.addr, align 8
  %call = call zeroext i1 @debugging(ptr noundef %31)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %land.end
  br label %return

if.end:                                           ; preds = %land.end
  %call27 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.243) #21
  call void @dbg_fputs(ptr noundef %call27)
  %call28 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.244) #21
  %32 = load ptr, ptr %tm0.addr, align 8
  %33 = load ptr, ptr %pc.addr, align 8
  %arraydecay = getelementptr inbounds [100 x i8], ptr %tmp, i64 0, i64 0
  %call29 = call ptr @debug_strfdatetime(ptr noundef %32, ptr noundef %33, ptr noundef %arraydecay, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call28, ptr noundef %call29)
  %call30 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.245) #21
  %34 = load ptr, ptr %tm1.addr, align 8
  %35 = load ptr, ptr %pc.addr, align 8
  %arraydecay31 = getelementptr inbounds [100 x i8], ptr %tmp, i64 0, i64 0
  %call32 = call ptr @debug_strfdatetime(ptr noundef %34, ptr noundef %35, ptr noundef %arraydecay31, i32 noundef 100)
  call void (ptr, ...) @dbg_printf(ptr noundef %call30, ptr noundef %call32)
  %arraydecay33 = getelementptr inbounds [100 x i8], ptr %tmp, i64 0, i64 0
  %36 = load i8, ptr %eq_year, align 1
  %tobool34 = trunc i8 %36 to i1
  %37 = zext i1 %tobool34 to i64
  %cond = select i1 %tobool34, ptr @.str.30.254, ptr @.str.247
  %38 = load i8, ptr %eq_month, align 1
  %tobool35 = trunc i8 %38 to i1
  %39 = zext i1 %tobool35 to i64
  %cond36 = select i1 %tobool35, ptr @.str.30.254, ptr @.str.248
  %40 = load i8, ptr %eq_mday, align 1
  %tobool37 = trunc i8 %40 to i1
  %41 = zext i1 %tobool37 to i64
  %cond38 = select i1 %tobool37, ptr @.str.30.254, ptr @.str.248
  %42 = load i8, ptr %eq_hour, align 1
  %tobool39 = trunc i8 %42 to i1
  %43 = zext i1 %tobool39 to i64
  %cond40 = select i1 %tobool39, ptr @.str.30.254, ptr @.str.248
  %44 = load i8, ptr %eq_min, align 1
  %tobool41 = trunc i8 %44 to i1
  %45 = zext i1 %tobool41 to i64
  %cond42 = select i1 %tobool41, ptr @.str.30.254, ptr @.str.248
  %46 = load i8, ptr %eq_sec, align 1
  %tobool43 = trunc i8 %46 to i1
  %47 = zext i1 %tobool43 to i64
  %cond44 = select i1 %tobool43, ptr @.str.30.254, ptr @.str.248
  %call45 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %arraydecay33, i64 noundef 100, ptr noundef @.str.246, ptr noundef %cond, ptr noundef %cond36, ptr noundef %cond38, ptr noundef %cond40, ptr noundef %cond42, ptr noundef %cond44) #21
  store i32 %call45, ptr %i, align 4
  %48 = load i32, ptr %i, align 4
  %cmp46 = icmp sle i32 0, %48
  br i1 %cmp46, label %if.then47, label %if.end61

if.then47:                                        ; preds = %if.end
  %49 = load i32, ptr %i, align 4
  %conv = sext i32 %49 to i64
  %cmp48 = icmp ult i64 99, %conv
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.then47
  store i32 99, ptr %i, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %if.then47
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end51
  %50 = load i32, ptr %i, align 4
  %cmp52 = icmp slt i32 0, %50
  br i1 %cmp52, label %land.rhs54, label %land.end58

land.rhs54:                                       ; preds = %while.cond
  %51 = load i32, ptr %i, align 4
  %sub = sub nsw i32 %51, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [100 x i8], ptr %tmp, i64 0, i64 %idxprom
  %52 = load i8, ptr %arrayidx, align 1
  %conv55 = sext i8 %52 to i32
  %cmp56 = icmp eq i32 %conv55, 32
  br label %land.end58

land.end58:                                       ; preds = %land.rhs54, %while.cond
  %53 = phi i1 [ false, %while.cond ], [ %cmp56, %land.rhs54 ]
  br i1 %53, label %while.body, label %while.end

while.body:                                       ; preds = %land.end58
  %54 = load i32, ptr %i, align 4
  %dec = add nsw i32 %54, -1
  store i32 %dec, ptr %i, align 4
  br label %while.cond, !llvm.loop !87

while.end:                                        ; preds = %land.end58
  %55 = load i32, ptr %i, align 4
  %idxprom59 = sext i32 %55 to i64
  %arrayidx60 = getelementptr inbounds [100 x i8], ptr %tmp, i64 0, i64 %idxprom59
  store i8 0, ptr %arrayidx60, align 1
  br label %if.end61

if.end61:                                         ; preds = %while.end, %if.end
  %arraydecay62 = getelementptr inbounds [100 x i8], ptr %tmp, i64 0, i64 0
  call void (ptr, ...) @dbg_printf(ptr noundef @.str.249, ptr noundef %arraydecay62)
  %call63 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.250) #21
  call void @dbg_fputs(ptr noundef %call63)
  %56 = load i8, ptr %dst_shift, align 1
  %tobool64 = trunc i8 %56 to i1
  br i1 %tobool64, label %if.then65, label %if.end67

if.then65:                                        ; preds = %if.end61
  %call66 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.251) #21
  call void @dbg_fputs(ptr noundef %call66)
  br label %if.end67

if.end67:                                         ; preds = %if.then65, %if.end61
  %57 = load i8, ptr %eq_mday, align 1
  %tobool68 = trunc i8 %57 to i1
  br i1 %tobool68, label %if.end73, label %land.lhs.true69

land.lhs.true69:                                  ; preds = %if.end67
  %58 = load i8, ptr %eq_month, align 1
  %tobool70 = trunc i8 %58 to i1
  br i1 %tobool70, label %if.end73, label %if.then71

if.then71:                                        ; preds = %land.lhs.true69
  %call72 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.252) #21
  call void @dbg_fputs(ptr noundef %call72)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %land.lhs.true69, %if.end67
  %call74 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.253) #21
  call void @dbg_fputs(ptr noundef %call74)
  %59 = load i8, ptr %time_zone_seen.addr, align 1
  %tobool75 = trunc i8 %59 to i1
  br i1 %tobool75, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end73
  %call77 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.255) #21
  br label %cond.end

cond.false:                                       ; preds = %if.end73
  %call78 = call ptr @dgettext(ptr noundef @.str.214, ptr noundef @.str.256) #21
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond79 = phi ptr [ %call77, %cond.true ], [ %call78, %cond.false ]
  call void (ptr, ...) @dbg_printf(ptr noundef @.str.254, ptr noundef %cond79)
  br label %return

return:                                           ; preds = %cond.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @debug_strfdatetime(ptr noundef %tm, ptr noundef %pc, ptr noundef %buf, i32 noundef %n) #3 {
entry:
  %tm.addr = alloca ptr, align 8
  %pc.addr = alloca ptr, align 8
  %buf.addr = alloca ptr, align 8
  %n.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %tz = alloca i32, align 4
  %time_zone_buf = alloca [27 x i8], align 16
  store ptr %tm, ptr %tm.addr, align 8
  store ptr %pc, ptr %pc.addr, align 8
  store ptr %buf, ptr %buf.addr, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load ptr, ptr %buf.addr, align 8
  %1 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %1 to i64
  %2 = load ptr, ptr %tm.addr, align 8
  %call = call i64 @strftime(ptr noundef %0, i64 noundef %conv, ptr noundef @.str.257, ptr noundef %2) #21
  %conv1 = trunc i64 %call to i32
  store i32 %conv1, ptr %m, align 4
  %3 = load ptr, ptr %pc.addr, align 8
  %tobool = icmp ne ptr %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, ptr %m, align 4
  %5 = load i32, ptr %n.addr, align 4
  %cmp = icmp slt i32 %4, %5
  br i1 %cmp, label %land.lhs.true3, label %if.end16

land.lhs.true3:                                   ; preds = %land.lhs.true
  %6 = load ptr, ptr %pc.addr, align 8
  %zones_seen = getelementptr inbounds %struct.parser_control, ptr %6, i32 0, i32 21
  %7 = load i64, ptr %zones_seen, align 8
  %tobool4 = icmp ne i64 %7, 0
  br i1 %tobool4, label %if.then, label %if.end16

if.then:                                          ; preds = %land.lhs.true3
  %8 = load ptr, ptr %pc.addr, align 8
  %time_zone = getelementptr inbounds %struct.parser_control, ptr %8, i32 0, i32 4
  %9 = load i32, ptr %time_zone, align 8
  store i32 %9, ptr %tz, align 4
  %10 = load ptr, ptr %pc.addr, align 8
  %local_zones_seen = getelementptr inbounds %struct.parser_control, ptr %10, i32 0, i32 18
  %11 = load i64, ptr %local_zones_seen, align 8
  %tobool5 = icmp ne i64 %11, 0
  br i1 %tobool5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %12 = load ptr, ptr %pc.addr, align 8
  %zones_seen7 = getelementptr inbounds %struct.parser_control, ptr %12, i32 0, i32 21
  %13 = load i64, ptr %zones_seen7, align 8
  %tobool8 = icmp ne i64 %13, 0
  br i1 %tobool8, label %if.end, label %land.lhs.true9

land.lhs.true9:                                   ; preds = %land.lhs.true6
  %14 = load ptr, ptr %pc.addr, align 8
  %local_isdst = getelementptr inbounds %struct.parser_control, ptr %14, i32 0, i32 3
  %15 = load i32, ptr %local_isdst, align 4
  %cmp10 = icmp slt i32 0, %15
  br i1 %cmp10, label %if.then12, label %if.end

if.then12:                                        ; preds = %land.lhs.true9
  %16 = load i32, ptr %tz, align 4
  %add = add nsw i32 %16, 3600
  store i32 %add, ptr %tz, align 4
  br label %if.end

if.end:                                           ; preds = %if.then12, %land.lhs.true9, %land.lhs.true6, %if.then
  %17 = load ptr, ptr %buf.addr, align 8
  %18 = load i32, ptr %m, align 4
  %idxprom = sext i32 %18 to i64
  %arrayidx = getelementptr inbounds i8, ptr %17, i64 %idxprom
  %19 = load i32, ptr %n.addr, align 4
  %20 = load i32, ptr %m, align 4
  %sub = sub nsw i32 %19, %20
  %conv13 = sext i32 %sub to i64
  %21 = load i32, ptr %tz, align 4
  %arraydecay = getelementptr inbounds [27 x i8], ptr %time_zone_buf, i64 0, i64 0
  %call14 = call ptr @time_zone_str(i32 noundef %21, ptr noundef %arraydecay)
  %call15 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %arrayidx, i64 noundef %conv13, ptr noundef @.str.258, ptr noundef %call14) #21
  br label %if.end16

if.end16:                                         ; preds = %if.end, %land.lhs.true3, %land.lhs.true, %entry
  %22 = load ptr, ptr %buf.addr, align 8
  ret ptr %22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @debug_strfdate(ptr noundef %tm, ptr noundef %buf, i32 noundef %n) #3 {
entry:
  %tm.addr = alloca ptr, align 8
  %buf.addr = alloca ptr, align 8
  %n.addr = alloca i32, align 4
  %tm_year_buf = alloca [13 x i8], align 1
  store ptr %tm, ptr %tm.addr, align 8
  store ptr %buf, ptr %buf.addr, align 8
  store i32 %n, ptr %n.addr, align 4
  %0 = load ptr, ptr %buf.addr, align 8
  %1 = load i32, ptr %n.addr, align 4
  %conv = sext i32 %1 to i64
  %2 = load ptr, ptr %tm.addr, align 8
  %tm_year = getelementptr inbounds %struct.tm, ptr %2, i32 0, i32 5
  %3 = load i32, ptr %tm_year, align 4
  %arraydecay = getelementptr inbounds [13 x i8], ptr %tm_year_buf, i64 0, i64 0
  %call = call ptr @tm_year_str(i32 noundef %3, ptr noundef %arraydecay)
  %4 = load ptr, ptr %tm.addr, align 8
  %tm_mon = getelementptr inbounds %struct.tm, ptr %4, i32 0, i32 4
  %5 = load i32, ptr %tm_mon, align 8
  %add = add nsw i32 %5, 1
  %6 = load ptr, ptr %tm.addr, align 8
  %tm_mday = getelementptr inbounds %struct.tm, ptr %6, i32 0, i32 3
  %7 = load i32, ptr %tm_mday, align 4
  %call1 = call i32 (ptr, i64, ptr, ...) @snprintf(ptr noundef %0, i64 noundef %conv, ptr noundef @.str.259, ptr noundef %call, i32 noundef %add, i32 noundef %7) #21
  %8 = load ptr, ptr %buf.addr, align 8
  ret ptr %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @tm_year_str(i32 noundef %tm_year, ptr noundef %buf) #3 {
entry:
  %tm_year.addr = alloca i32, align 4
  %buf.addr = alloca ptr, align 8
  store i32 %tm_year, ptr %tm_year.addr, align 4
  store ptr %buf, ptr %buf.addr, align 8
  %0 = load ptr, ptr %buf.addr, align 8
  %1 = load i32, ptr %tm_year.addr, align 4
  %cmp = icmp sle i32 -1900, %1
  %conv = zext i1 %cmp to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [10 x i8], ptr @.str.260, i64 0, i64 %idxprom
  %2 = load i32, ptr %tm_year.addr, align 4
  %div = sdiv i32 %2, 100
  %add = add nsw i32 %div, 19
  %3 = call i32 @llvm.abs.i32(i32 %add, i1 true)
  %4 = load i32, ptr %tm_year.addr, align 4
  %rem = srem i32 %4, 100
  %5 = call i32 @llvm.abs.i32(i32 %rem, i1 true)
  %call = call i32 (ptr, ptr, ...) @sprintf(ptr noundef %0, ptr noundef %arrayidx, i32 noundef %3, i32 noundef %5) #21
  %6 = load ptr, ptr %buf.addr, align 8
  ret ptr %6
}

; Function Attrs: nounwind
declare ptr @gmtime_r(ptr noundef, ptr noundef) #1

; Function Attrs: nounwind
declare i64 @strftime(ptr noundef, i64 noundef, ptr noundef, ptr noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i1 @parse_datetime(ptr noundef %result, ptr noundef %p, ptr noundef %now) #3 {
entry:
  %retval = alloca i1, align 1
  %result.addr = alloca ptr, align 8
  %p.addr = alloca ptr, align 8
  %now.addr = alloca ptr, align 8
  %tzstring = alloca ptr, align 8
  %tz = alloca ptr, align 8
  %ok = alloca i8, align 1
  store ptr %result, ptr %result.addr, align 8
  store ptr %p, ptr %p.addr, align 8
  store ptr %now, ptr %now.addr, align 8
  %call = call ptr @getenv(ptr noundef @.str.20.293) #21
  store ptr %call, ptr %tzstring, align 8
  %0 = load ptr, ptr %tzstring, align 8
  %call1 = call ptr @tzalloc(ptr noundef %0)
  store ptr %call1, ptr %tz, align 8
  %1 = load ptr, ptr %tz, align 8
  %tobool = icmp ne ptr %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, ptr %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %2 = load ptr, ptr %result.addr, align 8
  %3 = load ptr, ptr %p.addr, align 8
  %4 = load ptr, ptr %now.addr, align 8
  %5 = load ptr, ptr %tz, align 8
  %6 = load ptr, ptr %tzstring, align 8
  %call2 = call zeroext i1 @parse_datetime_body(ptr noundef %2, ptr noundef %3, ptr noundef %4, i32 noundef 0, ptr noundef %5, ptr noundef %6)
  %frombool = zext i1 %call2 to i8
  store i8 %frombool, ptr %ok, align 1
  %7 = load ptr, ptr %tz, align 8
  call void @tzfree(ptr noundef %7)
  %8 = load i8, ptr %ok, align 1
  %tobool3 = trunc i8 %8 to i1
  store i1 %tobool3, ptr %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i1, ptr %retval, align 1
  ret i1 %9
}

; Function Attrs: nounwind
declare ptr @getenv(ptr noundef) #1

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @print_and_abort() #0 {
entry:
  %0 = load ptr, ptr @stderr, align 8
  %call = call ptr @dgettext(ptr noundef @.str.1.294, ptr noundef @.str.2.295) #21
  %call1 = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %0, ptr noundef @.str.296, ptr noundef %call)
  %1 = load volatile i32, ptr @exit_failure, align 4
  call void @exit(i32 noundef %1) #22
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_obstack_begin(ptr noundef %h, i64 noundef %size, i64 noundef %alignment, ptr noundef %chunkfun, ptr noundef %freefun) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca ptr, align 8
  %freefun.addr = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 %size, ptr %size.addr, align 8
  store i64 %alignment, ptr %alignment.addr, align 8
  store ptr %chunkfun, ptr %chunkfun.addr, align 8
  store ptr %freefun, ptr %freefun.addr, align 8
  %0 = load ptr, ptr %chunkfun.addr, align 8
  %1 = load ptr, ptr %h.addr, align 8
  %chunkfun1 = getelementptr inbounds %struct.obstack, ptr %1, i32 0, i32 7
  store ptr %0, ptr %chunkfun1, align 8
  %2 = load ptr, ptr %freefun.addr, align 8
  %3 = load ptr, ptr %h.addr, align 8
  %freefun2 = getelementptr inbounds %struct.obstack, ptr %3, i32 0, i32 8
  store ptr %2, ptr %freefun2, align 8
  %4 = load ptr, ptr %h.addr, align 8
  %use_extra_arg = getelementptr inbounds %struct.obstack, ptr %4, i32 0, i32 10
  %bf.load = load i8, ptr %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 0
  store i8 %bf.set, ptr %use_extra_arg, align 8
  %5 = load ptr, ptr %h.addr, align 8
  %6 = load i64, ptr %size.addr, align 8
  %7 = load i64, ptr %alignment.addr, align 8
  %call = call i32 @_obstack_begin_worker(ptr noundef %5, i64 noundef %6, i64 noundef %7)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @_obstack_begin_worker(ptr noundef %h, i64 noundef %size, i64 noundef %alignment) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunk = alloca ptr, align 8
  %extra = alloca i32, align 4
  store ptr %h, ptr %h.addr, align 8
  store i64 %size, ptr %size.addr, align 8
  store i64 %alignment, ptr %alignment.addr, align 8
  %0 = load i64, ptr %alignment.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 16, ptr %alignment.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, ptr %size.addr, align 8
  %cmp1 = icmp eq i64 %1, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 32, ptr %extra, align 4
  %2 = load i32, ptr %extra, align 4
  %sub = sub nsw i32 4096, %2
  %conv = sext i32 %sub to i64
  store i64 %conv, ptr %size.addr, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load i64, ptr %size.addr, align 8
  %4 = load ptr, ptr %h.addr, align 8
  %chunk_size = getelementptr inbounds %struct.obstack, ptr %4, i32 0, i32 0
  store i64 %3, ptr %chunk_size, align 8
  %5 = load i64, ptr %alignment.addr, align 8
  %sub4 = sub i64 %5, 1
  %6 = load ptr, ptr %h.addr, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, ptr %6, i32 0, i32 6
  store i64 %sub4, ptr %alignment_mask, align 8
  %7 = load ptr, ptr %h.addr, align 8
  %8 = load ptr, ptr %h.addr, align 8
  %chunk_size5 = getelementptr inbounds %struct.obstack, ptr %8, i32 0, i32 0
  %9 = load i64, ptr %chunk_size5, align 8
  %call = call ptr @call_chunkfun(ptr noundef %7, i64 noundef %9)
  %10 = load ptr, ptr %h.addr, align 8
  %chunk6 = getelementptr inbounds %struct.obstack, ptr %10, i32 0, i32 1
  store ptr %call, ptr %chunk6, align 8
  store ptr %call, ptr %chunk, align 8
  %11 = load ptr, ptr %chunk, align 8
  %tobool = icmp ne ptr %11, null
  br i1 %tobool, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end3
  %12 = load ptr, ptr @obstack_alloc_failed_handler, align 8
  call void %12() #25
  unreachable

if.end8:                                          ; preds = %if.end3
  %13 = load ptr, ptr %chunk, align 8
  %contents = getelementptr inbounds %struct._obstack_chunk, ptr %13, i32 0, i32 2
  %arraydecay = getelementptr inbounds [0 x i8], ptr %contents, i64 0, i64 0
  %14 = load ptr, ptr %chunk, align 8
  %contents9 = getelementptr inbounds %struct._obstack_chunk, ptr %14, i32 0, i32 2
  %arraydecay10 = getelementptr inbounds [0 x i8], ptr %contents9, i64 0, i64 0
  %15 = ptrtoint ptr %arraydecay10 to i64
  %sub11 = sub i64 0, %15
  %16 = load i64, ptr %alignment.addr, align 8
  %sub12 = sub i64 %16, 1
  %and = and i64 %sub11, %sub12
  %add.ptr = getelementptr inbounds i8, ptr %arraydecay, i64 %and
  %17 = load ptr, ptr %h.addr, align 8
  %object_base = getelementptr inbounds %struct.obstack, ptr %17, i32 0, i32 2
  store ptr %add.ptr, ptr %object_base, align 8
  %18 = load ptr, ptr %h.addr, align 8
  %next_free = getelementptr inbounds %struct.obstack, ptr %18, i32 0, i32 3
  store ptr %add.ptr, ptr %next_free, align 8
  %19 = load ptr, ptr %chunk, align 8
  %20 = load ptr, ptr %h.addr, align 8
  %chunk_size13 = getelementptr inbounds %struct.obstack, ptr %20, i32 0, i32 0
  %21 = load i64, ptr %chunk_size13, align 8
  %add.ptr14 = getelementptr inbounds i8, ptr %19, i64 %21
  %22 = load ptr, ptr %chunk, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %22, i32 0, i32 0
  store ptr %add.ptr14, ptr %limit, align 8
  %23 = load ptr, ptr %h.addr, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, ptr %23, i32 0, i32 4
  store ptr %add.ptr14, ptr %chunk_limit, align 8
  %24 = load ptr, ptr %chunk, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %24, i32 0, i32 1
  store ptr null, ptr %prev, align 8
  %25 = load ptr, ptr %h.addr, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, ptr %25, i32 0, i32 10
  %bf.load = load i8, ptr %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 0
  store i8 %bf.set, ptr %maybe_empty_object, align 8
  %26 = load ptr, ptr %h.addr, align 8
  %alloc_failed = getelementptr inbounds %struct.obstack, ptr %26, i32 0, i32 10
  %bf.load15 = load i8, ptr %alloc_failed, align 8
  %bf.clear16 = and i8 %bf.load15, -5
  %bf.set17 = or i8 %bf.clear16, 0
  store i8 %bf.set17, ptr %alloc_failed, align 8
  ret i32 1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal ptr @call_chunkfun(ptr noundef %h, i64 noundef %size) #3 {
entry:
  %retval = alloca ptr, align 8
  %h.addr = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 %size, ptr %size.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %use_extra_arg = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 10
  %bf.load = load i8, ptr %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %h.addr, align 8
  %chunkfun = getelementptr inbounds %struct.obstack, ptr %1, i32 0, i32 7
  %2 = load ptr, ptr %chunkfun, align 8
  %3 = load ptr, ptr %h.addr, align 8
  %extra_arg = getelementptr inbounds %struct.obstack, ptr %3, i32 0, i32 9
  %4 = load ptr, ptr %extra_arg, align 8
  %5 = load i64, ptr %size.addr, align 8
  %call = call ptr %2(ptr noundef %4, i64 noundef %5)
  store ptr %call, ptr %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %6 = load ptr, ptr %h.addr, align 8
  %chunkfun1 = getelementptr inbounds %struct.obstack, ptr %6, i32 0, i32 7
  %7 = load ptr, ptr %chunkfun1, align 8
  %8 = load i64, ptr %size.addr, align 8
  %call2 = call ptr %7(i64 noundef %8)
  store ptr %call2, ptr %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load ptr, ptr %retval, align 8
  ret ptr %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rpl_obstack_begin_1(ptr noundef %h, i64 noundef %size, i64 noundef %alignment, ptr noundef %chunkfun, ptr noundef %freefun, ptr noundef %arg) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %size.addr = alloca i64, align 8
  %alignment.addr = alloca i64, align 8
  %chunkfun.addr = alloca ptr, align 8
  %freefun.addr = alloca ptr, align 8
  %arg.addr = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 %size, ptr %size.addr, align 8
  store i64 %alignment, ptr %alignment.addr, align 8
  store ptr %chunkfun, ptr %chunkfun.addr, align 8
  store ptr %freefun, ptr %freefun.addr, align 8
  store ptr %arg, ptr %arg.addr, align 8
  %0 = load ptr, ptr %chunkfun.addr, align 8
  %1 = load ptr, ptr %h.addr, align 8
  %chunkfun1 = getelementptr inbounds %struct.obstack, ptr %1, i32 0, i32 7
  store ptr %0, ptr %chunkfun1, align 8
  %2 = load ptr, ptr %freefun.addr, align 8
  %3 = load ptr, ptr %h.addr, align 8
  %freefun2 = getelementptr inbounds %struct.obstack, ptr %3, i32 0, i32 8
  store ptr %2, ptr %freefun2, align 8
  %4 = load ptr, ptr %arg.addr, align 8
  %5 = load ptr, ptr %h.addr, align 8
  %extra_arg = getelementptr inbounds %struct.obstack, ptr %5, i32 0, i32 9
  store ptr %4, ptr %extra_arg, align 8
  %6 = load ptr, ptr %h.addr, align 8
  %use_extra_arg = getelementptr inbounds %struct.obstack, ptr %6, i32 0, i32 10
  %bf.load = load i8, ptr %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, ptr %use_extra_arg, align 8
  %7 = load ptr, ptr %h.addr, align 8
  %8 = load i64, ptr %size.addr, align 8
  %9 = load i64, ptr %alignment.addr, align 8
  %call = call i32 @_obstack_begin_worker(ptr noundef %7, i64 noundef %8, i64 noundef %9)
  ret i32 %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @rpl_obstack_newchunk(ptr noundef %h, i64 noundef %length) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %length.addr = alloca i64, align 8
  %old_chunk = alloca ptr, align 8
  %new_chunk = alloca ptr, align 8
  %obj_size = alloca i64, align 8
  %object_base1 = alloca ptr, align 8
  %sum1 = alloca i64, align 8
  %sum2 = alloca i64, align 8
  %new_size = alloca i64, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 %length, ptr %length.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %chunk = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %chunk, align 8
  store ptr %1, ptr %old_chunk, align 8
  store ptr null, ptr %new_chunk, align 8
  %2 = load ptr, ptr %h.addr, align 8
  %next_free = getelementptr inbounds %struct.obstack, ptr %2, i32 0, i32 3
  %3 = load ptr, ptr %next_free, align 8
  %4 = load ptr, ptr %h.addr, align 8
  %object_base = getelementptr inbounds %struct.obstack, ptr %4, i32 0, i32 2
  %5 = load ptr, ptr %object_base, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %3 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, ptr %obj_size, align 8
  %6 = load i64, ptr %obj_size, align 8
  %7 = load i64, ptr %length.addr, align 8
  %add = add i64 %6, %7
  store i64 %add, ptr %sum1, align 8
  %8 = load i64, ptr %sum1, align 8
  %9 = load ptr, ptr %h.addr, align 8
  %alignment_mask = getelementptr inbounds %struct.obstack, ptr %9, i32 0, i32 6
  %10 = load i64, ptr %alignment_mask, align 8
  %add2 = add i64 %8, %10
  store i64 %add2, ptr %sum2, align 8
  %11 = load i64, ptr %sum2, align 8
  %12 = load i64, ptr %obj_size, align 8
  %shr = lshr i64 %12, 3
  %add3 = add i64 %11, %shr
  %add4 = add i64 %add3, 100
  store i64 %add4, ptr %new_size, align 8
  %13 = load i64, ptr %new_size, align 8
  %14 = load i64, ptr %sum2, align 8
  %cmp = icmp ult i64 %13, %14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %15 = load i64, ptr %sum2, align 8
  store i64 %15, ptr %new_size, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %16 = load i64, ptr %new_size, align 8
  %17 = load ptr, ptr %h.addr, align 8
  %chunk_size = getelementptr inbounds %struct.obstack, ptr %17, i32 0, i32 0
  %18 = load i64, ptr %chunk_size, align 8
  %cmp5 = icmp ult i64 %16, %18
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %19 = load ptr, ptr %h.addr, align 8
  %chunk_size7 = getelementptr inbounds %struct.obstack, ptr %19, i32 0, i32 0
  %20 = load i64, ptr %chunk_size7, align 8
  store i64 %20, ptr %new_size, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %21 = load i64, ptr %obj_size, align 8
  %22 = load i64, ptr %sum1, align 8
  %cmp9 = icmp ule i64 %21, %22
  br i1 %cmp9, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end8
  %23 = load i64, ptr %sum1, align 8
  %24 = load i64, ptr %sum2, align 8
  %cmp10 = icmp ule i64 %23, %24
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  %25 = load ptr, ptr %h.addr, align 8
  %26 = load i64, ptr %new_size, align 8
  %call = call ptr @call_chunkfun(ptr noundef %25, i64 noundef %26)
  store ptr %call, ptr %new_chunk, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end8
  %27 = load ptr, ptr %new_chunk, align 8
  %tobool = icmp ne ptr %27, null
  br i1 %tobool, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end12
  %28 = load ptr, ptr @obstack_alloc_failed_handler, align 8
  call void %28() #25
  unreachable

if.end14:                                         ; preds = %if.end12
  %29 = load ptr, ptr %new_chunk, align 8
  %30 = load ptr, ptr %h.addr, align 8
  %chunk15 = getelementptr inbounds %struct.obstack, ptr %30, i32 0, i32 1
  store ptr %29, ptr %chunk15, align 8
  %31 = load ptr, ptr %old_chunk, align 8
  %32 = load ptr, ptr %new_chunk, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %32, i32 0, i32 1
  store ptr %31, ptr %prev, align 8
  %33 = load ptr, ptr %new_chunk, align 8
  %34 = load i64, ptr %new_size, align 8
  %add.ptr = getelementptr inbounds i8, ptr %33, i64 %34
  %35 = load ptr, ptr %h.addr, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, ptr %35, i32 0, i32 4
  store ptr %add.ptr, ptr %chunk_limit, align 8
  %36 = load ptr, ptr %new_chunk, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %36, i32 0, i32 0
  store ptr %add.ptr, ptr %limit, align 8
  %37 = load ptr, ptr %new_chunk, align 8
  %contents = getelementptr inbounds %struct._obstack_chunk, ptr %37, i32 0, i32 2
  %arraydecay = getelementptr inbounds [0 x i8], ptr %contents, i64 0, i64 0
  %38 = load ptr, ptr %new_chunk, align 8
  %contents16 = getelementptr inbounds %struct._obstack_chunk, ptr %38, i32 0, i32 2
  %arraydecay17 = getelementptr inbounds [0 x i8], ptr %contents16, i64 0, i64 0
  %39 = ptrtoint ptr %arraydecay17 to i64
  %sub = sub i64 0, %39
  %40 = load ptr, ptr %h.addr, align 8
  %alignment_mask18 = getelementptr inbounds %struct.obstack, ptr %40, i32 0, i32 6
  %41 = load i64, ptr %alignment_mask18, align 8
  %and = and i64 %sub, %41
  %add.ptr19 = getelementptr inbounds i8, ptr %arraydecay, i64 %and
  store ptr %add.ptr19, ptr %object_base1, align 8
  %42 = load ptr, ptr %object_base1, align 8
  %43 = load ptr, ptr %h.addr, align 8
  %object_base20 = getelementptr inbounds %struct.obstack, ptr %43, i32 0, i32 2
  %44 = load ptr, ptr %object_base20, align 8
  %45 = load i64, ptr %obj_size, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr align 1 %42, ptr align 1 %44, i64 %45, i1 false)
  %46 = load ptr, ptr %h.addr, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, ptr %46, i32 0, i32 10
  %bf.load = load i8, ptr %maybe_empty_object, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool21 = icmp ne i32 %bf.cast, 0
  br i1 %tobool21, label %if.end36, label %land.lhs.true22

land.lhs.true22:                                  ; preds = %if.end14
  %47 = load ptr, ptr %h.addr, align 8
  %object_base23 = getelementptr inbounds %struct.obstack, ptr %47, i32 0, i32 2
  %48 = load ptr, ptr %object_base23, align 8
  %49 = load ptr, ptr %old_chunk, align 8
  %contents24 = getelementptr inbounds %struct._obstack_chunk, ptr %49, i32 0, i32 2
  %arraydecay25 = getelementptr inbounds [0 x i8], ptr %contents24, i64 0, i64 0
  %50 = load ptr, ptr %old_chunk, align 8
  %contents26 = getelementptr inbounds %struct._obstack_chunk, ptr %50, i32 0, i32 2
  %arraydecay27 = getelementptr inbounds [0 x i8], ptr %contents26, i64 0, i64 0
  %51 = ptrtoint ptr %arraydecay27 to i64
  %sub28 = sub i64 0, %51
  %52 = load ptr, ptr %h.addr, align 8
  %alignment_mask29 = getelementptr inbounds %struct.obstack, ptr %52, i32 0, i32 6
  %53 = load i64, ptr %alignment_mask29, align 8
  %and30 = and i64 %sub28, %53
  %add.ptr31 = getelementptr inbounds i8, ptr %arraydecay25, i64 %and30
  %cmp32 = icmp eq ptr %48, %add.ptr31
  br i1 %cmp32, label %if.then33, label %if.end36

if.then33:                                        ; preds = %land.lhs.true22
  %54 = load ptr, ptr %old_chunk, align 8
  %prev34 = getelementptr inbounds %struct._obstack_chunk, ptr %54, i32 0, i32 1
  %55 = load ptr, ptr %prev34, align 8
  %56 = load ptr, ptr %new_chunk, align 8
  %prev35 = getelementptr inbounds %struct._obstack_chunk, ptr %56, i32 0, i32 1
  store ptr %55, ptr %prev35, align 8
  %57 = load ptr, ptr %h.addr, align 8
  %58 = load ptr, ptr %old_chunk, align 8
  call void @call_freefun(ptr noundef %57, ptr noundef %58)
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %land.lhs.true22, %if.end14
  %59 = load ptr, ptr %object_base1, align 8
  %60 = load ptr, ptr %h.addr, align 8
  %object_base37 = getelementptr inbounds %struct.obstack, ptr %60, i32 0, i32 2
  store ptr %59, ptr %object_base37, align 8
  %61 = load ptr, ptr %h.addr, align 8
  %object_base38 = getelementptr inbounds %struct.obstack, ptr %61, i32 0, i32 2
  %62 = load ptr, ptr %object_base38, align 8
  %63 = load i64, ptr %obj_size, align 8
  %add.ptr39 = getelementptr inbounds i8, ptr %62, i64 %63
  %64 = load ptr, ptr %h.addr, align 8
  %next_free40 = getelementptr inbounds %struct.obstack, ptr %64, i32 0, i32 3
  store ptr %add.ptr39, ptr %next_free40, align 8
  %65 = load ptr, ptr %h.addr, align 8
  %maybe_empty_object41 = getelementptr inbounds %struct.obstack, ptr %65, i32 0, i32 10
  %bf.load42 = load i8, ptr %maybe_empty_object41, align 8
  %bf.clear43 = and i8 %bf.load42, -3
  %bf.set = or i8 %bf.clear43, 0
  store i8 %bf.set, ptr %maybe_empty_object41, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @call_freefun(ptr noundef %h, ptr noundef %old_chunk) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %old_chunk.addr = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store ptr %old_chunk, ptr %old_chunk.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %use_extra_arg = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 10
  %bf.load = load i8, ptr %use_extra_arg, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr %h.addr, align 8
  %freefun = getelementptr inbounds %struct.obstack, ptr %1, i32 0, i32 8
  %2 = load ptr, ptr %freefun, align 8
  %3 = load ptr, ptr %h.addr, align 8
  %extra_arg = getelementptr inbounds %struct.obstack, ptr %3, i32 0, i32 9
  %4 = load ptr, ptr %extra_arg, align 8
  %5 = load ptr, ptr %old_chunk.addr, align 8
  call void %2(ptr noundef %4, ptr noundef %5)
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load ptr, ptr %h.addr, align 8
  %freefun1 = getelementptr inbounds %struct.obstack, ptr %6, i32 0, i32 8
  %7 = load ptr, ptr %freefun1, align 8
  %8 = load ptr, ptr %old_chunk.addr, align 8
  call void %7(ptr noundef %8)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local i32 @rpl_obstack_allocated_p(ptr noundef %h, ptr noundef %obj) #10 {
entry:
  %h.addr = alloca ptr, align 8
  %obj.addr = alloca ptr, align 8
  %lp = alloca ptr, align 8
  %plp = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store ptr %obj, ptr %obj.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %chunk = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %chunk, align 8
  store ptr %1, ptr %lp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load ptr, ptr %lp, align 8
  %cmp = icmp ne ptr %2, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load ptr, ptr %lp, align 8
  %4 = load ptr, ptr %obj.addr, align 8
  %cmp1 = icmp uge ptr %3, %4
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %5 = load ptr, ptr %lp, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %limit, align 8
  %7 = load ptr, ptr %obj.addr, align 8
  %cmp2 = icmp ult ptr %6, %7
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %8 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %8, %lor.end ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %10 = load ptr, ptr %lp, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %prev, align 8
  store ptr %11, ptr %plp, align 8
  %12 = load ptr, ptr %plp, align 8
  store ptr %12, ptr %lp, align 8
  br label %while.cond, !llvm.loop !88

while.end:                                        ; preds = %land.end
  %13 = load ptr, ptr %lp, align 8
  %cmp3 = icmp ne ptr %13, null
  %conv = zext i1 %cmp3 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @rpl_obstack_free(ptr noundef %h, ptr noundef %obj) #3 {
entry:
  %h.addr = alloca ptr, align 8
  %obj.addr = alloca ptr, align 8
  %lp = alloca ptr, align 8
  %plp = alloca ptr, align 8
  store ptr %h, ptr %h.addr, align 8
  store ptr %obj, ptr %obj.addr, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %chunk = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %chunk, align 8
  store ptr %1, ptr %lp, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load ptr, ptr %lp, align 8
  %cmp = icmp ne ptr %2, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load ptr, ptr %lp, align 8
  %4 = load ptr, ptr %obj.addr, align 8
  %cmp1 = icmp uge ptr %3, %4
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %5 = load ptr, ptr %lp, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %5, i32 0, i32 0
  %6 = load ptr, ptr %limit, align 8
  %7 = load ptr, ptr %obj.addr, align 8
  %cmp2 = icmp ult ptr %6, %7
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %8 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %while.cond
  %9 = phi i1 [ false, %while.cond ], [ %8, %lor.end ]
  br i1 %9, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %10 = load ptr, ptr %lp, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %10, i32 0, i32 1
  %11 = load ptr, ptr %prev, align 8
  store ptr %11, ptr %plp, align 8
  %12 = load ptr, ptr %h.addr, align 8
  %13 = load ptr, ptr %lp, align 8
  call void @call_freefun(ptr noundef %12, ptr noundef %13)
  %14 = load ptr, ptr %plp, align 8
  store ptr %14, ptr %lp, align 8
  %15 = load ptr, ptr %h.addr, align 8
  %maybe_empty_object = getelementptr inbounds %struct.obstack, ptr %15, i32 0, i32 10
  %bf.load = load i8, ptr %maybe_empty_object, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, ptr %maybe_empty_object, align 8
  br label %while.cond, !llvm.loop !89

while.end:                                        ; preds = %land.end
  %16 = load ptr, ptr %lp, align 8
  %tobool = icmp ne ptr %16, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %17 = load ptr, ptr %obj.addr, align 8
  %18 = load ptr, ptr %h.addr, align 8
  %next_free = getelementptr inbounds %struct.obstack, ptr %18, i32 0, i32 3
  store ptr %17, ptr %next_free, align 8
  %19 = load ptr, ptr %h.addr, align 8
  %object_base = getelementptr inbounds %struct.obstack, ptr %19, i32 0, i32 2
  store ptr %17, ptr %object_base, align 8
  %20 = load ptr, ptr %lp, align 8
  %limit3 = getelementptr inbounds %struct._obstack_chunk, ptr %20, i32 0, i32 0
  %21 = load ptr, ptr %limit3, align 8
  %22 = load ptr, ptr %h.addr, align 8
  %chunk_limit = getelementptr inbounds %struct.obstack, ptr %22, i32 0, i32 4
  store ptr %21, ptr %chunk_limit, align 8
  %23 = load ptr, ptr %lp, align 8
  %24 = load ptr, ptr %h.addr, align 8
  %chunk4 = getelementptr inbounds %struct.obstack, ptr %24, i32 0, i32 1
  store ptr %23, ptr %chunk4, align 8
  br label %if.end7

if.else:                                          ; preds = %while.end
  %25 = load ptr, ptr %obj.addr, align 8
  %cmp5 = icmp ne ptr %25, null
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.else
  call void @abort() #22
  unreachable

if.end:                                           ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone willreturn memory(read) uwtable
define dso_local i64 @rpl_obstack_memory_used(ptr noundef %h) #10 {
entry:
  %h.addr = alloca ptr, align 8
  %lp = alloca ptr, align 8
  %nbytes = alloca i64, align 8
  store ptr %h, ptr %h.addr, align 8
  store i64 0, ptr %nbytes, align 8
  %0 = load ptr, ptr %h.addr, align 8
  %chunk = getelementptr inbounds %struct.obstack, ptr %0, i32 0, i32 1
  %1 = load ptr, ptr %chunk, align 8
  store ptr %1, ptr %lp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load ptr, ptr %lp, align 8
  %cmp = icmp ne ptr %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %lp, align 8
  %limit = getelementptr inbounds %struct._obstack_chunk, ptr %3, i32 0, i32 0
  %4 = load ptr, ptr %limit, align 8
  %5 = load ptr, ptr %lp, align 8
  %sub.ptr.lhs.cast = ptrtoint ptr %4 to i64
  %sub.ptr.rhs.cast = ptrtoint ptr %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %6 = load i64, ptr %nbytes, align 8
  %add = add i64 %6, %sub.ptr.sub
  store i64 %add, ptr %nbytes, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load ptr, ptr %lp, align 8
  %prev = getelementptr inbounds %struct._obstack_chunk, ptr %7, i32 0, i32 1
  %8 = load ptr, ptr %prev, align 8
  store ptr %8, ptr %lp, align 8
  br label %for.cond, !llvm.loop !90

for.end:                                          ; preds = %for.cond
  %9 = load i64, ptr %nbytes, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdin_set_file_name(ptr noundef %file) #3 {
entry:
  %file.addr = alloca ptr, align 8
  store ptr %file, ptr %file.addr, align 8
  %0 = load ptr, ptr %file.addr, align 8
  store ptr %0, ptr @file_name.297, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @close_stdin() #3 {
entry:
  %fail = alloca i8, align 1
  %close_error = alloca ptr, align 8
  store i8 0, ptr %fail, align 1
  %0 = load ptr, ptr @stdin, align 8
  %call = call i64 @freadahead(ptr noundef %0) #23
  %cmp = icmp ugt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end6

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @stdin, align 8
  %call1 = call i32 @rpl_fseeko(ptr noundef %1, i64 noundef 0, i32 noundef 1)
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %2 = load ptr, ptr @stdin, align 8
  %call3 = call i32 @rpl_fflush(ptr noundef %2)
  %cmp4 = icmp ne i32 %call3, 0
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  store i8 1, ptr %fail, align 1
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  br label %if.end6

if.end6:                                          ; preds = %if.end, %entry
  %3 = load ptr, ptr @stdin, align 8
  %call7 = call i32 @close_stream(ptr noundef %3)
  %cmp8 = icmp ne i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  store i8 1, ptr %fail, align 1
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end6
  %4 = load i8, ptr %fail, align 1
  %tobool = trunc i8 %4 to i1
  br i1 %tobool, label %if.then11, label %if.end19

if.then11:                                        ; preds = %if.end10
  %call12 = call ptr @dgettext(ptr noundef @.str.298, ptr noundef @.str.1.299) #21
  store ptr %call12, ptr %close_error, align 8
  %5 = load ptr, ptr @file_name.297, align 8
  %tobool13 = icmp ne ptr %5, null
  br i1 %tobool13, label %if.then14, label %if.else

if.then14:                                        ; preds = %if.then11
  %call15 = call ptr @__errno_location() #26
  %6 = load i32, ptr %call15, align 4
  %7 = load ptr, ptr @file_name.297, align 8
  %call16 = call ptr @quotearg_colon(ptr noundef %7)
  %8 = load ptr, ptr %close_error, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %6, ptr noundef @.str.2.300, ptr noundef %call16, ptr noundef %8) #24
  br label %if.end18

if.else:                                          ; preds = %if.then11
  %call17 = call ptr @__errno_location() #26
  %9 = load i32, ptr %call17, align 4
  %10 = load ptr, ptr %close_error, align 8
  call void (i32, i32, ptr, ...) @error(i32 noundef 0, i32 noundef %9, ptr noundef @.str.3.301, ptr noundef %10) #24
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then14
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end10
  call void @close_stdout()
  %11 = load i8, ptr %fail, align 1
  %tobool20 = trunc i8 %11 to i1
  br i1 %tobool20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end19
  %12 = load volatile i32, ptr @exit_failure, align 4
  call void @_exit(i32 noundef %12) #25
  unreachable

if.end22:                                         ; preds = %if.end19
  ret void
}

; Function Attrs: nounwind willreturn memory(read)
declare i64 @freadahead(ptr noundef) #6

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @rpl_mbrlen(ptr noundef %s, i64 noundef %n, ptr noundef %ps) #3 {
entry:
  %s.addr = alloca ptr, align 8
  %n.addr = alloca i64, align 8
  %ps.addr = alloca ptr, align 8
  store ptr %s, ptr %s.addr, align 8
  store i64 %n, ptr %n.addr, align 8
  store ptr %ps, ptr %ps.addr, align 8
  %0 = load ptr, ptr %ps.addr, align 8
  %cmp = icmp eq ptr %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store ptr @internal_state.302, ptr %ps.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load ptr, ptr %s.addr, align 8
  %2 = load i64, ptr %n.addr, align 8
  %3 = load ptr, ptr %ps.addr, align 8
  %call = call i64 @rpl_mbrtowc(ptr noundef null, ptr noundef %1, i64 noundef %2, ptr noundef %3)
  ret i64 %call
}

declare i64 @rpl_mbrtowc(ptr noundef, ptr noundef, i64 noundef, ptr noundef) #2

attributes #0 = { noinline noreturn nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #6 = { nounwind willreturn memory(read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #8 = { nounwind willreturn memory(none) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #9 = { convergent nocallback nofree nosync nounwind willreturn memory(none) }
attributes #10 = { noinline nounwind optnone willreturn memory(read) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #11 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #12 = { nocallback nofree nosync nounwind willreturn }
attributes #13 = { cold noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #14 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #15 = { nounwind allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #16 = { noinline nounwind optnone allocsize(1,2) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #17 = { noinline nounwind optnone allocsize(0) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #18 = { noinline nounwind optnone allocsize(1) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #19 = { noinline nounwind optnone allocsize(0,1) uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #20 = { nounwind allocsize(0,1) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #21 = { nounwind }
attributes #22 = { noreturn nounwind }
attributes #23 = { nounwind willreturn memory(read) }
attributes #24 = { cold }
attributes #25 = { noreturn }
attributes #26 = { nounwind willreturn memory(none) }
attributes #27 = { allocsize(0) }
attributes #28 = { allocsize(1) }
attributes #29 = { nounwind allocsize(0) }
attributes #30 = { allocsize(1,2) }
attributes #31 = { allocsize(0,1) }
attributes #32 = { nounwind allocsize(0,1) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5}

!0 = !{!"clang version 18.1.8 (https://github.com/llvm/llvm-project.git 3b5b5c1ec4a3095ab096dd780e84d7ab81f3d7ff)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 2}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !7}
!14 = distinct !{!14, !7}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !7}
!17 = distinct !{!17, !7}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !7}
!20 = distinct !{!20, !7}
!21 = distinct !{!21, !7}
!22 = distinct !{!22, !7}
!23 = distinct !{!23, !7}
!24 = distinct !{!24, !7}
!25 = distinct !{!25, !7}
!26 = distinct !{!26, !7}
!27 = distinct !{!27, !7}
!28 = distinct !{!28, !7}
!29 = distinct !{!29, !7}
!30 = distinct !{!30, !7}
!31 = distinct !{!31, !7}
!32 = distinct !{!32, !7}
!33 = distinct !{!33, !7}
!34 = distinct !{!34, !7}
!35 = distinct !{!35, !7}
!36 = distinct !{!36, !7}
!37 = distinct !{!37, !7}
!38 = distinct !{!38, !7}
!39 = distinct !{!39, !7}
!40 = distinct !{!40, !7}
!41 = distinct !{!41, !7}
!42 = distinct !{!42, !7}
!43 = distinct !{!43, !7}
!44 = distinct !{!44, !7}
!45 = distinct !{!45, !7}
!46 = distinct !{!46, !7}
!47 = distinct !{!47, !7}
!48 = distinct !{!48, !7}
!49 = distinct !{!49, !7}
!50 = distinct !{!50, !7}
!51 = distinct !{!51, !7}
!52 = distinct !{!52, !7}
!53 = distinct !{!53, !7}
!54 = distinct !{!54, !7}
!55 = distinct !{!55, !7}
!56 = distinct !{!56, !7}
!57 = distinct !{!57, !7}
!58 = distinct !{!58, !7}
!59 = distinct !{!59, !7}
!60 = distinct !{!60, !7}
!61 = distinct !{!61, !7}
!62 = distinct !{!62, !7}
!63 = distinct !{!63, !7}
!64 = distinct !{!64, !7}
!65 = distinct !{!65, !7}
!66 = distinct !{!66, !7}
!67 = distinct !{!67, !7}
!68 = distinct !{!68, !7}
!69 = distinct !{!69, !7}
!70 = distinct !{!70, !7}
!71 = distinct !{!71, !7}
!72 = distinct !{!72, !7}
!73 = distinct !{!73, !7}
!74 = distinct !{!74, !7}
!75 = distinct !{!75, !7}
!76 = distinct !{!76, !7}
!77 = distinct !{!77, !7}
!78 = distinct !{!78, !7}
!79 = distinct !{!79, !7}
!80 = distinct !{!80, !7}
!81 = distinct !{!81, !7}
!82 = distinct !{!82, !7}
!83 = distinct !{!83, !7}
!84 = distinct !{!84, !7}
!85 = distinct !{!85, !7}
!86 = distinct !{!86, !7}
!87 = distinct !{!87, !7}
!88 = distinct !{!88, !7}
!89 = distinct !{!89, !7}
!90 = distinct !{!90, !7}
