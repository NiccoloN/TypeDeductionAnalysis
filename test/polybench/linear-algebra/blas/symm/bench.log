[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 from: null
 to:   [100 x i8]*
Changed type of: i32 105
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i32 106
 from: null
 to:   i32
Changed type of: i64 384000
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 107
 from: null
 to:   i32
Changed type of: i64 320000
 from: null
 to:   i64
Changed type of: i32 108
 from: null
 to:   i32
Changed type of: i32 109
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 31
 from: null
 to:   i32
Changed type of: @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 32
 from: null
 to:   i32
Changed type of: double 1.500000e+00
 from: null
 to:   double
Changed type of: double 1.200000e+00
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x i32> <i32 100, i32 100>
 from: null
 to:   <2 x i32>
Changed type of: <2 x double> <double 2.000000e+02, double 2.000000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 200
 from: null
 to:   i64
Changed type of: i64 199
 from: null
 to:   i64
Changed type of: i64 9223372036854775806
 from: null
 to:   i64
Changed type of: i64 -4
 from: null
 to:   i64
Changed type of: <2 x double> <double -9.990000e+02, double -9.990000e+02>
 from: null
 to:   <2 x double>
Changed type of: i32 100
 from: null
 to:   i32
Changed type of: double 2.000000e+02
 from: null
 to:   double
Changed type of: double -9.990000e+02
 from: null
 to:   double
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 from: null
 to:   <2 x double>
Changed type of: <2 x double> zeroinitializer
 from: null
 to:   <2 x double>
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double undef
 from: null
 to:   double
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %alpha = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %beta = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [200 x double]]*
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 Changed type of: %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 Changed type of: %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 Changed type of: %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 Changed type of: %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 Changed type of: %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 Changed type of: %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 Changed type of: %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %13 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 Changed type of: %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 Changed type of: %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 Changed type of: %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 Changed type of: %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 Changed type of: br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 Changed type of: %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body48 [in fun] main
 Changed type of: br label %vector.body48 [in fun] main
  from: null
  to:   void
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 Changed type of: %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 Changed type of: %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 Changed type of: %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 Changed type of: %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 Changed type of: %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 Changed type of: %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 Creating initial type:
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 Changed type of: %index.next54 = add nuw i64 %index49, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 Changed type of: %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 Changed type of: %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 Changed type of: br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 Changed type of: %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body26.i [in fun] main
 Changed type of: br label %for.body26.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 Changed type of: %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 Changed type of: br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
  from: null
  to:   void
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 Changed type of: %min.iters.check = icmp ult i64 %14, 4 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 Changed type of: br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
 Changed type of: %n.vec = and i64 %14, -4 [in fun] main
  from: null
  to:   i64
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 Changed type of: %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
  from: null
  to:   i64
[Deducing from] br label %vector.body37 [in fun] main
 Changed type of: br label %vector.body37 [in fun] main
  from: null
  to:   void
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 Changed type of: %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 Changed type of: %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
  from: null
  to:   i64
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 Creating initial type:
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: null
  to:   ptr
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 Changed type of: %index.next39 = add nuw i64 %index38, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 Changed type of: %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 Changed type of: %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 Changed type of: br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 Changed type of: %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body43.i [in fun] main
 Changed type of: br label %for.body43.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 Changed type of: %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 Changed type of: %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
 Changed type of: %26 = trunc i64 %25 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
 Changed type of: %rem28.i = urem i32 %26, 100 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 Changed type of: %conv29.i = sitofp i32 %rem28.i to double [in fun] main
  from: null
  to:   double
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 Changed type of: %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 Changed type of: %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 Changed type of: %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 Changed type of: %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 Changed type of: %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 Changed type of: %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 Changed type of: %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 Changed type of: %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
 Changed type of: br label %for.cond1.preheader.i11 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 Changed type of: %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 Changed type of: %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: null
  to:   ptr
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: ptr
  to:   double*
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 Changed type of: br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i1
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 Changed type of: %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 Changed type of: %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
 Changed type of: br label %for.cond4.preheader.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body59 [in fun] main
 Changed type of: br label %vector.body59 [in fun] main
  from: null
  to:   void
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 Changed type of: %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 Changed type of: %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 Changed type of: %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 Changed type of: %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 Changed type of: %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 Creating initial type:
 Changed type of: %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 Creating initial type:
 Changed type of: %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 Creating initial type:
 Changed type of: %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 Creating initial type:
 Changed type of: %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 Changed type of: %index.next70 = add nuw i64 %index60, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 Changed type of: %43 = icmp eq i64 %index.next70, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 Changed type of: %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
 Changed type of: %mul.us.i = fmul double %27, %44 [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 Changed type of: br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 Creating initial type:
 Changed type of: %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 Changed type of: %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: null
  to:   ptr
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 Creating initial type:
 Changed type of: %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
  from: null
  to:   double
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 Creating initial type:
 Changed type of: %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 Changed type of: %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
 Changed type of: %niter.next.1 = add i64 %niter, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 Changed type of: %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 Changed type of: br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: null
  to:   ptr
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 Creating initial type:
 Changed type of: %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
  from: null
  to:   double
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 Creating initial type:
 Changed type of: %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 Changed type of: br label %for.cond4.for.end_crit_edge.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 Changed type of: %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 Changed type of: %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 Creating initial type:
 Changed type of: %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 Creating initial type:
 Changed type of: %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
  from: null
  to:   double
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 Changed type of: %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 Changed type of: %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 Changed type of: %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 Creating initial type:
 Changed type of: %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
 Changed type of: br label %for.cond1.preheader.i21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 Changed type of: %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i22 [in fun] main
 Changed type of: br label %for.body3.i22 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 Changed type of: %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
  from: null
  to:   i64
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
 Changed type of: %67 = trunc i64 %66 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
 Changed type of: %rem.i24 = urem i32 %67, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 Changed type of: %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 Changed type of: %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 Changed type of: %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 Changed type of: %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 Creating initial type:
 Changed type of: %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
  from: null
  to:   [100 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"target('C') scalar()\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,200))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,240))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %alpha = alloca double, align 8 [in fun] main
[Deducing from] %beta = alloca double, align 8 [in fun] main
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body48 [in fun] main
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
[Deducing from] br label %for.body26.i [in fun] main
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
[Deducing from] br label %vector.body37 [in fun] main
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
[Deducing from] br label %for.body43.i [in fun] main
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body59 [in fun] main
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
[Deducing from] br label %for.body3.i22 [in fun] main
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [21 x i8] c"scalar(range(0,240))\00"
 deduced type: [21 x i8]
[Value] [21 x i8] c"scalar(range(0,200))\00"
 deduced type: [21 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 deduced type: i32
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 deduced type: i32
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 deduced type: ptr
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 deduced type: i64
[Value] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 deduced type: i1
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 deduced type: i32
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 deduced type: i32
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 deduced type: i1
[Value] %rem.i24 = urem i32 %67, 20 [in fun] main
 deduced type: i32
[Value] %67 = trunc i64 %66 to i32 [in fun] main
 deduced type: i32
[Value] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body3.i22 [in fun] main
 deduced type: void
[Value] br label %for.cond1.preheader.i21 [in fun] main
 deduced type: void
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 deduced type: i1
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 deduced type: double
[Value] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 deduced type: double
[Value] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 deduced type: double
[Value] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 deduced type: double
[Value] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 deduced type: void
[Value] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 deduced type: void
[Value] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 deduced type: double*
[Value] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 deduced type: void
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 deduced type: i64
[Value] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 deduced type: double
[Value] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 deduced type: i1
[Value] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] i32 114
 deduced type: i32
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 deduced type: void
[Value] %13 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 deduced type: i1
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 deduced type: i1
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 deduced type: i1
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 deduced type: i64
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %alpha = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] i64 50
 deduced type: i64
[Value] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] i1 true
 deduced type: i1
[Value] <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 deduced type: <2 x double>
[Value] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] i64 3
 deduced type: i64
[Value] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 deduced type: double
[Value] <2 x double> zeroinitializer
 deduced type: <2 x double>
[Value] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 deduced type: <2 x double>*
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 deduced type: double
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] i32 32
 deduced type: i32
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] i64 16
 deduced type: i64
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] <2 x double> <double -9.990000e+02, double -9.990000e+02>
 deduced type: <2 x double>
[Value] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] <2 x double> <double 2.000000e+02, double 2.000000e+02>
 deduced type: <2 x double>
[Value] i32 109
 deduced type: i32
[Value] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 deduced type: i1
[Value] <2 x i32> <i32 100, i32 100>
 deduced type: <2 x i32>
[Value] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 deduced type: void
[Value] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] i64 4
 deduced type: i64
[Value] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 deduced type: i1
[Value] i32 31
 deduced type: i32
[Value] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 deduced type: i64
[Value] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] i64 9223372036854775806
 deduced type: i64
[Value] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 4096
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 deduced type: [100 x i8]*
[Value] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 deduced type: <2 x i64>
[Value] double 0.000000e+00
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 deduced type: i64
[Value] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] i32 100
 deduced type: i32
[Value] i32 105
 deduced type: i32
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 7
 deduced type: i64
[Value] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 deduced type: i64
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [21 x i8] c"target('C') scalar()\00"
 deduced type: [21 x i8]
[Value] i64 320000
 deduced type: i64
[Value] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 deduced type: <2 x double>
[Value] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 deduced type: i64
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] i64 4194560
 deduced type: i64
[Value] i64 200
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] i64 11
 deduced type: i64
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] void polybench_timer_start()
 deduced type: void
[Value] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 deduced type: i64
[Value] void exit(i32)
 deduced type: void
[Value] i64 -4
 deduced type: i64
[Value] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 deduced type: double*
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] i64 6
 deduced type: i64
[Value] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] double 1.500000e+00
 deduced type: double
[Value] i32 107
 deduced type: i32
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] i32 10
 deduced type: i32
[Value] void polybench_timer_stop()
 deduced type: void
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 deduced type: i64
[Value] i64 384000
 deduced type: i64
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 deduced type: i64
[Value] i64 1
 deduced type: i64
[Value] void polybench_timer_print()
 deduced type: void
[Value] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 deduced type: double
[Value] i32 108
 deduced type: i32
[Value] double 2.000000e+02
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 deduced type: double
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
 deduced type: [100 x i8]
[Value] i64 0
 deduced type: i64
[Value] i64 240
 deduced type: i64
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 deduced type: i64
[Value] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 deduced type: [200 x [200 x double]]*
[Value] double 1.000000e+01
 deduced type: double
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] i32 1
 deduced type: i32
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 deduced type: i64
[Value] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] i32 printf(ptr)
 deduced type: i32
[Value] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] i32 20
 deduced type: i32
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 deduced type: i1
[Value] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 deduced type: i64
[Value] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 deduced type: void
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] i32 106
 deduced type: i32
[Value] double -9.990000e+02
 deduced type: double
[Value] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 deduced type: i1
[Value] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 deduced type: <2 x double>
[Value] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 deduced type: <2 x i64>
[Value] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 deduced type: i64
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 deduced type: i1
[Value] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body26.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 deduced type: void
[Value] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 deduced type: void
[Value] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 deduced type: i64
[Value] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 deduced type: i1
[Value] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 deduced type: void
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 deduced type: i64
[Value] double 1.200000e+00
 deduced type: double
[Value] i64 199
 deduced type: i64
[Value] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 deduced type: i64
[Value] i64 5
 deduced type: i64
[Value] br label %vector.body37 [in fun] main
 deduced type: void
[Value] %niter.next.1 = add i64 %niter, 2 [in fun] main
 deduced type: i64
[Value] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 deduced type: i1
[Value] br label %for.cond1.preheader.i11 [in fun] main
 deduced type: void
[Value] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 deduced type: void
[Value] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 deduced type: <2 x double>*
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] br label %vector.body48 [in fun] main
 deduced type: void
[Value] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 deduced type: i1
[Value] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] double undef
 deduced type: double
[Value] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 deduced type: i64
[Value] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %26 = trunc i64 %25 to i32 [in fun] main
 deduced type: i32
[Value] %rem28.i = urem i32 %26, 100 [in fun] main
 deduced type: i32
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 deduced type: double
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 deduced type: double
[Value] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] ptr null
 deduced type: ptr
[Value] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 deduced type: i64
[Value] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 deduced type: i64
[Value] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 deduced type: i64
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 deduced type: i1
[Value] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 deduced type: i1
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 deduced type: i64
[Value] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 deduced type: void
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] %mul.us.i = fmul double %27, %44 [in fun] main
 deduced type: double
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i1
[Value] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %n.vec = and i64 %14, -4 [in fun] main
 deduced type: i64
[Value] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] br label %for.cond4.preheader.us.i [in fun] main
 deduced type: void
[Value] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 deduced type: <2 x double>
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 deduced type: <2 x double>
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 deduced type: <2 x double>
[Value] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 deduced type: <2 x double>
[Value] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 deduced type: i64
[Value] %beta = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 deduced type: void
[Value] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i64 8
 deduced type: i64
[Value] br label %vector.body59 [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 deduced type: double*
[Value] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 deduced type: double
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body43.i [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 deduced type: double*
[Value] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 from: null
 to:   [100 x i8]*
Changed type of: i32 105
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i32 106
 from: null
 to:   i32
Changed type of: i64 384000
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 107
 from: null
 to:   i32
Changed type of: i64 320000
 from: null
 to:   i64
Changed type of: i32 108
 from: null
 to:   i32
Changed type of: i32 109
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 31
 from: null
 to:   i32
Changed type of: @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 32
 from: null
 to:   i32
Changed type of: double 1.500000e+00
 from: null
 to:   double
Changed type of: double 1.200000e+00
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x i32> <i32 100, i32 100>
 from: null
 to:   <2 x i32>
Changed type of: <2 x double> <double 2.000000e+02, double 2.000000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 200
 from: null
 to:   i64
Changed type of: i64 199
 from: null
 to:   i64
Changed type of: i64 9223372036854775806
 from: null
 to:   i64
Changed type of: i64 -4
 from: null
 to:   i64
Changed type of: <2 x double> <double -9.990000e+02, double -9.990000e+02>
 from: null
 to:   <2 x double>
Changed type of: i32 100
 from: null
 to:   i32
Changed type of: double 2.000000e+02
 from: null
 to:   double
Changed type of: double -9.990000e+02
 from: null
 to:   double
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 from: null
 to:   <2 x double>
Changed type of: <2 x double> zeroinitializer
 from: null
 to:   <2 x double>
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double undef
 from: null
 to:   double
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %alpha = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %beta = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [200 x double]]*
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 Changed type of: %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 Changed type of: %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 Changed type of: %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 Changed type of: %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 Changed type of: %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 Changed type of: %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 Changed type of: %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %13 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 Changed type of: %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 Changed type of: %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 Changed type of: %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 Changed type of: %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 Changed type of: br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 Changed type of: %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body48 [in fun] main
 Changed type of: br label %vector.body48 [in fun] main
  from: null
  to:   void
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 Changed type of: %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 Changed type of: %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 Changed type of: %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 Changed type of: %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 Changed type of: %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 Changed type of: %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 Creating initial type:
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 Changed type of: %index.next54 = add nuw i64 %index49, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 Changed type of: %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 Changed type of: %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 Changed type of: br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 Changed type of: %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body26.i [in fun] main
 Changed type of: br label %for.body26.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 Changed type of: %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 Changed type of: br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
  from: null
  to:   void
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 Changed type of: %min.iters.check = icmp ult i64 %14, 4 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 Changed type of: br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
 Changed type of: %n.vec = and i64 %14, -4 [in fun] main
  from: null
  to:   i64
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 Changed type of: %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
  from: null
  to:   i64
[Deducing from] br label %vector.body37 [in fun] main
 Changed type of: br label %vector.body37 [in fun] main
  from: null
  to:   void
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 Changed type of: %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 Changed type of: %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
  from: null
  to:   i64
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 Creating initial type:
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: null
  to:   ptr
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 Changed type of: %index.next39 = add nuw i64 %index38, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 Changed type of: %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 Changed type of: %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 Changed type of: br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 Changed type of: %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body43.i [in fun] main
 Changed type of: br label %for.body43.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 Changed type of: %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 Changed type of: %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
 Changed type of: %26 = trunc i64 %25 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
 Changed type of: %rem28.i = urem i32 %26, 100 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 Changed type of: %conv29.i = sitofp i32 %rem28.i to double [in fun] main
  from: null
  to:   double
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 Changed type of: %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 Changed type of: %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 Changed type of: %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 Changed type of: %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 Changed type of: %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 Changed type of: %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 Changed type of: %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 Changed type of: %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
 Changed type of: br label %for.cond1.preheader.i11 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 Changed type of: %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 Changed type of: %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: null
  to:   ptr
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: ptr
  to:   double*
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 Changed type of: br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i1
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 Changed type of: %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 Changed type of: %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
 Changed type of: br label %for.cond4.preheader.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body59 [in fun] main
 Changed type of: br label %vector.body59 [in fun] main
  from: null
  to:   void
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 Changed type of: %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 Changed type of: %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 Changed type of: %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 Changed type of: %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 Changed type of: %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 Creating initial type:
 Changed type of: %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 Creating initial type:
 Changed type of: %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 Creating initial type:
 Changed type of: %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 Creating initial type:
 Changed type of: %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 Changed type of: %index.next70 = add nuw i64 %index60, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 Changed type of: %43 = icmp eq i64 %index.next70, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 Changed type of: %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
 Changed type of: %mul.us.i = fmul double %27, %44 [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 Changed type of: br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 Creating initial type:
 Changed type of: %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 Changed type of: %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: null
  to:   ptr
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 Creating initial type:
 Changed type of: %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
  from: null
  to:   double
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 Creating initial type:
 Changed type of: %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 Changed type of: %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
 Changed type of: %niter.next.1 = add i64 %niter, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 Changed type of: %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 Changed type of: br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: null
  to:   ptr
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 Creating initial type:
 Changed type of: %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
  from: null
  to:   double
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 Creating initial type:
 Changed type of: %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 Changed type of: br label %for.cond4.for.end_crit_edge.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 Changed type of: %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 Changed type of: %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 Creating initial type:
 Changed type of: %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 Creating initial type:
 Changed type of: %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
  from: null
  to:   double
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 Changed type of: %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 Changed type of: %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 Changed type of: %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 Creating initial type:
 Changed type of: %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
 Changed type of: br label %for.cond1.preheader.i21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 Changed type of: %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i22 [in fun] main
 Changed type of: br label %for.body3.i22 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 Changed type of: %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
  from: null
  to:   i64
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
 Changed type of: %67 = trunc i64 %66 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
 Changed type of: %rem.i24 = urem i32 %67, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 Changed type of: %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 Changed type of: %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 Changed type of: %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 Changed type of: %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 Creating initial type:
 Changed type of: %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
  from: null
  to:   [100 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"target('C') scalar()\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,200))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,240))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %alpha = alloca double, align 8 [in fun] main
[Deducing from] %beta = alloca double, align 8 [in fun] main
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body48 [in fun] main
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
[Deducing from] br label %for.body26.i [in fun] main
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
[Deducing from] br label %vector.body37 [in fun] main
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
[Deducing from] br label %for.body43.i [in fun] main
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body59 [in fun] main
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
[Deducing from] br label %for.body3.i22 [in fun] main
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [21 x i8] c"scalar(range(0,240))\00"
 deduced type: [21 x i8]
[Value] [21 x i8] c"scalar(range(0,200))\00"
 deduced type: [21 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 deduced type: i32
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 deduced type: i32
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 deduced type: ptr
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 deduced type: i64
[Value] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 deduced type: i1
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 deduced type: i32
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 deduced type: i32
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 deduced type: i1
[Value] %rem.i24 = urem i32 %67, 20 [in fun] main
 deduced type: i32
[Value] %67 = trunc i64 %66 to i32 [in fun] main
 deduced type: i32
[Value] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body3.i22 [in fun] main
 deduced type: void
[Value] br label %for.cond1.preheader.i21 [in fun] main
 deduced type: void
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 deduced type: i1
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 deduced type: double
[Value] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 deduced type: double
[Value] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 deduced type: double
[Value] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 deduced type: double
[Value] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 deduced type: void
[Value] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 deduced type: void
[Value] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 deduced type: double*
[Value] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 deduced type: void
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 deduced type: i64
[Value] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 deduced type: double
[Value] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 deduced type: i1
[Value] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] i32 114
 deduced type: i32
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 deduced type: void
[Value] %13 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 deduced type: i1
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 deduced type: i1
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 deduced type: i1
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 deduced type: i64
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %alpha = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] i64 50
 deduced type: i64
[Value] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] i1 true
 deduced type: i1
[Value] <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 deduced type: <2 x double>
[Value] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] i64 3
 deduced type: i64
[Value] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 deduced type: double
[Value] <2 x double> zeroinitializer
 deduced type: <2 x double>
[Value] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 deduced type: <2 x double>*
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 deduced type: double
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] i32 32
 deduced type: i32
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] i64 16
 deduced type: i64
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] <2 x double> <double -9.990000e+02, double -9.990000e+02>
 deduced type: <2 x double>
[Value] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] <2 x double> <double 2.000000e+02, double 2.000000e+02>
 deduced type: <2 x double>
[Value] i32 109
 deduced type: i32
[Value] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 deduced type: i1
[Value] <2 x i32> <i32 100, i32 100>
 deduced type: <2 x i32>
[Value] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 deduced type: void
[Value] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] i64 4
 deduced type: i64
[Value] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 deduced type: i1
[Value] i32 31
 deduced type: i32
[Value] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 deduced type: i64
[Value] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] i64 9223372036854775806
 deduced type: i64
[Value] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 4096
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 deduced type: [100 x i8]*
[Value] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 deduced type: <2 x i64>
[Value] double 0.000000e+00
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 deduced type: i64
[Value] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] i32 100
 deduced type: i32
[Value] i32 105
 deduced type: i32
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 7
 deduced type: i64
[Value] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 deduced type: i64
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [21 x i8] c"target('C') scalar()\00"
 deduced type: [21 x i8]
[Value] i64 320000
 deduced type: i64
[Value] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 deduced type: <2 x double>
[Value] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 deduced type: i64
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] i64 4194560
 deduced type: i64
[Value] i64 200
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] i64 11
 deduced type: i64
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] void polybench_timer_start()
 deduced type: void
[Value] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 deduced type: i64
[Value] void exit(i32)
 deduced type: void
[Value] i64 -4
 deduced type: i64
[Value] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 deduced type: double*
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] i64 6
 deduced type: i64
[Value] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] double 1.500000e+00
 deduced type: double
[Value] i32 107
 deduced type: i32
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] i32 10
 deduced type: i32
[Value] void polybench_timer_stop()
 deduced type: void
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 deduced type: i64
[Value] i64 384000
 deduced type: i64
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 deduced type: i64
[Value] i64 1
 deduced type: i64
[Value] void polybench_timer_print()
 deduced type: void
[Value] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 deduced type: double
[Value] i32 108
 deduced type: i32
[Value] double 2.000000e+02
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 deduced type: double
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
 deduced type: [100 x i8]
[Value] i64 0
 deduced type: i64
[Value] i64 240
 deduced type: i64
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 deduced type: i64
[Value] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 deduced type: [200 x [200 x double]]*
[Value] double 1.000000e+01
 deduced type: double
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] i32 1
 deduced type: i32
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 deduced type: i64
[Value] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] i32 printf(ptr)
 deduced type: i32
[Value] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] i32 20
 deduced type: i32
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 deduced type: i1
[Value] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 deduced type: i64
[Value] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 deduced type: void
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] i32 106
 deduced type: i32
[Value] double -9.990000e+02
 deduced type: double
[Value] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 deduced type: i1
[Value] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 deduced type: <2 x double>
[Value] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 deduced type: <2 x i64>
[Value] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 deduced type: i64
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 deduced type: i1
[Value] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body26.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 deduced type: void
[Value] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 deduced type: void
[Value] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 deduced type: i64
[Value] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 deduced type: i1
[Value] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 deduced type: void
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 deduced type: i64
[Value] double 1.200000e+00
 deduced type: double
[Value] i64 199
 deduced type: i64
[Value] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 deduced type: i64
[Value] i64 5
 deduced type: i64
[Value] br label %vector.body37 [in fun] main
 deduced type: void
[Value] %niter.next.1 = add i64 %niter, 2 [in fun] main
 deduced type: i64
[Value] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 deduced type: i1
[Value] br label %for.cond1.preheader.i11 [in fun] main
 deduced type: void
[Value] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 deduced type: void
[Value] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 deduced type: <2 x double>*
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] br label %vector.body48 [in fun] main
 deduced type: void
[Value] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 deduced type: i1
[Value] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] double undef
 deduced type: double
[Value] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 deduced type: i64
[Value] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %26 = trunc i64 %25 to i32 [in fun] main
 deduced type: i32
[Value] %rem28.i = urem i32 %26, 100 [in fun] main
 deduced type: i32
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 deduced type: double
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 deduced type: double
[Value] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] ptr null
 deduced type: ptr
[Value] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 deduced type: i64
[Value] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 deduced type: i64
[Value] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 deduced type: i64
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 deduced type: i1
[Value] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 deduced type: i1
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 deduced type: i64
[Value] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 deduced type: void
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] %mul.us.i = fmul double %27, %44 [in fun] main
 deduced type: double
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i1
[Value] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %n.vec = and i64 %14, -4 [in fun] main
 deduced type: i64
[Value] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] br label %for.cond4.preheader.us.i [in fun] main
 deduced type: void
[Value] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 deduced type: <2 x double>
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 deduced type: <2 x double>
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 deduced type: <2 x double>
[Value] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 deduced type: <2 x double>
[Value] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 deduced type: i64
[Value] %beta = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 deduced type: void
[Value] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i64 8
 deduced type: i64
[Value] br label %vector.body59 [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 deduced type: double*
[Value] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 deduced type: double
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body43.i [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 deduced type: double*
[Value] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 from: null
 to:   [100 x i8]*
Changed type of: i32 105
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i32 106
 from: null
 to:   i32
Changed type of: i64 384000
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 107
 from: null
 to:   i32
Changed type of: i64 320000
 from: null
 to:   i64
Changed type of: i32 108
 from: null
 to:   i32
Changed type of: i32 109
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 31
 from: null
 to:   i32
Changed type of: @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 32
 from: null
 to:   i32
Changed type of: double 1.500000e+00
 from: null
 to:   double
Changed type of: double 1.200000e+00
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x i32> <i32 100, i32 100>
 from: null
 to:   <2 x i32>
Changed type of: <2 x double> <double 2.000000e+02, double 2.000000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 200
 from: null
 to:   i64
Changed type of: i64 199
 from: null
 to:   i64
Changed type of: i64 9223372036854775806
 from: null
 to:   i64
Changed type of: i64 -4
 from: null
 to:   i64
Changed type of: <2 x double> <double -9.990000e+02, double -9.990000e+02>
 from: null
 to:   <2 x double>
Changed type of: i32 100
 from: null
 to:   i32
Changed type of: double 2.000000e+02
 from: null
 to:   double
Changed type of: double -9.990000e+02
 from: null
 to:   double
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 from: null
 to:   <2 x double>
Changed type of: <2 x double> zeroinitializer
 from: null
 to:   <2 x double>
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double undef
 from: null
 to:   double
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %alpha = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %beta = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [200 x double]]*
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 Changed type of: %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 Changed type of: %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 Changed type of: %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 Changed type of: %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 Changed type of: %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 Changed type of: %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 Changed type of: %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %13 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 Changed type of: %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 Changed type of: %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 Changed type of: %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 Changed type of: %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 Changed type of: br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 Changed type of: %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body48 [in fun] main
 Changed type of: br label %vector.body48 [in fun] main
  from: null
  to:   void
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 Changed type of: %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 Changed type of: %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 Changed type of: %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 Changed type of: %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 Changed type of: %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 Changed type of: %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 Creating initial type:
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 Changed type of: %index.next54 = add nuw i64 %index49, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 Changed type of: %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 Changed type of: %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 Changed type of: br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 Changed type of: %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body26.i [in fun] main
 Changed type of: br label %for.body26.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 Changed type of: %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 Changed type of: br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
  from: null
  to:   void
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 Changed type of: %min.iters.check = icmp ult i64 %14, 4 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 Changed type of: br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
 Changed type of: %n.vec = and i64 %14, -4 [in fun] main
  from: null
  to:   i64
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 Changed type of: %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
  from: null
  to:   i64
[Deducing from] br label %vector.body37 [in fun] main
 Changed type of: br label %vector.body37 [in fun] main
  from: null
  to:   void
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 Changed type of: %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 Changed type of: %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
  from: null
  to:   i64
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 Creating initial type:
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: null
  to:   ptr
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 Changed type of: %index.next39 = add nuw i64 %index38, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 Changed type of: %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 Changed type of: %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 Changed type of: br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 Changed type of: %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body43.i [in fun] main
 Changed type of: br label %for.body43.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 Changed type of: %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 Changed type of: %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
 Changed type of: %26 = trunc i64 %25 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
 Changed type of: %rem28.i = urem i32 %26, 100 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 Changed type of: %conv29.i = sitofp i32 %rem28.i to double [in fun] main
  from: null
  to:   double
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 Changed type of: %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 Changed type of: %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 Changed type of: %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 Changed type of: %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 Changed type of: %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 Changed type of: %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 Changed type of: %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 Changed type of: %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
 Changed type of: br label %for.cond1.preheader.i11 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 Changed type of: %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 Changed type of: %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: null
  to:   ptr
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: ptr
  to:   double*
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 Changed type of: br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i1
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 Changed type of: %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 Changed type of: %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
 Changed type of: br label %for.cond4.preheader.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body59 [in fun] main
 Changed type of: br label %vector.body59 [in fun] main
  from: null
  to:   void
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 Changed type of: %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 Changed type of: %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 Changed type of: %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 Changed type of: %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 Changed type of: %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 Creating initial type:
 Changed type of: %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 Creating initial type:
 Changed type of: %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 Creating initial type:
 Changed type of: %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 Creating initial type:
 Changed type of: %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 Changed type of: %index.next70 = add nuw i64 %index60, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 Changed type of: %43 = icmp eq i64 %index.next70, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 Changed type of: %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
 Changed type of: %mul.us.i = fmul double %27, %44 [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 Changed type of: br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 Creating initial type:
 Changed type of: %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 Changed type of: %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: null
  to:   ptr
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 Creating initial type:
 Changed type of: %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
  from: null
  to:   double
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 Creating initial type:
 Changed type of: %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 Changed type of: %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
 Changed type of: %niter.next.1 = add i64 %niter, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 Changed type of: %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 Changed type of: br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: null
  to:   ptr
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 Creating initial type:
 Changed type of: %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
  from: null
  to:   double
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 Creating initial type:
 Changed type of: %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 Changed type of: br label %for.cond4.for.end_crit_edge.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 Changed type of: %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 Changed type of: %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 Creating initial type:
 Changed type of: %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 Creating initial type:
 Changed type of: %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
  from: null
  to:   double
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 Changed type of: %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 Changed type of: %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 Changed type of: %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 Creating initial type:
 Changed type of: %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
 Changed type of: br label %for.cond1.preheader.i21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 Changed type of: %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i22 [in fun] main
 Changed type of: br label %for.body3.i22 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 Changed type of: %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
  from: null
  to:   i64
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
 Changed type of: %67 = trunc i64 %66 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
 Changed type of: %rem.i24 = urem i32 %67, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 Changed type of: %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 Changed type of: %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 Changed type of: %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 Changed type of: %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 Creating initial type:
 Changed type of: %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
  from: null
  to:   [100 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"target('C') scalar()\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,200))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,240))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %alpha = alloca double, align 8 [in fun] main
[Deducing from] %beta = alloca double, align 8 [in fun] main
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body48 [in fun] main
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
[Deducing from] br label %for.body26.i [in fun] main
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
[Deducing from] br label %vector.body37 [in fun] main
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
[Deducing from] br label %for.body43.i [in fun] main
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body59 [in fun] main
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
[Deducing from] br label %for.body3.i22 [in fun] main
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [21 x i8] c"scalar(range(0,200))\00"
 deduced type: [21 x i8]
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 deduced type: void
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 deduced type: i32
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 deduced type: void
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] [21 x i8] c"scalar(range(0,240))\00"
 deduced type: [21 x i8]
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 deduced type: ptr
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 deduced type: i64
[Value] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 deduced type: i64
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 deduced type: i32
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 deduced type: i1
[Value] %rem.i24 = urem i32 %67, 20 [in fun] main
 deduced type: i32
[Value] %67 = trunc i64 %66 to i32 [in fun] main
 deduced type: i32
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 deduced type: i64
[Value] br label %for.body3.i22 [in fun] main
 deduced type: void
[Value] br label %for.cond1.preheader.i21 [in fun] main
 deduced type: void
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 deduced type: double
[Value] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 deduced type: void
[Value] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 deduced type: double
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 deduced type: double*
[Value] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 deduced type: void
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 deduced type: i64
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 deduced type: double
[Value] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 deduced type: i1
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] i32 114
 deduced type: i32
[Value] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 deduced type: void
[Value] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 deduced type: <2 x i64>
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 deduced type: i1
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 deduced type: i64
[Value] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 deduced type: [200 x [200 x double]]*
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 deduced type: i1
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 deduced type: i64
[Value] i64 50
 deduced type: i64
[Value] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 deduced type: double
[Value] <2 x double> zeroinitializer
 deduced type: <2 x double>
[Value] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 deduced type: <2 x double>*
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] i64 16
 deduced type: i64
[Value] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 deduced type: i64
[Value] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 deduced type: i64
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] double 1.000000e+01
 deduced type: double
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] i32 109
 deduced type: i32
[Value] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 deduced type: i1
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] i64 4194560
 deduced type: i64
[Value] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 deduced type: double
[Value] i64 11
 deduced type: i64
[Value] <2 x double> <double 2.000000e+02, double 2.000000e+02>
 deduced type: <2 x double>
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 deduced type: i32
[Value] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 deduced type: double
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 deduced type: void
[Value] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] i64 4
 deduced type: i64
[Value] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 deduced type: i1
[Value] i32 31
 deduced type: i32
[Value] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 deduced type: i64
[Value] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] i64 9223372036854775806
 deduced type: i64
[Value] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
 deduced type: [100 x i8]
[Value] i64 0
 deduced type: i64
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] i64 240
 deduced type: i64
[Value] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] <2 x i32> <i32 100, i32 100>
 deduced type: <2 x i32>
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 deduced type: i64
[Value] double undef
 deduced type: double
[Value] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 deduced type: [100 x i8]*
[Value] double 0.000000e+00
 deduced type: double
[Value] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 deduced type: i64
[Value] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: double
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] %13 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 deduced type: i1
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] i32 100
 deduced type: i32
[Value] i32 105
 deduced type: i32
[Value] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 deduced type: i64
[Value] i64 7
 deduced type: i64
[Value] i1 true
 deduced type: i1
[Value] <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 deduced type: <2 x double>
[Value] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 deduced type: <2 x double>*
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [21 x i8] c"target('C') scalar()\00"
 deduced type: [21 x i8]
[Value] i64 320000
 deduced type: i64
[Value] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 deduced type: <2 x double>
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] i64 4096
 deduced type: i64
[Value] i64 200
 deduced type: i64
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 deduced type: i32
[Value] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 deduced type: double*
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] i64 6
 deduced type: i64
[Value] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] double 1.500000e+00
 deduced type: double
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] %alpha = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] void free(ptr)
 deduced type: void
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 deduced type: void
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] %mul.us.i = fmul double %27, %44 [in fun] main
 deduced type: double
[Value] i32 107
 deduced type: i32
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] i32 printf(ptr)
 deduced type: i32
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] i32 10
 deduced type: i32
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] i32 32
 deduced type: i32
[Value] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 deduced type: i64
[Value] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 deduced type: i64
[Value] i64 384000
 deduced type: i64
[Value] i64 -4
 deduced type: i64
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 deduced type: i64
[Value] i64 1
 deduced type: i64
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] <2 x double> <double -9.990000e+02, double -9.990000e+02>
 deduced type: <2 x double>
[Value] void polybench_timer_start()
 deduced type: void
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 deduced type: double
[Value] i32 108
 deduced type: i32
[Value] double 2.000000e+02
 deduced type: double
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] i64 3
 deduced type: i64
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 deduced type: double
[Value] void polybench_timer_print()
 deduced type: void
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] i32 1
 deduced type: i32
[Value] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 deduced type: i64
[Value] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] i32 20
 deduced type: i32
[Value] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 deduced type: i1
[Value] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 deduced type: i64
[Value] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 deduced type: void
[Value] i32 106
 deduced type: i32
[Value] double -9.990000e+02
 deduced type: double
[Value] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 deduced type: i1
[Value] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 deduced type: <2 x double>
[Value] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 deduced type: <2 x i64>
[Value] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 deduced type: <2 x i64>
[Value] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 deduced type: void
[Value] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 deduced type: double*
[Value] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 deduced type: i64
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body26.i [in fun] main
 deduced type: void
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 deduced type: i64
[Value] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 deduced type: i1
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 deduced type: i1
[Value] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 deduced type: void
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] double 1.200000e+00
 deduced type: double
[Value] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 deduced type: i64
[Value] i64 199
 deduced type: i64
[Value] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 deduced type: i64
[Value] i64 5
 deduced type: i64
[Value] br label %vector.body37 [in fun] main
 deduced type: void
[Value] %niter.next.1 = add i64 %niter, 2 [in fun] main
 deduced type: i64
[Value] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 deduced type: i1
[Value] br label %for.cond1.preheader.i11 [in fun] main
 deduced type: void
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] void exit(i32)
 deduced type: void
[Value] br label %vector.body48 [in fun] main
 deduced type: void
[Value] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 deduced type: i1
[Value] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %26 = trunc i64 %25 to i32 [in fun] main
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %rem28.i = urem i32 %26, 100 [in fun] main
 deduced type: i32
[Value] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 deduced type: double
[Value] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 deduced type: double
[Value] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] ptr null
 deduced type: ptr
[Value] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 deduced type: i64
[Value] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 deduced type: i64
[Value] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 deduced type: i64
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 deduced type: i1
[Value] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 deduced type: i1
[Value] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i1
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 deduced type: i32
[Value] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] %n.vec = and i64 %14, -4 [in fun] main
 deduced type: i64
[Value] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] i32 0
 deduced type: i32
[Value] <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] br label %for.cond4.preheader.us.i [in fun] main
 deduced type: void
[Value] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 deduced type: <2 x double>
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 deduced type: <2 x double>
[Value] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 deduced type: <2 x double>
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %beta = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 deduced type: void
[Value] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i64 8
 deduced type: i64
[Value] br label %vector.body59 [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 deduced type: double*
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 deduced type: double
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 deduced type: i64
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.body43.i [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 deduced type: double*
[Value] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 from: null
 to:   [100 x i8]*
Changed type of: i32 105
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i32 106
 from: null
 to:   i32
Changed type of: i64 384000
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 107
 from: null
 to:   i32
Changed type of: i64 320000
 from: null
 to:   i64
Changed type of: i32 108
 from: null
 to:   i32
Changed type of: i32 109
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 31
 from: null
 to:   i32
Changed type of: @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 32
 from: null
 to:   i32
Changed type of: double 1.500000e+00
 from: null
 to:   double
Changed type of: double 1.200000e+00
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x i32> <i32 100, i32 100>
 from: null
 to:   <2 x i32>
Changed type of: <2 x double> <double 2.000000e+02, double 2.000000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 200
 from: null
 to:   i64
Changed type of: i64 199
 from: null
 to:   i64
Changed type of: i64 9223372036854775806
 from: null
 to:   i64
Changed type of: i64 -4
 from: null
 to:   i64
Changed type of: <2 x double> <double -9.990000e+02, double -9.990000e+02>
 from: null
 to:   <2 x double>
Changed type of: i32 100
 from: null
 to:   i32
Changed type of: double 2.000000e+02
 from: null
 to:   double
Changed type of: double -9.990000e+02
 from: null
 to:   double
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 from: null
 to:   <2 x double>
Changed type of: <2 x double> zeroinitializer
 from: null
 to:   <2 x double>
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double undef
 from: null
 to:   double
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %alpha = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %beta = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [200 x double]]*
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 Changed type of: %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 Changed type of: %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 Changed type of: %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 Changed type of: %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 Changed type of: %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 Changed type of: %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 Changed type of: %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %13 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 Changed type of: %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 Changed type of: %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 Changed type of: %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 Changed type of: %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 Changed type of: br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 Changed type of: %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body48 [in fun] main
 Changed type of: br label %vector.body48 [in fun] main
  from: null
  to:   void
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 Changed type of: %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 Changed type of: %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 Changed type of: %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 Changed type of: %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 Changed type of: %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 Changed type of: %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 Creating initial type:
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 Changed type of: %index.next54 = add nuw i64 %index49, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 Changed type of: %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 Changed type of: %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 Changed type of: br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 Changed type of: %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body26.i [in fun] main
 Changed type of: br label %for.body26.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 Changed type of: %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 Changed type of: br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
  from: null
  to:   void
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 Changed type of: %min.iters.check = icmp ult i64 %14, 4 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 Changed type of: br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
 Changed type of: %n.vec = and i64 %14, -4 [in fun] main
  from: null
  to:   i64
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 Changed type of: %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
  from: null
  to:   i64
[Deducing from] br label %vector.body37 [in fun] main
 Changed type of: br label %vector.body37 [in fun] main
  from: null
  to:   void
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 Changed type of: %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 Changed type of: %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
  from: null
  to:   i64
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 Creating initial type:
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: null
  to:   ptr
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 Changed type of: %index.next39 = add nuw i64 %index38, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 Changed type of: %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 Changed type of: %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 Changed type of: br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 Changed type of: %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body43.i [in fun] main
 Changed type of: br label %for.body43.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 Changed type of: %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 Changed type of: %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
 Changed type of: %26 = trunc i64 %25 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
 Changed type of: %rem28.i = urem i32 %26, 100 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 Changed type of: %conv29.i = sitofp i32 %rem28.i to double [in fun] main
  from: null
  to:   double
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 Changed type of: %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 Changed type of: %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 Changed type of: %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 Changed type of: %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 Changed type of: %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 Changed type of: %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 Changed type of: %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 Changed type of: %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
 Changed type of: br label %for.cond1.preheader.i11 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 Changed type of: %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 Changed type of: %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: null
  to:   ptr
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: ptr
  to:   double*
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 Changed type of: br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i1
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 Changed type of: %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 Changed type of: %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
 Changed type of: br label %for.cond4.preheader.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body59 [in fun] main
 Changed type of: br label %vector.body59 [in fun] main
  from: null
  to:   void
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 Changed type of: %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 Changed type of: %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 Changed type of: %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 Changed type of: %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 Changed type of: %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 Creating initial type:
 Changed type of: %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 Creating initial type:
 Changed type of: %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 Creating initial type:
 Changed type of: %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 Creating initial type:
 Changed type of: %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 Changed type of: %index.next70 = add nuw i64 %index60, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 Changed type of: %43 = icmp eq i64 %index.next70, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 Changed type of: %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
 Changed type of: %mul.us.i = fmul double %27, %44 [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 Changed type of: br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 Creating initial type:
 Changed type of: %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 Changed type of: %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: null
  to:   ptr
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 Creating initial type:
 Changed type of: %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
  from: null
  to:   double
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 Creating initial type:
 Changed type of: %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 Changed type of: %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
 Changed type of: %niter.next.1 = add i64 %niter, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 Changed type of: %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 Changed type of: br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: null
  to:   ptr
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 Creating initial type:
 Changed type of: %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
  from: null
  to:   double
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 Creating initial type:
 Changed type of: %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 Changed type of: br label %for.cond4.for.end_crit_edge.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 Changed type of: %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 Changed type of: %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 Creating initial type:
 Changed type of: %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 Creating initial type:
 Changed type of: %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
  from: null
  to:   double
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 Changed type of: %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 Changed type of: %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 Changed type of: %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 Creating initial type:
 Changed type of: %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
 Changed type of: br label %for.cond1.preheader.i21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 Changed type of: %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i22 [in fun] main
 Changed type of: br label %for.body3.i22 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 Changed type of: %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
  from: null
  to:   i64
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
 Changed type of: %67 = trunc i64 %66 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
 Changed type of: %rem.i24 = urem i32 %67, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 Changed type of: %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 Changed type of: %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 Changed type of: %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 Changed type of: %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 Creating initial type:
 Changed type of: %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
  from: null
  to:   [100 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"target('C') scalar()\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,200))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,240))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %alpha = alloca double, align 8 [in fun] main
[Deducing from] %beta = alloca double, align 8 [in fun] main
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body48 [in fun] main
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
[Deducing from] br label %for.body26.i [in fun] main
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
[Deducing from] br label %vector.body37 [in fun] main
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
[Deducing from] br label %for.body43.i [in fun] main
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body59 [in fun] main
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
[Deducing from] br label %for.body3.i22 [in fun] main
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [21 x i8] c"scalar(range(0,240))\00"
 deduced type: [21 x i8]
[Value] [21 x i8] c"scalar(range(0,200))\00"
 deduced type: [21 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 deduced type: i32
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 deduced type: void
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 deduced type: i32
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 deduced type: ptr
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 deduced type: i64
[Value] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 deduced type: i64
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 deduced type: i32
[Value] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 deduced type: i32
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 deduced type: i1
[Value] %rem.i24 = urem i32 %67, 20 [in fun] main
 deduced type: i32
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 deduced type: i64
[Value] br label %for.body3.i22 [in fun] main
 deduced type: void
[Value] br label %for.cond1.preheader.i21 [in fun] main
 deduced type: void
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 deduced type: i1
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 deduced type: double
[Value] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 deduced type: double
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 deduced type: double
[Value] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 deduced type: void
[Value] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 deduced type: double
[Value] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 deduced type: void
[Value] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 deduced type: double
[Value] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 deduced type: double*
[Value] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 deduced type: void
[Value] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 deduced type: i64
[Value] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 deduced type: double
[Value] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 deduced type: i1
[Value] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] i32 114
 deduced type: i32
[Value] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 deduced type: void
[Value] %13 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 deduced type: i1
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 deduced type: <2 x i64>
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 deduced type: i1
[Value] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %67 = trunc i64 %66 to i32 [in fun] main
 deduced type: i32
[Value] double 1.000000e+01
 deduced type: double
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 deduced type: i1
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 deduced type: i64
[Value] <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %alpha = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] void exit(i32)
 deduced type: void
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 105
 deduced type: i32
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 deduced type: i64
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] i1 true
 deduced type: i1
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] <2 x double> <double 2.000000e+02, double 2.000000e+02>
 deduced type: <2 x double>
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 deduced type: double
[Value] <2 x double> zeroinitializer
 deduced type: <2 x double>
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 deduced type: i32
[Value] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 deduced type: <2 x double>*
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 deduced type: i64
[Value] i64 4096
 deduced type: i64
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] i64 6
 deduced type: i64
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] i32 109
 deduced type: i32
[Value] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 deduced type: i1
[Value] <2 x i32> <i32 100, i32 100>
 deduced type: <2 x i32>
[Value] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 deduced type: void
[Value] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] i64 4
 deduced type: i64
[Value] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 deduced type: i1
[Value] i32 31
 deduced type: i32
[Value] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 deduced type: i64
[Value] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] i64 9223372036854775806
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
 deduced type: [100 x i8]
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] i64 0
 deduced type: i64
[Value] i64 240
 deduced type: i64
[Value] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 deduced type: [100 x i8]*
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 deduced type: <2 x i64>
[Value] double 0.000000e+00
 deduced type: double
[Value] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 deduced type: i64
[Value] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] i32 100
 deduced type: i32
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [21 x i8] c"target('C') scalar()\00"
 deduced type: [21 x i8]
[Value] i64 320000
 deduced type: i64
[Value] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 deduced type: <2 x double>
[Value] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] i64 4194560
 deduced type: i64
[Value] i64 200
 deduced type: i64
[Value] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] i64 11
 deduced type: i64
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] i64 16
 deduced type: i64
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] double 1.500000e+00
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i32 107
 deduced type: i32
[Value] i64 5
 deduced type: i64
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] i32 10
 deduced type: i32
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] i32 32
 deduced type: i32
[Value] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 deduced type: i64
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] i64 384000
 deduced type: i64
[Value] void polybench_timer_start()
 deduced type: void
[Value] i64 -4
 deduced type: i64
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 deduced type: i64
[Value] i64 1
 deduced type: i64
[Value] <2 x double> <double -9.990000e+02, double -9.990000e+02>
 deduced type: <2 x double>
[Value] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 deduced type: double
[Value] i32 108
 deduced type: i32
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] double 2.000000e+02
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] i64 3
 deduced type: i64
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 deduced type: double
[Value] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 deduced type: <2 x double>
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 deduced type: i64
[Value] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 deduced type: [200 x [200 x double]]*
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] i32 1
 deduced type: i32
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 deduced type: i1
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 deduced type: i64
[Value] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] void polybench_timer_print()
 deduced type: void
[Value] %beta = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 deduced type: void
[Value] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] i64 7
 deduced type: i64
[Value] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] i32 20
 deduced type: i32
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 deduced type: i1
[Value] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 deduced type: i64
[Value] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 deduced type: void
[Value] i32 106
 deduced type: i32
[Value] double -9.990000e+02
 deduced type: double
[Value] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 deduced type: i1
[Value] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 deduced type: <2 x double>
[Value] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 deduced type: <2 x i64>
[Value] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 deduced type: i64
[Value] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 deduced type: i1
[Value] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br label %for.body26.i [in fun] main
 deduced type: void
[Value] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 deduced type: void
[Value] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 deduced type: i64
[Value] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 deduced type: i1
[Value] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 deduced type: i1
[Value] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 deduced type: void
[Value] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 deduced type: i64
[Value] double 1.200000e+00
 deduced type: double
[Value] i64 199
 deduced type: i64
[Value] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 deduced type: i64
[Value] i64 50
 deduced type: i64
[Value] br label %vector.body37 [in fun] main
 deduced type: void
[Value] %niter.next.1 = add i64 %niter, 2 [in fun] main
 deduced type: i64
[Value] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 deduced type: i1
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.cond1.preheader.i11 [in fun] main
 deduced type: void
[Value] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 deduced type: <2 x double>*
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] br label %vector.body48 [in fun] main
 deduced type: void
[Value] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 deduced type: i1
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] double undef
 deduced type: double
[Value] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 deduced type: i64
[Value] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] %26 = trunc i64 %25 to i32 [in fun] main
 deduced type: i32
[Value] %rem28.i = urem i32 %26, 100 [in fun] main
 deduced type: i32
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 deduced type: double
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 deduced type: double
[Value] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] ptr null
 deduced type: ptr
[Value] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 deduced type: i64
[Value] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 deduced type: i64
[Value] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 deduced type: i64
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 deduced type: i1
[Value] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 deduced type: i64
[Value] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 deduced type: void
[Value] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] %mul.us.i = fmul double %27, %44 [in fun] main
 deduced type: double
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i1
[Value] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %n.vec = and i64 %14, -4 [in fun] main
 deduced type: i64
[Value] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 printf(ptr)
 deduced type: i32
[Value] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] i32 0
 deduced type: i32
[Value] <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] br label %for.cond4.preheader.us.i [in fun] main
 deduced type: void
[Value] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 deduced type: <2 x double>
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 deduced type: <2 x double>
[Value] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 deduced type: <2 x double>
[Value] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 deduced type: <2 x double>
[Value] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 deduced type: i64
[Value] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i64 8
 deduced type: i64
[Value] br label %vector.body59 [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 deduced type: double*
[Value] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 deduced type: double
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body43.i [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 deduced type: double*
[Value] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 from: null
 to:   [100 x i8]*
Changed type of: i32 105
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i32 106
 from: null
 to:   i32
Changed type of: i64 384000
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 107
 from: null
 to:   i32
Changed type of: i64 320000
 from: null
 to:   i64
Changed type of: i32 108
 from: null
 to:   i32
Changed type of: i32 109
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 31
 from: null
 to:   i32
Changed type of: @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 32
 from: null
 to:   i32
Changed type of: double 1.500000e+00
 from: null
 to:   double
Changed type of: double 1.200000e+00
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x i32> <i32 100, i32 100>
 from: null
 to:   <2 x i32>
Changed type of: <2 x double> <double 2.000000e+02, double 2.000000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 200
 from: null
 to:   i64
Changed type of: i64 199
 from: null
 to:   i64
Changed type of: i64 9223372036854775806
 from: null
 to:   i64
Changed type of: i64 -4
 from: null
 to:   i64
Changed type of: <2 x double> <double -9.990000e+02, double -9.990000e+02>
 from: null
 to:   <2 x double>
Changed type of: i32 100
 from: null
 to:   i32
Changed type of: double 2.000000e+02
 from: null
 to:   double
Changed type of: double -9.990000e+02
 from: null
 to:   double
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 from: null
 to:   <2 x double>
Changed type of: <2 x double> zeroinitializer
 from: null
 to:   <2 x double>
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double undef
 from: null
 to:   double
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %alpha = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %beta = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [200 x double]]*
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 Changed type of: %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 Changed type of: %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 Changed type of: %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 Changed type of: %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 Changed type of: %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 Changed type of: %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 Changed type of: %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %13 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 Changed type of: %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 Changed type of: %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 Changed type of: %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 Changed type of: %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 Changed type of: br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 Changed type of: %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body48 [in fun] main
 Changed type of: br label %vector.body48 [in fun] main
  from: null
  to:   void
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 Changed type of: %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 Changed type of: %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 Changed type of: %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 Changed type of: %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 Changed type of: %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 Changed type of: %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 Creating initial type:
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 Changed type of: %index.next54 = add nuw i64 %index49, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 Changed type of: %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 Changed type of: %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 Changed type of: br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 Changed type of: %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body26.i [in fun] main
 Changed type of: br label %for.body26.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 Changed type of: %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 Changed type of: br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
  from: null
  to:   void
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 Changed type of: %min.iters.check = icmp ult i64 %14, 4 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 Changed type of: br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
 Changed type of: %n.vec = and i64 %14, -4 [in fun] main
  from: null
  to:   i64
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 Changed type of: %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
  from: null
  to:   i64
[Deducing from] br label %vector.body37 [in fun] main
 Changed type of: br label %vector.body37 [in fun] main
  from: null
  to:   void
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 Changed type of: %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 Changed type of: %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
  from: null
  to:   i64
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 Creating initial type:
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: null
  to:   ptr
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 Changed type of: %index.next39 = add nuw i64 %index38, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 Changed type of: %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 Changed type of: %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 Changed type of: br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 Changed type of: %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body43.i [in fun] main
 Changed type of: br label %for.body43.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 Changed type of: %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 Changed type of: %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
 Changed type of: %26 = trunc i64 %25 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
 Changed type of: %rem28.i = urem i32 %26, 100 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 Changed type of: %conv29.i = sitofp i32 %rem28.i to double [in fun] main
  from: null
  to:   double
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 Changed type of: %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 Changed type of: %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 Changed type of: %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 Changed type of: %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 Changed type of: %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 Changed type of: %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 Changed type of: %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 Changed type of: %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
 Changed type of: br label %for.cond1.preheader.i11 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 Changed type of: %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 Changed type of: %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: null
  to:   ptr
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: ptr
  to:   double*
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 Changed type of: br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i1
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 Changed type of: %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 Changed type of: %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
 Changed type of: br label %for.cond4.preheader.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body59 [in fun] main
 Changed type of: br label %vector.body59 [in fun] main
  from: null
  to:   void
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 Changed type of: %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 Changed type of: %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 Changed type of: %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 Changed type of: %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 Changed type of: %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 Creating initial type:
 Changed type of: %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 Creating initial type:
 Changed type of: %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 Creating initial type:
 Changed type of: %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 Creating initial type:
 Changed type of: %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 Changed type of: %index.next70 = add nuw i64 %index60, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 Changed type of: %43 = icmp eq i64 %index.next70, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 Changed type of: %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
 Changed type of: %mul.us.i = fmul double %27, %44 [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 Changed type of: br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 Creating initial type:
 Changed type of: %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 Changed type of: %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: null
  to:   ptr
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 Creating initial type:
 Changed type of: %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
  from: null
  to:   double
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 Creating initial type:
 Changed type of: %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 Changed type of: %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
 Changed type of: %niter.next.1 = add i64 %niter, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 Changed type of: %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 Changed type of: br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: null
  to:   ptr
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 Creating initial type:
 Changed type of: %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
  from: null
  to:   double
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 Creating initial type:
 Changed type of: %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 Changed type of: br label %for.cond4.for.end_crit_edge.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 Changed type of: %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 Changed type of: %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 Creating initial type:
 Changed type of: %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 Creating initial type:
 Changed type of: %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
  from: null
  to:   double
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 Changed type of: %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 Changed type of: %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 Changed type of: %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 Creating initial type:
 Changed type of: %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
 Changed type of: br label %for.cond1.preheader.i21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 Changed type of: %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i22 [in fun] main
 Changed type of: br label %for.body3.i22 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 Changed type of: %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
  from: null
  to:   i64
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
 Changed type of: %67 = trunc i64 %66 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
 Changed type of: %rem.i24 = urem i32 %67, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 Changed type of: %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 Changed type of: %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 Changed type of: %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 Changed type of: %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 Creating initial type:
 Changed type of: %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
  from: null
  to:   [100 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"target('C') scalar()\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,200))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,240))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %alpha = alloca double, align 8 [in fun] main
[Deducing from] %beta = alloca double, align 8 [in fun] main
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body48 [in fun] main
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
[Deducing from] br label %for.body26.i [in fun] main
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
[Deducing from] br label %vector.body37 [in fun] main
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
[Deducing from] br label %for.body43.i [in fun] main
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body59 [in fun] main
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
[Deducing from] br label %for.body3.i22 [in fun] main
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [21 x i8] c"scalar(range(0,240))\00"
 deduced type: [21 x i8]
[Value] [21 x i8] c"scalar(range(0,200))\00"
 deduced type: [21 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 deduced type: i32
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 deduced type: i32
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 deduced type: ptr
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 deduced type: i64
[Value] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 deduced type: i1
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 deduced type: i32
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 deduced type: i32
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 deduced type: i1
[Value] %rem.i24 = urem i32 %67, 20 [in fun] main
 deduced type: i32
[Value] %67 = trunc i64 %66 to i32 [in fun] main
 deduced type: i32
[Value] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body3.i22 [in fun] main
 deduced type: void
[Value] br label %for.cond1.preheader.i21 [in fun] main
 deduced type: void
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 deduced type: i1
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 deduced type: double
[Value] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 deduced type: double
[Value] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 deduced type: double
[Value] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 deduced type: double
[Value] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 deduced type: void
[Value] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 deduced type: void
[Value] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 deduced type: double*
[Value] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 deduced type: void
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 deduced type: i64
[Value] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 deduced type: double
[Value] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 deduced type: i1
[Value] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] i32 114
 deduced type: i32
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 deduced type: void
[Value] %13 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 deduced type: i1
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 deduced type: i1
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 deduced type: i1
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 deduced type: i64
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %alpha = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] i64 50
 deduced type: i64
[Value] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] i1 true
 deduced type: i1
[Value] <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 deduced type: <2 x double>
[Value] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] i64 3
 deduced type: i64
[Value] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 deduced type: double
[Value] <2 x double> zeroinitializer
 deduced type: <2 x double>
[Value] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 deduced type: <2 x double>*
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 deduced type: double
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] i32 32
 deduced type: i32
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] i64 16
 deduced type: i64
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] <2 x double> <double -9.990000e+02, double -9.990000e+02>
 deduced type: <2 x double>
[Value] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] <2 x double> <double 2.000000e+02, double 2.000000e+02>
 deduced type: <2 x double>
[Value] i32 109
 deduced type: i32
[Value] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 deduced type: i1
[Value] <2 x i32> <i32 100, i32 100>
 deduced type: <2 x i32>
[Value] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 deduced type: void
[Value] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] i64 4
 deduced type: i64
[Value] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 deduced type: i1
[Value] i32 31
 deduced type: i32
[Value] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 deduced type: i64
[Value] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] i64 9223372036854775806
 deduced type: i64
[Value] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 4096
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 deduced type: [100 x i8]*
[Value] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 deduced type: <2 x i64>
[Value] double 0.000000e+00
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 deduced type: i64
[Value] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] i32 100
 deduced type: i32
[Value] i32 105
 deduced type: i32
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 7
 deduced type: i64
[Value] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 deduced type: i64
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [21 x i8] c"target('C') scalar()\00"
 deduced type: [21 x i8]
[Value] i64 320000
 deduced type: i64
[Value] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 deduced type: <2 x double>
[Value] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 deduced type: i64
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] i64 4194560
 deduced type: i64
[Value] i64 200
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] i64 11
 deduced type: i64
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] void polybench_timer_start()
 deduced type: void
[Value] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 deduced type: i64
[Value] void exit(i32)
 deduced type: void
[Value] i64 -4
 deduced type: i64
[Value] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 deduced type: double*
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] i64 6
 deduced type: i64
[Value] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] double 1.500000e+00
 deduced type: double
[Value] i32 107
 deduced type: i32
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] i32 10
 deduced type: i32
[Value] void polybench_timer_stop()
 deduced type: void
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 deduced type: i64
[Value] i64 384000
 deduced type: i64
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 deduced type: i64
[Value] i64 1
 deduced type: i64
[Value] void polybench_timer_print()
 deduced type: void
[Value] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 deduced type: double
[Value] i32 108
 deduced type: i32
[Value] double 2.000000e+02
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 deduced type: double
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
 deduced type: [100 x i8]
[Value] i64 0
 deduced type: i64
[Value] i64 240
 deduced type: i64
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 deduced type: i64
[Value] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 deduced type: [200 x [200 x double]]*
[Value] double 1.000000e+01
 deduced type: double
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] i32 1
 deduced type: i32
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 deduced type: i64
[Value] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] i32 printf(ptr)
 deduced type: i32
[Value] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] i32 20
 deduced type: i32
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 deduced type: i1
[Value] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 deduced type: i64
[Value] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 deduced type: void
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] i32 106
 deduced type: i32
[Value] double -9.990000e+02
 deduced type: double
[Value] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 deduced type: i1
[Value] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 deduced type: <2 x double>
[Value] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 deduced type: <2 x i64>
[Value] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 deduced type: i64
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 deduced type: i1
[Value] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body26.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 deduced type: void
[Value] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 deduced type: void
[Value] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 deduced type: i64
[Value] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 deduced type: i1
[Value] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 deduced type: void
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 deduced type: i64
[Value] double 1.200000e+00
 deduced type: double
[Value] i64 199
 deduced type: i64
[Value] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 deduced type: i64
[Value] i64 5
 deduced type: i64
[Value] br label %vector.body37 [in fun] main
 deduced type: void
[Value] %niter.next.1 = add i64 %niter, 2 [in fun] main
 deduced type: i64
[Value] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 deduced type: i1
[Value] br label %for.cond1.preheader.i11 [in fun] main
 deduced type: void
[Value] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 deduced type: void
[Value] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 deduced type: <2 x double>*
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] br label %vector.body48 [in fun] main
 deduced type: void
[Value] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 deduced type: i1
[Value] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] double undef
 deduced type: double
[Value] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 deduced type: i64
[Value] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %26 = trunc i64 %25 to i32 [in fun] main
 deduced type: i32
[Value] %rem28.i = urem i32 %26, 100 [in fun] main
 deduced type: i32
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 deduced type: double
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 deduced type: double
[Value] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] ptr null
 deduced type: ptr
[Value] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 deduced type: i64
[Value] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 deduced type: i64
[Value] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 deduced type: i64
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 deduced type: i1
[Value] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 deduced type: i1
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 deduced type: i64
[Value] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 deduced type: void
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] %mul.us.i = fmul double %27, %44 [in fun] main
 deduced type: double
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i1
[Value] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %n.vec = and i64 %14, -4 [in fun] main
 deduced type: i64
[Value] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] br label %for.cond4.preheader.us.i [in fun] main
 deduced type: void
[Value] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 deduced type: <2 x double>
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 deduced type: <2 x double>
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 deduced type: <2 x double>
[Value] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 deduced type: <2 x double>
[Value] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 deduced type: i64
[Value] %beta = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 deduced type: void
[Value] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i64 8
 deduced type: i64
[Value] br label %vector.body59 [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 deduced type: double*
[Value] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 deduced type: double
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body43.i [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 deduced type: double*
[Value] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 from: null
 to:   [100 x i8]*
Changed type of: i32 105
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i32 106
 from: null
 to:   i32
Changed type of: i64 384000
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 107
 from: null
 to:   i32
Changed type of: i64 320000
 from: null
 to:   i64
Changed type of: i32 108
 from: null
 to:   i32
Changed type of: i32 109
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 31
 from: null
 to:   i32
Changed type of: @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 from: null
 to:   [21 x i8]*
Changed type of: i32 32
 from: null
 to:   i32
Changed type of: double 1.500000e+00
 from: null
 to:   double
Changed type of: double 1.200000e+00
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x i32> <i32 100, i32 100>
 from: null
 to:   <2 x i32>
Changed type of: <2 x double> <double 2.000000e+02, double 2.000000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 200
 from: null
 to:   i64
Changed type of: i64 199
 from: null
 to:   i64
Changed type of: i64 9223372036854775806
 from: null
 to:   i64
Changed type of: i64 -4
 from: null
 to:   i64
Changed type of: <2 x double> <double -9.990000e+02, double -9.990000e+02>
 from: null
 to:   <2 x double>
Changed type of: i32 100
 from: null
 to:   i32
Changed type of: double 2.000000e+02
 from: null
 to:   double
Changed type of: double -9.990000e+02
 from: null
 to:   double
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 from: null
 to:   <2 x double>
Changed type of: <2 x double> zeroinitializer
 from: null
 to:   <2 x double>
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double undef
 from: null
 to:   double
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %alpha = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %alpha = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %beta = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %beta = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %C = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %A = alloca [200 x [200 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [200 x double]]*
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %B = alloca [200 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [200 x [240 x double]]*
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 Changed type of: %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 Changed type of: %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 Changed type of: %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
 Changed type of: %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 Changed type of: %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 Changed type of: %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 Changed type of: %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 Changed type of: %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
 Changed type of: %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %13 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 Changed type of: %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 Changed type of: %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 Changed type of: %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 Changed type of: %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 Changed type of: %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 Changed type of: br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 Changed type of: %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] br label %vector.body48 [in fun] main
 Changed type of: br label %vector.body48 [in fun] main
  from: null
  to:   void
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 Changed type of: %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 Changed type of: %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 Changed type of: %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 Changed type of: %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 Changed type of: %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 Changed type of: %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 Changed type of: %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 Creating initial type:
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
 Changed type of: %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 Changed type of: %index.next54 = add nuw i64 %index49, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 Changed type of: %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 Changed type of: %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 Changed type of: br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 Changed type of: %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body26.i [in fun] main
 Changed type of: br label %for.body26.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 Changed type of: %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 Changed type of: br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
  from: null
  to:   void
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 Changed type of: %min.iters.check = icmp ult i64 %14, 4 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 Changed type of: br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
  from: null
  to:   void
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
 Changed type of: %n.vec = and i64 %14, -4 [in fun] main
  from: null
  to:   i64
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 Changed type of: %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
  from: null
  to:   i64
[Deducing from] br label %vector.body37 [in fun] main
 Changed type of: br label %vector.body37 [in fun] main
  from: null
  to:   void
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 Changed type of: %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 Changed type of: %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
  from: null
  to:   i64
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 Creating initial type:
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: null
  to:   ptr
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
 Changed type of: %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
 Changed type of: %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 Changed type of: %index.next39 = add nuw i64 %index38, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 Changed type of: %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 Changed type of: %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 Changed type of: br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 Changed type of: %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body43.i [in fun] main
 Changed type of: br label %for.body43.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 Changed type of: %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 Changed type of: %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
  from: null
  to:   i64
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
 Changed type of: %26 = trunc i64 %25 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
 Changed type of: %rem28.i = urem i32 %26, 100 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 Changed type of: %conv29.i = sitofp i32 %rem28.i to double [in fun] main
  from: null
  to:   double
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 Changed type of: %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 Changed type of: %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 Changed type of: %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 Changed type of: %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 Changed type of: %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 Changed type of: %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 Changed type of: %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 Changed type of: %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
 Changed type of: br label %for.cond1.preheader.i11 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 Changed type of: %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 Changed type of: %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: null
  to:   ptr
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
  from: ptr
  to:   double*
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 Changed type of: br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
  from: null
  to:   void
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i1
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 Changed type of: %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
  from: null
  to:   i64
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 Changed type of: %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
 Changed type of: br label %for.cond4.preheader.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body59 [in fun] main
 Changed type of: br label %vector.body59 [in fun] main
  from: null
  to:   void
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 Changed type of: %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 Creating initial type:
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: null
  to:   ptr
 Changed type of: %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 Creating initial type:
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: null
  to:   ptr
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
  from: null
  to:   <2 x double>
 Changed type of: %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
  from: double*
  to:   <2 x double>*
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 Changed type of: %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 Changed type of: %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 Changed type of: %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 Changed type of: %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 Creating initial type:
 Changed type of: %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
 Creating initial type:
 Changed type of: <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
  from: null
  to:   <2 x double>
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 Creating initial type:
 Changed type of: %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 Creating initial type:
 Changed type of: %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 Creating initial type:
 Changed type of: %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 Changed type of: %index.next70 = add nuw i64 %index60, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 Changed type of: %43 = icmp eq i64 %index.next70, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 Changed type of: %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
 Changed type of: %mul.us.i = fmul double %27, %44 [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 Changed type of: br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 Changed type of: %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 Creating initial type:
 Changed type of: %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 Changed type of: %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: null
  to:   ptr
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 Creating initial type:
 Changed type of: %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
  from: null
  to:   double
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 Creating initial type:
 Changed type of: %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 Changed type of: %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
 Changed type of: %niter.next.1 = add i64 %niter, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 Changed type of: %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 Changed type of: %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 Changed type of: %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
  from: null
  to:   double
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 Changed type of: br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 Creating initial type:
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: null
  to:   ptr
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 Creating initial type:
 Changed type of: %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
  from: null
  to:   double
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 Creating initial type:
 Changed type of: %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 Changed type of: br label %for.cond4.for.end_crit_edge.us.i [in fun] main
  from: null
  to:   void
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 Changed type of: %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 Changed type of: %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 Creating initial type:
 Changed type of: %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
  from: null
  to:   double
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 Creating initial type:
 Changed type of: %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
  from: null
  to:   double
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 Changed type of: %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 Changed type of: %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 Changed type of: %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 Changed type of: %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 Creating initial type:
 Changed type of: %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
 Changed type of: br label %for.cond1.preheader.i21 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 Changed type of: %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i22 [in fun] main
 Changed type of: br label %for.body3.i22 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 Changed type of: %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
  from: null
  to:   i64
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
 Changed type of: %67 = trunc i64 %66 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
 Changed type of: %rem.i24 = urem i32 %67, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 Changed type of: %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 Changed type of: %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 Changed type of: %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 Changed type of: %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 Creating initial type:
 Changed type of: %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
  from: null
  to:   [100 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"target('C') scalar()\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,200))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [21 x i8] c"scalar(range(0,240))\00"
  from: null
  to:   [21 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %alpha = alloca double, align 8 [in fun] main
[Deducing from] %beta = alloca double, align 8 [in fun] main
[Deducing from] %C = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] %A = alloca [200 x [200 x double]], align 16 [in fun] main
[Deducing from] %B = alloca [200 x [240 x double]], align 16 [in fun] main
[Deducing from] store double 1.500000e+00, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.200000e+00, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
[Deducing from] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
[Deducing from] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
[Deducing from] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
[Deducing from] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %5, ptr %6, align 16, !tbaa !5 [in fun] main
[Deducing from] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
[Deducing from] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
[Deducing from] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
[Deducing from] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
[Deducing from] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %11, ptr %12, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %13 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
[Deducing from] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
[Deducing from] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
[Deducing from] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
[Deducing from] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
[Deducing from] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
[Deducing from] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
[Deducing from] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
[Deducing from] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body48 [in fun] main
[Deducing from] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
[Deducing from] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
[Deducing from] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
[Deducing from] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
[Deducing from] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
[Deducing from] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
[Deducing from] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
[Deducing from] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
[Deducing from] store <2 x double> %19, ptr %20, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next54 = add nuw i64 %index49, 2 [in fun] main
[Deducing from] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
[Deducing from] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
[Deducing from] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
[Deducing from] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
[Deducing from] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
[Deducing from] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
[Deducing from] br label %for.body26.i [in fun] main
[Deducing from] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
[Deducing from] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
[Deducing from] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
[Deducing from] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
[Deducing from] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
[Deducing from] %n.vec = and i64 %14, -4 [in fun] main
[Deducing from] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
[Deducing from] br label %vector.body37 [in fun] main
[Deducing from] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
[Deducing from] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
[Deducing from] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
[Deducing from] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %22, align 8, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> <double -9.990000e+02, double -9.990000e+02>, ptr %23, align 8, !tbaa !5 [in fun] main
[Deducing from] %index.next39 = add nuw i64 %index38, 4 [in fun] main
[Deducing from] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
[Deducing from] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
[Deducing from] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
[Deducing from] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
[Deducing from] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
[Deducing from] br label %for.body43.i [in fun] main
[Deducing from] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
[Deducing from] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
[Deducing from] %26 = trunc i64 %25 to i32 [in fun] main
[Deducing from] %rem28.i = urem i32 %26, 100 [in fun] main
[Deducing from] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
[Deducing from] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
[Deducing from] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
[Deducing from] store double %div31.i, ptr %arrayidx35.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
[Deducing from] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
[Deducing from] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
[Deducing from] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
[Deducing from] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
[Deducing from] store double -9.990000e+02, ptr %arrayidx47.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
[Deducing from] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
[Deducing from] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
[Deducing from] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
[Deducing from] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #11 [in fun] main
[Deducing from] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
[Deducing from] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
[Deducing from] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
[Deducing from] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
[Deducing from] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %for.cond1.preheader.i11 [in fun] main
[Deducing from] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
[Deducing from] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
[Deducing from] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
[Deducing from] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
[Deducing from] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
[Deducing from] br label %for.cond4.preheader.us.i [in fun] main
[Deducing from] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
[Deducing from] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body59 [in fun] main
[Deducing from] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
[Deducing from] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
[Deducing from] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
[Deducing from] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
[Deducing from] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
[Deducing from] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
[Deducing from] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
[Deducing from] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
[Deducing from] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
[Deducing from] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
[Deducing from] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
[Deducing from] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
[Deducing from] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
[Deducing from] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
[Deducing from] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
[Deducing from] store <2 x double> %41, ptr %31, align 16, !tbaa !5 [in fun] main
[Deducing from] store <2 x double> %42, ptr %32, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next70 = add nuw i64 %index60, 4 [in fun] main
[Deducing from] %43 = icmp eq i64 %index.next70, 240 [in fun] main
[Deducing from] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
[Deducing from] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.us.i = fmul double %27, %44 [in fun] main
[Deducing from] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
[Deducing from] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
[Deducing from] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
[Deducing from] store double %47, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
[Deducing from] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
[Deducing from] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
[Deducing from] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
[Deducing from] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
[Deducing from] store double %52, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
[Deducing from] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
[Deducing from] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
[Deducing from] %niter.next.1 = add i64 %niter, 2 [in fun] main
[Deducing from] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
[Deducing from] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
[Deducing from] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
[Deducing from] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
[Deducing from] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
[Deducing from] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
[Deducing from] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
[Deducing from] store double %57, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
[Deducing from] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
[Deducing from] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
[Deducing from] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
[Deducing from] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
[Deducing from] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
[Deducing from] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
[Deducing from] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
[Deducing from] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
[Deducing from] store double %62, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
[Deducing from] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
[Deducing from] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
[Deducing from] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
[Deducing from] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
[Deducing from] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #11 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #11 [in fun] main
[Deducing from] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
[Deducing from] br label %for.cond1.preheader.i21 [in fun] main
[Deducing from] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
[Deducing from] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
[Deducing from] br label %for.body3.i22 [in fun] main
[Deducing from] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
[Deducing from] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
[Deducing from] %67 = trunc i64 %66 to i32 [in fun] main
[Deducing from] %rem.i24 = urem i32 %67, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
[Deducing from] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
[Deducing from] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
[Deducing from] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
[Deducing from] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
[Deducing from] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
[Deducing from] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [21 x i8] c"scalar(range(0,240))\00"
 deduced type: [21 x i8]
[Value] [21 x i8] c"scalar(range(0,200))\00"
 deduced type: [21 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #11 [in fun] polybench_alloc_data
 deduced type: i32
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] tail call void @free(ptr noundef %ptr) #11 [in fun] polybench_free_data
 deduced type: void
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.16, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.10, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #13 [in fun] polybench_timer_start
 deduced type: i32
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_timer_start
 deduced type: ptr
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.6, ptr noundef nonnull @.str.1.7, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #12 [in fun] polybench_timer_start
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #11 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] %72 = call i64 @fwrite(ptr nonnull @.str.8, i64 11, i64 1, ptr %71) [in fun] main
 deduced type: i64
[Value] br i1 %exitcond28.not.i, label %print_array.exit, label %for.cond1.preheader.i21, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond28.not.i = icmp eq i64 %indvars.iv.next25.i, 200 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next25.i = add nuw nsw i64 %indvars.iv24.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond.not.i26, label %for.inc9.i, label %for.body3.i22, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.i25 = add nuw nsw i64 %indvars.iv.i23, 1 [in fun] main
 deduced type: i64
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %69, ptr noundef nonnull @.str.7, double noundef %70) [in fun] main
 deduced type: i32
[Value] %70 = load double, ptr %arrayidx7.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %68) [in fun] main
 deduced type: i32
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %cmp4.i = icmp eq i32 %rem.i24, 0 [in fun] main
 deduced type: i1
[Value] %rem.i24 = urem i32 %67, 20 [in fun] main
 deduced type: i32
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %66 = add nuw nsw i64 %indvars.iv.i23, %65 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i23 = phi i64 [ 0, %for.cond1.preheader.i21 ], [ %indvars.iv.next.i25, %if.end.i ] [in fun] main
 deduced type: i64
[Value] br label %for.body3.i22 [in fun] main
 deduced type: void
[Value] br label %for.cond1.preheader.i21 [in fun] main
 deduced type: void
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %63 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %exitcond102.not.i, label %kernel_symm.exit, label %for.cond1.preheader.i11, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %exitcond102.not.i = icmp eq i64 %indvars.iv.next100.i16, 200 [in fun] main
 deduced type: i1
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] br i1 %exitcond94.not.i, label %for.inc50.i, label %for.cond4.preheader.us.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] %62 = call double @llvm.fmuladd.f64(double %27, double %.lcssa, double %61) [in fun] main
 deduced type: double
[Value] %61 = call double @llvm.fmuladd.f64(double %28, double %60, double %mul41.us.i) [in fun] main
 deduced type: double
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.17, i64 50, i64 1, ptr %1) #12 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %mul41.us.i = fmul double %mul.us.i, %29 [in fun] main
 deduced type: double
[Value] %arrayidx30.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] call void @exit(i32 noundef 1) #13 [in fun] polybench_alloc_data
 deduced type: void
[Value] %.lcssa = phi double [ %.lcssa.ph, %for.cond4.for.end_crit_edge.us.i.unr-lcssa ], [ %59, %for.body6.us.i.epil ] [in fun] main
 deduced type: double
[Value] br label %for.cond4.for.end_crit_edge.us.i [in fun] main
 deduced type: void
[Value] %59 = call double @llvm.fmuladd.f64(double %58, double %55, double %temp2.086.us.i.unr) [in fun] main
 deduced type: double
[Value] %arrayidx17.us.i.epil = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %55 = load double, ptr %arrayidx12.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond.not.i26 = icmp eq i64 %indvars.iv.next.i25, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx12.us.i.epil = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13.unr [in fun] main
 deduced type: double*
[Value] br i1 %lcmp.mod.not, label %for.cond4.for.end_crit_edge.us.i, label %for.body6.us.i.epil [in fun] main
 deduced type: void
[Value] %temp2.086.us.i.unr = phi double [ 0.000000e+00, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] %indvars.iv.i13.unr = phi i64 [ 0, %for.cond4.preheader.us.i ], [ %indvars.iv.next.i14.1, %for.body6.us.i ] [in fun] main
 deduced type: i64
[Value] br i1 %niter.ncmp.1, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %54 = call double @llvm.fmuladd.f64(double %53, double %50, double %49) [in fun] main
 deduced type: double
[Value] %53 = load double, ptr %arrayidx21.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond85.not.i = icmp eq i64 %indvars.iv.next82.i, 200 [in fun] main
 deduced type: i1
[Value] br i1 %13, label %for.inc16.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] i32 114
 deduced type: i32
[Value] br i1 %30, label %for.cond4.for.end_crit_edge.us.i.unr-lcssa, label %for.body6.us.i [in fun] main
 deduced type: void
[Value] %13 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] %lcmp.mod.not = icmp eq i64 %xtraiter, 0 [in fun] main
 deduced type: i1
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %7 = sub nuw nsw <2 x i64> %broadcast.splat32, %vec.ind [in fun] main
 deduced type: <2 x i64>
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] %6 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %.lcssa.ph = phi double [ undef, %for.cond4.preheader.us.i ], [ %54, %for.body6.us.i ] [in fun] main
 deduced type: double
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] %4 = sitofp <2 x i32> %3 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] @.str.5.17 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] @.str.5 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %43 = icmp eq i64 %index.next70, 240 [in fun] main
 deduced type: i1
[Value] tail call void @free(ptr noundef nonnull %call) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv81.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %67 = trunc i64 %66 to i32 [in fun] main
 deduced type: i32
[Value] double 1.000000e+01
 deduced type: double
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] %indvars.iv81.i = phi i64 [ 0, %entry ], [ %indvars.iv.next82.i, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] <2 x double> %2 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter [in fun] main
 deduced type: i1
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next96.i = add nuw nsw i64 %indvars.iv95.i, 1 [in fun] main
 deduced type: i64
[Value] <2 x double> %0 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] %alpha = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] void exit(i32)
 deduced type: void
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 105
 deduced type: i32
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %index.next39 = add nuw i64 %index38, 4 [in fun] main
 deduced type: i64
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %3 = urem <2 x i32> %2, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] i1 true
 deduced type: i1
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] <2 x double> <double 2.000000e+02, double 2.000000e+02>
 deduced type: <2 x double>
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %69 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.2.15 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %57 = call double @llvm.fmuladd.f64(double %mul.us.i, double %55, double %56) [in fun] main
 deduced type: double
[Value] <2 x double> zeroinitializer
 deduced type: <2 x double>
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.15) [in fun] polybench_timer_print
 deduced type: i32
[Value] %20 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %index49 [in fun] main
 deduced type: <2 x double>*
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %unroll_iter = and i64 %indvars.iv99.i12, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] %indvars.iv99.i = phi i64 [ %indvars.iv.next100.i, %for.inc51.i ], [ 0, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] @.str.6 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] %71 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] @.str.1.7 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] %18 = sitofp <2 x i32> %17 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %index60 = phi i64 [ 0, %vector.ph57 ], [ %index.next70, %vector.body59 ] [in fun] main
 deduced type: i64
[Value] i64 4096
 deduced type: i64
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] %56 = load double, ptr %arrayidx17.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] i64 6
 deduced type: i64
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] @.str.4.10 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %arrayidx35.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv86.i [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert31 = insertelement <2 x i64> poison, i64 %0, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] i32 109
 deduced type: i32
[Value] %cmp4173.i = icmp ult i64 %indvars.iv99.i, 199 [in fun] main
 deduced type: i1
[Value] <2 x i32> <i32 100, i32 100>
 deduced type: <2 x i32>
[Value] %50 = load double, ptr %arrayidx12.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.2 = private unnamed_addr constant [21 x i8] c"target('C') scalar()\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] br i1 %cmp.n, label %for.inc51.i, label %for.body43.i.preheader72 [in fun] main
 deduced type: void
[Value] %12 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv81.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] i64 4
 deduced type: i64
[Value] %exitcond98.not.i = icmp eq i64 %indvars.iv.next96.i, 200 [in fun] main
 deduced type: i1
[Value] i32 31
 deduced type: i32
[Value] %index38 = phi i64 [ 0, %vector.ph35 ], [ %index.next39, %vector.body37 ] [in fun] main
 deduced type: i64
[Value] %37 = fmul <2 x double> %35, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] @.str.3 = private unnamed_addr constant [21 x i8] c"scalar(range(0,200))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %indvars.iv24.i = phi i64 [ 0, %kernel_symm.exit ], [ %indvars.iv.next25.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] i64 9223372036854775806
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %31 = getelementptr inbounds [240 x double], ptr %C, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] %9 = urem <2 x i32> %8, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00"
 deduced type: [100 x i8]
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] i64 0
 deduced type: i64
[Value] i64 240
 deduced type: i64
[Value] @.str.4 = private unnamed_addr constant [21 x i8] c"scalar(range(0,240))\00", section "llvm.metadata"
 deduced type: [21 x i8]*
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %broadcast.splat32 = shufflevector <2 x i64> %broadcast.splatinsert31, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %broadcast.splatinsert66 = insertelement <2 x double> poison, double %29, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] @.str.1 = private unnamed_addr constant [100 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/linear-algebra/blas/symm/symm.c\00", section "llvm.metadata"
 deduced type: [100 x i8]*
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %15 = add nuw nsw <2 x i64> %vec.ind50, %broadcast.splat53 [in fun] main
 deduced type: <2 x i64>
[Value] double 0.000000e+00
 deduced type: double
[Value] %indvars.iv.next82.i = add nuw nsw i64 %indvars.iv81.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond85.not.i, label %for.cond23.preheader.i, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] %0 = add nuw nsw i64 %indvars.iv81.i, 240 [in fun] main
 deduced type: i64
[Value] %8 = trunc <2 x i64> %7 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %temp2.086.us.i = phi double [ %54, %for.body6.us.i ], [ 0.000000e+00, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] i32 100
 deduced type: i32
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [21 x i8] c"target('C') scalar()\00"
 deduced type: [21 x i8]
[Value] i64 320000
 deduced type: i64
[Value] br i1 %exitcond104.not.i, label %init_array.exit, label %for.cond23.preheader.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %41 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %39) [in fun] main
 deduced type: <2 x double>
[Value] @.str.8 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %index.next70 = add nuw i64 %index60, 4 [in fun] main
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next100.i16 = add nuw nsw i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] i64 4194560
 deduced type: i64
[Value] i64 200
 deduced type: i64
[Value] @.str.7 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] i64 11
 deduced type: i64
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] i64 16
 deduced type: i64
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] @.str = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] %10 = sitofp <2 x i32> %9 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next100.i = add nuw nsw i64 %indvars.iv99.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond92.not.i, label %for.cond40.preheader.i, label %for.body26.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] %B = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] double 1.500000e+00
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i32 107
 deduced type: i32
[Value] i64 5
 deduced type: i64
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] i32 10
 deduced type: i32
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] i32 32
 deduced type: i32
[Value] %broadcast.splat65 = shufflevector <2 x double> %broadcast.splatinsert64, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %indvars.iv.next92.i = add nuw nsw i64 %indvars.iv91.i, 1 [in fun] main
 deduced type: i64
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] i64 384000
 deduced type: i64
[Value] void polybench_timer_start()
 deduced type: void
[Value] i64 -4
 deduced type: i64
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %offset.idx = add i64 %indvars.iv93.i, %index38 [in fun] main
 deduced type: i64
[Value] i64 1
 deduced type: i64
[Value] <2 x double> <double -9.990000e+02, double -9.990000e+02>
 deduced type: <2 x double>
[Value] %11 = fdiv <2 x double> %10, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %49 = call double @llvm.fmuladd.f64(double %48, double %45, double %temp2.086.us.i) [in fun] main
 deduced type: double
[Value] i32 108
 deduced type: i32
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] double 2.000000e+02
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] i64 3
 deduced type: i64
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] %wide.load63 = load <2 x double>, ptr %34, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %52 = call double @llvm.fmuladd.f64(double %mul.us.i, double %50, double %51) [in fun] main
 deduced type: double
[Value] %arrayidx21.us.i.1 = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %5 = fdiv <2 x double> %4, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %17 = urem <2 x i32> %16, <i32 100, i32 100> [in fun] main
 deduced type: <2 x i32>
[Value] <2 x double> llvm.fmuladd.v2f64(<2 x double>, <2 x double>, <2 x double>)
 deduced type: <2 x double>
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %34 = getelementptr inbounds double, ptr %33, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %65 = mul nuw nsw i64 %indvars.iv24.i, 200 [in fun] main
 deduced type: i64
[Value] %A = alloca [200 x [200 x double]], align 16 [in fun] main
 deduced type: [200 x [200 x double]]*
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] i32 1
 deduced type: i32
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] %27 = load double, ptr %alpha, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %cmp.n = icmp eq i64 %14, %n.vec [in fun] main
 deduced type: i1
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv95.i.ph = phi i64 [ %indvars.iv93.i, %for.body43.i.preheader ], [ %ind.end, %middle.block33 ] [in fun] main
 deduced type: i64
[Value] %38 = fmul <2 x double> %36, %broadcast.splat67 [in fun] main
 deduced type: <2 x double>
[Value] void polybench_timer_print()
 deduced type: void
[Value] %beta = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] br i1 %cmp.n47, label %for.cond40.preheader.i, label %for.body26.i.preheader [in fun] main
 deduced type: void
[Value] %44 = load double, ptr %arrayidx8.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] i64 7
 deduced type: i64
[Value] @.str.3.16 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %14 = sub nsw i64 199, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %broadcast.splatinsert68 = insertelement <2 x double> poison, double %28, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] i32 20
 deduced type: i32
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv93.i = phi i64 [ %indvars.iv.next94.i, %for.inc51.i ], [ 1, %for.inc16.i ] [in fun] main
 deduced type: i64
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %min.iters.check42 = icmp ult i64 %indvars.iv93.i, 2 [in fun] main
 deduced type: i1
[Value] %64 = call i64 @fwrite(ptr nonnull @.str.5, i64 13, i64 1, ptr %63) [in fun] main
 deduced type: i64
[Value] br i1 %21, label %middle.block40, label %vector.body48, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] br i1 %min.iters.check42, label %for.body26.i.preheader, label %vector.ph43 [in fun] main
 deduced type: void
[Value] i32 106
 deduced type: i32
[Value] double -9.990000e+02
 deduced type: double
[Value] %n.vec45 = and i64 %indvars.iv93.i, 9223372036854775806 [in fun] main
 deduced type: i64
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] %indvars.iv.next87.i = add nuw nsw i64 %indvars.iv86.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] %arrayidx7.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv24.i, i64 %indvars.iv.i23 [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert52 = insertelement <2 x i64> poison, i64 %indvars.iv99.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %exitcond94.not.i = icmp eq i64 %indvars.iv.next92.i, 240 [in fun] main
 deduced type: i1
[Value] %broadcast.splat53 = shufflevector <2 x i64> %broadcast.splatinsert52, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %19 = fdiv <2 x double> %18, <double 2.000000e+02, double 2.000000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %39 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load, <2 x double> %37) [in fun] main
 deduced type: <2 x double>
[Value] %vec.ind50 = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph43 ], [ %vec.ind.next51, %vector.body48 ] [in fun] main
 deduced type: <2 x i64>
[Value] %index.next54 = add nuw i64 %index49, 2 [in fun] main
 deduced type: i64
[Value] %vec.ind.next51 = add <2 x i64> %vec.ind50, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %arrayidx21.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %21 = icmp eq i64 %index.next54, %n.vec45 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond98.not.i, label %for.inc51.i, label %for.body43.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] %cmp.n47 = icmp eq i64 %indvars.iv93.i, %n.vec45 [in fun] main
 deduced type: i1
[Value] %arrayidx17.us.i = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.i13, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %xtraiter = and i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i64
[Value] tail call void @free(ptr noundef nonnull %call.i) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br label %for.body26.i [in fun] main
 deduced type: void
[Value] br i1 %cmp4173.i, label %for.body43.i.preheader, label %for.inc51.i [in fun] main
 deduced type: void
[Value] %index49 = phi i64 [ 0, %vector.ph43 ], [ %index.next54, %vector.body48 ] [in fun] main
 deduced type: i64
[Value] %min.iters.check = icmp ult i64 %14, 4 [in fun] main
 deduced type: i1
[Value] %exitcond92.not.i = icmp eq i64 %indvars.iv.next87.i, %indvars.iv93.i [in fun] main
 deduced type: i1
[Value] %arrayidx8.us.i = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv99.i12, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] br i1 %min.iters.check, label %for.body43.i.preheader72, label %vector.ph35 [in fun] main
 deduced type: void
[Value] %indvars.iv99.i12 = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next100.i16, %for.inc50.i ] [in fun] main
 deduced type: i64
[Value] double 1.200000e+00
 deduced type: double
[Value] i64 199
 deduced type: i64
[Value] %ind.end = add i64 %indvars.iv93.i, %n.vec [in fun] main
 deduced type: i64
[Value] i64 50
 deduced type: i64
[Value] br label %vector.body37 [in fun] main
 deduced type: void
[Value] %niter.next.1 = add i64 %niter, 2 [in fun] main
 deduced type: i64
[Value] %exitcond104.not.i = icmp eq i64 %indvars.iv.next100.i, 200 [in fun] main
 deduced type: i1
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.cond1.preheader.i11 [in fun] main
 deduced type: void
[Value] %22 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %offset.idx [in fun] main
 deduced type: <2 x double>*
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] %23 = getelementptr inbounds double, ptr %22, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %indvars.iv.i13 = phi i64 [ %indvars.iv.next.i14.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] br label %vector.body48 [in fun] main
 deduced type: void
[Value] %24 = icmp eq i64 %index.next39, %n.vec [in fun] main
 deduced type: i1
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %24, label %middle.block33, label %vector.body37, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] double undef
 deduced type: double
[Value] %indvars.iv86.i = phi i64 [ %indvars.iv.next87.i, %for.body26.i ], [ %indvars.iv86.i.ph, %for.body26.i.preheader ] [in fun] main
 deduced type: i64
[Value] %25 = add nuw nsw i64 %indvars.iv86.i, %indvars.iv99.i [in fun] main
 deduced type: i64
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] %26 = trunc i64 %25 to i32 [in fun] main
 deduced type: i32
[Value] %rem28.i = urem i32 %26, 100 [in fun] main
 deduced type: i32
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %conv29.i = sitofp i32 %rem28.i to double [in fun] main
 deduced type: double
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %div31.i = fdiv double %conv29.i, 2.000000e+02 [in fun] main
 deduced type: double
[Value] %68 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] ptr null
 deduced type: ptr
[Value] %45 = load double, ptr %arrayidx12.us.i, align 16, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv95.i = phi i64 [ %indvars.iv.next96.i, %for.body43.i ], [ %indvars.iv95.i.ph, %for.body43.i.preheader72 ] [in fun] main
 deduced type: i64
[Value] %arrayidx47.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i, i64 %indvars.iv95.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next.i14.1 = add nuw nsw i64 %indvars.iv.i13, 2 [in fun] main
 deduced type: i64
[Value] %29 = load double, ptr %arrayidx40.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next94.i = add nuw nsw i64 %indvars.iv93.i, 1 [in fun] main
 deduced type: i64
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] %16 = trunc <2 x i64> %15 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] %broadcast.splatinsert64 = insertelement <2 x double> poison, double %27, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] %cmp584.not.i = icmp eq i64 %indvars.iv99.i12, 0 [in fun] main
 deduced type: i1
[Value] %indvars.iv86.i.ph = phi i64 [ 0, %for.cond23.preheader.i ], [ %n.vec45, %middle.block40 ] [in fun] main
 deduced type: i64
[Value] %arrayidx40.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv99.i12 [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] br i1 %cmp584.not.i, label %vector.ph57, label %for.cond4.preheader.us.i.preheader [in fun] main
 deduced type: void
[Value] %C = alloca [200 x [240 x double]], align 16 [in fun] main
 deduced type: [200 x [240 x double]]*
[Value] %mul.us.i = fmul double %27, %44 [in fun] main
 deduced type: double
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #11 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %30 = icmp eq i64 %indvars.iv99.i12, 1 [in fun] main
 deduced type: i1
[Value] %broadcast.splat67 = shufflevector <2 x double> %broadcast.splatinsert66, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] %48 = load double, ptr %arrayidx21.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %32 = getelementptr inbounds double, ptr %31, i64 2 [in fun] main
 deduced type: <2 x double>*
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx21.us.i.epil = getelementptr inbounds [240 x double], ptr %B, i64 %indvars.iv.i13.unr, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %wide.load = load <2 x double>, ptr %31, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %58 = load double, ptr %arrayidx21.us.i.epil, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %wide.load61 = load <2 x double>, ptr %32, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] %n.vec = and i64 %14, -4 [in fun] main
 deduced type: i64
[Value] %33 = getelementptr inbounds [240 x double], ptr %B, i64 0, i64 %index60 [in fun] main
 deduced type: [240 x double]*
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 printf(ptr)
 deduced type: i32
[Value] %wide.load62 = load <2 x double>, ptr %33, align 16, !tbaa !5 [in fun] main
 deduced type: <2 x double>
[Value] i32 0
 deduced type: i32
[Value] <2 x double> %1 [arg of fun] llvm.fmuladd.v2f64
 deduced type: <2 x double>
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] br label %for.cond4.preheader.us.i [in fun] main
 deduced type: void
[Value] %35 = fmul <2 x double> %broadcast.splat65, %wide.load62 [in fun] main
 deduced type: <2 x double>
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %36 = fmul <2 x double> %broadcast.splat65, %wide.load63 [in fun] main
 deduced type: <2 x double>
[Value] %40 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat69, <2 x double> %wide.load61, <2 x double> %38) [in fun] main
 deduced type: <2 x double>
[Value] %42 = call <2 x double> @llvm.fmuladd.v2f64(<2 x double> %broadcast.splat65, <2 x double> zeroinitializer, <2 x double> %40) [in fun] main
 deduced type: <2 x double>
[Value] br i1 %43, label %for.inc50.i, label %vector.body59, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] %60 = load double, ptr %arrayidx30.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv91.i = phi i64 [ %indvars.iv.next92.i, %for.cond4.for.end_crit_edge.us.i ], [ 0, %for.cond4.preheader.us.i.preheader ] [in fun] main
 deduced type: i64
[Value] %28 = load double, ptr %beta, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %niter = phi i64 [ %niter.next.1, %for.body6.us.i ], [ 0, %for.cond4.preheader.us.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i64 8
 deduced type: i64
[Value] br label %vector.body59 [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.i13 [in fun] main
 deduced type: double*
[Value] %46 = load double, ptr %arrayidx17.us.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %47 = call double @llvm.fmuladd.f64(double %mul.us.i, double %45, double %46) [in fun] main
 deduced type: double
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %indvars.iv.next.i14 = or disjoint i64 %indvars.iv.i13, 1 [in fun] main
 deduced type: i64
[Value] br label %for.body43.i [in fun] main
 deduced type: void
[Value] %arrayidx12.us.i.1 = getelementptr inbounds [200 x double], ptr %A, i64 %indvars.iv99.i12, i64 %indvars.iv.next.i14 [in fun] main
 deduced type: double*
[Value] %broadcast.splat69 = shufflevector <2 x double> %broadcast.splatinsert68, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %arrayidx17.us.i.1 = getelementptr inbounds [240 x double], ptr %C, i64 %indvars.iv.next.i14, i64 %indvars.iv91.i [in fun] main
 deduced type: double*
[Value] %1 = add nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %51 = load double, ptr %arrayidx17.us.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[End of TypeDeductionAnalysis]

