[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 from: null
 to:   [105 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i64 499200
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 from: null
 to:   [26 x i8]*
Changed type of: i32 115
 from: null
 to:   i32
Changed type of: i64 460800
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 from: null
 to:   [24 x i8]*
Changed type of: i32 116
 from: null
 to:   i32
Changed type of: i64 1920
 from: null
 to:   i64
Changed type of: @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: i32 117
 from: null
 to:   i32
Changed type of: @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: i32 118
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 25
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 26
 from: null
 to:   i32
Changed type of: double 2.600000e+02
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> <double 2.400000e+02, double 2.400000e+02>
 from: null
 to:   <2 x double>
Changed type of: <2 x double> <double 2.600000e+02, double 2.600000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 260
 from: null
 to:   i64
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: i32 65
 from: null
 to:   i32
Changed type of: double 1.000000e-01
 from: null
 to:   double
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double sqrt(double)
 from: null
 to:   double
Changed type of: double 1.000000e+00
 from: null
 to:   double
Changed type of: i64 239
 from: null
 to:   i64
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %float_n = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [260 x [240 x double]]*
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [240 x [240 x double]]*
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 Changed type of: %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 Changed type of: %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
 Changed type of: %conv4.i = sitofp i32 %0 to double [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 Changed type of: %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 Changed type of: %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 Changed type of: %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 Changed type of: %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %8 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 Changed type of: %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 Changed type of: %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
 Changed type of: br label %for.body.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body3.i9 [in fun] main
 Changed type of: br label %for.body3.i9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 Changed type of: %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 Changed type of: %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
 Changed type of: %add.i12 = fadd double %10, %11 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 Changed type of: %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 Changed type of: %add.i12.1 = fadd double %add.i12, %12 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 Changed type of: %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 Changed type of: %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 Changed type of: %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 Changed type of: %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 Changed type of: %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 Changed type of: %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 Changed type of: %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 Changed type of: %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 Changed type of: %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
  from: null
  to:   double
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 Changed type of: %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 Changed type of: %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.body22.i [in fun] main
 Changed type of: br label %for.body22.i [in fun] main
  from: null
  to:   void
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 Changed type of: %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 Changed type of: %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
 Changed type of: %sub.i = fsub double %18, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 Creating initial type:
 Changed type of: %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 Changed type of: %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
 Changed type of: %sub.i.1 = fsub double %20, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 Creating initial type:
 Changed type of: %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 Changed type of: %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
 Changed type of: %sub.i.2 = fsub double %22, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 Creating initial type:
 Changed type of: %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 Changed type of: %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
 Changed type of: %sub.i.3 = fsub double %24, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 Creating initial type:
 Changed type of: %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 Changed type of: %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 Changed type of: %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
 Changed type of: %div43.i = fdiv double %25, %9 [in fun] main
  from: null
  to:   double
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 Creating initial type:
 Changed type of: %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] sqrt
  from: null
  to:   double
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 Changed type of: %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
  from: null
  to:   i1
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 Changed type of: %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
  from: null
  to:   double
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 Changed type of: %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 Changed type of: %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 Changed type of: %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body63.i [in fun] main
 Changed type of: br label %for.body63.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 Changed type of: %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
 Changed type of: %sub70.i = fsub double %28, %27 [in fun] main
  from: null
  to:   double
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 Creating initial type:
 Changed type of: %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
 Changed type of: %mul.i = fmul double %call71.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
 Changed type of: %div78.i = fdiv double %30, %mul.i [in fun] main
  from: null
  to:   double
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 Changed type of: %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 Changed type of: %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 Changed type of: %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 Changed type of: %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 Changed type of: %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 Changed type of: %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 Changed type of: %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body96.i [in fun] main
 Changed type of: br label %for.body96.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 Changed type of: %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] br label %for.body103.i [in fun] main
 Changed type of: br label %for.body103.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 Changed type of: %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 Changed type of: %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 Creating initial type:
 Changed type of: %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 Changed type of: %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 Creating initial type:
 Changed type of: %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 Changed type of: %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 Changed type of: %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 Changed type of: %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 Changed type of: %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: ptr
  to:   double*
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 Creating initial type:
 Changed type of: %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
 Changed type of: br label %for.cond1.preheader.i16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 Changed type of: %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i17 [in fun] main
 Changed type of: br label %for.body3.i17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 Changed type of: %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
  from: null
  to:   i64
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
 Changed type of: %42 = trunc i64 %41 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
 Changed type of: %rem.i = urem i32 %42, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 Changed type of: %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 Changed type of: %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 Changed type of: %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 Changed type of: %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1, 3000))\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
  from: null
  to:   [105 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [26 x i8] c"scalar(range(-512, 512) )\00"
  from: null
  to:   [26 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [24 x i8] c"target('corr') scalar()\00"
  from: null
  to:   [24 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1,4096) )\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 260)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 240)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %float_n = alloca double, align 8 [in fun] main
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
[Deducing from] br label %for.body3.i9 [in fun] main
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body22.i [in fun] main
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
[Deducing from] br label %for.body63.i [in fun] main
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body96.i [in fun] main
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] br label %for.body103.i [in fun] main
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
[Deducing from] br label %for.body3.i17 [in fun] main
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [32 x i8] c"scalar(range(0, 240)  disabled)\00"
 deduced type: [32 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] [24 x i8] c"target('corr') scalar()\00"
 deduced type: [24 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 deduced type: void
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 deduced type: i64
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 deduced type: i32
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 deduced type: i32
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] [23 x i8] c"scalar(range(1, 3000))\00"
 deduced type: [23 x i8]
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] [26 x i8] c"scalar(range(-512, 512) )\00"
 deduced type: [26 x i8]
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 deduced type: ptr
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] [23 x i8] c"scalar(range(1,4096) )\00"
 deduced type: [23 x i8]
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 deduced type: i64
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 deduced type: i1
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 deduced type: double*
[Value] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 deduced type: i32
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %42 = trunc i64 %41 to i32 [in fun] main
 deduced type: i32
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 deduced type: i64
[Value] br label %for.body3.i9 [in fun] main
 deduced type: void
[Value] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 deduced type: i64
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] [32 x i8] c"scalar(range(0, 260)  disabled)\00"
 deduced type: [32 x i8]
[Value] i64 460800
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 deduced type: i64
[Value] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 deduced type: <2 x double>
[Value] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %for.body.i [in fun] main
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] br label %for.body96.i [in fun] main
 deduced type: void
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %div43.i = fdiv double %25, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %conv4.i = sitofp i32 %0 to double [in fun] main
 deduced type: double
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] i32 117
 deduced type: i32
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %stddev = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 deduced type: i64
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 deduced type: i64
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 deduced type: i1
[Value] %float_n = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void exit(i32)
 deduced type: void
[Value] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %sub.i.3 = fsub double %24, %16 [in fun] main
 deduced type: double
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
 deduced type: [105 x i8]
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] i64 16
 deduced type: i64
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] double 1.000000e+01
 deduced type: double
[Value] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 deduced type: i32
[Value] void polybench_timer_print()
 deduced type: void
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 deduced type: i64
[Value] i32 26
 deduced type: i32
[Value] i64 5
 deduced type: i64
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 deduced type: i32
[Value] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 deduced type: double
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] i32 25
 deduced type: i32
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] i64 260
 deduced type: i64
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] double 2.600000e+02
 deduced type: double
[Value] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 deduced type: double
[Value] i32 116
 deduced type: i32
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 1
 deduced type: i64
[Value] i64 6
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %8 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] i32 1
 deduced type: i32
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 8
 deduced type: i64
[Value] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] i32 115
 deduced type: i32
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 deduced type: i1
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] %eps.i = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 deduced type: <2 x double>
[Value] double sqrt(double)
 deduced type: double
[Value] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] i64 0
 deduced type: i64
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 deduced type: i64
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] br label %for.body22.i [in fun] main
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] i64 4096
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 deduced type: i64
[Value] i32 114
 deduced type: i32
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] i32 118
 deduced type: i32
[Value] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 deduced type: [26 x i8]*
[Value] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 deduced type: i64
[Value] double 1.000000e+00
 deduced type: double
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void polybench_timer_start()
 deduced type: void
[Value] %add.i12 = fadd double %10, %11 [in fun] main
 deduced type: double
[Value] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 deduced type: [24 x i8]*
[Value] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 deduced type: i64
[Value] %mean = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] ptr null
 deduced type: ptr
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] i64 499200
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 deduced type: [105 x i8]*
[Value] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] i32 printf(ptr)
 deduced type: i32
[Value] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] <2 x double> <double 2.400000e+02, double 2.400000e+02>
 deduced type: <2 x double>
[Value] i64 1920
 deduced type: i64
[Value] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] <2 x double> <double 2.600000e+02, double 2.600000e+02>
 deduced type: <2 x double>
[Value] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 deduced type: double
[Value] i64 240
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] i64 7
 deduced type: i64
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] i1 true
 deduced type: i1
[Value] i32 65
 deduced type: i32
[Value] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] i64 50
 deduced type: i64
[Value] double 0.000000e+00
 deduced type: double
[Value] i64 3
 deduced type: i64
[Value] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] double 1.000000e-01
 deduced type: double
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 deduced type: double
[Value] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 deduced type: i1
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] i32 20
 deduced type: i32
[Value] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 deduced type: i64
[Value] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] i64 4
 deduced type: i64
[Value] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 deduced type: i64
[Value] i64 239
 deduced type: i64
[Value] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 deduced type: i64
[Value] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 deduced type: i1
[Value] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 deduced type: double
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] br label %for.body3.i17 [in fun] main
 deduced type: void
[Value] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 deduced type: void
[Value] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 deduced type: i64
[Value] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i = fsub double %18, %16 [in fun] main
 deduced type: double
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 deduced type: double
[Value] i64 11
 deduced type: i64
[Value] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i.1 = fsub double %20, %16 [in fun] main
 deduced type: double
[Value] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 deduced type: double
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 deduced type: i64
[Value] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 deduced type: [240 x [240 x double]]*
[Value] %sub.i.2 = fsub double %22, %16 [in fun] main
 deduced type: double
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 deduced type: double
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] %div78.i = fdiv double %30, %mul.i [in fun] main
 deduced type: double
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] double %0 [arg of fun] sqrt
 deduced type: double
[Value] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %rem.i = urem i32 %42, 20 [in fun] main
 deduced type: i32
[Value] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 deduced type: [260 x [240 x double]]*
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 deduced type: double
[Value] i64 4194560
 deduced type: i64
[Value] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 deduced type: double
[Value] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 deduced type: i64
[Value] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 deduced type: double
[Value] br label %for.body63.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %sub70.i = fsub double %28, %27 [in fun] main
 deduced type: double
[Value] %mul.i = fmul double %call71.i, %29 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 deduced type: i1
[Value] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 deduced type: double
[Value] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 deduced type: i1
[Value] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 deduced type: double
[Value] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] br label %for.body103.i [in fun] main
 deduced type: void
[Value] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 deduced type: double*
[Value] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 deduced type: i1
[Value] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 deduced type: double
[Value] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 deduced type: i64
[Value] i32 10
 deduced type: i32
[Value] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 deduced type: i1
[Value] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] br label %for.cond1.preheader.i16 [in fun] main
 deduced type: void
[Value] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 deduced type: i64
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 from: null
 to:   [105 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i64 499200
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 from: null
 to:   [26 x i8]*
Changed type of: i32 115
 from: null
 to:   i32
Changed type of: i64 460800
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 from: null
 to:   [24 x i8]*
Changed type of: i32 116
 from: null
 to:   i32
Changed type of: i64 1920
 from: null
 to:   i64
Changed type of: @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: i32 117
 from: null
 to:   i32
Changed type of: @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: i32 118
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 25
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 26
 from: null
 to:   i32
Changed type of: double 2.600000e+02
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> <double 2.400000e+02, double 2.400000e+02>
 from: null
 to:   <2 x double>
Changed type of: <2 x double> <double 2.600000e+02, double 2.600000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 260
 from: null
 to:   i64
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: i32 65
 from: null
 to:   i32
Changed type of: double 1.000000e-01
 from: null
 to:   double
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double sqrt(double)
 from: null
 to:   double
Changed type of: double 1.000000e+00
 from: null
 to:   double
Changed type of: i64 239
 from: null
 to:   i64
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %float_n = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [260 x [240 x double]]*
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [240 x [240 x double]]*
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 Changed type of: %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 Changed type of: %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
 Changed type of: %conv4.i = sitofp i32 %0 to double [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 Changed type of: %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 Changed type of: %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 Changed type of: %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 Changed type of: %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %8 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 Changed type of: %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 Changed type of: %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
 Changed type of: br label %for.body.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body3.i9 [in fun] main
 Changed type of: br label %for.body3.i9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 Changed type of: %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 Changed type of: %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
 Changed type of: %add.i12 = fadd double %10, %11 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 Changed type of: %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 Changed type of: %add.i12.1 = fadd double %add.i12, %12 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 Changed type of: %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 Changed type of: %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 Changed type of: %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 Changed type of: %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 Changed type of: %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 Changed type of: %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 Changed type of: %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 Changed type of: %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 Changed type of: %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
  from: null
  to:   double
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 Changed type of: %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 Changed type of: %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.body22.i [in fun] main
 Changed type of: br label %for.body22.i [in fun] main
  from: null
  to:   void
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 Changed type of: %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 Changed type of: %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
 Changed type of: %sub.i = fsub double %18, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 Creating initial type:
 Changed type of: %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 Changed type of: %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
 Changed type of: %sub.i.1 = fsub double %20, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 Creating initial type:
 Changed type of: %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 Changed type of: %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
 Changed type of: %sub.i.2 = fsub double %22, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 Creating initial type:
 Changed type of: %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 Changed type of: %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
 Changed type of: %sub.i.3 = fsub double %24, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 Creating initial type:
 Changed type of: %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 Changed type of: %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 Changed type of: %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
 Changed type of: %div43.i = fdiv double %25, %9 [in fun] main
  from: null
  to:   double
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 Creating initial type:
 Changed type of: %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] sqrt
  from: null
  to:   double
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 Changed type of: %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
  from: null
  to:   i1
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 Changed type of: %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
  from: null
  to:   double
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 Changed type of: %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 Changed type of: %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 Changed type of: %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body63.i [in fun] main
 Changed type of: br label %for.body63.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 Changed type of: %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
 Changed type of: %sub70.i = fsub double %28, %27 [in fun] main
  from: null
  to:   double
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 Creating initial type:
 Changed type of: %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
 Changed type of: %mul.i = fmul double %call71.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
 Changed type of: %div78.i = fdiv double %30, %mul.i [in fun] main
  from: null
  to:   double
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 Changed type of: %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 Changed type of: %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 Changed type of: %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 Changed type of: %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 Changed type of: %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 Changed type of: %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 Changed type of: %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body96.i [in fun] main
 Changed type of: br label %for.body96.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 Changed type of: %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] br label %for.body103.i [in fun] main
 Changed type of: br label %for.body103.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 Changed type of: %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 Changed type of: %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 Creating initial type:
 Changed type of: %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 Changed type of: %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 Creating initial type:
 Changed type of: %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 Changed type of: %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 Changed type of: %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 Changed type of: %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 Changed type of: %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: ptr
  to:   double*
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 Creating initial type:
 Changed type of: %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
 Changed type of: br label %for.cond1.preheader.i16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 Changed type of: %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i17 [in fun] main
 Changed type of: br label %for.body3.i17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 Changed type of: %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
  from: null
  to:   i64
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
 Changed type of: %42 = trunc i64 %41 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
 Changed type of: %rem.i = urem i32 %42, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 Changed type of: %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 Changed type of: %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 Changed type of: %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 Changed type of: %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1, 3000))\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
  from: null
  to:   [105 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [26 x i8] c"scalar(range(-512, 512) )\00"
  from: null
  to:   [26 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [24 x i8] c"target('corr') scalar()\00"
  from: null
  to:   [24 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1,4096) )\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 260)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 240)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %float_n = alloca double, align 8 [in fun] main
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
[Deducing from] br label %for.body3.i9 [in fun] main
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body22.i [in fun] main
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
[Deducing from] br label %for.body63.i [in fun] main
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body96.i [in fun] main
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] br label %for.body103.i [in fun] main
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
[Deducing from] br label %for.body3.i17 [in fun] main
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [32 x i8] c"scalar(range(0, 240)  disabled)\00"
 deduced type: [32 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] [24 x i8] c"target('corr') scalar()\00"
 deduced type: [24 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 deduced type: void
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 deduced type: i64
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 deduced type: i32
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] [23 x i8] c"scalar(range(1, 3000))\00"
 deduced type: [23 x i8]
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] [26 x i8] c"scalar(range(-512, 512) )\00"
 deduced type: [26 x i8]
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 deduced type: ptr
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 deduced type: i32
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] [23 x i8] c"scalar(range(1,4096) )\00"
 deduced type: [23 x i8]
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 deduced type: i64
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 deduced type: i1
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 deduced type: double*
[Value] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 deduced type: i32
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %42 = trunc i64 %41 to i32 [in fun] main
 deduced type: i32
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 deduced type: i64
[Value] br label %for.body3.i9 [in fun] main
 deduced type: void
[Value] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 deduced type: i64
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] [32 x i8] c"scalar(range(0, 260)  disabled)\00"
 deduced type: [32 x i8]
[Value] i64 460800
 deduced type: i64
[Value] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 deduced type: i64
[Value] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 deduced type: <2 x double>
[Value] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %for.body.i [in fun] main
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] br label %for.body96.i [in fun] main
 deduced type: void
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %div43.i = fdiv double %25, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %conv4.i = sitofp i32 %0 to double [in fun] main
 deduced type: double
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] i32 117
 deduced type: i32
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %stddev = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 deduced type: i64
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 deduced type: i64
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 deduced type: i1
[Value] %float_n = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void exit(i32)
 deduced type: void
[Value] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %sub.i.3 = fsub double %24, %16 [in fun] main
 deduced type: double
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
 deduced type: [105 x i8]
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] i64 16
 deduced type: i64
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] double 1.000000e+01
 deduced type: double
[Value] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 deduced type: i32
[Value] void polybench_timer_print()
 deduced type: void
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 deduced type: i64
[Value] i32 26
 deduced type: i32
[Value] i64 5
 deduced type: i64
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 deduced type: i32
[Value] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 deduced type: double
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] i32 25
 deduced type: i32
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] i64 260
 deduced type: i64
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] double 2.600000e+02
 deduced type: double
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 deduced type: double
[Value] i32 116
 deduced type: i32
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 1
 deduced type: i64
[Value] i64 6
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %8 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] i32 1
 deduced type: i32
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 8
 deduced type: i64
[Value] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] i32 115
 deduced type: i32
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 deduced type: i1
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] i64 2
 deduced type: i64
[Value] %eps.i = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 deduced type: <2 x double>
[Value] double sqrt(double)
 deduced type: double
[Value] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] i64 0
 deduced type: i64
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 deduced type: i64
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] br label %for.body22.i [in fun] main
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] i64 4096
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 deduced type: i64
[Value] i32 114
 deduced type: i32
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] i32 118
 deduced type: i32
[Value] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 deduced type: [26 x i8]*
[Value] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 deduced type: i64
[Value] double 1.000000e+00
 deduced type: double
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void polybench_timer_start()
 deduced type: void
[Value] %add.i12 = fadd double %10, %11 [in fun] main
 deduced type: double
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 deduced type: [24 x i8]*
[Value] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 deduced type: i64
[Value] %mean = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] ptr null
 deduced type: ptr
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] i64 499200
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 deduced type: [105 x i8]*
[Value] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] i32 printf(ptr)
 deduced type: i32
[Value] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] <2 x double> <double 2.400000e+02, double 2.400000e+02>
 deduced type: <2 x double>
[Value] i64 1920
 deduced type: i64
[Value] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] <2 x double> <double 2.600000e+02, double 2.600000e+02>
 deduced type: <2 x double>
[Value] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 deduced type: double
[Value] i64 240
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] i64 7
 deduced type: i64
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] i1 true
 deduced type: i1
[Value] i32 65
 deduced type: i32
[Value] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] i64 50
 deduced type: i64
[Value] double 0.000000e+00
 deduced type: double
[Value] i64 3
 deduced type: i64
[Value] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] double 1.000000e-01
 deduced type: double
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 deduced type: double
[Value] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] i32 20
 deduced type: i32
[Value] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 deduced type: i64
[Value] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] i64 4
 deduced type: i64
[Value] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 deduced type: i64
[Value] i64 239
 deduced type: i64
[Value] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 deduced type: i64
[Value] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 deduced type: i1
[Value] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 deduced type: double
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br label %for.body3.i17 [in fun] main
 deduced type: void
[Value] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 deduced type: void
[Value] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 deduced type: i64
[Value] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i = fsub double %18, %16 [in fun] main
 deduced type: double
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 deduced type: double
[Value] i64 11
 deduced type: i64
[Value] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i.1 = fsub double %20, %16 [in fun] main
 deduced type: double
[Value] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 deduced type: double
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 deduced type: i64
[Value] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 deduced type: [240 x [240 x double]]*
[Value] %sub.i.2 = fsub double %22, %16 [in fun] main
 deduced type: double
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 deduced type: double
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] %div78.i = fdiv double %30, %mul.i [in fun] main
 deduced type: double
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] double %0 [arg of fun] sqrt
 deduced type: double
[Value] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %rem.i = urem i32 %42, 20 [in fun] main
 deduced type: i32
[Value] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 deduced type: [260 x [240 x double]]*
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 deduced type: double
[Value] i64 4194560
 deduced type: i64
[Value] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 deduced type: double
[Value] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 deduced type: i64
[Value] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 deduced type: double
[Value] br label %for.body63.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %sub70.i = fsub double %28, %27 [in fun] main
 deduced type: double
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %mul.i = fmul double %call71.i, %29 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 deduced type: i1
[Value] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 deduced type: double
[Value] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 deduced type: i1
[Value] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 deduced type: double
[Value] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] br label %for.body103.i [in fun] main
 deduced type: void
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 deduced type: double*
[Value] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 deduced type: i1
[Value] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 deduced type: double
[Value] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 deduced type: i64
[Value] i32 10
 deduced type: i32
[Value] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 deduced type: i1
[Value] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] br label %for.cond1.preheader.i16 [in fun] main
 deduced type: void
[Value] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 deduced type: i64
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 from: null
 to:   [105 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i64 499200
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 from: null
 to:   [26 x i8]*
Changed type of: i32 115
 from: null
 to:   i32
Changed type of: i64 460800
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 from: null
 to:   [24 x i8]*
Changed type of: i32 116
 from: null
 to:   i32
Changed type of: i64 1920
 from: null
 to:   i64
Changed type of: @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: i32 117
 from: null
 to:   i32
Changed type of: @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: i32 118
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 25
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 26
 from: null
 to:   i32
Changed type of: double 2.600000e+02
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> <double 2.400000e+02, double 2.400000e+02>
 from: null
 to:   <2 x double>
Changed type of: <2 x double> <double 2.600000e+02, double 2.600000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 260
 from: null
 to:   i64
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: i32 65
 from: null
 to:   i32
Changed type of: double 1.000000e-01
 from: null
 to:   double
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double sqrt(double)
 from: null
 to:   double
Changed type of: double 1.000000e+00
 from: null
 to:   double
Changed type of: i64 239
 from: null
 to:   i64
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %float_n = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [260 x [240 x double]]*
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [240 x [240 x double]]*
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 Changed type of: %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 Changed type of: %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
 Changed type of: %conv4.i = sitofp i32 %0 to double [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 Changed type of: %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 Changed type of: %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 Changed type of: %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 Changed type of: %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %8 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 Changed type of: %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 Changed type of: %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
 Changed type of: br label %for.body.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body3.i9 [in fun] main
 Changed type of: br label %for.body3.i9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 Changed type of: %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 Changed type of: %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
 Changed type of: %add.i12 = fadd double %10, %11 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 Changed type of: %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 Changed type of: %add.i12.1 = fadd double %add.i12, %12 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 Changed type of: %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 Changed type of: %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 Changed type of: %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 Changed type of: %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 Changed type of: %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 Changed type of: %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 Changed type of: %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 Changed type of: %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 Changed type of: %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
  from: null
  to:   double
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 Changed type of: %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 Changed type of: %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.body22.i [in fun] main
 Changed type of: br label %for.body22.i [in fun] main
  from: null
  to:   void
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 Changed type of: %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 Changed type of: %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
 Changed type of: %sub.i = fsub double %18, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 Creating initial type:
 Changed type of: %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 Changed type of: %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
 Changed type of: %sub.i.1 = fsub double %20, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 Creating initial type:
 Changed type of: %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 Changed type of: %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
 Changed type of: %sub.i.2 = fsub double %22, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 Creating initial type:
 Changed type of: %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 Changed type of: %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
 Changed type of: %sub.i.3 = fsub double %24, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 Creating initial type:
 Changed type of: %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 Changed type of: %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 Changed type of: %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
 Changed type of: %div43.i = fdiv double %25, %9 [in fun] main
  from: null
  to:   double
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 Creating initial type:
 Changed type of: %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] sqrt
  from: null
  to:   double
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 Changed type of: %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
  from: null
  to:   i1
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 Changed type of: %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
  from: null
  to:   double
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 Changed type of: %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 Changed type of: %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 Changed type of: %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body63.i [in fun] main
 Changed type of: br label %for.body63.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 Changed type of: %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
 Changed type of: %sub70.i = fsub double %28, %27 [in fun] main
  from: null
  to:   double
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 Creating initial type:
 Changed type of: %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
 Changed type of: %mul.i = fmul double %call71.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
 Changed type of: %div78.i = fdiv double %30, %mul.i [in fun] main
  from: null
  to:   double
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 Changed type of: %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 Changed type of: %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 Changed type of: %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 Changed type of: %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 Changed type of: %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 Changed type of: %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 Changed type of: %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body96.i [in fun] main
 Changed type of: br label %for.body96.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 Changed type of: %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] br label %for.body103.i [in fun] main
 Changed type of: br label %for.body103.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 Changed type of: %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 Changed type of: %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 Creating initial type:
 Changed type of: %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 Changed type of: %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 Creating initial type:
 Changed type of: %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 Changed type of: %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 Changed type of: %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 Changed type of: %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 Changed type of: %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: ptr
  to:   double*
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 Creating initial type:
 Changed type of: %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
 Changed type of: br label %for.cond1.preheader.i16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 Changed type of: %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i17 [in fun] main
 Changed type of: br label %for.body3.i17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 Changed type of: %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
  from: null
  to:   i64
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
 Changed type of: %42 = trunc i64 %41 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
 Changed type of: %rem.i = urem i32 %42, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 Changed type of: %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 Changed type of: %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 Changed type of: %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 Changed type of: %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1, 3000))\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
  from: null
  to:   [105 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [26 x i8] c"scalar(range(-512, 512) )\00"
  from: null
  to:   [26 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [24 x i8] c"target('corr') scalar()\00"
  from: null
  to:   [24 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1,4096) )\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 260)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 240)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %float_n = alloca double, align 8 [in fun] main
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
[Deducing from] br label %for.body3.i9 [in fun] main
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body22.i [in fun] main
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
[Deducing from] br label %for.body63.i [in fun] main
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body96.i [in fun] main
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] br label %for.body103.i [in fun] main
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
[Deducing from] br label %for.body3.i17 [in fun] main
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [32 x i8] c"scalar(range(0, 240)  disabled)\00"
 deduced type: [32 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] [24 x i8] c"target('corr') scalar()\00"
 deduced type: [24 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 deduced type: void
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 deduced type: i64
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 deduced type: i32
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 deduced type: i32
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] [23 x i8] c"scalar(range(1, 3000))\00"
 deduced type: [23 x i8]
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] [26 x i8] c"scalar(range(-512, 512) )\00"
 deduced type: [26 x i8]
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 deduced type: ptr
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] [23 x i8] c"scalar(range(1,4096) )\00"
 deduced type: [23 x i8]
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 deduced type: i64
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 deduced type: i1
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 deduced type: double*
[Value] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 deduced type: i32
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %42 = trunc i64 %41 to i32 [in fun] main
 deduced type: i32
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 deduced type: i64
[Value] br label %for.body3.i9 [in fun] main
 deduced type: void
[Value] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 deduced type: i64
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] [32 x i8] c"scalar(range(0, 260)  disabled)\00"
 deduced type: [32 x i8]
[Value] i64 460800
 deduced type: i64
[Value] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 deduced type: i64
[Value] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 deduced type: <2 x double>
[Value] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %for.body.i [in fun] main
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] br label %for.body96.i [in fun] main
 deduced type: void
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %div43.i = fdiv double %25, %9 [in fun] main
 deduced type: double
[Value] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %conv4.i = sitofp i32 %0 to double [in fun] main
 deduced type: double
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] i32 117
 deduced type: i32
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %stddev = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 deduced type: i64
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 deduced type: i64
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 deduced type: i1
[Value] %float_n = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void exit(i32)
 deduced type: void
[Value] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %sub.i.3 = fsub double %24, %16 [in fun] main
 deduced type: double
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
 deduced type: [105 x i8]
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] i64 16
 deduced type: i64
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] double 1.000000e+01
 deduced type: double
[Value] i64 7
 deduced type: i64
[Value] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 deduced type: i32
[Value] void polybench_timer_print()
 deduced type: void
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 deduced type: i64
[Value] i32 26
 deduced type: i32
[Value] i64 5
 deduced type: i64
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 deduced type: i32
[Value] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 deduced type: double
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] i32 25
 deduced type: i32
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] i64 260
 deduced type: i64
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] double 2.600000e+02
 deduced type: double
[Value] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 deduced type: double
[Value] i32 116
 deduced type: i32
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 1
 deduced type: i64
[Value] i64 6
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %8 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] i32 1
 deduced type: i32
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 8
 deduced type: i64
[Value] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] i32 115
 deduced type: i32
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 deduced type: i1
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] %eps.i = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 deduced type: <2 x double>
[Value] double sqrt(double)
 deduced type: double
[Value] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] i64 0
 deduced type: i64
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 deduced type: i64
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] br label %for.body22.i [in fun] main
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] i64 4096
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 deduced type: i64
[Value] i32 114
 deduced type: i32
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] i32 118
 deduced type: i32
[Value] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 deduced type: [26 x i8]*
[Value] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 deduced type: i64
[Value] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] double 1.000000e+00
 deduced type: double
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void polybench_timer_start()
 deduced type: void
[Value] %add.i12 = fadd double %10, %11 [in fun] main
 deduced type: double
[Value] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 deduced type: [24 x i8]*
[Value] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 deduced type: i64
[Value] %mean = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] ptr null
 deduced type: ptr
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] i64 499200
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 deduced type: [105 x i8]*
[Value] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] i32 printf(ptr)
 deduced type: i32
[Value] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] <2 x double> <double 2.400000e+02, double 2.400000e+02>
 deduced type: <2 x double>
[Value] i64 1920
 deduced type: i64
[Value] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] <2 x double> <double 2.600000e+02, double 2.600000e+02>
 deduced type: <2 x double>
[Value] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 deduced type: double
[Value] i64 240
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i1 true
 deduced type: i1
[Value] i32 65
 deduced type: i32
[Value] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] i64 50
 deduced type: i64
[Value] double 0.000000e+00
 deduced type: double
[Value] i64 3
 deduced type: i64
[Value] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] double 1.000000e-01
 deduced type: double
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 deduced type: double
[Value] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 deduced type: i1
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] i32 20
 deduced type: i32
[Value] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] i64 4
 deduced type: i64
[Value] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 deduced type: i64
[Value] i64 239
 deduced type: i64
[Value] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 deduced type: i64
[Value] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 deduced type: i1
[Value] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 deduced type: double
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] br label %for.body3.i17 [in fun] main
 deduced type: void
[Value] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 deduced type: void
[Value] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 deduced type: i64
[Value] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i = fsub double %18, %16 [in fun] main
 deduced type: double
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 deduced type: double
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] i64 11
 deduced type: i64
[Value] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i.1 = fsub double %20, %16 [in fun] main
 deduced type: double
[Value] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 deduced type: double
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 deduced type: i64
[Value] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 deduced type: [240 x [240 x double]]*
[Value] %sub.i.2 = fsub double %22, %16 [in fun] main
 deduced type: double
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 deduced type: double
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] %div78.i = fdiv double %30, %mul.i [in fun] main
 deduced type: double
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] double %0 [arg of fun] sqrt
 deduced type: double
[Value] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %rem.i = urem i32 %42, 20 [in fun] main
 deduced type: i32
[Value] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 deduced type: [260 x [240 x double]]*
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 deduced type: double
[Value] i64 4194560
 deduced type: i64
[Value] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 deduced type: double
[Value] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 deduced type: i64
[Value] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 deduced type: double
[Value] br label %for.body63.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 deduced type: i64
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %sub70.i = fsub double %28, %27 [in fun] main
 deduced type: double
[Value] %mul.i = fmul double %call71.i, %29 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 deduced type: i1
[Value] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 deduced type: double
[Value] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 deduced type: i1
[Value] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 deduced type: double
[Value] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] br label %for.body103.i [in fun] main
 deduced type: void
[Value] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 deduced type: double*
[Value] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 deduced type: i1
[Value] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 deduced type: double
[Value] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 deduced type: i64
[Value] i32 10
 deduced type: i32
[Value] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 deduced type: i1
[Value] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] br label %for.cond1.preheader.i16 [in fun] main
 deduced type: void
[Value] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 deduced type: i64
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 from: null
 to:   [105 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i64 499200
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 from: null
 to:   [26 x i8]*
Changed type of: i32 115
 from: null
 to:   i32
Changed type of: i64 460800
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 from: null
 to:   [24 x i8]*
Changed type of: i32 116
 from: null
 to:   i32
Changed type of: i64 1920
 from: null
 to:   i64
Changed type of: @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: i32 117
 from: null
 to:   i32
Changed type of: @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: i32 118
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 25
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 26
 from: null
 to:   i32
Changed type of: double 2.600000e+02
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> <double 2.400000e+02, double 2.400000e+02>
 from: null
 to:   <2 x double>
Changed type of: <2 x double> <double 2.600000e+02, double 2.600000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 260
 from: null
 to:   i64
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: i32 65
 from: null
 to:   i32
Changed type of: double 1.000000e-01
 from: null
 to:   double
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double sqrt(double)
 from: null
 to:   double
Changed type of: double 1.000000e+00
 from: null
 to:   double
Changed type of: i64 239
 from: null
 to:   i64
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %float_n = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [260 x [240 x double]]*
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [240 x [240 x double]]*
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 Changed type of: %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 Changed type of: %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
 Changed type of: %conv4.i = sitofp i32 %0 to double [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 Changed type of: %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 Changed type of: %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 Changed type of: %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 Changed type of: %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %8 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 Changed type of: %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 Changed type of: %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
 Changed type of: br label %for.body.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body3.i9 [in fun] main
 Changed type of: br label %for.body3.i9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 Changed type of: %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 Changed type of: %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
 Changed type of: %add.i12 = fadd double %10, %11 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 Changed type of: %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 Changed type of: %add.i12.1 = fadd double %add.i12, %12 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 Changed type of: %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 Changed type of: %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 Changed type of: %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 Changed type of: %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 Changed type of: %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 Changed type of: %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 Changed type of: %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 Changed type of: %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 Changed type of: %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
  from: null
  to:   double
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 Changed type of: %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 Changed type of: %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.body22.i [in fun] main
 Changed type of: br label %for.body22.i [in fun] main
  from: null
  to:   void
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 Changed type of: %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 Changed type of: %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
 Changed type of: %sub.i = fsub double %18, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 Creating initial type:
 Changed type of: %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 Changed type of: %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
 Changed type of: %sub.i.1 = fsub double %20, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 Creating initial type:
 Changed type of: %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 Changed type of: %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
 Changed type of: %sub.i.2 = fsub double %22, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 Creating initial type:
 Changed type of: %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 Changed type of: %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
 Changed type of: %sub.i.3 = fsub double %24, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 Creating initial type:
 Changed type of: %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 Changed type of: %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 Changed type of: %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
 Changed type of: %div43.i = fdiv double %25, %9 [in fun] main
  from: null
  to:   double
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 Creating initial type:
 Changed type of: %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] sqrt
  from: null
  to:   double
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 Changed type of: %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
  from: null
  to:   i1
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 Changed type of: %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
  from: null
  to:   double
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 Changed type of: %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 Changed type of: %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 Changed type of: %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body63.i [in fun] main
 Changed type of: br label %for.body63.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 Changed type of: %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
 Changed type of: %sub70.i = fsub double %28, %27 [in fun] main
  from: null
  to:   double
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 Creating initial type:
 Changed type of: %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
 Changed type of: %mul.i = fmul double %call71.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
 Changed type of: %div78.i = fdiv double %30, %mul.i [in fun] main
  from: null
  to:   double
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 Changed type of: %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 Changed type of: %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 Changed type of: %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 Changed type of: %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 Changed type of: %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 Changed type of: %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 Changed type of: %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body96.i [in fun] main
 Changed type of: br label %for.body96.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 Changed type of: %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] br label %for.body103.i [in fun] main
 Changed type of: br label %for.body103.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 Changed type of: %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 Changed type of: %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 Creating initial type:
 Changed type of: %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 Changed type of: %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 Creating initial type:
 Changed type of: %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 Changed type of: %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 Changed type of: %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 Changed type of: %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 Changed type of: %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: ptr
  to:   double*
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 Creating initial type:
 Changed type of: %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
 Changed type of: br label %for.cond1.preheader.i16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 Changed type of: %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i17 [in fun] main
 Changed type of: br label %for.body3.i17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 Changed type of: %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
  from: null
  to:   i64
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
 Changed type of: %42 = trunc i64 %41 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
 Changed type of: %rem.i = urem i32 %42, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 Changed type of: %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 Changed type of: %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 Changed type of: %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 Changed type of: %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1, 3000))\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
  from: null
  to:   [105 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [26 x i8] c"scalar(range(-512, 512) )\00"
  from: null
  to:   [26 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [24 x i8] c"target('corr') scalar()\00"
  from: null
  to:   [24 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1,4096) )\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 260)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 240)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %float_n = alloca double, align 8 [in fun] main
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
[Deducing from] br label %for.body3.i9 [in fun] main
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body22.i [in fun] main
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
[Deducing from] br label %for.body63.i [in fun] main
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body96.i [in fun] main
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] br label %for.body103.i [in fun] main
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
[Deducing from] br label %for.body3.i17 [in fun] main
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [32 x i8] c"scalar(range(0, 240)  disabled)\00"
 deduced type: [32 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] [24 x i8] c"target('corr') scalar()\00"
 deduced type: [24 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 deduced type: void
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 deduced type: i64
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 deduced type: i32
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 deduced type: i32
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] [23 x i8] c"scalar(range(1, 3000))\00"
 deduced type: [23 x i8]
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] [26 x i8] c"scalar(range(-512, 512) )\00"
 deduced type: [26 x i8]
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 deduced type: ptr
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] [23 x i8] c"scalar(range(1,4096) )\00"
 deduced type: [23 x i8]
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 deduced type: i64
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 deduced type: i1
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 deduced type: double*
[Value] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 deduced type: i32
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %42 = trunc i64 %41 to i32 [in fun] main
 deduced type: i32
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 deduced type: i64
[Value] br label %for.body3.i9 [in fun] main
 deduced type: void
[Value] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 deduced type: i64
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] [32 x i8] c"scalar(range(0, 260)  disabled)\00"
 deduced type: [32 x i8]
[Value] i64 460800
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 deduced type: i64
[Value] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 deduced type: <2 x double>
[Value] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %for.body.i [in fun] main
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] br label %for.body96.i [in fun] main
 deduced type: void
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %div43.i = fdiv double %25, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %conv4.i = sitofp i32 %0 to double [in fun] main
 deduced type: double
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] i32 117
 deduced type: i32
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %stddev = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 deduced type: i64
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 deduced type: i64
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 deduced type: i1
[Value] %float_n = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void exit(i32)
 deduced type: void
[Value] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %sub.i.3 = fsub double %24, %16 [in fun] main
 deduced type: double
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
 deduced type: [105 x i8]
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] i64 16
 deduced type: i64
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] double 1.000000e+01
 deduced type: double
[Value] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 deduced type: i32
[Value] void polybench_timer_print()
 deduced type: void
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 deduced type: i64
[Value] i32 26
 deduced type: i32
[Value] i64 5
 deduced type: i64
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 deduced type: i32
[Value] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 deduced type: double
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] i32 25
 deduced type: i32
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] i64 260
 deduced type: i64
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] double 2.600000e+02
 deduced type: double
[Value] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 deduced type: double
[Value] i32 116
 deduced type: i32
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 1
 deduced type: i64
[Value] i64 6
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %8 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] i32 1
 deduced type: i32
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 8
 deduced type: i64
[Value] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] i32 115
 deduced type: i32
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 deduced type: i1
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] %eps.i = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 deduced type: <2 x double>
[Value] double sqrt(double)
 deduced type: double
[Value] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] i64 0
 deduced type: i64
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 deduced type: i64
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] br label %for.body22.i [in fun] main
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] i64 4096
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 deduced type: i64
[Value] i32 114
 deduced type: i32
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] i32 118
 deduced type: i32
[Value] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 deduced type: [26 x i8]*
[Value] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 deduced type: i64
[Value] double 1.000000e+00
 deduced type: double
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void polybench_timer_start()
 deduced type: void
[Value] %add.i12 = fadd double %10, %11 [in fun] main
 deduced type: double
[Value] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 deduced type: [24 x i8]*
[Value] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 deduced type: i64
[Value] %mean = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] ptr null
 deduced type: ptr
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] i64 499200
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 deduced type: [105 x i8]*
[Value] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] i32 printf(ptr)
 deduced type: i32
[Value] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] <2 x double> <double 2.400000e+02, double 2.400000e+02>
 deduced type: <2 x double>
[Value] i64 1920
 deduced type: i64
[Value] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] <2 x double> <double 2.600000e+02, double 2.600000e+02>
 deduced type: <2 x double>
[Value] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 deduced type: double
[Value] i64 240
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] i64 7
 deduced type: i64
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] i1 true
 deduced type: i1
[Value] i32 65
 deduced type: i32
[Value] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] i64 50
 deduced type: i64
[Value] double 0.000000e+00
 deduced type: double
[Value] i64 3
 deduced type: i64
[Value] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] double 1.000000e-01
 deduced type: double
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 deduced type: double
[Value] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 deduced type: i1
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] i32 20
 deduced type: i32
[Value] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 deduced type: i64
[Value] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] i64 4
 deduced type: i64
[Value] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 deduced type: i64
[Value] i64 239
 deduced type: i64
[Value] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 deduced type: i64
[Value] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 deduced type: i1
[Value] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 deduced type: double
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] br label %for.body3.i17 [in fun] main
 deduced type: void
[Value] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 deduced type: void
[Value] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 deduced type: i64
[Value] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i = fsub double %18, %16 [in fun] main
 deduced type: double
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 deduced type: double
[Value] i64 11
 deduced type: i64
[Value] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i.1 = fsub double %20, %16 [in fun] main
 deduced type: double
[Value] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 deduced type: double
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 deduced type: i64
[Value] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 deduced type: [240 x [240 x double]]*
[Value] %sub.i.2 = fsub double %22, %16 [in fun] main
 deduced type: double
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 deduced type: double
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] %div78.i = fdiv double %30, %mul.i [in fun] main
 deduced type: double
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] double %0 [arg of fun] sqrt
 deduced type: double
[Value] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %rem.i = urem i32 %42, 20 [in fun] main
 deduced type: i32
[Value] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 deduced type: [260 x [240 x double]]*
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 deduced type: double
[Value] i64 4194560
 deduced type: i64
[Value] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 deduced type: double
[Value] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 deduced type: i64
[Value] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 deduced type: double
[Value] br label %for.body63.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %sub70.i = fsub double %28, %27 [in fun] main
 deduced type: double
[Value] %mul.i = fmul double %call71.i, %29 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 deduced type: i1
[Value] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 deduced type: double
[Value] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 deduced type: i1
[Value] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 deduced type: double
[Value] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] br label %for.body103.i [in fun] main
 deduced type: void
[Value] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 deduced type: double*
[Value] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 deduced type: i1
[Value] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 deduced type: double
[Value] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 deduced type: i64
[Value] i32 10
 deduced type: i32
[Value] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 deduced type: i1
[Value] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] br label %for.cond1.preheader.i16 [in fun] main
 deduced type: void
[Value] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 deduced type: i64
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 from: null
 to:   [105 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i64 499200
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 from: null
 to:   [26 x i8]*
Changed type of: i32 115
 from: null
 to:   i32
Changed type of: i64 460800
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 from: null
 to:   [24 x i8]*
Changed type of: i32 116
 from: null
 to:   i32
Changed type of: i64 1920
 from: null
 to:   i64
Changed type of: @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: i32 117
 from: null
 to:   i32
Changed type of: @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: i32 118
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 25
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 26
 from: null
 to:   i32
Changed type of: double 2.600000e+02
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> <double 2.400000e+02, double 2.400000e+02>
 from: null
 to:   <2 x double>
Changed type of: <2 x double> <double 2.600000e+02, double 2.600000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 260
 from: null
 to:   i64
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: i32 65
 from: null
 to:   i32
Changed type of: double 1.000000e-01
 from: null
 to:   double
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double sqrt(double)
 from: null
 to:   double
Changed type of: double 1.000000e+00
 from: null
 to:   double
Changed type of: i64 239
 from: null
 to:   i64
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %float_n = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [260 x [240 x double]]*
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [240 x [240 x double]]*
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 Changed type of: %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 Changed type of: %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
 Changed type of: %conv4.i = sitofp i32 %0 to double [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 Changed type of: %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 Changed type of: %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 Changed type of: %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 Changed type of: %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %8 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 Changed type of: %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 Changed type of: %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
 Changed type of: br label %for.body.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body3.i9 [in fun] main
 Changed type of: br label %for.body3.i9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 Changed type of: %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 Changed type of: %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
 Changed type of: %add.i12 = fadd double %10, %11 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 Changed type of: %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 Changed type of: %add.i12.1 = fadd double %add.i12, %12 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 Changed type of: %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 Changed type of: %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 Changed type of: %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 Changed type of: %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 Changed type of: %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 Changed type of: %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 Changed type of: %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 Changed type of: %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 Changed type of: %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
  from: null
  to:   double
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 Changed type of: %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 Changed type of: %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.body22.i [in fun] main
 Changed type of: br label %for.body22.i [in fun] main
  from: null
  to:   void
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 Changed type of: %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 Changed type of: %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
 Changed type of: %sub.i = fsub double %18, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 Creating initial type:
 Changed type of: %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 Changed type of: %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
 Changed type of: %sub.i.1 = fsub double %20, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 Creating initial type:
 Changed type of: %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 Changed type of: %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
 Changed type of: %sub.i.2 = fsub double %22, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 Creating initial type:
 Changed type of: %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 Changed type of: %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
 Changed type of: %sub.i.3 = fsub double %24, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 Creating initial type:
 Changed type of: %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 Changed type of: %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 Changed type of: %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
 Changed type of: %div43.i = fdiv double %25, %9 [in fun] main
  from: null
  to:   double
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 Creating initial type:
 Changed type of: %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] sqrt
  from: null
  to:   double
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 Changed type of: %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
  from: null
  to:   i1
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 Changed type of: %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
  from: null
  to:   double
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 Changed type of: %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 Changed type of: %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 Changed type of: %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body63.i [in fun] main
 Changed type of: br label %for.body63.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 Changed type of: %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
 Changed type of: %sub70.i = fsub double %28, %27 [in fun] main
  from: null
  to:   double
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 Creating initial type:
 Changed type of: %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
 Changed type of: %mul.i = fmul double %call71.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
 Changed type of: %div78.i = fdiv double %30, %mul.i [in fun] main
  from: null
  to:   double
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 Changed type of: %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 Changed type of: %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 Changed type of: %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 Changed type of: %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 Changed type of: %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 Changed type of: %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 Changed type of: %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body96.i [in fun] main
 Changed type of: br label %for.body96.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 Changed type of: %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] br label %for.body103.i [in fun] main
 Changed type of: br label %for.body103.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 Changed type of: %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 Changed type of: %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 Creating initial type:
 Changed type of: %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 Changed type of: %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 Creating initial type:
 Changed type of: %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 Changed type of: %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 Changed type of: %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 Changed type of: %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 Changed type of: %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: ptr
  to:   double*
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 Creating initial type:
 Changed type of: %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
 Changed type of: br label %for.cond1.preheader.i16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 Changed type of: %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i17 [in fun] main
 Changed type of: br label %for.body3.i17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 Changed type of: %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
  from: null
  to:   i64
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
 Changed type of: %42 = trunc i64 %41 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
 Changed type of: %rem.i = urem i32 %42, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 Changed type of: %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 Changed type of: %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 Changed type of: %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 Changed type of: %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1, 3000))\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
  from: null
  to:   [105 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [26 x i8] c"scalar(range(-512, 512) )\00"
  from: null
  to:   [26 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [24 x i8] c"target('corr') scalar()\00"
  from: null
  to:   [24 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1,4096) )\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 260)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 240)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %float_n = alloca double, align 8 [in fun] main
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
[Deducing from] br label %for.body3.i9 [in fun] main
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body22.i [in fun] main
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
[Deducing from] br label %for.body63.i [in fun] main
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body96.i [in fun] main
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] br label %for.body103.i [in fun] main
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
[Deducing from] br label %for.body3.i17 [in fun] main
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [32 x i8] c"scalar(range(0, 240)  disabled)\00"
 deduced type: [32 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] [24 x i8] c"target('corr') scalar()\00"
 deduced type: [24 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 deduced type: void
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 deduced type: i64
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 deduced type: i32
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 deduced type: i32
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] [23 x i8] c"scalar(range(1, 3000))\00"
 deduced type: [23 x i8]
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] [26 x i8] c"scalar(range(-512, 512) )\00"
 deduced type: [26 x i8]
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 deduced type: ptr
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] [23 x i8] c"scalar(range(1,4096) )\00"
 deduced type: [23 x i8]
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 deduced type: i64
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 deduced type: i1
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 deduced type: double*
[Value] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 deduced type: i32
[Value] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %42 = trunc i64 %41 to i32 [in fun] main
 deduced type: i32
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 deduced type: i64
[Value] br label %for.body3.i9 [in fun] main
 deduced type: void
[Value] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 deduced type: i64
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] [32 x i8] c"scalar(range(0, 260)  disabled)\00"
 deduced type: [32 x i8]
[Value] i64 460800
 deduced type: i64
[Value] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 deduced type: i64
[Value] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 deduced type: <2 x double>
[Value] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %for.body.i [in fun] main
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] br label %for.body96.i [in fun] main
 deduced type: void
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %div43.i = fdiv double %25, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %conv4.i = sitofp i32 %0 to double [in fun] main
 deduced type: double
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] i32 117
 deduced type: i32
[Value] %stddev = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 deduced type: i64
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 deduced type: i64
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 deduced type: i1
[Value] %float_n = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void exit(i32)
 deduced type: void
[Value] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %sub.i.3 = fsub double %24, %16 [in fun] main
 deduced type: double
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
 deduced type: [105 x i8]
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] i64 16
 deduced type: i64
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] double 1.000000e+01
 deduced type: double
[Value] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 deduced type: i32
[Value] void polybench_timer_print()
 deduced type: void
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 deduced type: i64
[Value] i32 26
 deduced type: i32
[Value] i64 5
 deduced type: i64
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 deduced type: i32
[Value] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 deduced type: double
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] i32 25
 deduced type: i32
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] i64 260
 deduced type: i64
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] double 2.600000e+02
 deduced type: double
[Value] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 deduced type: double
[Value] i32 116
 deduced type: i32
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 1
 deduced type: i64
[Value] i64 6
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %8 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] i32 1
 deduced type: i32
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 8
 deduced type: i64
[Value] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] i32 115
 deduced type: i32
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 deduced type: i1
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] %eps.i = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 deduced type: <2 x double>
[Value] double sqrt(double)
 deduced type: double
[Value] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] i64 0
 deduced type: i64
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 deduced type: i64
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] br label %for.body22.i [in fun] main
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] i64 4096
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 deduced type: i64
[Value] i32 114
 deduced type: i32
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] i32 118
 deduced type: i32
[Value] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 deduced type: [26 x i8]*
[Value] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 deduced type: i64
[Value] double 1.000000e+00
 deduced type: double
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void polybench_timer_start()
 deduced type: void
[Value] %add.i12 = fadd double %10, %11 [in fun] main
 deduced type: double
[Value] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 deduced type: [24 x i8]*
[Value] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 deduced type: i64
[Value] %mean = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] ptr null
 deduced type: ptr
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] i64 499200
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 deduced type: [105 x i8]*
[Value] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] i32 printf(ptr)
 deduced type: i32
[Value] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] <2 x double> <double 2.400000e+02, double 2.400000e+02>
 deduced type: <2 x double>
[Value] i64 1920
 deduced type: i64
[Value] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] <2 x double> <double 2.600000e+02, double 2.600000e+02>
 deduced type: <2 x double>
[Value] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 deduced type: double
[Value] i64 240
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] i64 7
 deduced type: i64
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] i1 true
 deduced type: i1
[Value] i32 65
 deduced type: i32
[Value] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] i64 50
 deduced type: i64
[Value] double 0.000000e+00
 deduced type: double
[Value] i64 3
 deduced type: i64
[Value] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] double 1.000000e-01
 deduced type: double
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 deduced type: double
[Value] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 deduced type: i1
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] i32 20
 deduced type: i32
[Value] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 deduced type: i64
[Value] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] i64 4
 deduced type: i64
[Value] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 deduced type: i64
[Value] i64 239
 deduced type: i64
[Value] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 deduced type: i64
[Value] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 deduced type: i1
[Value] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 deduced type: double
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] br label %for.body3.i17 [in fun] main
 deduced type: void
[Value] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 deduced type: void
[Value] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 deduced type: i64
[Value] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %sub.i = fsub double %18, %16 [in fun] main
 deduced type: double
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 deduced type: double
[Value] i64 11
 deduced type: i64
[Value] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i.1 = fsub double %20, %16 [in fun] main
 deduced type: double
[Value] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 deduced type: double
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 deduced type: i64
[Value] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 deduced type: [240 x [240 x double]]*
[Value] %sub.i.2 = fsub double %22, %16 [in fun] main
 deduced type: double
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 deduced type: double
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] %div78.i = fdiv double %30, %mul.i [in fun] main
 deduced type: double
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] double %0 [arg of fun] sqrt
 deduced type: double
[Value] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %rem.i = urem i32 %42, 20 [in fun] main
 deduced type: i32
[Value] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 deduced type: [260 x [240 x double]]*
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 deduced type: double
[Value] i64 4194560
 deduced type: i64
[Value] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 deduced type: double
[Value] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 deduced type: i64
[Value] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 deduced type: double
[Value] br label %for.body63.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %sub70.i = fsub double %28, %27 [in fun] main
 deduced type: double
[Value] %mul.i = fmul double %call71.i, %29 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 deduced type: i1
[Value] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 deduced type: double
[Value] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 deduced type: i1
[Value] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 deduced type: double
[Value] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] br label %for.body103.i [in fun] main
 deduced type: void
[Value] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 deduced type: double*
[Value] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 deduced type: i1
[Value] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 deduced type: double
[Value] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 deduced type: i64
[Value] i32 10
 deduced type: i32
[Value] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 deduced type: i1
[Value] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] br label %for.cond1.preheader.i16 [in fun] main
 deduced type: void
[Value] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 deduced type: i64
[End of TypeDeductionAnalysis]

[TypeDeductionAnalysis]
Changed type of: i32 1
 from: null
 to:   i32
Changed type of: i64 8
 from: null
 to:   i64
Changed type of: void llvm.lifetime.start.p0(i64, ptr)
 from: null
 to:   void
Changed type of: @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 from: null
 to:   [105 x i8]*
Changed type of: i32 114
 from: null
 to:   i32
Changed type of: ptr null
 from: null
 to:   ptr
Changed type of: void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: i64 499200
 from: null
 to:   i64
Changed type of: @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 from: null
 to:   [26 x i8]*
Changed type of: i32 115
 from: null
 to:   i32
Changed type of: i64 460800
 from: null
 to:   i64
Changed type of: @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 from: null
 to:   [24 x i8]*
Changed type of: i32 116
 from: null
 to:   i32
Changed type of: i64 1920
 from: null
 to:   i64
Changed type of: @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 from: null
 to:   [9 x i8]*
Changed type of: i32 117
 from: null
 to:   i32
Changed type of: @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 from: null
 to:   [23 x i8]*
Changed type of: i32 118
 from: null
 to:   i32
Changed type of: i64 4
 from: null
 to:   i64
Changed type of: @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 25
 from: null
 to:   i32
Changed type of: @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 from: null
 to:   [32 x i8]*
Changed type of: i32 26
 from: null
 to:   i32
Changed type of: double 2.600000e+02
 from: null
 to:   double
Changed type of: i64 0
 from: null
 to:   i64
Changed type of: <2 x i64> poison
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> poison
 from: null
 to:   <2 x double>
Changed type of: <2 x i64> <i64 0, i64 1>
 from: null
 to:   <2 x i64>
Changed type of: <2 x double> <double 2.400000e+02, double 2.400000e+02>
 from: null
 to:   <2 x double>
Changed type of: <2 x double> <double 2.600000e+02, double 2.600000e+02>
 from: null
 to:   <2 x double>
Changed type of: i64 2
 from: null
 to:   i64
Changed type of: <2 x i64> <i64 2, i64 2>
 from: null
 to:   <2 x i64>
Changed type of: i64 240
 from: null
 to:   i64
Changed type of: i64 1
 from: null
 to:   i64
Changed type of: i64 260
 from: null
 to:   i64
Changed type of: void llvm.lifetime.end.p0(i64, ptr)
 from: null
 to:   void
Changed type of: void polybench_timer_start()
 from: null
 to:   void
Changed type of: i32 65
 from: null
 to:   i32
Changed type of: double 1.000000e-01
 from: null
 to:   double
Changed type of: double 0.000000e+00
 from: null
 to:   double
Changed type of: i64 3
 from: null
 to:   i64
Changed type of: i64 5
 from: null
 to:   i64
Changed type of: double llvm.fmuladd.f64(double, double, double)
 from: null
 to:   double
Changed type of: double sqrt(double)
 from: null
 to:   double
Changed type of: double 1.000000e+00
 from: null
 to:   double
Changed type of: i64 239
 from: null
 to:   i64
Changed type of: void polybench_timer_stop()
 from: null
 to:   void
Changed type of: void polybench_timer_print()
 from: null
 to:   void
Changed type of: @stdout = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 from: null
 to:   [14 x i8]*
Changed type of: i64 13
 from: null
 to:   i64
Changed type of: i64 fwrite(ptr, i64, i64, ptr)
 from: null
 to:   i64
Changed type of: i32 20
 from: null
 to:   i32
Changed type of: i32 0
 from: null
 to:   i32
Changed type of: i32 10
 from: null
 to:   i32
Changed type of: i32 fputc(i32, ptr)
 from: null
 to:   i32
Changed type of: @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 from: null
 to:   [9 x i8]*
Changed type of: i32 fprintf(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: i64 11
 from: null
 to:   i64
Changed type of: i64 4194560
 from: null
 to:   i64
Changed type of: ptr calloc(i64, i64)
 from: null
 to:   ptr
Changed type of: i64 6
 from: null
 to:   i64
Changed type of: i64 7
 from: null
 to:   i64
Changed type of: double 1.000000e+01
 from: null
 to:   double
Changed type of: @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 from: null
 to:   [12 x i8]*
Changed type of: @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 from: null
 to:   [90 x i8]*
Changed type of: @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 from: null
 to:   [29 x i8]*
Changed type of: void __assert_fail(ptr, ptr, i32, ptr)
 from: null
 to:   void
Changed type of: void free(ptr)
 from: null
 to:   void
Changed type of: i64 16
 from: null
 to:   i64
Changed type of: i32 gettimeofday(ptr, ptr)
 from: null
 to:   i32
Changed type of: @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 from: null
 to:   [35 x i8]*
Changed type of: i32 printf(ptr)
 from: null
 to:   i32
Changed type of: double 0x3EB0C6F7A0B5ED8D
 from: null
 to:   double
Changed type of: @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 from: null
 to:   double*
Changed type of: @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 from: null
 to:   [7 x i8]*
Changed type of: i64 4096
 from: null
 to:   i64
Changed type of: i32 posix_memalign(ptr, i64, i64)
 from: null
 to:   i32
Changed type of: i1 true
 from: null
 to:   i1
Changed type of: @stderr = external local_unnamed_addr global ptr, align 8
 from: null
 to:   ptr*
Changed type of: @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 from: null
 to:   [51 x i8]*
Changed type of: i64 50
 from: null
 to:   i64
Changed type of: void exit(i32)
 from: null
 to:   void
[Deduction iteration 0]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %eps.i = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %i.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
 Creating initial type:
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: null
  to:   ptr
 Changed type of: %j.i = alloca i32, align 4 [in fun] main
  from: ptr
  to:   i32*
[Deducing from] %float_n = alloca double, align 8 [in fun] main
 Creating initial type:
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: null
  to:   ptr
 Changed type of: %float_n = alloca double, align 8 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %data = alloca [260 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [260 x [240 x double]]*
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 Creating initial type:
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %corr = alloca [240 x [240 x double]], align 16 [in fun] main
  from: ptr
  to:   [240 x [240 x double]]*
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %mean = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
 Creating initial type:
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: null
  to:   ptr
 Changed type of: %stddev = alloca [240 x double], align 16 [in fun] main
  from: ptr
  to:   [240 x double]*
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
 Changed type of: br label %vector.ph [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 Changed type of: %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 Changed type of: %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
 Changed type of: %conv4.i = sitofp i32 %0 to double [in fun] main
  from: null
  to:   double
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 Changed type of: %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 Changed type of: %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] br label %vector.body [in fun] main
 Changed type of: br label %vector.body [in fun] main
  from: null
  to:   void
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 Changed type of: %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 Changed type of: %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 Changed type of: %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 Changed type of: %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
  from: null
  to:   <2 x i32>
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 Changed type of: %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 Changed type of: %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 Changed type of: %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 Changed type of: %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
  from: null
  to:   <2 x double>
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 Creating initial type:
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: null
  to:   ptr
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
 Changed type of: %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
  from: ptr
  to:   <2 x double>*
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
 Changed type of: %index.next = add nuw i64 %index, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 Changed type of: %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
  from: null
  to:   <2 x i64>
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
 Changed type of: %8 = icmp eq i64 %index.next, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 Changed type of: br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 Changed type of: %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 Changed type of: %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 Changed type of: br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
  from: null
  to:   void
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
 Changed type of: br label %for.body.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body3.i9 [in fun] main
 Changed type of: br label %for.body3.i9 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 Changed type of: %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   i64
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 Changed type of: %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
 Changed type of: %add.i12 = fadd double %10, %11 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 Changed type of: %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 Changed type of: %add.i12.1 = fadd double %add.i12, %12 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 Changed type of: %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 Changed type of: %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 Changed type of: %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 Changed type of: %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 Changed type of: %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 Changed type of: %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 Changed type of: %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 Changed type of: %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 Changed type of: br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
  from: null
  to:   void
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 Changed type of: %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
  from: null
  to:   double
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 Changed type of: %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 Changed type of: %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 Changed type of: br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 Changed type of: %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] br label %for.body22.i [in fun] main
 Changed type of: br label %for.body22.i [in fun] main
  from: null
  to:   void
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 Changed type of: %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 Changed type of: %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
 Changed type of: %sub.i = fsub double %18, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 Creating initial type:
 Changed type of: %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %1 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %2 [arg of fun] llvm.fmuladd.f64
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 Changed type of: %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
 Changed type of: %sub.i.1 = fsub double %20, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 Creating initial type:
 Changed type of: %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 Changed type of: %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
 Changed type of: %sub.i.2 = fsub double %22, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 Creating initial type:
 Changed type of: %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 Changed type of: %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
 Changed type of: %sub.i.3 = fsub double %24, %16 [in fun] main
  from: null
  to:   double
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 Creating initial type:
 Changed type of: %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 Changed type of: %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 Changed type of: %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 Changed type of: br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
  from: null
  to:   void
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
 Changed type of: %div43.i = fdiv double %25, %9 [in fun] main
  from: null
  to:   double
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 Creating initial type:
 Changed type of: %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
  from: null
  to:   double
 Creating initial type:
 Changed type of: double %0 [arg of fun] sqrt
  from: null
  to:   double
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 Changed type of: %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
  from: null
  to:   i1
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 Changed type of: %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
  from: null
  to:   double
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 Changed type of: %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 Changed type of: %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 Changed type of: br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 Changed type of: %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body63.i [in fun] main
 Changed type of: br label %for.body63.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 Changed type of: %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
 Changed type of: %sub70.i = fsub double %28, %27 [in fun] main
  from: null
  to:   double
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 Creating initial type:
 Changed type of: %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: null
  to:   ptr
 Changed type of: %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
 Changed type of: %mul.i = fmul double %call71.i, %29 [in fun] main
  from: null
  to:   double
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
 Changed type of: %div78.i = fdiv double %30, %mul.i [in fun] main
  from: null
  to:   double
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 Changed type of: %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 Changed type of: %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 Changed type of: br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 Changed type of: %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 Changed type of: %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 Changed type of: br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 Changed type of: %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 Changed type of: %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 Changed type of: %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 Changed type of: br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 Changed type of: %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] br label %for.body96.i [in fun] main
 Changed type of: br label %for.body96.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 Changed type of: %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] br label %for.body103.i [in fun] main
 Changed type of: br label %for.body103.i [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 Changed type of: %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 Changed type of: %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
  from: null
  to:   double
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 Creating initial type:
 Changed type of: %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 Changed type of: %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: null
  to:   ptr
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 Creating initial type:
 Changed type of: %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
  from: null
  to:   double
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 Changed type of: %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 Changed type of: %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 Changed type of: br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
  from: null
  to:   void
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 Creating initial type:
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: null
  to:   ptr
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
  from: ptr
  to:   double*
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 Changed type of: %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 Changed type of: %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 Changed type of: br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
  from: null
  to:   void
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: null
  to:   ptr
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
 Changed type of: %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
  from: ptr
  to:   double*
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 Creating initial type:
 Changed type of: %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fwrite
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] fwrite
  from: ptr
  to:   [14 x i8]*
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] fwrite
  from: null
  to:   i64
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] fwrite
  from: null
  to:   ptr
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
 Changed type of: br label %for.cond1.preheader.i16 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 Changed type of: %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 Changed type of: %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
  from: null
  to:   i64
[Deducing from] br label %for.body3.i17 [in fun] main
 Changed type of: br label %for.body3.i17 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 Changed type of: %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
  from: null
  to:   i64
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 Changed type of: %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
  from: null
  to:   i64
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
 Changed type of: %42 = trunc i64 %41 to i32 [in fun] main
  from: null
  to:   i32
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
 Changed type of: %rem.i = urem i32 %42, 20 [in fun] main
  from: null
  to:   i32
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 Changed type of: %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 Changed type of: br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 Creating initial type:
 Changed type of: %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] fputc
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fputc
  from: null
  to:   ptr
[Deducing from] br label %if.end.i [in fun] main
 Changed type of: br label %if.end.i [in fun] main
  from: null
  to:   void
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 Creating initial type:
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: null
  to:   ptr
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 Creating initial type:
 Changed type of: %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
  from: null
  to:   double
 Changed type of: %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
  from: ptr
  to:   double*
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 Creating initial type:
 Changed type of: %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] fprintf
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] fprintf
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] fprintf
  from: ptr
  to:   [9 x i8]*
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 Changed type of: %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 Changed type of: %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 Changed type of: br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
  from: null
  to:   void
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 Changed type of: %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
  from: null
  to:   i64
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 Changed type of: %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
  from: null
  to:   i1
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 Changed type of: br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
  from: null
  to:   void
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 Creating initial type:
 Changed type of: %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
  from: null
  to:   ptr
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 Creating initial type:
 Changed type of: %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
  from: null
  to:   i64
[Deducing from] ret i32 0 [in fun] main
 Changed type of: ret i32 0 [in fun] main
  from: null
  to:   void
[Deducing from] i32 main(i32, ptr)
 Creating initial type:
 Changed type of: i32 main(i32, ptr)
  from: null
  to:   i32
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %0 [arg of fun] calloc
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] calloc
  from: null
  to:   i64
[Deducing from] br label %for.body [in fun] polybench_flush_cache
 Changed type of: br label %for.body [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 Changed type of: %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 Changed type of: %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 Changed type of: %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 Changed type of: %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 Changed type of: %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 Changed type of: %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 Changed type of: %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 Changed type of: %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
  from: null
  to:   double
 Changed type of: %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
  from: ptr
  to:   double*
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 Changed type of: %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
  from: null
  to:   double
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 Changed type of: %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
  from: null
  to:   i64
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 Changed type of: %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 Changed type of: br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 Changed type of: %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
  from: null
  to:   i1
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 Changed type of: br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] __assert_fail
  from: ptr
  to:   [12 x i8]*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %1 [arg of fun] __assert_fail
  from: ptr
  to:   [90 x i8]*
 Creating initial type:
 Changed type of: i32 %2 [arg of fun] __assert_fail
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: null
  to:   ptr
 Changed type of: ptr %3 [arg of fun] __assert_fail
  from: ptr
  to:   [29 x i8]*
[Deducing from] unreachable [in fun] polybench_flush_cache
 Changed type of: unreachable [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] free
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_flush_cache
 Changed type of: ret void [in fun] polybench_flush_cache
  from: null
  to:   void
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
 Changed type of: br label %for.body.i [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 Changed type of: %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 Changed type of: %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
  from: null
  to:   double
 Changed type of: %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
  from: ptr
  to:   double*
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 Changed type of: %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 Changed type of: %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 Changed type of: %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 Changed type of: br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 Changed type of: %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 Changed type of: br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_prepare_instruments
 Changed type of: unreachable [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] ret void [in fun] polybench_prepare_instruments
 Changed type of: ret void [in fun] polybench_prepare_instruments
  from: null
  to:   void
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
 Changed type of: br label %for.body.i.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 Changed type of: %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 Changed type of: %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 Changed type of: %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 Changed type of: %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 Changed type of: %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 Changed type of: %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 Changed type of: %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 Changed type of: %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: null
  to:   ptr
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
  from: null
  to:   double
 Changed type of: %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
  from: ptr
  to:   double*
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 Changed type of: %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 Changed type of: %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 Changed type of: %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 Changed type of: br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 Changed type of: %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 Changed type of: br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] unreachable [in fun] polybench_timer_start
 Changed type of: unreachable [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] gettimeofday
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
 Creating initial type:
 Changed type of: ptr %1 [arg of fun] gettimeofday
  from: null
  to:   ptr
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] printf
  from: null
  to:   ptr
 Changed type of: ptr %0 [arg of fun] printf
  from: ptr
  to:   [35 x i8]*
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 Changed type of: %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
  from: ptr
  to:   i64*
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 Changed type of: %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 Creating initial type:
 Changed type of: %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
  from: null
  to:   double
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
 Changed type of: ret void [in fun] polybench_timer_start
  from: null
  to:   void
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
  from: ptr
  to:   %struct.timeval = type { i64, i64 }*
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 Changed type of: %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
  from: null
  to:   i1
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 Changed type of: br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
  from: null
  to:   i32
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
 Changed type of: br label %rtclock.exit [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 Changed type of: %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: null
  to:   ptr
 Changed type of: %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
  from: ptr
  to:   i64*
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
  from: null
  to:   i64
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 Changed type of: %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 Creating initial type:
 Changed type of: %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
  from: null
  to:   double
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
 Changed type of: ret void [in fun] polybench_timer_stop
  from: null
  to:   void
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 Changed type of: %sub = fsub double %0, %1 [in fun] polybench_timer_print
  from: null
  to:   double
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 Creating initial type:
 Changed type of: %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
  from: null
  to:   i32
[Deducing from] ret void [in fun] polybench_timer_print
 Changed type of: ret void [in fun] polybench_timer_print
  from: null
  to:   void
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 Creating initial type:
 Changed type of: tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: ptr %ptr [arg of fun] polybench_free_data
  from: null
  to:   ptr
[Deducing from] ret void [in fun] polybench_free_data
 Changed type of: ret void [in fun] polybench_free_data
  from: null
  to:   void
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 Changed type of: %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 Changed type of: %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
  from: null
  to:   i32
 Creating initial type:
 Changed type of: ptr %0 [arg of fun] posix_memalign
  from: null
  to:   ptr
 Creating initial type:
 Changed type of: i64 %1 [arg of fun] posix_memalign
  from: null
  to:   i64
 Creating initial type:
 Changed type of: i64 %2 [arg of fun] posix_memalign
  from: null
  to:   i64
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 Changed type of: %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 Changed type of: %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 Changed type of: %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
  from: null
  to:   i1
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 Changed type of: br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
  from: null
  to:   ptr
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
  from: null
  to:   i64
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 Creating initial type:
 Changed type of: call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
  from: null
  to:   void
 Creating initial type:
 Changed type of: i32 %0 [arg of fun] exit
  from: null
  to:   i32
[Deducing from] unreachable [in fun] polybench_alloc_data
 Changed type of: unreachable [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
 Changed type of: ret ptr %0 [in fun] polybench_alloc_data
  from: null
  to:   void
[Deducing from] ptr polybench_alloc_data(i64, i32)
 Creating initial type:
 Changed type of: ptr polybench_alloc_data(i64, i32)
  from: null
  to:   ptr
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1, 3000))\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
  from: null
  to:   [105 x i8]
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [26 x i8] c"scalar(range(-512, 512) )\00"
  from: null
  to:   [26 x i8]
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [24 x i8] c"target('corr') scalar()\00"
  from: null
  to:   [24 x i8]
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [9 x i8] c"scalar()\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [23 x i8] c"scalar(range(1,4096) )\00"
  from: null
  to:   [23 x i8]
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 260)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 Creating initial type:
 Changed type of: [32 x i8] c"scalar(range(0, 240)  disabled)\00"
  from: null
  to:   [32 x i8]
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 Creating initial type:
 Changed type of: [14 x i8] c"Values Begin\0A\00"
  from: null
  to:   [14 x i8]
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 Creating initial type:
 Changed type of: [9 x i8] c"%0.16lf\0A\00"
  from: null
  to:   [9 x i8]
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"Values End\0A\00"
  from: null
  to:   [12 x i8]
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 Creating initial type:
 Changed type of: @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
  from: null
  to:   i32*
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 Creating initial type:
 Changed type of: @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
  from: null
  to:   double*
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 Creating initial type:
 Changed type of: [12 x i8] c"tmp <= 10.0\00"
  from: null
  to:   [12 x i8]
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 Creating initial type:
 Changed type of: [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
  from: null
  to:   [90 x i8]
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 Creating initial type:
 Changed type of: [29 x i8] c"void polybench_flush_cache()\00"
  from: null
  to:   [29 x i8]
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"Time: \00"
  from: null
  to:   [7 x i8]
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 Creating initial type:
 Changed type of: [7 x i8] c"%0.6f\0A\00"
  from: null
  to:   [7 x i8]
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 Creating initial type:
 Changed type of: @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
  from: null
  to:   i64*
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 Creating initial type:
 Changed type of: [35 x i8] c"Error return from gettimeofday: %d\00"
  from: null
  to:   [35 x i8]
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 Creating initial type:
 Changed type of: [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
  from: null
  to:   [51 x i8]
[Deduction iteration 1]
[Deducing from] %eps.i = alloca double, align 8 [in fun] main
[Deducing from] %i.i = alloca i32, align 4 [in fun] main
[Deducing from] %j.i = alloca i32, align 4 [in fun] main
[Deducing from] %float_n = alloca double, align 8 [in fun] main
[Deducing from] %data = alloca [260 x [240 x double]], align 16 [in fun] main
[Deducing from] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
[Deducing from] %mean = alloca [240 x double], align 16 [in fun] main
[Deducing from] %stddev = alloca [240 x double], align 16 [in fun] main
[Deducing from] store double 2.600000e+02, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %vector.ph [in fun] main
[Deducing from] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
[Deducing from] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
[Deducing from] %conv4.i = sitofp i32 %0 to double [in fun] main
[Deducing from] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
[Deducing from] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
[Deducing from] br label %vector.body [in fun] main
[Deducing from] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
[Deducing from] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
[Deducing from] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
[Deducing from] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
[Deducing from] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
[Deducing from] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
[Deducing from] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
[Deducing from] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
[Deducing from] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
[Deducing from] store <2 x double> %6, ptr %7, align 16, !tbaa !5 [in fun] main
[Deducing from] %index.next = add nuw i64 %index, 2 [in fun] main
[Deducing from] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
[Deducing from] %8 = icmp eq i64 %index.next, 240 [in fun] main
[Deducing from] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
[Deducing from] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
[Deducing from] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
[Deducing from] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
[Deducing from] call void (...) @polybench_timer_start() #12 [in fun] main
[Deducing from] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
[Deducing from] store double 1.000000e-01, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body.i [in fun] main
[Deducing from] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
[Deducing from] br label %for.body3.i9 [in fun] main
[Deducing from] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
[Deducing from] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
[Deducing from] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
[Deducing from] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12 = fadd double %10, %11 [in fun] main
[Deducing from] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
[Deducing from] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
[Deducing from] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
[Deducing from] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
[Deducing from] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
[Deducing from] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
[Deducing from] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
[Deducing from] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
[Deducing from] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
[Deducing from] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
[Deducing from] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
[Deducing from] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
[Deducing from] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
[Deducing from] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
[Deducing from] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
[Deducing from] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
[Deducing from] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
[Deducing from] store double %div.i15, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
[Deducing from] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
[Deducing from] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
[Deducing from] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
[Deducing from] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
[Deducing from] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
[Deducing from] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body22.i [in fun] main
[Deducing from] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
[Deducing from] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
[Deducing from] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i = fsub double %18, %16 [in fun] main
[Deducing from] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
[Deducing from] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
[Deducing from] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
[Deducing from] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.1 = fsub double %20, %16 [in fun] main
[Deducing from] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
[Deducing from] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
[Deducing from] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
[Deducing from] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.2 = fsub double %22, %16 [in fun] main
[Deducing from] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
[Deducing from] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
[Deducing from] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
[Deducing from] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub.i.3 = fsub double %24, %16 [in fun] main
[Deducing from] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
[Deducing from] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
[Deducing from] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
[Deducing from] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
[Deducing from] %div43.i = fdiv double %25, %9 [in fun] main
[Deducing from] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
[Deducing from] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
[Deducing from] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
[Deducing from] store double %cond.i, ptr %arrayidx19.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
[Deducing from] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
[Deducing from] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
[Deducing from] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
[Deducing from] br label %for.body63.i [in fun] main
[Deducing from] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
[Deducing from] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
[Deducing from] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
[Deducing from] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %sub70.i = fsub double %28, %27 [in fun] main
[Deducing from] store double %sub70.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
[Deducing from] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
[Deducing from] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %mul.i = fmul double %call71.i, %29 [in fun] main
[Deducing from] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %div78.i = fdiv double %30, %mul.i [in fun] main
[Deducing from] store double %div78.i, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
[Deducing from] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
[Deducing from] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
[Deducing from] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
[Deducing from] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
[Deducing from] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
[Deducing from] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
[Deducing from] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
[Deducing from] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
[Deducing from] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
[Deducing from] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
[Deducing from] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
[Deducing from] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx92.i, align 8, !tbaa !5 [in fun] main
[Deducing from] br label %for.body96.i [in fun] main
[Deducing from] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
[Deducing from] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] br label %for.body103.i [in fun] main
[Deducing from] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
[Deducing from] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
[Deducing from] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
[Deducing from] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
[Deducing from] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
[Deducing from] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
[Deducing from] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
[Deducing from] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
[Deducing from] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
[Deducing from] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
[Deducing from] store double %37, ptr %arrayidx100.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
[Deducing from] store double %37, ptr %arrayidx127.i, align 8, !tbaa !5 [in fun] main
[Deducing from] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
[Deducing from] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
[Deducing from] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
[Deducing from] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
[Deducing from] store double 1.000000e+00, ptr %arrayidx139.i, align 8, !tbaa !5 [in fun] main
[Deducing from] call void (...) @polybench_timer_stop() #12 [in fun] main
[Deducing from] call void (...) @polybench_timer_print() #12 [in fun] main
[Deducing from] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
[Deducing from] br label %for.cond1.preheader.i16 [in fun] main
[Deducing from] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
[Deducing from] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
[Deducing from] br label %for.body3.i17 [in fun] main
[Deducing from] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
[Deducing from] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
[Deducing from] %42 = trunc i64 %41 to i32 [in fun] main
[Deducing from] %rem.i = urem i32 %42, 20 [in fun] main
[Deducing from] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
[Deducing from] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
[Deducing from] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
[Deducing from] br label %if.end.i [in fun] main
[Deducing from] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
[Deducing from] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
[Deducing from] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
[Deducing from] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
[Deducing from] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
[Deducing from] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
[Deducing from] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
[Deducing from] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
[Deducing from] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
[Deducing from] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
[Deducing from] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
[Deducing from] ret i32 0 [in fun] main
[Deducing from] i32 main(i32, ptr)
[Deducing from] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
[Deducing from] br label %for.body [in fun] polybench_flush_cache
[Deducing from] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
[Deducing from] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
[Deducing from] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
[Deducing from] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
[Deducing from] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
[Deducing from] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
[Deducing from] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
[Deducing from] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
[Deducing from] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
[Deducing from] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
[Deducing from] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
[Deducing from] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
[Deducing from] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
[Deducing from] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
[Deducing from] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
[Deducing from] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
[Deducing from] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
[Deducing from] unreachable [in fun] polybench_flush_cache
[Deducing from] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
[Deducing from] ret void [in fun] polybench_flush_cache
[Deducing from] void polybench_flush_cache()
[Deducing from] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
[Deducing from] br label %for.body.i [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
[Deducing from] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
[Deducing from] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
[Deducing from] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
[Deducing from] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
[Deducing from] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
[Deducing from] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
[Deducing from] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
[Deducing from] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
[Deducing from] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
[Deducing from] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
[Deducing from] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
[Deducing from] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
[Deducing from] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
[Deducing from] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
[Deducing from] unreachable [in fun] polybench_prepare_instruments
[Deducing from] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
[Deducing from] ret void [in fun] polybench_prepare_instruments
[Deducing from] void polybench_prepare_instruments()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
[Deducing from] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
[Deducing from] br label %for.body.i.i [in fun] polybench_timer_start
[Deducing from] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
[Deducing from] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
[Deducing from] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
[Deducing from] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
[Deducing from] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
[Deducing from] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
[Deducing from] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
[Deducing from] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
[Deducing from] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
[Deducing from] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
[Deducing from] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
[Deducing from] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
[Deducing from] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
[Deducing from] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
[Deducing from] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
[Deducing from] unreachable [in fun] polybench_timer_start
[Deducing from] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_start
[Deducing from] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
[Deducing from] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
[Deducing from] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
[Deducing from] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
[Deducing from] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
[Deducing from] store double %10, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_start
[Deducing from] ret void [in fun] polybench_timer_start
[Deducing from] void polybench_timer_start()
[Deducing from] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
[Deducing from] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
[Deducing from] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
[Deducing from] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
[Deducing from] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
[Deducing from] br label %rtclock.exit [in fun] polybench_timer_stop
[Deducing from] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
[Deducing from] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
[Deducing from] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
[Deducing from] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
[Deducing from] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
[Deducing from] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
[Deducing from] store double %2, ptr @polybench_t_end, align 8, !tbaa !11 [in fun] polybench_timer_stop
[Deducing from] ret void [in fun] polybench_timer_stop
[Deducing from] void polybench_timer_stop()
[Deducing from] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
[Deducing from] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
[Deducing from] %sub = fsub double %0, %1 [in fun] polybench_timer_print
[Deducing from] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
[Deducing from] ret void [in fun] polybench_timer_print
[Deducing from] void polybench_timer_print()
[Deducing from] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
[Deducing from] ret void [in fun] polybench_free_data
[Deducing from] void polybench_free_data(ptr)
[Deducing from] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
[Deducing from] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
[Deducing from] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
[Deducing from] store ptr null, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
[Deducing from] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
[Deducing from] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
[Deducing from] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
[Deducing from] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
[Deducing from] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
[Deducing from] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
[Deducing from] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
[Deducing from] unreachable [in fun] polybench_alloc_data
[Deducing from] ret ptr %0 [in fun] polybench_alloc_data
[Deducing from] ptr polybench_alloc_data(i64, i32)
[Deducing from] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
[Deducing from] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
[Deducing from] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
[Deducing from] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
[Deducing from] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
[Deducing from] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
[Deducing from] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
[Deducing from] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
[Deducing from] @stdout = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
[Deducing from] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
[Deducing from] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
[Deducing from] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
[Deducing from] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
[Deducing from] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
[Deducing from] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
[Deducing from] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
[Deducing from] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
[Deducing from] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
[Deducing from] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
[Deducing from] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
[Deducing from] @stderr = external local_unnamed_addr global ptr, align 8
[Deducing from] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
[Deduction completed]
[Results]
[Value] [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00"
 deduced type: [51 x i8]
[Value] [35 x i8] c"Error return from gettimeofday: %d\00"
 deduced type: [35 x i8]
[Value] @polybench_c_end = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] [7 x i8] c"%0.6f\0A\00"
 deduced type: [7 x i8]
[Value] [7 x i8] c"Time: \00"
 deduced type: [7 x i8]
[Value] [29 x i8] c"void polybench_flush_cache()\00"
 deduced type: [29 x i8]
[Value] [12 x i8] c"tmp <= 10.0\00"
 deduced type: [12 x i8]
[Value] @polybench_papi_counters_threadid = dso_local local_unnamed_addr global i32 0, align 4
 deduced type: i32*
[Value] [12 x i8] c"Values End\0A\00"
 deduced type: [12 x i8]
[Value] [9 x i8] c"%0.16lf\0A\00"
 deduced type: [9 x i8]
[Value] [32 x i8] c"scalar(range(0, 240)  disabled)\00"
 deduced type: [32 x i8]
[Value] [9 x i8] c"scalar()\00"
 deduced type: [9 x i8]
[Value] [24 x i8] c"target('corr') scalar()\00"
 deduced type: [24 x i8]
[Value] ptr polybench_alloc_data(i64, i32)
 deduced type: ptr
[Value] ret ptr %0 [in fun] polybench_alloc_data
 deduced type: void
[Value] i32 %0 [arg of fun] exit
 deduced type: i32
[Value] %2 = call i64 @fwrite(ptr nonnull @.str.5.20, i64 50, i64 1, ptr %1) #13 [in fun] polybench_alloc_data
 deduced type: i64
[Value] br i1 %or.cond.i, label %if.then.i, label %xmalloc.exit [in fun] polybench_alloc_data
 deduced type: void
[Value] %or.cond.i = select i1 %tobool.i, i1 true, i1 %tobool2.i [in fun] polybench_alloc_data
 deduced type: i1
[Value] %call.i = call i32 @posix_memalign(ptr noundef nonnull %ret.i, i64 noundef 4096, i64 noundef %mul) #12 [in fun] polybench_alloc_data
 deduced type: i32
[Value] ret void [in fun] polybench_free_data
 deduced type: void
[Value] %call1 = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3.19, double noundef %sub) [in fun] polybench_timer_print
 deduced type: i32
[Value] %sub = fsub double %0, %1 [in fun] polybench_timer_print
 deduced type: double
[Value] %0 = load double, ptr @polybench_t_end, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] %call = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.2.18) [in fun] polybench_timer_print
 deduced type: i32
[Value] ret void [in fun] polybench_timer_stop
 deduced type: void
[Value] %2 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_stop
 deduced type: double
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_stop
 deduced type: i64*
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_stop
 deduced type: i1
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_stop
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] [23 x i8] c"scalar(range(1, 3000))\00"
 deduced type: [23 x i8]
[Value] %10 = tail call double @llvm.fmuladd.f64(double %conv2.i, double 0x3EB0C6F7A0B5ED8D, double %conv.i) [in fun] polybench_timer_start
 deduced type: double
[Value] %9 = load i64, ptr %tv_usec.i, align 8, !tbaa !14 [in fun] polybench_timer_start
 deduced type: i64
[Value] %tv_usec.i = getelementptr inbounds %struct.timeval, ptr %Tp.i, i64 0, i32 1 [in fun] polybench_timer_start
 deduced type: i64*
[Value] [26 x i8] c"scalar(range(-512, 512) )\00"
 deduced type: [26 x i8]
[Value] %8 = load i64, ptr %Tp.i, align 8, !tbaa !11 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %rtclock.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_start
 deduced type: i32
[Value] %cmp.not.i = icmp eq i32 %call.i, 0 [in fun] polybench_timer_start
 deduced type: i1
[Value] ptr %1 [arg of fun] gettimeofday
 deduced type: ptr
[Value] ptr %0 [arg of fun] gettimeofday
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #14 [in fun] polybench_timer_start
 deduced type: i32
[Value] unreachable [in fun] polybench_timer_start
 deduced type: void
[Value] %indvars.iv.next.i.i.5 = or disjoint i64 %indvars.iv.i.i, 6 [in fun] polybench_timer_start
 deduced type: i64
[Value] ret void [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.i.5 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.4 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.4 = or disjoint i64 %indvars.iv.i.i, 5 [in fun] polybench_timer_start
 deduced type: i64
[Value] %4 = load double, ptr %arrayidx.i.i.4, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i.i.3 = or disjoint i64 %indvars.iv.i.i, 4 [in fun] polybench_timer_start
 deduced type: i64
[Value] %3 = load double, ptr %arrayidx.i.i.3, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.2 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.1 [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i.1 = or disjoint i64 %indvars.iv.i.i, 2 [in fun] polybench_timer_start
 deduced type: i64
[Value] %add.i.i.1 = fadd double %add.i.i, %1 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.i.1, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i.1 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %indvars.iv.next.i.i = or disjoint i64 %indvars.iv.i.i, 1 [in fun] polybench_timer_start
 deduced type: i64
[Value] %0 = load double, ptr %arrayidx.i.i, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx.i.i = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.i.i [in fun] polybench_timer_start
 deduced type: double*
[Value] %tmp.010.i.i = phi double [ 0.000000e+00, %entry ], [ %add.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: double
[Value] br label %for.body.i.i [in fun] polybench_timer_start
 deduced type: void
[Value] %call.i.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_timer_start
 deduced type: ptr
[Value] ret void [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %exitcond.not.i.7, label %for.end.i, label %for.body.i, !llvm.loop !9 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %exitcond.not.i.7 = icmp eq i64 %indvars.iv.next.i.7, 4194560 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %indvars.iv.next.i.7 = add nuw nsw i64 %indvars.iv.i, 8 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.7 = fadd double %add.i.6, %7 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %7 = load double, ptr %arrayidx.i.7, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.6 = or disjoint i64 %indvars.iv.i, 7 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx.i.6 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.5 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i.5 = or disjoint i64 %indvars.iv.i, 6 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %5 = load double, ptr %arrayidx.i.5, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.4 = or disjoint i64 %indvars.iv.i, 5 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.i.3 = or disjoint i64 %indvars.iv.i, 4 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %add.i.i.7 = fadd double %add.i.i.6, %7 [in fun] polybench_timer_start
 deduced type: double
[Value] %add.i.3 = fadd double %add.i.2, %3 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %indvars.iv.next.i.2 = or disjoint i64 %indvars.iv.i, 3 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %2 = load double, ptr %arrayidx.i.2, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.1 = fadd double %add.i, %1 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.i.1, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] ptr %0 [arg of fun] printf
 deduced type: [35 x i8]*
[Value] %arrayidx.i.1 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %add.i = fadd double %tmp.010.i, %0 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %0 = load double, ptr %arrayidx.i, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %tmp.010.i = phi double [ 0.000000e+00, %entry ], [ %add.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: double
[Value] br label %for.body.i [in fun] polybench_prepare_instruments
 deduced type: void
[Value] ptr %0 [arg of fun] free
 deduced type: ptr
[Value] @polybench_program_total_flops = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] unreachable [in fun] polybench_flush_cache
 deduced type: void
[Value] %add.i.i.6 = fadd double %add.i.i.5, %6 [in fun] polybench_timer_start
 deduced type: double
[Value] ptr %1 [arg of fun] __assert_fail
 deduced type: [90 x i8]*
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_flush_cache
 deduced type: void
[Value] br i1 %cmp2, label %if.else, label %if.end [in fun] polybench_flush_cache
 deduced type: void
[Value] %cmp2 = fcmp ugt double %add.7, 1.000000e+01 [in fun] polybench_flush_cache
 deduced type: i1
[Value] br i1 %exitcond.not.7, label %for.end, label %for.body, !llvm.loop !9 [in fun] polybench_flush_cache
 deduced type: void
[Value] %indvars.iv.next.7 = add nuw nsw i64 %indvars.iv, 8 [in fun] polybench_flush_cache
 deduced type: i64
[Value] i32 %2 [arg of fun] __assert_fail
 deduced type: i32
[Value] %7 = load double, ptr %arrayidx.7, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.7 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.6 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next.6 = or disjoint i64 %indvars.iv, 7 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.6 = fadd double %add.5, %6 [in fun] polybench_flush_cache
 deduced type: double
[Value] call void @exit(i32 noundef 1) #14 [in fun] polybench_alloc_data
 deduced type: void
[Value] %add.5 = fadd double %add.4, %5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %5 = load double, ptr %arrayidx.5, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %add.4 = fadd double %add.3, %4 [in fun] polybench_flush_cache
 deduced type: double
[Value] tail call void @free(ptr noundef nonnull %call) #14 [in fun] polybench_flush_cache
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.4, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv.next.3 = or disjoint i64 %indvars.iv, 4 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %add.3 = fadd double %add.2, %3 [in fun] polybench_flush_cache
 deduced type: double
[Value] unreachable [in fun] polybench_alloc_data
 deduced type: void
[Value] %indvars.iv.next.5 = or disjoint i64 %indvars.iv, 6 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %3 = load double, ptr %arrayidx.3, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %2 = load double, ptr %arrayidx.i.i.2, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %exitcond.not.7 = icmp eq i64 %indvars.iv.next.7, 4194560 [in fun] polybench_flush_cache
 deduced type: i1
[Value] %2 = load double, ptr %arrayidx.2, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.2 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.1 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %5 = load double, ptr %arrayidx.i.i.5, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %1 = load double, ptr %arrayidx.1, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx.1 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next [in fun] polybench_flush_cache
 deduced type: double*
[Value] %indvars.iv.next = or disjoint i64 %indvars.iv, 1 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %cmp2.i = fcmp ugt double %add.i.7, 1.000000e+01 [in fun] polybench_prepare_instruments
 deduced type: i1
[Value] %add = fadd double %tmp.010, %0 [in fun] polybench_flush_cache
 deduced type: double
[Value] %arrayidx = getelementptr inbounds double, ptr %call, i64 %indvars.iv [in fun] polybench_flush_cache
 deduced type: double*
[Value] [23 x i8] c"scalar(range(1,4096) )\00"
 deduced type: [23 x i8]
[Value] %call.i = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_prepare_instruments
 deduced type: ptr
[Value] %tmp.010 = phi double [ 0.000000e+00, %entry ], [ %add.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: double
[Value] %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next.7, %for.body ] [in fun] polybench_flush_cache
 deduced type: i64
[Value] br label %for.body [in fun] polybench_flush_cache
 deduced type: void
[Value] i64 %1 [arg of fun] calloc
 deduced type: i64
[Value] tail call void @free(ptr noundef %ptr) #12 [in fun] polybench_free_data
 deduced type: void
[Value] i64 %0 [arg of fun] calloc
 deduced type: i64
[Value] %call = tail call noalias dereferenceable_or_null(33556480) ptr @calloc(i64 noundef 4194560, i64 noundef 8) #12 [in fun] polybench_flush_cache
 deduced type: ptr
[Value] ret i32 0 [in fun] main
 deduced type: void
[Value] %47 = call i64 @fwrite(ptr nonnull @.str.11, i64 11, i64 1, ptr %46) [in fun] main
 deduced type: i64
[Value] br i1 %cmp2.i.i, label %if.else.i.i, label %polybench_prepare_instruments.exit [in fun] polybench_timer_start
 deduced type: void
[Value] %arrayidx.i.5 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.4 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %46 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %exitcond29.not.i = icmp eq i64 %indvars.iv.next26.i, 240 [in fun] main
 deduced type: i1
[Value] i64 %1 [arg of fun] posix_memalign
 deduced type: i64
[Value] %add.7 = fadd double %add.6, %7 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %1 [arg of fun] fprintf
 deduced type: [9 x i8]*
[Value] %45 = load double, ptr %arrayidx7.i19, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx7.i19 = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv25.i, i64 %indvars.iv.i18 [in fun] main
 deduced type: double*
[Value] %44 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br label %if.end.i [in fun] main
 deduced type: void
[Value] i32 %0 [arg of fun] fputc
 deduced type: i32
[Value] %Tp.i = alloca %struct.timeval, align 8 [in fun] polybench_timer_start
 deduced type: %struct.timeval = type { i64, i64 }*
[Value] %fputc.i = call i32 @fputc(i32 10, ptr %43) [in fun] main
 deduced type: i32
[Value] %arrayidx.3 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.2 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %43 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] br i1 %cmp4.i, label %if.then.i, label %if.end.i [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i) #14 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %42 = trunc i64 %41 to i32 [in fun] main
 deduced type: i32
[Value] %conv = sext i32 %elt_size to i64 [in fun] polybench_alloc_data
 deduced type: i64
[Value] %7 = load double, ptr %arrayidx.i.i.7, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] %3 = load double, ptr %arrayidx.i.3, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %41 = add nuw nsw i64 %indvars.iv.i18, %40 [in fun] main
 deduced type: i64
[Value] br label %for.body3.i9 [in fun] main
 deduced type: void
[Value] %arrayidx.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i.i.7 = icmp eq i64 %indvars.iv.next.i.i.7, 4194560 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv.next18.i = add nuw nsw i64 %indvars.iv17.i, 1 [in fun] main
 deduced type: i64
[Value] unreachable [in fun] polybench_prepare_instruments
 deduced type: void
[Value] br i1 %8, label %for.inc8.i, label %vector.body, !llvm.loop !9 [in fun] main
 deduced type: void
[Value] [32 x i8] c"scalar(range(0, 260)  disabled)\00"
 deduced type: [32 x i8]
[Value] i64 460800
 deduced type: i64
[Value] %indvars.iv.next246.i = or disjoint i64 %indvars.iv245.i, 1 [in fun] main
 deduced type: i64
[Value] %7 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv17.i, i64 %index [in fun] main
 deduced type: <2 x double>*
[Value] %5 = fadd <2 x double> %4, %broadcast.splat30 [in fun] main
 deduced type: <2 x double>
[Value] %1 = mul nuw nsw <2 x i64> %vec.ind, %broadcast.splat [in fun] main
 deduced type: <2 x i64>
[Value] %indvars.iv.next.i.i.2 = or disjoint i64 %indvars.iv.i.i, 3 [in fun] polybench_timer_start
 deduced type: i64
[Value] br label %for.body.i [in fun] main
 deduced type: void
[Value] br label %vector.body [in fun] main
 deduced type: void
[Value] br label %for.body96.i [in fun] main
 deduced type: void
[Value] ptr %0 [arg of fun] posix_memalign
 deduced type: ptr
[Value] ptr %0 [arg of fun] fprintf
 deduced type: ptr
[Value] %vec.ind.next = add <2 x i64> %vec.ind, <i64 2, i64 2> [in fun] main
 deduced type: <2 x i64>
[Value] %div43.i = fdiv double %25, %9 [in fun] main
 deduced type: double
[Value] %broadcast.splat30 = shufflevector <2 x double> %broadcast.splatinsert29, <2 x double> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x double>
[Value] %29 = load double, ptr %arrayidx73.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %conv4.i = sitofp i32 %0 to double [in fun] main
 deduced type: double
[Value] ret void [in fun] polybench_timer_print
 deduced type: void
[Value] i32 117
 deduced type: i32
[Value] %indvars.iv.next.2 = or disjoint i64 %indvars.iv, 3 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %stddev = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %indvars.iv.next258.i = add nuw nsw i64 %indvars.iv257.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv261.i = phi i64 [ 0, %for.body96.i ], [ %indvars.iv.next262.i.1, %for.body103.i ] [in fun] main
 deduced type: i64
[Value] %add.i.i.2 = fadd double %add.i.i.1, %2 [in fun] polybench_timer_start
 deduced type: double
[Value] %indvars.iv.next.i20 = add nuw nsw i64 %indvars.iv.i18, 1 [in fun] main
 deduced type: i64
[Value] double %0 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_start
 deduced type: void
[Value] %exitcond248.not.i.3 = icmp eq i64 %indvars.iv.next246.i.3, 260 [in fun] main
 deduced type: i1
[Value] %float_n = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] %j.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void exit(i32)
 deduced type: void
[Value] br i1 %exitcond256.not.i, label %for.inc82.i, label %for.body63.i, !llvm.loop !18 [in fun] main
 deduced type: void
[Value] %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> poison, <2 x i32> zeroinitializer [in fun] main
 deduced type: <2 x i64>
[Value] %9 = load double, ptr %float_n, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_timer_start
 deduced type: void
[Value] %35 = load double, ptr %arrayidx107.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @stderr = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %add.i.i.5 = fadd double %add.i.i.4, %5 [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx92.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %0 = load i64, ptr %Tp.i, align 8, !tbaa !5 [in fun] polybench_timer_stop
 deduced type: i64
[Value] i32 posix_memalign(ptr, i64, i64)
 deduced type: i32
[Value] @.str.3.19 = private unnamed_addr constant [7 x i8] c"%0.6f\0A\00", align 1
 deduced type: [7 x i8]*
[Value] %indvars.iv25.i = phi i64 [ 0, %kernel_correlation.exit ], [ %indvars.iv.next26.i, %for.inc9.i ] [in fun] main
 deduced type: i64
[Value] @.str.2.18 = private unnamed_addr constant [7 x i8] c"Time: \00", align 1
 deduced type: [7 x i8]*
[Value] %sub.i.3 = fsub double %24, %16 [in fun] main
 deduced type: double
[Value] %conv2.i = sitofp i64 %1 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] @polybench_t_end = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00"
 deduced type: [105 x i8]
[Value] @polybench_t_start = dso_local local_unnamed_addr global double 0.000000e+00, align 8
 deduced type: double*
[Value] i64 16
 deduced type: i64
[Value] %indvars.iv.next.i.i.6 = or disjoint i64 %indvars.iv.i.i, 7 [in fun] polybench_timer_start
 deduced type: i64
[Value] void free(ptr)
 deduced type: void
[Value] @__PRETTY_FUNCTION__.polybench_flush_cache = private unnamed_addr constant [29 x i8] c"void polybench_flush_cache()\00", align 1
 deduced type: [29 x i8]*
[Value] double 1.000000e+01
 deduced type: double
[Value] i64 6
 deduced type: i64
[Value] %0 = trunc i64 %indvars.iv17.i to i32 [in fun] main
 deduced type: i32
[Value] void polybench_timer_print()
 deduced type: void
[Value] %arrayidx.i.7 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.6 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] i32 gettimeofday(ptr, ptr)
 deduced type: i32
[Value] %indvars.iv.i10 = phi i64 [ 0, %for.body.i ], [ %indvars.iv.next.i13.4, %for.body3.i9 ] [in fun] main
 deduced type: i64
[Value] i32 26
 deduced type: i32
[Value] i64 5
 deduced type: i64
[Value] <2 x i64> <i64 2, i64 2>
 deduced type: <2 x i64>
[Value] %call8.i = call i32 (ptr, ptr, ...) @fprintf(ptr noundef %44, ptr noundef nonnull @.str.10, double noundef %45) [in fun] main
 deduced type: i32
[Value] %31 = phi double [ 0.000000e+00, %for.body96.i ], [ %37, %for.body103.i ] [in fun] main
 deduced type: double
[Value] @stdout = external local_unnamed_addr global ptr, align 8
 deduced type: ptr*
[Value] %3 = sitofp <2 x i32> %2 to <2 x double> [in fun] main
 deduced type: <2 x double>
[Value] @.str.7 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 240)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] i32 25
 deduced type: i32
[Value] %conv2.i = sitofp i64 %9 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %arrayidx28.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] @.str.6 = private unnamed_addr constant [32 x i8] c"scalar(range(0, 260)  disabled)\00", section "llvm.metadata"
 deduced type: [32 x i8]*
[Value] @.str.11 = private unnamed_addr constant [12 x i8] c"Values End\0A\00", align 1
 deduced type: [12 x i8]*
[Value] %add.i.2 = fadd double %add.i.1, %2 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %27 = load double, ptr %arrayidx65.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] ptr calloc(i64, i64)
 deduced type: ptr
[Value] br i1 %exitcond264.not.i.1, label %for.end119.i, label %for.body103.i, !llvm.loop !21 [in fun] main
 deduced type: void
[Value] @.str.4 = private unnamed_addr constant [9 x i8] c"scalar()\00", section "llvm.metadata"
 deduced type: [9 x i8]*
[Value] i64 260
 deduced type: i64
[Value] %indvars.iv.next.i.1 = or disjoint i64 %indvars.iv.i, 2 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %arrayidx7.i11.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] double 2.600000e+02
 deduced type: double
[Value] %10 = phi double [ 0.000000e+00, %for.body.i ], [ %add.i12.4, %for.body3.i9 ] [in fun] main
 deduced type: double
[Value] i32 116
 deduced type: i32
[Value] @polybench_c_start = dso_local local_unnamed_addr global i64 0, align 8
 deduced type: i64*
[Value] i64 1
 deduced type: i64
[Value] tail call void @__assert_fail(ptr noundef nonnull @.str.9, ptr noundef nonnull @.str.1.10, i32 noundef 114, ptr noundef nonnull @__PRETTY_FUNCTION__.polybench_flush_cache) #13 [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %indvars.iv.next.1 = or disjoint i64 %indvars.iv, 2 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %8 = icmp eq i64 %index.next, 240 [in fun] main
 deduced type: i1
[Value] i32 1
 deduced type: i32
[Value] i64 7
 deduced type: i64
[Value] %add.i.i = fadd double %tmp.010.i.i, %0 [in fun] polybench_timer_start
 deduced type: double
[Value] i64 8
 deduced type: i64
[Value] @.str.1.10 = private unnamed_addr constant [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00", align 1
 deduced type: [90 x i8]*
[Value] i32 115
 deduced type: i32
[Value] <2 x i64> <i64 0, i64 1>
 deduced type: <2 x i64>
[Value] %cmp50.i = fcmp ugt double %call.i, %26 [in fun] main
 deduced type: i1
[Value] %1 = load double, ptr @polybench_t_start, align 8, !tbaa !5 [in fun] polybench_timer_print
 deduced type: double
[Value] i64 2
 deduced type: i64
[Value] %eps.i = alloca double, align 8 [in fun] main
 deduced type: double*
[Value] i32 fprintf(ptr, ptr)
 deduced type: i32
[Value] %4 = fdiv <2 x double> %3, <double 2.400000e+02, double 2.400000e+02> [in fun] main
 deduced type: <2 x double>
[Value] double sqrt(double)
 deduced type: double
[Value] %28 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i21, label %for.inc9.i, label %for.body3.i17, !llvm.loop !25 [in fun] main
 deduced type: void
[Value] i64 0
 deduced type: i64
[Value] %arrayidx.i = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.i [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] void llvm.lifetime.start.p0(i64, ptr)
 deduced type: void
[Value] %arrayidx26.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv245.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %call1.i = tail call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4.13, i32 noundef %call.i) [in fun] polybench_timer_stop
 deduced type: i32
[Value] %indvars.iv17.i = phi i64 [ 0, %entry ], [ %indvars.iv.next18.i, %for.inc8.i ] [in fun] main
 deduced type: i64
[Value] %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ] [in fun] main
 deduced type: i64
[Value] br label %for.body22.i [in fun] main
 deduced type: void
[Value] i32 0
 deduced type: i32
[Value] i64 4096
 deduced type: i64
[Value] %add.i.i.3 = fadd double %add.i.i.2, %3 [in fun] polybench_timer_start
 deduced type: double
[Value] @.str.5 = private unnamed_addr constant [23 x i8] c"scalar(range(1,4096) )\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] [90 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/utilities/polybench.c\00"
 deduced type: [90 x i8]
[Value] %indvars.iv.next246.i.3 = add nuw nsw i64 %indvars.iv245.i, 4 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond274.not.i, label %kernel_correlation.exit, label %for.body96.preheader.i, !llvm.loop !20 [in fun] main
 deduced type: void
[Value] %indvars.iv.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.7, %for.body.i ] [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next262.i = or disjoint i64 %indvars.iv261.i, 1 [in fun] main
 deduced type: i64
[Value] i32 114
 deduced type: i32
[Value] %arrayidx.i.i.4 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.3 [in fun] polybench_timer_start
 deduced type: double*
[Value] %2 = trunc <2 x i64> %1 to <2 x i32> [in fun] main
 deduced type: <2 x i32>
[Value] double 0x3EB0C6F7A0B5ED8D
 deduced type: double
[Value] i32 118
 deduced type: i32
[Value] @.str.2 = private unnamed_addr constant [26 x i8] c"scalar(range(-512, 512) )\00", section "llvm.metadata"
 deduced type: [26 x i8]*
[Value] %indvars.iv.next266.i = add nuw nsw i64 %indvars.iv265.i, 1 [in fun] main
 deduced type: i64
[Value] %broadcast.splatinsert29 = insertelement <2 x double> poison, double %conv4.i, i64 0 [in fun] main
 deduced type: <2 x double>
[Value] double 1.000000e+00
 deduced type: double
[Value] %i.i = alloca i32, align 4 [in fun] main
 deduced type: i32*
[Value] void polybench_timer_start()
 deduced type: void
[Value] %add.i12 = fadd double %10, %11 [in fun] main
 deduced type: double
[Value] @.str = private unnamed_addr constant [23 x i8] c"scalar(range(1, 3000))\00", section "llvm.metadata"
 deduced type: [23 x i8]*
[Value] @.str.3 = private unnamed_addr constant [24 x i8] c"target('corr') scalar()\00", section "llvm.metadata"
 deduced type: [24 x i8]*
[Value] %indvars.iv.next.i13.3 = add nuw nsw i64 %indvars.iv.i10, 4 [in fun] main
 deduced type: i64
[Value] %mean = alloca [240 x double], align 16 [in fun] main
 deduced type: [240 x double]*
[Value] %33 = load double, ptr %arrayidx111.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] @.str.10 = private unnamed_addr constant [9 x i8] c"%0.16lf\0A\00", align 1
 deduced type: [9 x i8]*
[Value] %1 = load i64, ptr %tv_usec.i, align 8, !tbaa !10 [in fun] polybench_timer_stop
 deduced type: i64
[Value] ptr null
 deduced type: ptr
[Value] i32 main(i32, ptr)
 deduced type: i32
[Value] i64 499200
 deduced type: i64
[Value] void llvm.var.annotation.p0.p0(ptr, ptr, ptr, i32, ptr)
 deduced type: void
[Value] %indvars.iv245.i = phi i64 [ 0, %for.body17.i ], [ %indvars.iv.next246.i.3, %for.body22.i ] [in fun] main
 deduced type: i64
[Value] @.str.1 = private unnamed_addr constant [105 x i8] c"/home/nico/taffo/taffo-src/lib/TypeDeductionAnalysis/test/polybench/datamining/correlation/correlation.c\00", section "llvm.metadata"
 deduced type: [105 x i8]*
[Value] %6 = fdiv <2 x double> %5, <double 2.600000e+02, double 2.600000e+02> [in fun] main
 deduced type: <2 x double>
[Value] %1 = load ptr, ptr @stderr, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] i32 printf(ptr)
 deduced type: i32
[Value] br i1 %exitcond20.not.i, label %init_array.exit, label %vector.ph, !llvm.loop !13 [in fun] main
 deduced type: void
[Value] <2 x double> poison
 deduced type: <2 x double>
[Value] %add.i.i.4 = fadd double %add.i.i.3, %4 [in fun] polybench_timer_start
 deduced type: double
[Value] <2 x double> <double 2.400000e+02, double 2.400000e+02>
 deduced type: <2 x double>
[Value] i64 1920
 deduced type: i64
[Value] @.str.8 = private unnamed_addr constant [14 x i8] c"Values Begin\0A\00", align 1
 deduced type: [14 x i8]*
[Value] %index.next = add nuw i64 %index, 2 [in fun] main
 deduced type: i64
[Value] %arrayidx7.i11.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.1, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] [14 x i8] c"Values Begin\0A\00"
 deduced type: [14 x i8]
[Value] br i1 %exitcond252.not.i, label %for.cond61.preheader.i, label %for.body17.i, !llvm.loop !17 [in fun] main
 deduced type: void
[Value] <2 x double> <double 2.600000e+02, double 2.600000e+02>
 deduced type: <2 x double>
[Value] %call.i = call double @sqrt(double noundef %div43.i) #12 [in fun] main
 deduced type: double
[Value] i64 240
 deduced type: i64
[Value] %6 = load double, ptr %arrayidx.i.i.6, align 8, !tbaa !5 [in fun] polybench_timer_start
 deduced type: double
[Value] br i1 %cmp2.i, label %if.else.i, label %polybench_flush_cache.exit [in fun] polybench_prepare_instruments
 deduced type: void
[Value] %arrayidx69.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv257.i, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] void llvm.lifetime.end.p0(i64, ptr)
 deduced type: void
[Value] %add.i.5 = fadd double %add.i.4, %5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i1 true
 deduced type: i1
[Value] i32 65
 deduced type: i32
[Value] %arrayidx7.i11 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.i10, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] @.str.5.20 = private unnamed_addr constant [51 x i8] c"[PolyBench] posix_memalign: cannot allocate memory\00", align 1
 deduced type: [51 x i8]*
[Value] i64 50
 deduced type: i64
[Value] double 0.000000e+00
 deduced type: double
[Value] i64 3
 deduced type: i64
[Value] %arrayidx26.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] double 1.000000e-01
 deduced type: double
[Value] i64 %2 [arg of fun] posix_memalign
 deduced type: i64
[Value] %add.i12.2 = fadd double %add.i12.1, %13 [in fun] main
 deduced type: double
[Value] %div.i15 = fdiv double %add.i12.4, %9 [in fun] main
 deduced type: double
[Value] %6 = load double, ptr %arrayidx.i.6, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] i64 13
 deduced type: i64
[Value] br label %vector.ph [in fun] main
 deduced type: void
[Value] %indvars.iv.next272.i = add nuw nsw i64 %indvars.iv271.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.9 = private unnamed_addr constant [12 x i8] c"tmp <= 10.0\00", align 1
 deduced type: [12 x i8]*
[Value] void polybench_timer_stop()
 deduced type: void
[Value] %exitcond270.not.i = icmp eq i64 %indvars.iv.next268.i, 240 [in fun] main
 deduced type: i1
[Value] %6 = load double, ptr %arrayidx.6, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] void __assert_fail(ptr, ptr, i32, ptr)
 deduced type: void
[Value] %14 = load double, ptr %arrayidx7.i11.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] br i1 %cmp.not.i, label %rtclock.exit, label %if.then.i [in fun] polybench_timer_stop
 deduced type: void
[Value] %add.2 = fadd double %add.1, %2 [in fun] polybench_flush_cache
 deduced type: double
[Value] i32 20
 deduced type: i32
[Value] %arrayidx7.i11.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.2, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] i64 fwrite(ptr, i64, i64, ptr)
 deduced type: i64
[Value] %11 = load double, ptr %arrayidx7.i11, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond274.not.i = icmp eq i64 %indvars.iv.next272.i, 239 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next.i13 = add nuw nsw i64 %indvars.iv.i10, 1 [in fun] main
 deduced type: i64
[Value] %12 = load double, ptr %arrayidx7.i11.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double llvm.fmuladd.f64(double, double, double)
 deduced type: double
[Value] i64 4
 deduced type: i64
[Value] %add.i12.1 = fadd double %add.i12, %12 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.1 = add nuw nsw i64 %indvars.iv.i10, 2 [in fun] main
 deduced type: i64
[Value] i64 239
 deduced type: i64
[Value] %arrayidx111.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] ptr %3 [arg of fun] __assert_fail
 deduced type: [29 x i8]*
[Value] %add.1 = fadd double %add, %1 [in fun] polybench_flush_cache
 deduced type: double
[Value] %13 = load double, ptr %arrayidx7.i11.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %ret.i = alloca ptr, align 8 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %arrayidx.i.i.7 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.6 [in fun] polybench_timer_start
 deduced type: double*
[Value] %arrayidx.i.3 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.2 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %indvars.iv.next.i13.2 = add nuw nsw i64 %indvars.iv.i10, 3 [in fun] main
 deduced type: i64
[Value] %cmp4.i = icmp eq i32 %rem.i, 0 [in fun] main
 deduced type: i1
[Value] %add.i12.3 = fadd double %add.i12.2, %14 [in fun] main
 deduced type: double
[Value] %vec.ind = phi <2 x i64> [ <i64 0, i64 1>, %vector.ph ], [ %vec.ind.next, %vector.body ] [in fun] main
 deduced type: <2 x i64>
[Value] %arrayidx7.i11.4 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next.i13.3, i64 %indvars.iv241.i [in fun] main
 deduced type: double*
[Value] br label %for.body3.i17 [in fun] main
 deduced type: void
[Value] %add.i12.4 = fadd double %add.i12.3, %15 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i13.4 = add nuw nsw i64 %indvars.iv.i10, 5 [in fun] main
 deduced type: i64
[Value] %indvars.iv.i.i = phi i64 [ 0, %entry ], [ %indvars.iv.next.i.i.7, %for.body.i.i ] [in fun] polybench_timer_start
 deduced type: i64
[Value] %arrayidx107.i.1 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next262.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %exitcond.not.i14.4 = icmp eq i64 %indvars.iv.next.i13.4, 260 [in fun] main
 deduced type: i1
[Value] br i1 %exitcond.not.i14.4, label %for.end.i, label %for.body3.i9, !llvm.loop !14 [in fun] main
 deduced type: void
[Value] tail call void @free(ptr noundef nonnull %call.i.i) #14 [in fun] polybench_timer_start
 deduced type: void
[Value] %36 = load double, ptr %arrayidx111.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %exitcond244.not.i = icmp eq i64 %indvars.iv.next242.i, 240 [in fun] main
 deduced type: i1
[Value] %indvars.iv.next246.i.1 = or disjoint i64 %indvars.iv245.i, 2 [in fun] main
 deduced type: i64
[Value] %15 = load double, ptr %arrayidx7.i11.4, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv249.i = phi i64 [ %indvars.iv.next250.i, %for.end40.i ], [ 0, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %2 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx19.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %16 = load double, ptr %arrayidx28.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] double %1 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %arrayidx107.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %arrayidx.5 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.4 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %18 = load double, ptr %arrayidx26.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i = fsub double %18, %16 [in fun] main
 deduced type: double
[Value] ptr %ptr [arg of fun] polybench_free_data
 deduced type: ptr
[Value] %19 = call double @llvm.fmuladd.f64(double %sub.i, double %sub.i, double %17) [in fun] main
 deduced type: double
[Value] i64 11
 deduced type: i64
[Value] br i1 %exitcond244.not.i, label %for.body17.i, label %for.body.i, !llvm.loop !15 [in fun] main
 deduced type: void
[Value] double %2 [arg of fun] llvm.fmuladd.f64
 deduced type: double
[Value] %20 = load double, ptr %arrayidx26.i.1, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %sub.i.1 = fsub double %20, %16 [in fun] main
 deduced type: double
[Value] %21 = call double @llvm.fmuladd.f64(double %sub.i.1, double %sub.i.1, double %19) [in fun] main
 deduced type: double
[Value] %mul = mul i64 %conv, %n [in fun] polybench_alloc_data
 deduced type: i64
[Value] <2 x i64> poison
 deduced type: <2 x i64>
[Value] %arrayidx26.i.2 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.1, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] %arrayidx.6 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.5 [in fun] polybench_flush_cache
 deduced type: double*
[Value] %40 = mul nuw nsw i64 %indvars.iv25.i, 240 [in fun] main
 deduced type: i64
[Value] %corr = alloca [240 x [240 x double]], align 16 [in fun] main
 deduced type: [240 x [240 x double]]*
[Value] %sub.i.2 = fsub double %22, %16 [in fun] main
 deduced type: double
[Value] br label %rtclock.exit [in fun] polybench_timer_stop
 deduced type: void
[Value] %arrayidx.i.4 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.3 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] ptr %3 [arg of fun] fwrite
 deduced type: ptr
[Value] %0 = load ptr, ptr %ret.i, align 8, !tbaa !5 [in fun] polybench_alloc_data
 deduced type: ptr
[Value] %23 = call double @llvm.fmuladd.f64(double %sub.i.2, double %sub.i.2, double %21) [in fun] main
 deduced type: double
[Value] %add.i.6 = fadd double %add.i.5, %6 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %add.i.4 = fadd double %add.i.3, %4 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %div78.i = fdiv double %30, %mul.i [in fun] main
 deduced type: double
[Value] %0 = load double, ptr %arrayidx, align 8, !tbaa !5 [in fun] polybench_flush_cache
 deduced type: double
[Value] ptr %1 [arg of fun] fputc
 deduced type: ptr
[Value] %arrayidx26.i.3 = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv.next246.i.2, i64 %indvars.iv249.i [in fun] main
 deduced type: double*
[Value] br i1 %exitcond29.not.i, label %print_array.exit, label %for.cond1.preheader.i16, !llvm.loop !26 [in fun] main
 deduced type: void
[Value] %exitcond252.not.i = icmp eq i64 %indvars.iv.next250.i, 240 [in fun] main
 deduced type: i1
[Value] %tobool.i = icmp eq ptr %0, null [in fun] polybench_alloc_data
 deduced type: i1
[Value] %indvars.iv.next254.i = add nuw nsw i64 %indvars.iv253.i, 1 [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] __assert_fail
 deduced type: [12 x i8]*
[Value] br i1 %exitcond248.not.i.3, label %for.end40.i, label %for.body22.i, !llvm.loop !16 [in fun] main
 deduced type: void
[Value] double %0 [arg of fun] sqrt
 deduced type: double
[Value] %indvars.iv267.i = phi i64 [ %indvars.iv265.i, %for.body96.preheader.i ], [ %indvars.iv.next268.i, %for.end119.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.i.3 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.2 [in fun] polybench_timer_start
 deduced type: double*
[Value] %26 = load double, ptr %eps.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv.next.i.i.7 = add nuw nsw i64 %indvars.iv.i.i, 8 [in fun] polybench_timer_start
 deduced type: i64
[Value] %rem.i = urem i32 %42, 20 [in fun] main
 deduced type: i32
[Value] %data = alloca [260 x [240 x double]], align 16 [in fun] main
 deduced type: [260 x [240 x double]]*
[Value] %broadcast.splatinsert = insertelement <2 x i64> poison, i64 %indvars.iv17.i, i64 0 [in fun] main
 deduced type: <2 x i64>
[Value] %22 = load double, ptr %arrayidx26.i.2, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %arrayidx73.i = getelementptr inbounds double, ptr %stddev, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next26.i = add nuw nsw i64 %indvars.iv25.i, 1 [in fun] main
 deduced type: i64
[Value] @.str.4.13 = private unnamed_addr constant [35 x i8] c"Error return from gettimeofday: %d\00", align 1
 deduced type: [35 x i8]*
[Value] %cond.i = select i1 %cmp50.i, double %call.i, double 1.000000e+00 [in fun] main
 deduced type: double
[Value] i64 4194560
 deduced type: i64
[Value] %25 = call double @llvm.fmuladd.f64(double %sub.i.3, double %sub.i.3, double %23) [in fun] main
 deduced type: double
[Value] %indvars.iv.next250.i = add nuw nsw i64 %indvars.iv249.i, 1 [in fun] main
 deduced type: i64
[Value] %conv.i = sitofp i64 %0 to double [in fun] polybench_timer_stop
 deduced type: double
[Value] %indvars.iv257.i = phi i64 [ %indvars.iv.next258.i, %for.inc82.i ], [ 0, %for.end40.i ] [in fun] main
 deduced type: i64
[Value] %call71.i = call double @sqrt(double noundef %9) #12 [in fun] main
 deduced type: double
[Value] br label %for.body63.i [in fun] main
 deduced type: void
[Value] ret void [in fun] polybench_flush_cache
 deduced type: void
[Value] %24 = load double, ptr %arrayidx26.i.3, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv253.i = phi i64 [ 0, %for.cond61.preheader.i ], [ %indvars.iv.next254.i, %for.body63.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx65.i = getelementptr inbounds double, ptr %mean, i64 %indvars.iv253.i [in fun] main
 deduced type: double*
[Value] %call.i = call i32 @gettimeofday(ptr noundef nonnull %Tp.i, ptr noundef null) #12 [in fun] polybench_timer_stop
 deduced type: i32
[Value] %sub70.i = fsub double %28, %27 [in fun] main
 deduced type: double
[Value] %mul.i = fmul double %call71.i, %29 [in fun] main
 deduced type: double
[Value] br i1 %exitcond.not.i.i.7, label %for.end.i.i, label %for.body.i.i, !llvm.loop !9 [in fun] polybench_timer_start
 deduced type: void
[Value] %4 = load double, ptr %arrayidx.i.4, align 8, !tbaa !5 [in fun] polybench_prepare_instruments
 deduced type: double
[Value] %arrayidx.4 = getelementptr inbounds double, ptr %call, i64 %indvars.iv.next.3 [in fun] polybench_flush_cache
 deduced type: double*
[Value] i32 fputc(i32, ptr)
 deduced type: i32
[Value] %30 = load double, ptr %arrayidx69.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %tobool2.i = icmp ne i32 %call.i, 0 [in fun] polybench_alloc_data
 deduced type: i1
[Value] %exitcond20.not.i = icmp eq i64 %indvars.iv.next18.i, 260 [in fun] main
 deduced type: i1
[Value] %17 = phi double [ 0.000000e+00, %for.body17.i ], [ %25, %for.body22.i ] [in fun] main
 deduced type: double
[Value] %exitcond256.not.i = icmp eq i64 %indvars.iv.next254.i, 240 [in fun] main
 deduced type: i1
[Value] %34 = call double @llvm.fmuladd.f64(double %32, double %33, double %31) [in fun] main
 deduced type: double
[Value] %indvars.iv.next246.i.2 = or disjoint i64 %indvars.iv245.i, 3 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond260.not.i, label %for.body96.preheader.i, label %for.cond61.preheader.i, !llvm.loop !19 [in fun] main
 deduced type: void
[Value] %cmp2.i.i = fcmp ugt double %add.i.i.7, 1.000000e+01 [in fun] polybench_timer_start
 deduced type: i1
[Value] %indvars.iv271.i = phi i64 [ %indvars.iv.next272.i, %for.cond85.loopexit.i ], [ 0, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %indvars.iv265.i = phi i64 [ %indvars.iv.next266.i, %for.cond85.loopexit.i ], [ 1, %for.inc82.i ] [in fun] main
 deduced type: i64
[Value] %arrayidx.i.2 = getelementptr inbounds double, ptr %call.i, i64 %indvars.iv.next.i.1 [in fun] polybench_prepare_instruments
 deduced type: double*
[Value] %arrayidx100.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv271.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] br label %for.body103.i [in fun] main
 deduced type: void
[Value] %32 = load double, ptr %arrayidx107.i, align 8, !tbaa !5 [in fun] main
 deduced type: double
[Value] %indvars.iv241.i = phi i64 [ 0, %init_array.exit ], [ %indvars.iv.next242.i, %for.end.i ] [in fun] main
 deduced type: i64
[Value] i64 %1 [arg of fun] fwrite
 deduced type: i64
[Value] %arrayidx111.i = getelementptr inbounds [240 x double], ptr %data, i64 %indvars.iv261.i, i64 %indvars.iv267.i [in fun] main
 deduced type: double*
[Value] %conv.i = sitofp i64 %8 to double [in fun] polybench_timer_start
 deduced type: double
[Value] %exitcond.not.i21 = icmp eq i64 %indvars.iv.next.i20, 240 [in fun] main
 deduced type: i1
[Value] %arrayidx139.i = getelementptr inbounds [240 x double], ptr %corr, i64 239, i64 239 [in fun] main
 deduced type: double*
[Value] %exitcond260.not.i = icmp eq i64 %indvars.iv.next258.i, 260 [in fun] main
 deduced type: i1
[Value] %37 = call double @llvm.fmuladd.f64(double %35, double %36, double %34) [in fun] main
 deduced type: double
[Value] %indvars.iv.next262.i.1 = add nuw nsw i64 %indvars.iv261.i, 2 [in fun] main
 deduced type: i64
[Value] i32 10
 deduced type: i32
[Value] %exitcond264.not.i.1 = icmp eq i64 %indvars.iv.next262.i.1, 260 [in fun] main
 deduced type: i1
[Value] %arrayidx127.i = getelementptr inbounds [240 x double], ptr %corr, i64 %indvars.iv267.i, i64 %indvars.iv271.i [in fun] main
 deduced type: double*
[Value] %indvars.iv.next268.i = add nuw nsw i64 %indvars.iv267.i, 1 [in fun] main
 deduced type: i64
[Value] %indvars.iv.next242.i = add nuw nsw i64 %indvars.iv241.i, 1 [in fun] main
 deduced type: i64
[Value] br i1 %exitcond270.not.i, label %for.cond85.loopexit.i, label %for.body96.i, !llvm.loop !22 [in fun] main
 deduced type: void
[Value] %38 = load ptr, ptr @stdout, align 8, !tbaa !23 [in fun] main
 deduced type: ptr
[Value] %indvars.iv.next.i = or disjoint i64 %indvars.iv.i, 1 [in fun] polybench_prepare_instruments
 deduced type: i64
[Value] %indvars.iv.next.4 = or disjoint i64 %indvars.iv, 5 [in fun] polybench_flush_cache
 deduced type: i64
[Value] %39 = call i64 @fwrite(ptr nonnull @.str.8, i64 13, i64 1, ptr %38) [in fun] main
 deduced type: i64
[Value] ptr %0 [arg of fun] fwrite
 deduced type: [14 x i8]*
[Value] %arrayidx.i.i.6 = getelementptr inbounds double, ptr %call.i.i, i64 %indvars.iv.next.i.i.5 [in fun] polybench_timer_start
 deduced type: double*
[Value] br label %for.cond1.preheader.i16 [in fun] main
 deduced type: void
[Value] %indvars.iv.i18 = phi i64 [ 0, %for.cond1.preheader.i16 ], [ %indvars.iv.next.i20, %if.end.i ] [in fun] main
 deduced type: i64
[End of TypeDeductionAnalysis]

